// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  } else {
    Module['thisProgram'] = 'unknown-program';
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          (((codePoint - 0x10000) / 0x400)|0) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;


function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;


function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))>>0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 23184;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__I_a() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,66,117,102,102,101,114,32,112,116,114,32,105,115,32,39,37,105,39,10,0,0,0,0,0,66,117,102,102,101,114,91,48,93,32,105,115,32,39,37,99,39,10,0,0,0,0,0,0,69,114,114,111,114,32,105,110,32,111,112,101,110,105,110,103,32,102,105,108,101,10,0,0,82,101,97,100,32,109,101,115,104,32,37,105,32,37,105,10,0,0,0,0,0,0,0,0,82,101,102,105,110,101,100,32,109,101,115,104,32,37,105,32,37,105,10,0,0,0,0,0,79,112,101,110,105,110,103,32,116,105,109,101,32,37,53,46,50,102,32,10,32,82,101,102,105,110,101,109,101,110,116,32,116,105,109,101,32,37,53,46,50,102,0,0,0,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,83,84,0,0,0,0,0,0,79,70,70,10,0,0,0,0,32,0,0,0,0,0,0,0,32,48,10,0,0,0,0,0,10,0,0,0,0,0,0,0,106,61,61,109,46,118,110,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,119,114,97,112,47,105,111,95,116,114,105,109,101,115,104,47,101,120,112,111,114,116,95,111,102,102,46,104,0,0,0,0,0,83,97,118,101,83,116,114,101,97,109,0,0,0,0,0,0,51,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,0,0,106,62,61,48,32,38,38,32,106,60,51,0,0,0,0,0,99,86,0,0,0,0,0,0,33,112,46,70,40,41,45,62,73,115,70,40,112,46,69,40,41,41,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,103,111,114,105,116,104,109,115,47,112,111,108,121,103,111,110,95,115,117,112,112,111,114,116,46,104,0,69,120,116,114,97,99,116,80,111,108,121,103,111,110,0,0,102,45,62,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,86,40,122,41,61,61,118,41,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,112,111,115,46,104,0,0,0,70,108,105,112,86,0,0,0,102,45,62,70,70,112,40,122,41,45,62,70,70,112,40,102,45,62,70,70,105,40,122,41,41,61,61,102,0,0,0,0,70,108,105,112,70,0,0,0,102,45,62,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,86,40,40,122,41,41,61,61,118,41,0,0,0,0,110,102,45,62,86,40,110,102,45,62,80,114,101,118,40,110,122,41,41,33,61,118,32,38,38,32,40,110,102,45,62,86,40,110,102,45,62,78,101,120,116,40,110,122,41,41,61,61,118,32,124,124,32,110,102,45,62,86,40,40,110,122,41,41,61,61,118,41,0,0,0,0,70,70,112,0,0,0,0,0,102,45,62,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,86,40,40,122,43,48,41,37,102,45,62,86,78,40,41,41,61,61,118,41,0,0,70,108,105,112,69,0,0,0,86,0,0,0,0,0,0,0,40,118,112,61,61,102,112,45,62,86,48,40,122,112,41,41,124,124,40,118,112,61,61,102,112,45,62,86,49,40,122,112,41,41,0,0,0,0,0,0,80,111,115,0,0,0,0,0,80,101,114,70,97,99,101,70,108,97,103,115,32,32,32,32,32,32,32,0,0,0,0,0,78,51,118,99,103,50,53,77,105,115,115,105,110,103,67,111,109,112,111,110,101,110,116,69,120,99,101,112,116,105,111,110,69,0,0,0,0,0,0,0,232,83,0,0,120,4,0,0,104,82,0,0,0,0,0,0,0,0,0,0,160,4,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,77,105,115,115,105,110,103,32,67,111,109,112,111,110,101,110,116,32,69,120,99,101,112,116,105,111,110,32,45,0,0,0,45,32,10,0,0,0,0,0,77,105,115,115,105,110,103,32,67,111,109,112,111,110,101,110,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,70,65,100,106,97,99,101,110,99,121,0,0,0,0,0,105,62,61,48,32,38,38,32,105,60,50,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,100,101,112,114,101,99,97,116,101,100,95,112,111,105,110,116,50,46,104,0,0,0,0,111,112,101,114,97,116,111,114,91,93,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,118,101,114,116,101,120,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,84,0,0,0,0,0,0,0,105,62,61,48,32,38,38,32,105,60,52,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,100,101,112,114,101,99,97,116,101,100,95,112,111,105,110,116,52,46,104,0,0,0,0,105,62,61,48,32,38,38,32,105,60,51,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,100,101,112,114,101,99,97,116,101,100,95,112,111,105,110,116,51,46,104,0,0,0,0,80,101,114,86,101,114,116,101,120,70,108,97,103,115,32,32,32,32,32,32,32,0,0,0,116,114,105,58,58,72,97,115,70,70,65,100,106,97,99,101,110,99,121,40,109,41,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,103,111,114,105,116,104,109,115,47,114,101,102,105,110,101,46,104,0,0,82,101,102,105,110,101,69,0,82,101,102,105,110,101,68,97,116,97,0,0,0,0,0,0,82,101,102,105,110,105,110,103,46,46,46,0,0,0,0,0,101,100,103,101,67,117,114,46,73,115,77,97,110,105,102,111,108,100,40,41,0,0,0,0,82,68,91,101,100,103,101,67,117,114,46,70,40,41,93,46,101,112,91,101,100,103,101,67,117,114,46,69,40,41,93,0,108,97,115,116,118,61,61,109,46,118,101,114,116,46,101,110,100,40,41,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,4,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,5,0,0,0,4,0,0,0,0,0,0,0,1,0,0,0,5,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,5,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,0,0,0,0,3,0,0,0,5,0,0,0,3,0,0,0,1,0,0,0,4,0,0,0,5,0,0,0,4,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,0,0,0,0,3,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,3,0,0,0,1,0,0,0,2,0,0,0,40,42,110,102,91,105,93,41,46,86,40,106,41,33,61,48,0,0,0,0,0,0,0,0,108,97,115,116,102,61,61,109,46,102,97,99,101,46,101,110,100,40,41,0,0,0,0,0,33,109,46,118,101,114,116,46,101,109,112,116,121,40,41,0,40,42,102,105,41,46,86,40,48,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,48,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,40,42,102,105,41,46,86,40,49,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,49,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,40,42,102,105,41,46,86,40,50,41,62,61,38,42,109,46,118,101,114,116,46,98,101,103,105,110,40,41,32,38,38,32,40,42,102,105,41,46,86,40,50,41,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,116,48,46,110,40,41,61,61,32,116,49,46,110,40,41,0,87,101,100,103,101,73,110,116,101,114,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,87,84,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,99,111,110,110,101,99,116,111,114,115,47,104,101,100,103,101,95,99,111,109,112,111,110,101,110,116,46,104,0,72,70,112,0,0,0,0,0,99,72,70,112,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,101,100,103,101,47,99,111,109,112,111,110,101,110,116,46,104,0,0,0,0,0,69,70,112,0,0,0,0,0,99,69,70,112,0,0,0,0,86,70,112,0,0,0,0,0,99,86,70,112,0,0,0,0,118,112,62,61,111,108,100,66,97,115,101,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,108,111,99,97,116,101,46,104,0,0,0,85,112,100,97,116,101,0,0,118,112,60,111,108,100,69,110,100,0,0,0,0,0,0,0,99,70,70,112,0,0,0,0,109,112,0,0,0,0,0,0,111,112,101,114,97,116,111,114,40,41,0,0,0,0,0,0,120,62,61,48,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,112,97,99,101,47,99,111,108,111,114,52,46,104,0,0,0,0,0,0,0,108,101,114,112,0,0,0,0,120,60,61,49,0,0,0,0,72,86,112,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,115,105,109,112,108,101,120,47,102,97,99,101,47,116,111,112,111,108,111,103,121,46,104,0,0,0,0,0,0,73,115,66,111,114,100,101,114,0,0,0,0,0,0,0,0,102,46,99,70,70,112,40,106,41,32,33,61,32,48,0,0,73,115,77,97,110,105,102,111,108,100,0,0,0,0,0,0,102,45,62,99,86,40,102,45,62,80,114,101,118,40,122,41,41,33,61,118,32,38,38,32,40,102,45,62,99,86,40,102,45,62,78,101,120,116,40,122,41,41,61,61,118,32,124,124,32,102,45,62,99,86,40,122,41,61,61,118,41,0,0,0,86,70,108,105,112,0,0,0,105,32,61,61,109,46,102,97,99,101,95,97,116,116,114,46,101,110,100,40,41,0,0,0,65,100,100,80,101,114,70,97,99,101,65,116,116,114,105,98,117,116,101,0,0,0,0,0,0,0,0,0,200,16,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,0,0,0,0,78,51,118,99,103,49,52,83,105,109,112,108,101,84,101,109,112,68,97,116,97,73,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,54,77,121,70,97,99,101,78,83,49,95,57,97,108,108,111,99,97,116,111,114,73,83,51,95,69,69,69,69,78,83,95,51,116,114,105,49,53,82,101,102,105,110,101,100,70,97,99,101,68,97,116,97,73,80,56,77,121,86,101,114,116,101,120,69,69,69,69,0,0,0,0,0,0,0,78,51,118,99,103,49,56,83,105,109,112,108,101,84,101,109,112,68,97,116,97,66,97,115,101,69,0,0,0,0,0,0,192,83,0,0,160,16,0,0,232,83,0,0,48,16,0,0,192,16,0,0,0,0,0,0,0,0,0,0,192,16,0,0,11,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,40,42,113,41,46,122,62,61,48,0,0,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,99,111,109,112,108,101,120,47,97,108,103,111,114,105,116,104,109,115,47,117,112,100,97,116,101,47,116,111,112,111,108,111,103,121,46,104,0,70,97,99,101,70,97,99,101,0,0,0,0,0,0,0,0,40,42,113,95,110,101,120,116,41,46,122,62,61,48,0,0,40,42,113,95,110,101,120,116,41,46,122,60,32,40,42,113,95,110,101,120,116,41,46,102,45,62,86,78,40,41,0,0,40,42,113,41,46,122,60,32,40,42,113,41,46,102,45,62,86,78,40,41,0,0,0,0,112,102,33,61,48,0,0,0,83,101,116,0,0,0,0,0,110,122,62,61,48,0,0,0,110,122,60,112,102,45,62,86,78,40,41,0,0,0,0,0,118,91,48,93,32,33,61,32,118,91,49,93,0,0,0,0,60,0,0,0,0,0,0,0,168,18,0,0,14,0,0,0,15,0,0,0,196,255,255,255,196,255,255,255,168,18,0,0,16,0,0,0,17,0,0,0,12,18,0,0,68,18,0,0,88,18,0,0,32,18,0,0,60,0,0,0,0,0,0,0,208,40,0,0,18,0,0,0,19,0,0,0,196,255,255,255,196,255,255,255,208,40,0,0,20,0,0,0,21,0,0,0,78,83,116,51,95,95,49,49,57,98,97,115,105,99,95,105,115,116,114,105,110,103,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,232,83,0,0,96,18,0,0,208,40,0,0,0,0,0,0,0,0,0,0,64,19,0,0,22,0,0,0,23,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,105,110,103,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,0,0,0,0,0,232,83,0,0,248,18,0,0,88,40,0,0,0,0,0,0,79,70,70,0,0,0,0,0,86,101,114,116,101,120,32,76,111,97,100,105,110,103,0,0,46,0,0,0,0,0,0,0,70,97,99,101,32,76,111,97,100,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,109,46,118,101,114,116,46,115,105,122,101,40,41,62,48,0,65,100,100,81,117,97,100,70,97,99,101,0,0,0,0,0,118,48,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,48,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,49,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,49,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,50,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,50,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,118,51,62,61,38,109,46,118,101,114,116,46,102,114,111,110,116,40,41,32,38,38,32,118,51,60,61,38,109,46,118,101,114,116,46,98,97,99,107,40,41,0,0,0,0,0,0,0,65,100,100,70,97,99,101,0,40,118,48,33,61,118,49,41,32,38,38,32,40,118,49,33,61,118,50,41,32,38,38,32,40,118,48,33,61,118,50,41,0,0,0,0,0,0,0,0,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,0,0,128,63,205,204,76,61,205,204,76,61,205,204,76,61,205,204,76,61,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,205,204,76,62,205,204,76,62,205,204,76,62,205,204,76,62,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,61,205,204,204,61,205,204,204,61,205,204,204,61,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,51,51,51,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,102,102,102,63,102,102,102,63,102,102,102,63,102,102,102,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,63,0,0,64,63,0,0,64,63,0,0,64,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,205,204,204,62,205,204,204,62,205,204,204,62,205,204,204,62,205,204,76,63,205,204,76,63,205,204,76,63,205,204,76,63,114,111,119,32,62,61,32,48,32,38,38,32,114,111,119,32,60,32,52,0,0,0,0,0,47,85,115,101,114,115,47,109,97,117,114,105,122,105,111,47,68,101,115,107,116,111,112,47,85,110,105,118,101,114,115,105,116,97,47,70,51,68,47,118,99,103,45,99,111,100,101,47,118,99,103,108,105,98,47,118,99,103,47,109,97,116,104,47,109,97,116,114,105,120,52,52,46,104,0,0,0,0,0,0,69,108,101,109,101,110,116,65,116,0,0,0,0,0,0,0,99,111,108,32,62,61,32,48,32,38,38,32,99,111,108,32,60,32,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([35,0,0,36,0,0,0,37,0,0,0,38,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,42,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,48,0,0,0,49,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,232,83,0,0,224,34,0,0,152,40,0,0,0,0,0,0,0,0,0,0,104,35,0,0,36,0,0,0,50,0,0,0,51,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,52,0,0,0,43,0,0,0,44,0,0,0,53,0,0,0,54,0,0,0,55,0,0,0,56,0,0,0,57,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,232,83,0,0,80,35,0,0,152,40,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,0,36,0,0,58,0,0,0,59,0,0,0,60,0,0,0,25,0,0,0,61,0,0,0,62,0,0,0,63,0,0,0,29,0,0,0,30,0,0,0,64,0,0,0,32,0,0,0,65,0,0,0,66,0,0,0,67,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,232,83,0,0,224,35,0,0,88,40,0,0,0,0,0,0,0,0,0,0,104,36,0,0,58,0,0,0,68,0,0,0,69,0,0,0,25,0,0,0,61,0,0,0,62,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,70,0,0,0,71,0,0,0,72,0,0,0,34,0,0,0,73,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,232,83,0,0,80,36,0,0,88,40,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,192,83,0,0,120,36,0,0,58,32,0,0,0,0,0,0,0,0,0,0,216,36,0,0,74,0,0,0,75,0,0,0,76,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,232,83,0,0,192,36,0,0,104,82,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,192,83,0,0,232,36,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,232,83,0,0,16,37,0,0,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,37,100,0,0,0,0,0,0,37,102,0,0,0,0,0,0,0,0,0,0,208,39,0,0,77,0,0,0,78,0,0,0,0,0,0,0,88,40,0,0,79,0,0,0,80,0,0,0,24,0,0,0,25,0,0,0,61,0,0,0,62,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,64,0,0,0,32,0,0,0,65,0,0,0,34,0,0,0,73,0,0,0,0,0,0,0,152,40,0,0,81,0,0,0,82,0,0,0,83,0,0,0,39,0,0,0,40,0,0,0,41,0,0,0,52,0,0,0,43,0,0,0,44,0,0,0,45,0,0,0,46,0,0,0,47,0,0,0,56,0,0,0,57,0,0,0,8,0,0,0,0,0,0,0,208,40,0,0,18,0,0,0,19,0,0,0,248,255,255,255,248,255,255,255,208,40,0,0,20,0,0,0,21,0,0,0,8,0,0,0,0,0,0,0,24,41,0,0,84,0,0,0,85,0,0,0,248,255,255,255,248,255,255,255,24,41,0,0,86,0,0,0,87,0,0,0,4,0,0,0,0,0,0,0,96,41,0,0,88,0,0,0,89,0,0,0,252,255,255,255,252,255,255,255,96,41,0,0,90,0,0,0,91,0,0,0,4,0,0,0,0,0,0,0,168,41,0,0,92,0,0,0,93,0,0,0,252,255,255,255,252,255,255,255,168,41,0,0,94,0,0,0,95,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,39,0,0,96,0,0,0,97,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,152,39,0,0,98,0,0,0,99,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,232,83,0,0,80,39,0,0,216,36,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,192,83,0,0,128,39,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,232,83,0,0,160,39,0,0,152,39,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,232,83,0,0,224,39,0,0,152,39,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,192,83,0,0,32,40,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,192,83,0,0,96,40,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,84,0,0,160,40,0,0,0,0,0,0,1,0,0,0,208,39,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,84,0,0,232,40,0,0,0,0,0,0,1,0,0,0,16,40,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,72,84,0,0,48,41,0,0,0,0,0,0,1,0,0,0,208,39,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,72,84,0,0,120,41,0,0,0,0,0,0,1,0,0,0,16,40,0,0,3,244,255,255,0,0,0,0,8,42,0,0,100,0,0,0,101,0,0,0,102,0,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,232,83,0,0,232,41,0,0,40,37,0,0,0,0,0,0,0,0,0,0,80,56,0,0,107,0,0,0,108,0,0,0,109,0,0,0,110,0,0,0,111,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,56,0,0,113,0,0,0,114,0,0,0,109,0,0,0,115,0,0,0,116,0,0,0,117,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,61,0,0,118,0,0,0,119,0,0,0,109,0,0,0,120,0,0,0,121,0,0,0,122,0,0,0,123,0,0,0,124,0,0,0,125,0,0,0,126,0,0,0,127,0,0,0,128,0,0,0,129,0,0,0,130,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,192,61,0,0,131,0,0,0,132,0,0,0,109,0,0,0,133,0,0,0,134,0,0,0,135,0,0,0,136,0,0,0,137,0,0,0,138,0,0,0,139,0,0,0,140,0,0,0,141,0,0,0,142,0,0,0,143,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,62,0,0,144,0,0,0,145,0,0,0,109,0,0,0,146,0,0,0,147,0,0,0,148,0,0,0,149,0,0,0,150,0,0,0,151,0,0,0,152,0,0,0,153,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,24,63,0,0,154,0,0,0,155,0,0,0,109,0,0,0,156,0,0,0,157,0,0,0,158,0,0,0,159,0,0,0,160,0,0,0,161,0,0,0,162,0,0,0,163,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,64,58,0,0,164,0,0,0,165,0,0,0,109,0,0,0,166,0,0,0,167,0,0,0,168,0,0,0,169,0,0,0,170,0,0,0,171,0,0,0,172,0,0,0,248,255,255,255,64,58,0,0,173,0,0,0,174,0,0,0,175,0,0,0,176,0,0,0,177,0,0,0,178,0,0,0,179,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,224,58,0,0,180,0,0,0,181,0,0,0,109,0,0,0,182,0,0,0,183,0,0,0,184,0,0,0,185,0,0,0,186,0,0,0,187,0,0,0,188,0,0,0,248,255,255,255,224,58,0,0,189,0,0,0,190,0,0,0,191,0,0,0,192,0,0,0,193,0,0,0,194,0,0,0,195,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,112,59,0,0,196,0,0,0,197,0,0,0,109,0,0,0,198,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,59,0,0,199,0,0,0,200,0,0,0,109,0,0,0,201,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,56,0,0,202,0,0,0,203,0,0,0,109,0,0,0,204,0,0,0,205,0,0,0,206,0,0,0,207,0,0,0,208,0,0,0,209,0,0,0,210,0,0,0,211,0,0,0,212,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,57,0,0,213,0,0,0,214,0,0,0,109,0,0,0,215,0,0,0,216,0,0,0,217,0,0,0,218,0,0,0,219,0,0,0,220,0,0,0,221,0,0,0,222,0,0,0,223,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,57,0,0,224,0,0,0,225,0,0,0,109,0,0,0,226,0,0,0,227,0,0,0,228,0,0,0,229,0,0,0,230,0,0,0,231,0,0,0,232,0,0,0,233,0,0,0,234,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,57,0,0,235,0,0,0,236,0,0,0,109,0,0,0,237,0,0,0,238,0,0,0,239,0,0,0,240,0,0,0,241,0,0,0,242,0,0,0,243,0,0,0,244,0,0,0,245,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,63,0,0,246,0,0,0,247,0,0,0,109,0,0,0,248,0,0,0,249,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,56,64,0,0,250,0,0,0,251,0,0,0,109,0,0,0,252,0,0,0,253,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,200,64,0,0,254,0,0,0,255,0,0,0,109,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,88,65,0,0,2,1,0,0,3,1,0,0,109,0,0,0,4,1,0,0,5,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,60,0,0,6,1,0,0,7,1,0,0,109,0,0,0,8,1,0,0,9,1,0,0,10,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,104,60,0,0,11,1,0,0,12,1,0,0,109,0,0,0,13,1,0,0,14,1,0,0,15,1,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,40,56,0,0,16,1,0,0,17,1,0,0,109,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,53,0,0,18,1,0,0,19,1,0,0,109,0,0,0,20,1,0,0,21,1,0,0,22,1,0,0,23,1,0,0,24,1,0,0,25,1,0,0,26,1,0,0,27,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,53,0,0,28,1,0,0,29,1,0,0,109,0,0,0,30,1,0,0,31,1,0,0,32,1,0,0,33,1,0,0,34,1,0,0,35,1,0,0,36,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,55,0,0,37,1,0,0,38,1,0,0,109,0,0,0,39,1,0,0,40,1,0,0,41,1,0,0,42,1,0,0,43,1,0,0,0,0,0,0,0,56,0,0,44,1,0,0,45,1,0,0,109,0,0,0,46,1,0,0,47,1,0,0,48,1,0,0,49,1,0,0,50,1,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,56,52,0,0,51,1,0,0,52,1,0,0,109,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,232,83,0,0,32,52,0,0,152,36,0,0,0,0,0,0,0,0,0,0,200,52,0,0,51,1,0,0,53,1,0,0,109,0,0,0,54,1,0,0,55,1,0,0,56,1,0,0,57,1,0,0,58,1,0,0,59,1,0,0,60,1,0,0,61,1,0,0,62,1,0,0,63,1,0,0,64,1,0,0,65,1,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,192,83,0,0,168,52,0,0,72,84,0,0,144,52,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,52,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,72,84,0,0,232,52,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,52,0,0,2,0,0,0,0,0,0,0,152,53,0,0,51,1,0,0,66,1,0,0,109,0,0,0,67,1,0,0,68,1,0,0,69,1,0,0,70,1,0,0,71,1,0,0,72,1,0,0,73,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,192,83,0,0,120,53,0,0,72,84,0,0,80,53,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,144,53,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,72,84,0,0,184,53,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,144,53,0,0,2,0,0,0,0,0,0,0,88,54,0,0,51,1,0,0,74,1,0,0,109,0,0,0,75,1,0,0,76,1,0,0,77,1,0,0,78,1,0,0,79,1,0,0,80,1,0,0,81,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,84,0,0,48,54,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,144,53,0,0,2,0,0,0,0,0,0,0,208,54,0,0,51,1,0,0,82,1,0,0,109,0,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,72,84,0,0,168,54,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,144,53,0,0,2,0,0,0,0,0,0,0,72,55,0,0,51,1,0,0,90,1,0,0,109,0,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,232,83,0,0,32,55,0,0,208,54,0,0,0,0,0,0,0,0,0,0,176,55,0,0,51,1,0,0,91,1,0,0,109,0,0,0,83,1,0,0,84,1,0,0,85,1,0,0,86,1,0,0,87,1,0,0,88,1,0,0,89,1,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,232,83,0,0,136,55,0,0,208,54,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,232,83,0,0,192,55,0,0,56,52,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,232,83,0,0,232,55,0,0,56,52,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,232,83,0,0,16,56,0,0,56,52,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,232,83,0,0,56,56,0,0,56,52,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,232,83,0,0,96,56,0,0,56,52,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,192,83,0,0,168,56,0,0,72,84,0,0,136,56,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,56,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,72,84,0,0,232,56,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,56,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,72,84,0,0,40,57,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,56,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,72,84,0,0,104,57,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,56,0,0,2,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,192,83,0,0,240,57,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,192,83,0,0,16,58,0,0,72,84,0,0,168,57,0,0,0,0,0,0,3,0,0,0,56,52,0,0,2,0,0,0,8,58,0,0,2,0,0,0,56,58,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,192,83,0,0,176,58,0,0,72,84,0,0,104,58,0,0,0,0,0,0,3,0,0,0,56,52,0,0,2,0,0,0,8,58,0,0,2,0,0,0,216,58,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,192,83,0,0,80,59,0,0,72,84,0,0,8,59,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,104,59,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,72,84,0,0,144,59,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,104,59,0,0,0,8,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,192,83,0,0,16,60,0,0,72,84,0,0,248,59,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,40,60,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,72,84,0,0,80,60,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,40,60,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,192,83,0,0,232,60,0,0,72,84,0,0,208,60,0,0,0,0,0,0,1,0,0,0,8,61,0,0,0,0,0,0,72,84,0,0,136,60,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,16,61,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,72,84,0,0,144,61,0,0,0,0,0,0,1,0,0,0,8,61,0,0,0,0,0,0,72,84,0,0,72,61,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,168,61,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,192,83,0,0,64,62,0,0,72,84,0,0,40,62,0,0,0,0,0,0,1,0,0,0,96,62,0,0,0,0,0,0,72,84,0,0,224,61,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,104,62,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,72,84,0,0,232,62,0,0,0,0,0,0,1,0,0,0,96,62,0,0,0,0,0,0,72,84,0,0,160,62,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,0,63,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,192,83,0,0,128,63,0,0,72,84,0,0,56,63,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,160,63,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,192,83,0,0,16,64,0,0,72,84,0,0,200,63,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,48,64,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,192,83,0,0,160,64,0,0,72,84,0,0,88,64,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,192,64,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,192,83,0,0,48,65,0,0,72,84,0,0,232,64,0,0,0,0,0,0,2,0,0,0,56,52,0,0,2,0,0,0,80,65,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+8861);
/* memory initializer */ allocate([98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110,0,0,0,0,0,70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,92,1,0,0,0,0,0,0,88,79,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,240,80,0,0,93,1,0,0,94,1,0,0,95,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,232,83,0,0,224,80,0,0,120,81,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,192,83,0,0,104,81,0,0,0,0,0,0,192,81,0,0,96,1,0,0,97,1,0,0,98,1,0,0,0,0,0,0,0,0,0,0,104,82,0,0,99,1,0,0,100,1,0,0,76,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,232,83,0,0,176,81,0,0,120,81,0,0,0,0,0,0,0,0,0,0,0,82,0,0,96,1,0,0,101,1,0,0,98,1,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,232,83,0,0,232,81,0,0,192,81,0,0,0,0,0,0,0,0,0,0,64,82,0,0,96,1,0,0,102,1,0,0,98,1,0,0,0,0,0,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,0,0,0,0,0,0,0,232,83,0,0,40,82,0,0,192,81,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,232,83,0,0,80,82,0,0,120,81,0,0,0,0,0,0,0,0,0,0,200,82,0,0,103,1,0,0,104,1,0,0,105,1,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,192,83,0,0,160,82,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,232,83,0,0,184,82,0,0,120,81,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,232,83,0,0,216,82,0,0,176,82,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,83,0,0,16,83,0,0,0,83,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,232,83,0,0,112,83,0,0,0,83,0,0,0,0,0,0,232,83,0,0,72,83,0,0,152,83,0,0,0,0,0,0,0,0,0,0,56,83,0,0,106,1,0,0,107,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,111,1,0,0,112,1,0,0,113,1,0,0,0,0,0,0,48,84,0,0,106,1,0,0,114,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,115,1,0,0,116,1,0,0,117,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,232,83,0,0,8,84,0,0,56,83,0,0,0,0,0,0,0,0,0,0,144,84,0,0,106,1,0,0,118,1,0,0,108,1,0,0,109,1,0,0,110,1,0,0,119,1,0,0,120,1,0,0,121,1,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,232,83,0,0,104,84,0,0,56,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,122,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+19101);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};function _setlocale(category, locale) {
      if (LOCALE.check(locale)) {
        if (!_setlocale.ret) _setlocale.ret = allocate(intArrayFromString('C'), 'i8', ALLOC_NORMAL);
        return _setlocale.ret;
      }
      return 0;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  var _emscripten_resume=true;

  var _emscripten_landingpad=true;

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }

  
  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          }
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }
  
  
   
  Module["_strlen"] = _strlen;
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _printf(format, varargs) {
      // int printf(const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var stdout = HEAP32[((_stdout)>>2)];
      return _fprintf(stdout, format, varargs);
    }


  var _sqrtf=Math_sqrt;

  function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  var _emscripten_postinvoke=true;


  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  function ___gxx_personality_v0() {
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function _pthread_mutex_unlock() {}

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function _pthread_mutex_lock() {}

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function ___cxa_guard_abort() {}

  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

   
  Module["_memmove"] = _memmove;

  var _emscripten_preinvoke=true;

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr;
    }

  function ___cxa_guard_release() {}

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function ___errno_location() {
      return ___errno_state;
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  var _BItoD=true;

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }


  function _pthread_cond_wait() {
      return 0;
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  var _fabs=Math_abs;

  function _clock() {
      if (_clock.start === undefined) _clock.start = Date.now();
      return ((Date.now() - _clock.start) * (1000000 / 1000))|0;
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
      else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
      Browser.mainLoop.scheduler();
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

   
  Module["_strcpy"] = _strcpy;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _acos=Math_acos;

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);
 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_di(x) { Module["printErr"]("Invalid function pointer called with signature 'di'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_vidddd(x) { Module["printErr"]("Invalid function pointer called with signature 'vidddd'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiid(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_diii(x) { Module["printErr"]("Invalid function pointer called with signature 'diii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_iiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info."); abort(x) }

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
  try {
    return Module["dynCall_iiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_di(index,a1) {
  try {
    return Module["dynCall_di"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vidddd(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_vidddd"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
  try {
    Module["dynCall_viiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_diii(index,a1,a2,a3) {
  try {
    return Module["dynCall_diii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "min": Math_min, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vid": nullFunc_vid, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_iiiiiiiiiiii": nullFunc_iiiiiiiiiiii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "nullFunc_viiiiid": nullFunc_viiiiid, "nullFunc_viiiiiiii": nullFunc_viiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_di": nullFunc_di, "nullFunc_vidddd": nullFunc_vidddd, "nullFunc_viiiiiii": nullFunc_viiiiiii, "nullFunc_viiiiiid": nullFunc_viiiiiid, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiiiiiii": nullFunc_viiiiiiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_diii": nullFunc_diii, "nullFunc_i": nullFunc_i, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_iiiiiiiii": nullFunc_iiiiiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_vid": invoke_vid, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_iiiiiiiiiiii": invoke_iiiiiiiiiiii, "invoke_iiii": invoke_iiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "invoke_viiiiid": invoke_viiiiid, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_di": invoke_di, "invoke_vidddd": invoke_vidddd, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiiiiiii": invoke_viiiiiiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_diii": invoke_diii, "invoke_i": invoke_i, "invoke_iiiii": invoke_iiiii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_pthread_getspecific": _pthread_getspecific, "_pthread_cond_wait": _pthread_cond_wait, "_uselocale": _uselocale, "___gxx_personality_v0": ___gxx_personality_v0, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "___cxa_pure_virtual": ___cxa_pure_virtual, "___cxa_guard_acquire": ___cxa_guard_acquire, "_setlocale": _setlocale, "_vfprintf": _vfprintf, "_ungetc": _ungetc, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_acos": _acos, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_fprintf": _fprintf, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "_send": _send, "_catgets": _catgets, "_newlocale": _newlocale, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_strftime": _strftime, "_clock": _clock, "_sqrtf": _sqrtf, "__arraySum": __arraySum, "_calloc": _calloc, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fileno": _fileno, "___cxa_call_unexpected": ___cxa_call_unexpected, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_printf": _printf, "__reallyNegative": __reallyNegative, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "_fgetc": _fgetc, "___cxa_atexit": ___cxa_atexit, "_fputc": _fputc, "_mkport": _mkport, "_freelocale": _freelocale, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___cxa_rethrow": ___cxa_rethrow, "__exit": __exit, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "___cxa_throw": ___cxa_throw, "_pthread_mutex_lock": _pthread_mutex_lock, "_strerror": _strerror, "_pthread_key_create": _pthread_key_create, "__formatString": __formatString, "_atexit": _atexit, "_catopen": _catopen, "_exit": _exit, "_time": _time, "_read": _read, "___cxa_guard_abort": ___cxa_guard_abort, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "ctlz_i8": ctlz_i8, "NaN": NaN, "Infinity": Infinity, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ctlz_i8=env.ctlz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = +env.NaN, inf = +env.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var abort=env.abort;
  var assert=env.assert;
  var Math_min=env.min;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiiiiiiiiiii=env.nullFunc_iiiiiiiiiiii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var nullFunc_viiiiid=env.nullFunc_viiiiid;
  var nullFunc_viiiiiiii=env.nullFunc_viiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_di=env.nullFunc_di;
  var nullFunc_vidddd=env.nullFunc_vidddd;
  var nullFunc_viiiiiii=env.nullFunc_viiiiiii;
  var nullFunc_viiiiiid=env.nullFunc_viiiiiid;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiiiiiii=env.nullFunc_viiiiiiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_diii=env.nullFunc_diii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_iiiiiiiii=env.nullFunc_iiiiiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vid=env.invoke_vid;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_iiiiiiiiiiii=env.invoke_iiiiiiiiiiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_di=env.invoke_di;
  var invoke_vidddd=env.invoke_vidddd;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiiiiiii=env.invoke_viiiiiiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_diii=env.invoke_diii;
  var invoke_i=env.invoke_i;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _uselocale=env._uselocale;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _setlocale=env._setlocale;
  var _vfprintf=env._vfprintf;
  var _ungetc=env._ungetc;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _acos=env._acos;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _fprintf=env._fprintf;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var _send=env._send;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _strftime=env._strftime;
  var _clock=env._clock;
  var _sqrtf=env._sqrtf;
  var __arraySum=env.__arraySum;
  var _calloc=env._calloc;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fileno=env._fileno;
  var ___cxa_call_unexpected=env.___cxa_call_unexpected;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _printf=env._printf;
  var __reallyNegative=env.__reallyNegative;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var _fgetc=env._fgetc;
  var ___cxa_atexit=env.___cxa_atexit;
  var _fputc=env._fputc;
  var _mkport=env._mkport;
  var _freelocale=env._freelocale;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var __exit=env.__exit;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var ___cxa_throw=env.___cxa_throw;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var _strerror=env._strerror;
  var _pthread_key_create=env._pthread_key_create;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _catopen=env._catopen;
  var _exit=env._exit;
  var _time=env._time;
  var _read=env._read;
  var ___cxa_guard_abort=env.___cxa_guard_abort;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}
function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _allocator($_size) {
 $_size = $_size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $_size;
 $1 = $0;
 HEAP32[16>>2] = $1;
 $2 = HEAP32[16>>2]|0;
 $3 = (_malloc($2)|0);
 HEAP32[8>>2] = $3;
 $4 = HEAP32[8>>2]|0;
 STACKTOP = sp;return ($4|0);
}
function _refine($num) {
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $bufMeshOut = 0, $edgePred = 0, $loadmask = 0, $m = 0, $midFun = 0, $ret = 0, $t0 = 0, $t1 = 0, $t2 = 0, $t3 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer14 = sp + 8|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 40|0;
 $vararg_buffer4 = sp;
 $vararg_buffer1 = sp + 48|0;
 $vararg_buffer = sp + 24|0;
 $m = sp + 72|0;
 $loadmask = sp + 56|0;
 $edgePred = sp + 388|0;
 $midFun = sp + 392|0;
 $0 = $num;
 __ZN6MyMeshC2Ev($m);
 __THREW__ = 0;
 $4 = (invoke_i(379)|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 do {
  if (!($6)) {
   $t0 = $4;
   $7 = HEAP32[8>>2]|0;
   __THREW__ = 0;
   HEAP32[$vararg_buffer>>2] = $7;
   (invoke_iii(380,(24|0),($vararg_buffer|0))|0);
   $8 = __THREW__; __THREW__ = 0;
   $9 = $8&1;
   if (!($9)) {
    $10 = HEAP32[8>>2]|0;
    $11 = HEAP8[$10>>0]|0;
    $12 = $11 << 24 >> 24;
    __THREW__ = 0;
    HEAP32[$vararg_buffer1>>2] = $12;
    (invoke_iii(380,(48|0),($vararg_buffer1|0))|0);
    $13 = __THREW__; __THREW__ = 0;
    $14 = $13&1;
    if (!($14)) {
     $15 = HEAP32[8>>2]|0;
     $16 = HEAP32[8>>2]|0;
     __THREW__ = 0;
     $17 = (invoke_ii(381,($16|0))|0);
     $18 = __THREW__; __THREW__ = 0;
     $19 = $18&1;
     if (!($19)) {
      __THREW__ = 0;
      $20 = (invoke_iiiiii(382,($m|0),($15|0),($17|0),($loadmask|0),(0|0))|0);
      $21 = __THREW__; __THREW__ = 0;
      $22 = $21&1;
      if (!($22)) {
       $ret = $20;
       __THREW__ = 0;
       $23 = (invoke_i(379)|0);
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if (!($25)) {
        $t1 = $23;
        $26 = $ret;
        $27 = ($26|0)!=(0);
        if ($27) {
         __THREW__ = 0;
         (invoke_iii(380,(72|0),($vararg_buffer4|0))|0);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          break;
         }
         __THREW__ = 0;
         invoke_vi(383,-1);
         $30 = __THREW__; __THREW__ = 0;
         $31 = $30&1;
         if ($31) {
          break;
         }
         // unreachable;
        }
        __THREW__ = 0;
        $36 = (invoke_i(379)|0);
        $37 = __THREW__; __THREW__ = 0;
        $38 = $37&1;
        if (!($38)) {
         $t2 = $36;
         __THREW__ = 0;
         $39 = (invoke_ii(385,($m|0))|0);
         $40 = __THREW__; __THREW__ = 0;
         $41 = $40&1;
         if (!($41)) {
          __THREW__ = 0;
          $42 = (invoke_ii(386,($m|0))|0);
          $43 = __THREW__; __THREW__ = 0;
          $44 = $43&1;
          if (!($44)) {
           __THREW__ = 0;
           HEAP32[$vararg_buffer6>>2] = $39;
           $vararg_ptr9 = (($vararg_buffer6) + 4|0);
           HEAP32[$vararg_ptr9>>2] = $42;
           (invoke_iii(380,(96|0),($vararg_buffer6|0))|0);
           $45 = __THREW__; __THREW__ = 0;
           $46 = $45&1;
           if (!($46)) {
            __THREW__ = 0;
            invoke_vi(387,($m|0));
            $47 = __THREW__; __THREW__ = 0;
            $48 = $47&1;
            if (!($48)) {
             __THREW__ = 0;
             invoke_vid(388,($edgePred|0),0.0);
             $49 = __THREW__; __THREW__ = 0;
             $50 = $49&1;
             if (!($50)) {
              __THREW__ = 0;
              invoke_viii(389,($midFun|0),($m|0),(0|0));
              $51 = __THREW__; __THREW__ = 0;
              $52 = $51&1;
              if (!($52)) {
               __THREW__ = 0;
               (invoke_iiiiii(390,($m|0),($midFun|0),($edgePred|0),0,(0|0))|0);
               $53 = __THREW__; __THREW__ = 0;
               $54 = $53&1;
               if (!($54)) {
                __THREW__ = 0;
                $55 = (invoke_i(379)|0);
                $56 = __THREW__; __THREW__ = 0;
                $57 = $56&1;
                if (!($57)) {
                 $t3 = $55;
                 __THREW__ = 0;
                 $58 = (invoke_ii(385,($m|0))|0);
                 $59 = __THREW__; __THREW__ = 0;
                 $60 = $59&1;
                 if (!($60)) {
                  __THREW__ = 0;
                  $61 = (invoke_ii(386,($m|0))|0);
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if (!($63)) {
                   __THREW__ = 0;
                   HEAP32[$vararg_buffer10>>2] = $58;
                   $vararg_ptr13 = (($vararg_buffer10) + 4|0);
                   HEAP32[$vararg_ptr13>>2] = $61;
                   (invoke_iii(380,(120|0),($vararg_buffer10|0))|0);
                   $64 = __THREW__; __THREW__ = 0;
                   $65 = $64&1;
                   if (!($65)) {
                    $66 = $t1;
                    $67 = $t0;
                    $68 = (($66) - ($67))|0;
                    $69 = (+($68|0));
                    $70 = $69 / 1.0E+6;
                    $71 = $70;
                    $72 = $t3;
                    $73 = $t2;
                    $74 = (($72) - ($73))|0;
                    $75 = (+($74|0));
                    $76 = $75 / 1.0E+6;
                    $77 = $76;
                    __THREW__ = 0;
                    HEAPF64[tempDoublePtr>>3]=$71;HEAP32[$vararg_buffer14>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer14+4>>2]=HEAP32[tempDoublePtr+4>>2];
                    $vararg_ptr17 = (($vararg_buffer14) + 8|0);
                    HEAPF64[tempDoublePtr>>3]=$77;HEAP32[$vararg_ptr17>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr17+4>>2]=HEAP32[tempDoublePtr+4>>2];
                    (invoke_iii(380,(144|0),($vararg_buffer14|0))|0);
                    $78 = __THREW__; __THREW__ = 0;
                    $79 = $78&1;
                    if ($79) {
                     break;
                    }
                    __THREW__ = 0;
                    $80 = (invoke_iii(391,($m|0),0)|0);
                    $81 = __THREW__; __THREW__ = 0;
                    $82 = $81&1;
                    if ($82) {
                     break;
                    }
                    $bufMeshOut = $80;
                    $83 = $bufMeshOut;
                    $3 = 1;
                    __ZN6MyMeshD2Ev($m);
                    STACKTOP = sp;return ($83|0);
                   }
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $32 = ___cxa_find_matching_catch()|0;
 $33 = tempRet0;
 $1 = $32;
 $2 = $33;
 __THREW__ = 0;
 invoke_vi(384,($m|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 }
 $84 = $1;
 $85 = $2;
 ___resumeException($84|0);
 // unreachable;
 return (0)|0;
}
function __ZN6MyMeshC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE7OpenMemERS3_PKcjRiPFbiS7_E($mesh,$mem,$sz,$loadmask,$cb) {
 $mesh = $mesh|0;
 $mem = $mem|0;
 $sz = $sz|0;
 $loadmask = $loadmask|0;
 $cb = $cb|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__a$i$i$i$i$i = 0, $__i$i$i$i = 0, $__i$i$i$i$i$i = 0, $eh$lpad$body$i$index2Z2D = 0, $eh$lpad$body$i$indexZ2D = 0, $eh$lpad$body$index7Z2D = 0, $eh$lpad$body$indexZ2D = 0, $str = 0, $strm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $str = sp + 56|0;
 $strm = sp + 68|0;
 $33 = $mesh;
 $34 = $mem;
 $35 = $sz;
 $36 = $loadmask;
 $37 = $cb;
 $32 = $str;
 $41 = $32;
 $31 = $41;
 $42 = $31;
 $30 = $42;
 $43 = $30;
 $29 = $43;
 $44 = $29;
 $28 = $44;
 $27 = $42;
 $45 = $27;
 $26 = $45;
 $46 = $26;
 $25 = $46;
 $47 = $25;
 $__a$i$i$i = $47;
 $__i$i$i$i = 0;
 while(1) {
  $48 = $__i$i$i$i;
  $49 = ($48>>>0)<(3);
  if (!($49)) {
   break;
  }
  $50 = $__i$i$i$i;
  $51 = $__a$i$i$i;
  $52 = (($51) + ($50<<2)|0);
  HEAP32[$52>>2] = 0;
  $53 = $__i$i$i$i;
  $54 = (($53) + 1)|0;
  $__i$i$i$i = $54;
 }
 $55 = $34;
 $56 = $35;
 __THREW__ = 0;
 (invoke_iiii(392,($str|0),($55|0),($56|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 L5: do {
  if ($58) {
   label = 25;
  } else {
   $20 = $strm;
   $21 = $str;
   $22 = 8;
   $59 = $20;
   $60 = (($59) + 60|0);
   $19 = $60;
   $61 = $19;
   $18 = $61;
   $62 = $18;
   $63 = (10032 + 8|0);
   HEAP32[$62>>2] = $63;
   $64 = (9632 + 8|0);
   HEAP32[$61>>2] = $64;
   $65 = (4608 + 12|0);
   HEAP32[$59>>2] = $65;
   $66 = (($59) + 60|0);
   $67 = (4608 + 32|0);
   HEAP32[$66>>2] = $67;
   $68 = (($59) + 8|0);
   $15 = $59;
   $69 = (4648 + 4|0);
   $16 = $69;
   $17 = $68;
   $70 = $15;
   $71 = $16;
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$70>>2] = $72;
   $73 = (($71) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = HEAP32[$70>>2]|0;
   $76 = (($75) + -12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($70) + ($77)|0);
   HEAP32[$78>>2] = $74;
   $79 = (($70) + 4|0);
   HEAP32[$79>>2] = 0;
   $80 = HEAP32[$70>>2]|0;
   $81 = (($80) + -12|0);
   $82 = HEAP32[$81>>2]|0;
   $83 = (($70) + ($82)|0);
   $84 = $17;
   $13 = $83;
   $14 = $84;
   $85 = $13;
   $86 = $14;
   __THREW__ = 0;
   invoke_vii(393,($85|0),($86|0));
   $87 = __THREW__; __THREW__ = 0;
   $88 = $87&1;
   do {
    if ($88) {
     $134 = ___cxa_find_matching_catch()|0;
     $135 = tempRet0;
     $23 = $134;
     $24 = $135;
    } else {
     $89 = (($85) + 72|0);
     HEAP32[$89>>2] = 0;
     $90 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $91 = (($85) + 76|0);
     HEAP32[$91>>2] = $90;
     $92 = (4608 + 12|0);
     HEAP32[$59>>2] = $92;
     $93 = (($59) + 60|0);
     $94 = (4608 + 32|0);
     HEAP32[$93>>2] = $94;
     $95 = (($59) + 8|0);
     $96 = $21;
     $97 = $22;
     $98 = $97 | 8;
     $8 = $95;
     $9 = $96;
     $10 = $98;
     $99 = $8;
     __THREW__ = 0;
     invoke_vi(394,($99|0));
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     do {
      if ($101) {
       $136 = ___cxa_find_matching_catch()|0;
       $137 = tempRet0;
       $eh$lpad$body$i$index2Z2D = $137;$eh$lpad$body$i$indexZ2D = $136;
      } else {
       $102 = (4792 + 8|0);
       HEAP32[$99>>2] = $102;
       $103 = (($99) + 32|0);
       $7 = $103;
       $104 = $7;
       $6 = $104;
       $105 = $6;
       $5 = $105;
       $106 = $5;
       $4 = $106;
       $107 = $4;
       $3 = $107;
       $2 = $105;
       $108 = $2;
       $1 = $108;
       $109 = $1;
       $0 = $109;
       $110 = $0;
       $__a$i$i$i$i$i = $110;
       $__i$i$i$i$i$i = 0;
       while(1) {
        $111 = $__i$i$i$i$i$i;
        $112 = ($111>>>0)<(3);
        if (!($112)) {
         break;
        }
        $113 = $__i$i$i$i$i$i;
        $114 = $__a$i$i$i$i$i;
        $115 = (($114) + ($113<<2)|0);
        HEAP32[$115>>2] = 0;
        $116 = $__i$i$i$i$i$i;
        $117 = (($116) + 1)|0;
        $__i$i$i$i$i$i = $117;
       }
       $118 = (($99) + 44|0);
       HEAP32[$118>>2] = 0;
       $119 = (($99) + 48|0);
       $120 = $10;
       HEAP32[$119>>2] = $120;
       $121 = $9;
       __THREW__ = 0;
       invoke_vii(395,($99|0),($121|0));
       $122 = __THREW__; __THREW__ = 0;
       $123 = $122&1;
       if ($123) {
        $124 = ___cxa_find_matching_catch()|0;
        $125 = tempRet0;
        $11 = $124;
        $12 = $125;
        __THREW__ = 0;
        invoke_vi(396,($103|0));
        $126 = __THREW__; __THREW__ = 0;
        $127 = $126&1;
        if ($127) {
         $132 = ___cxa_find_matching_catch(0|0)|0;
         $133 = tempRet0;
         ___clang_call_terminate($132);
         // unreachable;
        }
        __THREW__ = 0;
        invoke_vi(58,($99|0));
        $128 = __THREW__; __THREW__ = 0;
        $129 = $128&1;
        if ($129) {
         $132 = ___cxa_find_matching_catch(0|0)|0;
         $133 = tempRet0;
         ___clang_call_terminate($132);
         // unreachable;
        } else {
         $130 = $11;
         $131 = $12;
         $eh$lpad$body$i$index2Z2D = $131;$eh$lpad$body$i$indexZ2D = $130;
         break;
        }
       }
       $147 = $33;
       $148 = $36;
       $149 = $37;
       __THREW__ = 0;
       $150 = (invoke_iiiii(398,($147|0),($strm|0),($148|0),($149|0))|0);
       $151 = __THREW__; __THREW__ = 0;
       $152 = $151&1;
       if (!($152)) {
        $40 = 1;
        __THREW__ = 0;
        invoke_vi(14,($strm|0));
        $153 = __THREW__; __THREW__ = 0;
        $154 = $153&1;
        if ($154) {
         label = 25;
         break L5;
        }
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
        STACKTOP = sp;return ($150|0);
       }
       $157 = ___cxa_find_matching_catch()|0;
       $158 = tempRet0;
       $38 = $157;
       $39 = $158;
       __THREW__ = 0;
       invoke_vi(14,($strm|0));
       $159 = __THREW__; __THREW__ = 0;
       $160 = $159&1;
       if ($160) {
        $165 = ___cxa_find_matching_catch(0|0)|0;
        $166 = tempRet0;
        ___clang_call_terminate($165);
        // unreachable;
       } else {
        break L5;
       }
      }
     } while(0);
     $23 = $eh$lpad$body$i$indexZ2D;
     $24 = $eh$lpad$body$i$index2Z2D;
     __THREW__ = 0;
     $138 = __THREW__; __THREW__ = 0;
     $139 = $138&1;
     if ($139) {
      $145 = ___cxa_find_matching_catch(0|0)|0;
      $146 = tempRet0;
      ___clang_call_terminate($145);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $140 = (($59) + 60|0);
   __THREW__ = 0;
   invoke_vi(397,($140|0));
   $141 = __THREW__; __THREW__ = 0;
   $142 = $141&1;
   if ($142) {
    $145 = ___cxa_find_matching_catch(0|0)|0;
    $146 = tempRet0;
    ___clang_call_terminate($145);
    // unreachable;
   } else {
    $143 = $23;
    $144 = $24;
    $eh$lpad$body$index7Z2D = $144;$eh$lpad$body$indexZ2D = $143;
    label = 26;
    break;
   }
  }
 } while(0);
 if ((label|0) == 25) {
  $155 = ___cxa_find_matching_catch()|0;
  $156 = tempRet0;
  $eh$lpad$body$index7Z2D = $156;$eh$lpad$body$indexZ2D = $155;
  label = 26;
 }
 if ((label|0) == 26) {
  $38 = $eh$lpad$body$indexZ2D;
  $39 = $eh$lpad$body$index7Z2D;
 }
 __THREW__ = 0;
 invoke_vi(396,($str|0));
 $161 = __THREW__; __THREW__ = 0;
 $162 = $161&1;
 if ($162) {
  $165 = ___cxa_find_matching_catch(0|0)|0;
  $166 = tempRet0;
  ___clang_call_terminate($165);
  // unreachable;
 }
 $163 = $38;
 $164 = $39;
 ___resumeException($163|0);
 // unreachable;
 return (0)|0;
}
function __ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2FNEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 44|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2VNEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $e = 0, $ne = 0, $pe = 0, $ps = 0, $q = 0;
 var $q_next = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $59 = sp + 8|0;
 $62 = sp + 520|0;
 $64 = sp;
 $65 = sp + 16|0;
 $88 = sp + 332|0;
 $92 = sp + 348|0;
 $96 = sp + 364|0;
 $101 = sp + 384|0;
 $104 = sp + 396|0;
 $107 = sp + 408|0;
 $108 = sp + 412|0;
 $109 = sp + 416|0;
 $e = sp + 428|0;
 $114 = sp + 20|0;
 $115 = sp + 28|0;
 $pe = sp + 464|0;
 $ps = sp + 456|0;
 $116 = sp + 460|0;
 $117 = sp + 56|0;
 $118 = sp + 468|0;
 $q = sp + 212|0;
 $q_next = sp + 476|0;
 $119 = sp + 508|0;
 $120 = sp + 512|0;
 $111 = $m;
 $121 = $111;
 __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($121);
 $122 = $111;
 $123 = (($122) + 44|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)==(0);
 if ($125) {
  STACKTOP = sp;return;
 }
 $110 = $e;
 $126 = $110;
 $106 = $126;
 $127 = $106;
 $105 = $127;
 $86 = $88;
 $87 = -1;
 $128 = $86;
 HEAP32[$128>>2] = 0;
 $129 = HEAP32[$88>>2]|0;
 HEAP32[$107>>2] = $129;
 $89 = $107;
 HEAP32[$127>>2] = 0;
 $130 = (($127) + 4|0);
 $90 = $92;
 $91 = -1;
 $131 = $90;
 HEAP32[$131>>2] = 0;
 $132 = HEAP32[$92>>2]|0;
 HEAP32[$108>>2] = $132;
 $93 = $108;
 HEAP32[$130>>2] = 0;
 $133 = (($127) + 8|0);
 $94 = $96;
 $95 = -1;
 $134 = $94;
 HEAP32[$134>>2] = 0;
 $135 = HEAP32[$96>>2]|0;
 HEAP32[$109>>2] = $135;
 $97 = $109;
 $103 = $133;
 HEAP32[$104>>2] = 0;
 $136 = $103;
 $102 = $104;
 $137 = $102;
 $138 = HEAP32[$137>>2]|0;
 $100 = $136;
 HEAP32[$101>>2] = $138;
 $139 = $100;
 $99 = $139;
 $98 = $101;
 $140 = $98;
 $141 = HEAP32[$140>>2]|0;
 HEAP32[$139>>2] = $141;
 $142 = $111;
 __THREW__ = 0;
 invoke_viii(399,($142|0),($e|0),1);
 $143 = __THREW__; __THREW__ = 0;
 $144 = $143&1;
 L5: do {
  if (!($144)) {
   $85 = $e;
   $145 = $85;
   $146 = HEAP32[$145>>2]|0;
   $83 = $145;
   $84 = $146;
   $147 = $84;
   $81 = $114;
   $82 = $147;
   $148 = $81;
   $149 = $82;
   HEAP32[$148>>2] = $149;
   $80 = $e;
   $150 = $80;
   $151 = (($150) + 4|0);
   $152 = HEAP32[$151>>2]|0;
   $78 = $150;
   $79 = $152;
   $153 = $79;
   $76 = $115;
   $77 = $153;
   $154 = $76;
   $155 = $77;
   HEAP32[$154>>2] = $155;
   ;HEAP8[$65+0>>0]=HEAP8[$114+0>>0]|0;HEAP8[$65+1>>0]=HEAP8[$114+1>>0]|0;HEAP8[$65+2>>0]=HEAP8[$114+2>>0]|0;HEAP8[$65+3>>0]=HEAP8[$114+3>>0]|0;
   ;HEAP8[$64+0>>0]=HEAP8[$115+0>>0]|0;HEAP8[$64+1>>0]=HEAP8[$115+1>>0]|0;HEAP8[$64+2>>0]=HEAP8[$115+2>>0]|0;HEAP8[$64+3>>0]=HEAP8[$115+3>>0]|0;
   $63 = $65;
   $156 = $63;
   $157 = HEAP32[$156>>2]|0;
   $56 = $64;
   $158 = $56;
   $159 = HEAP32[$158>>2]|0;
   $60 = $157;
   $61 = $159;
   $160 = $60;
   $161 = $61;
   ;HEAP8[$59+0>>0]=HEAP8[$62+0>>0]|0;
   $57 = $160;
   $58 = $161;
   $162 = $57;
   $163 = $58;
   __THREW__ = 0;
   invoke_viii(400,($162|0),($163|0),($59|0));
   $164 = __THREW__; __THREW__ = 0;
   $165 = $164&1;
   if (!($165)) {
    $ne = 0;
    $55 = $pe;
    $51 = $ps;
    $47 = $e;
    $166 = $47;
    $167 = HEAP32[$166>>2]|0;
    $45 = $166;
    $46 = $167;
    $168 = $46;
    $43 = $116;
    $44 = $168;
    $169 = $43;
    $170 = $44;
    HEAP32[$169>>2] = $170;
    ;HEAP32[$ps+0>>2]=HEAP32[$116+0>>2]|0;
    $38 = $e;
    $171 = $38;
    $172 = HEAP32[$171>>2]|0;
    $36 = $171;
    $37 = $172;
    $173 = $37;
    $34 = $117;
    $35 = $173;
    $174 = $34;
    $175 = $35;
    HEAP32[$174>>2] = $175;
    ;HEAP32[$pe+0>>2]=HEAP32[$117+0>>2]|0;
    L9: while(1) {
     $30 = $e;
     $176 = $30;
     $177 = (($176) + 4|0);
     $178 = HEAP32[$177>>2]|0;
     $28 = $176;
     $29 = $178;
     $179 = $29;
     $26 = $118;
     $27 = $179;
     $180 = $26;
     $181 = $27;
     HEAP32[$180>>2] = $181;
     $21 = $pe;
     $22 = $118;
     $182 = $21;
     $20 = $182;
     $183 = $20;
     $184 = HEAP32[$183>>2]|0;
     $185 = $22;
     $19 = $185;
     $186 = $19;
     $187 = HEAP32[$186>>2]|0;
     $188 = ($184|0)==($187|0);
     if ($188) {
      label = 10;
     } else {
      $14 = $pe;
      $189 = $14;
      $190 = HEAP32[$189>>2]|0;
      $0 = $ps;
      $191 = $0;
      $192 = HEAP32[$191>>2]|0;
      __THREW__ = 0;
      $193 = (invoke_iii(401,($190|0),($192|0))|0);
      $194 = __THREW__; __THREW__ = 0;
      $195 = $194&1;
      if ($195) {
       break L5;
      }
      if (!($193)) {
       label = 10;
      }
     }
     if ((label|0) == 10) {
      label = 0;
      $1 = $q;
      $2 = $q_next;
      ;HEAP32[$q+0>>2]=HEAP32[$ps+0>>2]|0;
      while(1) {
       $7 = $pe;
       $8 = 1;
       $196 = $7;
       $197 = $8;
       $198 = (0 - ($197))|0;
       $5 = $196;
       $6 = $198;
       $199 = $5;
       ;HEAP32[$119+0>>2]=HEAP32[$199+0>>2]|0;
       $200 = $6;
       $3 = $119;
       $4 = $200;
       $201 = $3;
       $202 = $4;
       $203 = HEAP32[$201>>2]|0;
       $204 = (($203) + ($202<<4)|0);
       HEAP32[$201>>2] = $204;
       $11 = $q;
       $12 = $119;
       $205 = $11;
       $10 = $205;
       $206 = $10;
       $207 = HEAP32[$206>>2]|0;
       $208 = $12;
       $9 = $208;
       $209 = $9;
       $210 = HEAP32[$209>>2]|0;
       $211 = ($207>>>0)<($210>>>0);
       if (!($211)) {
        break;
       }
       $13 = $q;
       $212 = $13;
       $213 = HEAP32[$212>>2]|0;
       $214 = (($213) + 12|0);
       $215 = HEAP32[$214>>2]|0;
       $216 = ($215|0)>=(0);
       if (!($216)) {
        label = 13;
        break L9;
       }
       ;HEAP32[$q_next+0>>2]=HEAP32[$q+0>>2]|0;
       $15 = $q_next;
       $223 = $15;
       $224 = HEAP32[$223>>2]|0;
       $225 = (($224) + 16|0);
       HEAP32[$223>>2] = $225;
       $16 = $q_next;
       $226 = $16;
       $227 = HEAP32[$226>>2]|0;
       $228 = (($227) + 12|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)>=(0);
       if (!($230)) {
        label = 17;
        break L9;
       }
       $17 = $q_next;
       $233 = $17;
       $234 = HEAP32[$233>>2]|0;
       $235 = (($234) + 12|0);
       $236 = HEAP32[$235>>2]|0;
       $18 = $q_next;
       $237 = $18;
       $238 = HEAP32[$237>>2]|0;
       $239 = (($238) + 8|0);
       $240 = HEAP32[$239>>2]|0;
       __THREW__ = 0;
       $241 = (invoke_ii(404,($240|0))|0);
       $242 = __THREW__; __THREW__ = 0;
       $243 = $242&1;
       if ($243) {
        break L5;
       }
       $244 = ($236|0)<($241|0);
       if (!($244)) {
        label = 21;
        break L9;
       }
       $23 = $q_next;
       $247 = $23;
       $248 = HEAP32[$247>>2]|0;
       $249 = (($248) + 8|0);
       $250 = HEAP32[$249>>2]|0;
       $24 = $q;
       $251 = $24;
       $252 = HEAP32[$251>>2]|0;
       $253 = (($252) + 8|0);
       $254 = HEAP32[$253>>2]|0;
       $25 = $q;
       $255 = $25;
       $256 = HEAP32[$255>>2]|0;
       $257 = (($256) + 12|0);
       $258 = HEAP32[$257>>2]|0;
       __THREW__ = 0;
       $259 = (invoke_iii(405,($254|0),($258|0))|0);
       $260 = __THREW__; __THREW__ = 0;
       $261 = $260&1;
       if ($261) {
        break L5;
       }
       HEAP32[$259>>2] = $250;
       $31 = $q_next;
       $262 = $31;
       $263 = HEAP32[$262>>2]|0;
       $264 = (($263) + 12|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = $265&255;
       $32 = $q;
       $267 = $32;
       $268 = HEAP32[$267>>2]|0;
       $269 = (($268) + 8|0);
       $270 = HEAP32[$269>>2]|0;
       $33 = $q;
       $271 = $33;
       $272 = HEAP32[$271>>2]|0;
       $273 = (($272) + 12|0);
       $274 = HEAP32[$273>>2]|0;
       __THREW__ = 0;
       $275 = (invoke_iii(406,($270|0),($274|0))|0);
       $276 = __THREW__; __THREW__ = 0;
       $277 = $276&1;
       if ($277) {
        break L5;
       }
       HEAP8[$275>>0] = $266;
       $39 = $q;
       $278 = $39;
       $279 = HEAP32[$278>>2]|0;
       $280 = (($279) + 16|0);
       HEAP32[$278>>2] = $280;
      }
      $40 = $q;
      $281 = $40;
      $282 = HEAP32[$281>>2]|0;
      $283 = (($282) + 12|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = ($284|0)>=(0);
      if (!($285)) {
       label = 28;
       break;
      }
      $41 = $q;
      $288 = $41;
      $289 = HEAP32[$288>>2]|0;
      $290 = (($289) + 12|0);
      $291 = HEAP32[$290>>2]|0;
      $42 = $q;
      $292 = $42;
      $293 = HEAP32[$292>>2]|0;
      $294 = (($293) + 8|0);
      $295 = HEAP32[$294>>2]|0;
      __THREW__ = 0;
      $296 = (invoke_ii(404,($295|0))|0);
      $297 = __THREW__; __THREW__ = 0;
      $298 = $297&1;
      if ($298) {
       break L5;
      }
      $299 = ($291|0)<($296|0);
      if (!($299)) {
       label = 32;
       break;
      }
      $48 = $ps;
      $302 = $48;
      $303 = HEAP32[$302>>2]|0;
      $304 = (($303) + 8|0);
      $305 = HEAP32[$304>>2]|0;
      $49 = $q;
      $306 = $49;
      $307 = HEAP32[$306>>2]|0;
      $308 = (($307) + 8|0);
      $309 = HEAP32[$308>>2]|0;
      $50 = $q;
      $310 = $50;
      $311 = HEAP32[$310>>2]|0;
      $312 = (($311) + 12|0);
      $313 = HEAP32[$312>>2]|0;
      __THREW__ = 0;
      $314 = (invoke_iii(405,($309|0),($313|0))|0);
      $315 = __THREW__; __THREW__ = 0;
      $316 = $315&1;
      if ($316) {
       break L5;
      }
      HEAP32[$314>>2] = $305;
      $52 = $ps;
      $317 = $52;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($318) + 12|0);
      $320 = HEAP32[$319>>2]|0;
      $321 = $320&255;
      $53 = $q;
      $322 = $53;
      $323 = HEAP32[$322>>2]|0;
      $324 = (($323) + 8|0);
      $325 = HEAP32[$324>>2]|0;
      $54 = $q;
      $326 = $54;
      $327 = HEAP32[$326>>2]|0;
      $328 = (($327) + 12|0);
      $329 = HEAP32[$328>>2]|0;
      __THREW__ = 0;
      $330 = (invoke_iii(406,($325|0),($329|0))|0);
      $331 = __THREW__; __THREW__ = 0;
      $332 = $331&1;
      if ($332) {
       break L5;
      }
      HEAP8[$330>>0] = $321;
      ;HEAP32[$ps+0>>2]=HEAP32[$pe+0>>2]|0;
      $333 = $ne;
      $334 = (($333) + 1)|0;
      $ne = $334;
     }
     $70 = $e;
     $335 = $70;
     $336 = (($335) + 4|0);
     $337 = HEAP32[$336>>2]|0;
     $68 = $335;
     $69 = $337;
     $338 = $69;
     $66 = $120;
     $67 = $338;
     $339 = $66;
     $340 = $67;
     HEAP32[$339>>2] = $340;
     $73 = $pe;
     $74 = $120;
     $341 = $73;
     $72 = $341;
     $342 = $72;
     $343 = HEAP32[$342>>2]|0;
     $344 = $74;
     $71 = $344;
     $345 = $71;
     $346 = HEAP32[$345>>2]|0;
     $347 = ($343|0)==($346|0);
     if ($347) {
      label = 38;
      break;
     }
     $75 = $pe;
     $348 = $75;
     $349 = HEAP32[$348>>2]|0;
     $350 = (($349) + 16|0);
     HEAP32[$348>>2] = $350;
    }
    if ((label|0) == 13) {
     __THREW__ = 0;
     invoke_viiii(402,(4352|0),(4368|0),230,(4464|0));
     $217 = __THREW__; __THREW__ = 0;
     $218 = $217&1;
     if ($218) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 17) {
     __THREW__ = 0;
     invoke_viiii(402,(4480|0),(4368|0),234,(4464|0));
     $231 = __THREW__; __THREW__ = 0;
     $232 = $231&1;
     if ($232) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 21) {
     __THREW__ = 0;
     invoke_viiii(402,(4496|0),(4368|0),235,(4464|0));
     $245 = __THREW__; __THREW__ = 0;
     $246 = $245&1;
     if ($246) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 28) {
     __THREW__ = 0;
     invoke_viiii(402,(4352|0),(4368|0),239,(4464|0));
     $286 = __THREW__; __THREW__ = 0;
     $287 = $286&1;
     if ($287) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 32) {
     __THREW__ = 0;
     invoke_viiii(402,(4528|0),(4368|0),240,(4464|0));
     $300 = __THREW__; __THREW__ = 0;
     $301 = $300&1;
     if ($301) {
      break;
     }
     // unreachable;
    }
    else if ((label|0) == 38) {
     __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($e);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $219 = ___cxa_find_matching_catch()|0;
 $220 = tempRet0;
 $112 = $219;
 $113 = $220;
 __THREW__ = 0;
 invoke_vi(403,($e|0));
 $221 = __THREW__; __THREW__ = 0;
 $222 = $221&1;
 if ($222) {
  $353 = ___cxa_find_matching_catch(0|0)|0;
  $354 = tempRet0;
  ___clang_call_terminate($353);
  // unreachable;
 }
 $351 = $112;
 $352 = $113;
 ___resumeException($351|0);
 // unreachable;
}
function __ZN3vcg3tri7EdgeLenI6MyMeshfEC2Ef($this,$threshold) {
 $this = $this|0;
 $threshold = +$threshold;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $threshold;
 $2 = $0;
 $3 = $1;
 __ZN3vcg3tri7EdgeLenI6MyMeshfE6setThrEf($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC2EPS2_PS4_($this,$_mp,$_intFunc) {
 $this = $this|0;
 $_mp = $_mp|0;
 $_intFunc = $_intFunc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $_mp;
 $2 = $_intFunc;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7RefineEI6MyMeshNS0_8MidPointIS2_NS0_16BaseInterpolatorIS2_EEEENS0_7EdgeLenIS2_fEEEEbRT_RT0_RT1_bPFbiPKcE($m,$mid,$ep,$RefineSelected,$cb) {
 $m = $m|0;
 $mid = $mid|0;
 $ep = $ep|0;
 $RefineSelected = $RefineSelected|0;
 $cb = $cb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$expand_i1_val = 0, $$expand_i1_val3 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0.0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $NewFaceNum = 0, $NewVertNum = 0, $PercStep = 0, $RD = 0, $edgeCur = 0, $edgeCur1 = 0, $fca = 0, $fcn = 0, $fi = 0, $i = 0, $ind = 0, $j = 0;
 var $lastf = 0, $lastv = 0, $nf = 0, $oldendf = 0, $orgflag = 0, $step = 0, $vv = 0, $wtt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 408|0;
 $$byval_copy = sp + 388|0;
 $139 = sp;
 $142 = sp + 964|0;
 $RD = sp + 664|0;
 $156 = sp + 672|0;
 $159 = sp + 700|0;
 $160 = sp + 704|0;
 $fi = sp + 708|0;
 $161 = sp + 712|0;
 $162 = sp + 716|0;
 $edgeCur = sp + 720|0;
 $163 = sp + 732|0;
 $lastv = sp + 744|0;
 $164 = sp + 748|0;
 $165 = sp + 752|0;
 $edgeCur1 = sp + 756|0;
 $166 = sp + 768|0;
 $167 = sp + 780|0;
 $lastf = sp + 784|0;
 $oldendf = sp + 24|0;
 $vv = sp + 48|0;
 $nf = sp + 888|0;
 $wtt = sp + 808|0;
 $168 = sp + 904|0;
 $169 = sp + 360|0;
 $170 = sp + 8|0;
 $171 = sp + 16|0;
 $172 = sp + 400|0;
 $173 = sp + 640|0;
 $174 = sp + 624|0;
 $175 = sp + 592|0;
 $151 = $m;
 $152 = $mid;
 $153 = $ep;
 $176 = $RefineSelected&1;
 $154 = $176;
 $155 = $cb;
 $177 = $151;
 $178 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($177)|0);
 if (!($178)) {
  ___assert_fail((1880|0),(1904|0),335,(1992|0));
  // unreachable;
 }
 $179 = $151;
 __ZN3vcg3tri11UpdateFlagsI6MyMeshE16FaceBorderFromFFERS2_($179);
 $NewVertNum = 0;
 $NewFaceNum = 0;
 $180 = $151;
 $148 = $156;
 $149 = 2000;
 $181 = $148;
 $182 = $149;
 $146 = $181;
 $147 = $182;
 $183 = $146;
 $145 = $183;
 $184 = $145;
 $144 = $184;
 $185 = $144;
 $143 = $185;
 $186 = $147;
 $187 = $147;
 $188 = (__ZNSt3__111char_traitsIcE6lengthEPKc($187)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($183,$186,$188);
 __THREW__ = 0;
 invoke_viii(407,($RD|0),($180|0),($156|0));
 $189 = __THREW__; __THREW__ = 0;
 $190 = $189&1;
 if ($190) {
  $247 = ___cxa_find_matching_catch()|0;
  $248 = tempRet0;
  $157 = $247;
  $158 = $248;
  __THREW__ = 0;
  invoke_vi(396,($156|0));
  $249 = __THREW__; __THREW__ = 0;
  $250 = $249&1;
  if ($250) {
   $861 = ___cxa_find_matching_catch(0|0)|0;
   $862 = tempRet0;
   ___clang_call_terminate($861);
   // unreachable;
  }
  $859 = $157;
  $860 = $158;
  ___resumeException($859|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($156);
 $step = 0;
 HEAP32[$159>>2] = 1;
 $191 = $151;
 $192 = (($191) + 44|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = (($193|0) / 33)&-1;
 HEAP32[$160>>2] = $194;
 $140 = $159;
 $141 = $160;
 $195 = $140;
 $196 = $141;
 ;HEAP8[$139+0>>0]=HEAP8[$142+0>>0]|0;
 $137 = $195;
 $138 = $196;
 $197 = $137;
 $198 = $138;
 $134 = $139;
 $135 = $197;
 $136 = $198;
 $199 = $135;
 $200 = HEAP32[$199>>2]|0;
 $201 = $136;
 $202 = HEAP32[$201>>2]|0;
 $203 = ($200|0)<($202|0);
 if ($203) {
  $204 = $138;
  $207 = $204;
 } else {
  $205 = $137;
  $207 = $205;
 }
 $206 = HEAP32[$207>>2]|0;
 $PercStep = $206;
 $133 = $fi;
 $208 = $151;
 $209 = (($208) + 32|0);
 $132 = $209;
 $210 = $132;
 $211 = HEAP32[$210>>2]|0;
 $130 = $210;
 $131 = $211;
 $212 = $131;
 $128 = $161;
 $129 = $212;
 $213 = $128;
 $214 = $129;
 HEAP32[$213>>2] = $214;
 ;HEAP32[$fi+0>>2]=HEAP32[$161+0>>2]|0;
 $j = 0;
 L15: while(1) {
  $215 = $151;
  $216 = (($215) + 32|0);
  $127 = $216;
  $217 = $127;
  $218 = (($217) + 4|0);
  $219 = HEAP32[$218>>2]|0;
  $125 = $217;
  $126 = $219;
  $220 = $126;
  $123 = $162;
  $124 = $220;
  $221 = $123;
  $222 = $124;
  HEAP32[$221>>2] = $222;
  $121 = $fi;
  $122 = $162;
  $223 = $121;
  $224 = $122;
  $119 = $223;
  $120 = $224;
  $225 = $119;
  $118 = $225;
  $226 = $118;
  $227 = HEAP32[$226>>2]|0;
  $228 = $120;
  $117 = $228;
  $229 = $117;
  $230 = HEAP32[$229>>2]|0;
  $231 = ($227|0)==($230|0);
  $232 = $231 ^ 1;
  if (!($232)) {
   break;
  }
  $114 = $fi;
  $233 = $114;
  $234 = HEAP32[$233>>2]|0;
  $235 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($234)|0);
  do {
   if ($235) {
    label = 34;
   } else {
    $236 = $155;
    $237 = ($236|0)!=(0|0);
    if ($237) {
     $238 = $step;
     $239 = (($238) + 1)|0;
     $step = $239;
     $240 = $PercStep;
     $241 = (($239|0) % ($240|0))&-1;
     $242 = ($241|0)==(0);
     if ($242) {
      $243 = $155;
      $244 = $step;
      $245 = $PercStep;
      $246 = (($244|0) / ($245|0))&-1;
      (FUNCTION_TABLE_iii[$243 & 1023]($246,2016)|0);
     }
    }
    $251 = $154;
    $252 = $251&1;
    if ($252) {
     $106 = $fi;
     $253 = $106;
     $254 = HEAP32[$253>>2]|0;
     $255 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($254)|0);
     if (!($255)) {
      break;
     }
    }
    $j = 0;
    while(1) {
     $256 = $j;
     $257 = ($256|0)<(3);
     if (!($257)) {
      break;
     }
     $258 = $j;
     $259 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
     $260 = (($259) + ($258)|0);
     $261 = HEAP8[$260>>0]|0;
     $262 = $261&1;
     do {
      if ($262) {
      } else {
       $103 = $fi;
       $263 = $103;
       $264 = HEAP32[$263>>2]|0;
       $265 = $j;
       __ZN3vcg4face3PosI6MyFaceEC2EPS2_i($edgeCur,$264,$265);
       $266 = $154;
       $267 = $266&1;
       if ($267) {
        $268 = (__ZNK3vcg4face3PosI6MyFaceE5FFlipEv($edgeCur)|0);
        $269 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($268)|0);
        if (!($269)) {
         break;
        }
       }
       $270 = $153;
       ;HEAP32[$163+0>>2]=HEAP32[$edgeCur+0>>2]|0;HEAP32[$163+4>>2]=HEAP32[$edgeCur+4>>2]|0;HEAP32[$163+8>>2]=HEAP32[$edgeCur+8>>2]|0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$163+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$163+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$163+8>>2]|0;
       $271 = (__ZNK3vcg3tri7EdgeLenI6MyMeshfEclENS_4face3PosI6MyFaceEE($270,$$byval_copy)|0);
       if (!($271)) {
        break;
       }
       $272 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur)|0);
       $273 = HEAP32[$272>>2]|0;
       $274 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
       $275 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$274)|0);
       $276 = (($275) + ($273)|0);
       HEAP8[$276>>0] = 1;
       $277 = $NewFaceNum;
       $278 = (($277) + 1)|0;
       $NewFaceNum = $278;
       $279 = $NewVertNum;
       $280 = (($279) + 1)|0;
       $NewVertNum = $280;
       $281 = (__ZN3vcg4face3PosI6MyFaceE10IsManifoldEv($edgeCur)|0);
       if (!($281)) {
        label = 28;
        break L15;
       }
       $282 = (__ZN3vcg4face3PosI6MyFaceE8IsBorderEv($edgeCur)|0);
       if (!($282)) {
        __ZN3vcg4face3PosI6MyFaceE5FlipFEv($edgeCur);
        $283 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
        $284 = HEAP32[$283>>2]|0;
        __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($284);
        $285 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur)|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur)|0);
        $288 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$287)|0);
        $289 = (($288) + ($286)|0);
        HEAP8[$289>>0] = 1;
        $290 = $NewFaceNum;
        $291 = (($290) + 1)|0;
        $NewFaceNum = $291;
       }
      }
     } while(0);
     $292 = $j;
     $293 = (($292) + 1)|0;
     $j = $293;
    }
    label = 34;
   }
  } while(0);
  if ((label|0) == 34) {
   label = 0;
  }
  $95 = $fi;
  $294 = $95;
  $295 = HEAP32[$294>>2]|0;
  $296 = (($295) + 44|0);
  HEAP32[$294>>2] = $296;
 }
 if ((label|0) == 28) {
  ___assert_fail((2032|0),(1904|0),368,(1992|0));
  // unreachable;
 }
 $297 = $NewVertNum;
 $298 = ($297|0)==(0);
 if ($298) {
  $299 = $151;
  __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($299,$RD);
  $$expand_i1_val = 0;
  $150 = $$expand_i1_val;
  $$pre_trunc = $150;
  $858 = $$pre_trunc&1;
  STACKTOP = sp;return ($858|0);
 }
 $300 = $151;
 $301 = $NewVertNum;
 __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($lastv,$300,$301);
 $302 = $151;
 $303 = (($302) + 32|0);
 $92 = $303;
 $304 = $92;
 $305 = HEAP32[$304>>2]|0;
 $90 = $304;
 $91 = $305;
 $306 = $91;
 $88 = $164;
 $89 = $306;
 $307 = $88;
 $308 = $89;
 HEAP32[$307>>2] = $308;
 ;HEAP32[$fi+0>>2]=HEAP32[$164+0>>2]|0;
 L57: while(1) {
  $309 = $151;
  $310 = (($309) + 32|0);
  $80 = $310;
  $311 = $80;
  $312 = (($311) + 4|0);
  $313 = HEAP32[$312>>2]|0;
  $78 = $311;
  $79 = $313;
  $314 = $79;
  $76 = $165;
  $77 = $314;
  $315 = $76;
  $316 = $77;
  HEAP32[$315>>2] = $316;
  $73 = $fi;
  $74 = $165;
  $317 = $73;
  $318 = $74;
  $71 = $317;
  $72 = $318;
  $319 = $71;
  $70 = $319;
  $320 = $70;
  $321 = HEAP32[$320>>2]|0;
  $322 = $72;
  $69 = $322;
  $323 = $69;
  $324 = HEAP32[$323>>2]|0;
  $325 = ($321|0)==($324|0);
  $326 = $325 ^ 1;
  if (!($326)) {
   break;
  }
  $40 = $fi;
  $327 = $40;
  $328 = HEAP32[$327>>2]|0;
  $329 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($328)|0);
  if (!($329)) {
   $330 = $155;
   $331 = ($330|0)!=(0|0);
   if ($331) {
    $332 = $step;
    $333 = (($332) + 1)|0;
    $step = $333;
    $334 = $PercStep;
    $335 = (($333|0) % ($334|0))&-1;
    $336 = ($335|0)==(0);
    if ($336) {
     $337 = $155;
     $338 = $step;
     $339 = $PercStep;
     $340 = (($338|0) / ($339|0))&-1;
     (FUNCTION_TABLE_iii[$337 & 1023]($340,2016)|0);
    }
   }
   $j = 0;
   while(1) {
    $341 = $j;
    $342 = ($341|0)<(3);
    if (!($342)) {
     break;
    }
    $343 = $154;
    $344 = $343&1;
    if ($344) {
     $39 = $fi;
     $345 = $39;
     $346 = HEAP32[$345>>2]|0;
     $347 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($346)|0);
     if ($347) {
      label = 49;
     } else {
     }
    } else {
     label = 49;
    }
    if ((label|0) == 49) {
     label = 0;
     $j = 0;
     while(1) {
      $348 = $j;
      $349 = ($348|0)<(3);
      if (!($349)) {
       break;
      }
      $38 = $fi;
      $350 = $38;
      $351 = HEAP32[$350>>2]|0;
      $352 = $j;
      __ZN3vcg4face3PosI6MyFaceEC2EPS2_i($edgeCur1,$351,$352);
      $353 = $154;
      $354 = $353&1;
      if ($354) {
       $355 = (__ZNK3vcg4face3PosI6MyFaceE5FFlipEv($edgeCur1)|0);
       $356 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($355)|0);
       if ($356) {
        label = 54;
       } else {
       }
      } else {
       label = 54;
      }
      if ((label|0) == 54) {
       label = 0;
       $357 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
       $358 = HEAP32[$357>>2]|0;
       $359 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
       $360 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$359)|0);
       $361 = (($360) + ($358)|0);
       $362 = HEAP8[$361>>0]|0;
       $363 = $362&1;
       if ($363) {
        $364 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
        $367 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$366)|0);
        $368 = (($367) + 4|0);
        $369 = (($368) + ($365<<2)|0);
        $370 = HEAP32[$369>>2]|0;
        $371 = ($370|0)==(0|0);
        if ($371) {
         $37 = $lastv;
         $372 = $37;
         $373 = HEAP32[$372>>2]|0;
         $374 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
         $375 = HEAP32[$374>>2]|0;
         $376 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
         $377 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$376)|0);
         $378 = (($377) + 4|0);
         $379 = (($378) + ($375<<2)|0);
         HEAP32[$379>>2] = $373;
         $380 = $152;
         $36 = $lastv;
         $381 = $36;
         $382 = HEAP32[$381>>2]|0;
         ;HEAP32[$166+0>>2]=HEAP32[$edgeCur1+0>>2]|0;HEAP32[$166+4>>2]=HEAP32[$edgeCur1+4>>2]|0;HEAP32[$166+8>>2]=HEAP32[$edgeCur1+8>>2]|0;
         ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$166+0>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$166+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$166+8>>2]|0;
         __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEclER8MyVertexNS_4face3PosI6MyFaceEE($380,$382,$$byval_copy1);
         $383 = (__ZN3vcg4face3PosI6MyFaceE8IsBorderEv($edgeCur1)|0);
         if (!($383)) {
          __ZN3vcg4face3PosI6MyFaceE5FlipFEv($edgeCur1);
          $384 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
          $385 = HEAP32[$384>>2]|0;
          $386 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
          $387 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$386)|0);
          $388 = (($387) + ($385)|0);
          $389 = HEAP8[$388>>0]|0;
          $390 = $389&1;
          if (!($390)) {
           label = 58;
           break L57;
          }
          $35 = $lastv;
          $391 = $35;
          $392 = HEAP32[$391>>2]|0;
          $393 = (__ZN3vcg4face3PosI6MyFaceE1EEv($edgeCur1)|0);
          $394 = HEAP32[$393>>2]|0;
          $395 = (__ZN3vcg4face3PosI6MyFaceE1FEv($edgeCur1)|0);
          $396 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($RD,$395)|0);
          $397 = (($396) + 4|0);
          $398 = (($397) + ($394<<2)|0);
          HEAP32[$398>>2] = $392;
         }
         $34 = $lastv;
         $399 = $34;
         $400 = HEAP32[$399>>2]|0;
         $401 = (($400) + 36|0);
         HEAP32[$399>>2] = $401;
        }
       }
      }
      $402 = $j;
      $403 = (($402) + 1)|0;
      $j = $403;
     }
    }
    $404 = $j;
    $405 = (($404) + 1)|0;
    $j = $405;
   }
  }
  $33 = $fi;
  $406 = $33;
  $407 = HEAP32[$406>>2]|0;
  $408 = (($407) + 44|0);
  HEAP32[$406>>2] = $408;
 }
 if ((label|0) == 58) {
  ___assert_fail((2056|0),(1904|0),408,(1992|0));
  // unreachable;
 }
 $409 = $151;
 $32 = $409;
 $410 = $32;
 $411 = (($410) + 4|0);
 $412 = HEAP32[$411>>2]|0;
 $30 = $410;
 $31 = $412;
 $413 = $31;
 $28 = $167;
 $29 = $413;
 $414 = $28;
 $415 = $29;
 HEAP32[$414>>2] = $415;
 $26 = $lastv;
 $27 = $167;
 $416 = $26;
 $25 = $416;
 $417 = $25;
 $418 = HEAP32[$417>>2]|0;
 $419 = $27;
 $24 = $419;
 $420 = $24;
 $421 = HEAP32[$420>>2]|0;
 $422 = ($418|0)==($421|0);
 if (!($422)) {
  ___assert_fail((2088|0),(1904|0),417,(1992|0));
  // unreachable;
 }
 $423 = $151;
 $424 = $NewFaceNum;
 __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($lastf,$423,$424);
 ;HEAP32[$oldendf+0>>2]=HEAP32[$lastf+0>>2]|0;
 $425 = (($wtt) + 72|0);
 $426 = $wtt;
 while(1) {
  __ZN3vcg9TexCoord2IfLi1EEC2Ev($426);
  $427 = (($426) + 12|0);
  $428 = ($427|0)==($425|0);
  if ($428) {
   break;
  } else {
   $426 = $427;
  }
 }
 $fca = 0;
 $fcn = 0;
 $429 = $151;
 $430 = (($429) + 32|0);
 $23 = $430;
 $431 = $23;
 $432 = HEAP32[$431>>2]|0;
 $21 = $431;
 $22 = $432;
 $433 = $22;
 $19 = $168;
 $20 = $433;
 $434 = $19;
 $435 = $20;
 HEAP32[$434>>2] = $435;
 ;HEAP32[$fi+0>>2]=HEAP32[$168+0>>2]|0;
 L105: while(1) {
  $17 = $fi;
  $18 = $oldendf;
  $436 = $17;
  $437 = $18;
  $15 = $436;
  $16 = $437;
  $438 = $15;
  $14 = $438;
  $439 = $14;
  $440 = HEAP32[$439>>2]|0;
  $441 = $16;
  $13 = $441;
  $442 = $13;
  $443 = HEAP32[$442>>2]|0;
  $444 = ($440|0)==($443|0);
  $445 = $444 ^ 1;
  if (!($445)) {
   break;
  }
  $12 = $fi;
  $446 = $12;
  $447 = HEAP32[$446>>2]|0;
  $448 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($447)|0);
  if (!($448)) {
   $449 = $155;
   $450 = ($449|0)!=(0|0);
   if ($450) {
    $451 = $step;
    $452 = (($451) + 1)|0;
    $step = $452;
    $453 = $PercStep;
    $454 = (($452|0) % ($453|0))&-1;
    $455 = ($454|0)==(0);
    if ($455) {
     $456 = $155;
     $457 = $step;
     $458 = $PercStep;
     $459 = (($457|0) / ($458|0))&-1;
     (FUNCTION_TABLE_iii[$456 & 1023]($459,2016)|0);
    }
   }
   $460 = $fcn;
   $461 = (($460) + 1)|0;
   $fcn = $461;
   $11 = $fi;
   $462 = $11;
   $463 = HEAP32[$462>>2]|0;
   $464 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($463,0)|0);
   $465 = HEAP32[$464>>2]|0;
   HEAP32[$vv>>2] = $465;
   $10 = $fi;
   $466 = $10;
   $467 = HEAP32[$466>>2]|0;
   $468 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($467,1)|0);
   $469 = HEAP32[$468>>2]|0;
   $470 = (($vv) + 4|0);
   HEAP32[$470>>2] = $469;
   $9 = $fi;
   $471 = $9;
   $472 = HEAP32[$471>>2]|0;
   $473 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($472,2)|0);
   $474 = HEAP32[$473>>2]|0;
   $475 = (($vv) + 8|0);
   HEAP32[$475>>2] = $474;
   $476 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $477 = (($476) + 4|0);
   $478 = HEAP32[$477>>2]|0;
   $479 = (($vv) + 12|0);
   HEAP32[$479>>2] = $478;
   $480 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $481 = (($480) + 4|0);
   $482 = (($481) + 4|0);
   $483 = HEAP32[$482>>2]|0;
   $484 = (($vv) + 16|0);
   HEAP32[$484>>2] = $483;
   $485 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($RD,$fi)|0);
   $486 = (($485) + 4|0);
   $487 = (($486) + 8|0);
   $488 = HEAP32[$487>>2]|0;
   $489 = (($vv) + 20|0);
   HEAP32[$489>>2] = $488;
   $490 = (($vv) + 12|0);
   $491 = HEAP32[$490>>2]|0;
   $492 = ($491|0)!=(0|0);
   $493 = $492 ? 1 : 0;
   $494 = (($vv) + 16|0);
   $495 = HEAP32[$494>>2]|0;
   $496 = ($495|0)!=(0|0);
   $497 = $496 ? 2 : 0;
   $498 = (($493) + ($497))|0;
   $499 = (($vv) + 20|0);
   $500 = HEAP32[$499>>2]|0;
   $501 = ($500|0)!=(0|0);
   $502 = $501 ? 4 : 0;
   $503 = (($498) + ($502))|0;
   $ind = $503;
   $8 = $fi;
   $504 = $8;
   $505 = HEAP32[$504>>2]|0;
   HEAP32[$nf>>2] = $505;
   $i = 1;
   while(1) {
    $506 = $i;
    $507 = $ind;
    $508 = (2112 + (($507*116)|0)|0);
    $509 = HEAP32[$508>>2]|0;
    $510 = ($506|0)<($509|0);
    if (!($510)) {
     break;
    }
    $7 = $lastf;
    $511 = $7;
    $512 = HEAP32[$511>>2]|0;
    $513 = $i;
    $514 = (($nf) + ($513<<2)|0);
    HEAP32[$514>>2] = $512;
    $6 = $lastf;
    $515 = $6;
    $516 = HEAP32[$515>>2]|0;
    $517 = (($516) + 44|0);
    HEAP32[$515>>2] = $517;
    $518 = $fca;
    $519 = (($518) + 1)|0;
    $fca = $519;
    $520 = $154;
    $521 = $520&1;
    if ($521) {
     label = 82;
    } else {
     $5 = $fi;
     $522 = $5;
     $523 = HEAP32[$522>>2]|0;
     $524 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($523)|0);
     if ($524) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     label = 0;
     $525 = $i;
     $526 = (($nf) + ($525<<2)|0);
     $527 = HEAP32[$526>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetSEv($527);
    }
    $528 = $i;
    $529 = (($nf) + ($528<<2)|0);
    $530 = HEAP32[$529>>2]|0;
    $4 = $fi;
    $531 = $4;
    $532 = HEAP32[$531>>2]|0;
    __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE10ImportDataI6MyFaceEEvRKT_($530,$532);
    $533 = $i;
    $534 = (($533) + 1)|0;
    $i = $534;
   }
   $535 = $151;
   $536 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($535)|0);
   if ($536) {
    $i = 0;
    while(1) {
     $537 = $i;
     $538 = ($537|0)<(3);
     if (!($538)) {
      break;
     }
     $539 = $i;
     $540 = (($wtt) + (($539*12)|0)|0);
     $3 = $fi;
     $541 = $3;
     $542 = HEAP32[$541>>2]|0;
     $543 = $i;
     $544 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($542,$543)|0);
     (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($540,$544)|0);
     $545 = $i;
     $546 = (3 + ($545))|0;
     $547 = (($wtt) + (($546*12)|0)|0);
     $548 = $152;
     $2 = $fi;
     $549 = $2;
     $550 = HEAP32[$549>>2]|0;
     $551 = $i;
     $552 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($550,$551)|0);
     $1 = $fi;
     $553 = $1;
     $554 = HEAP32[$553>>2]|0;
     $555 = $i;
     $556 = (($555) + 1)|0;
     $557 = (($556|0) % 3)&-1;
     $558 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($554,$557)|0);
     __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEE11WedgeInterpIfEENS_9TexCoord2IT_Li1EEERS9_SA_($169,$548,$552,$558);
     (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($547,$169)|0);
     $559 = $i;
     $560 = (($559) + 1)|0;
     $i = $560;
    }
   }
   $0 = $fi;
   $561 = $0;
   $562 = HEAP32[$561>>2]|0;
   $563 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($562)|0);
   $564 = HEAP32[$563>>2]|0;
   $orgflag = $564;
   $i = 0;
   while(1) {
    $565 = $i;
    $566 = $ind;
    $567 = (2112 + (($566*116)|0)|0);
    $568 = HEAP32[$567>>2]|0;
    $569 = ($565|0)<($568|0);
    if (!($569)) {
     break;
    }
    $j = 0;
    while(1) {
     $570 = $j;
     $571 = ($570|0)<(3);
     if (!($571)) {
      break;
     }
     $572 = $j;
     $573 = $i;
     $574 = $ind;
     $575 = (2112 + (($574*116)|0)|0);
     $576 = (($575) + 4|0);
     $577 = (($576) + (($573*12)|0)|0);
     $578 = (($577) + ($572<<2)|0);
     $579 = HEAP32[$578>>2]|0;
     $580 = (($vv) + ($579<<2)|0);
     $581 = HEAP32[$580>>2]|0;
     $582 = $i;
     $583 = (($nf) + ($582<<2)|0);
     $584 = HEAP32[$583>>2]|0;
     $585 = $j;
     $586 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($584,$585)|0);
     HEAP32[$586>>2] = $581;
     $587 = $151;
     $588 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($587)|0);
     if ($588) {
      $589 = $i;
      $590 = (($nf) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $j;
      $593 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($591,$592)|0);
      $594 = $j;
      $595 = $i;
      $596 = $ind;
      $597 = (2112 + (($596*116)|0)|0);
      $598 = (($597) + 4|0);
      $599 = (($598) + (($595*12)|0)|0);
      $600 = (($599) + ($594<<2)|0);
      $601 = HEAP32[$600>>2]|0;
      $602 = (($wtt) + (($601*12)|0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($593,$602)|0);
     }
     $603 = $i;
     $604 = (($nf) + ($603<<2)|0);
     $605 = HEAP32[$604>>2]|0;
     $606 = $j;
     $607 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($605,$606)|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = ($608|0)!=(0|0);
     if (!($609)) {
      label = 98;
      break L105;
     }
     $610 = $j;
     $611 = $i;
     $612 = $ind;
     $613 = (2112 + (($612*116)|0)|0);
     $614 = (($613) + 68|0);
     $615 = (($614) + (($611*12)|0)|0);
     $616 = (($615) + ($610<<2)|0);
     $617 = HEAP32[$616>>2]|0;
     $618 = ($617|0)!=(3);
     if ($618) {
      $619 = $orgflag;
      $620 = $j;
      $621 = $i;
      $622 = $ind;
      $623 = (2112 + (($622*116)|0)|0);
      $624 = (($623) + 68|0);
      $625 = (($624) + (($621*12)|0)|0);
      $626 = (($625) + ($620<<2)|0);
      $627 = HEAP32[$626>>2]|0;
      $628 = 64 << $627;
      $629 = $619 & $628;
      $630 = ($629|0)!=(0);
      if ($630) {
       $631 = $i;
       $632 = (($nf) + ($631<<2)|0);
       $633 = HEAP32[$632>>2]|0;
       $634 = $j;
       __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($633,$634);
      } else {
       $635 = $i;
       $636 = (($nf) + ($635<<2)|0);
       $637 = HEAP32[$636>>2]|0;
       $638 = $j;
       __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($637,$638);
      }
     } else {
      $639 = $i;
      $640 = (($nf) + ($639<<2)|0);
      $641 = HEAP32[$640>>2]|0;
      $642 = $j;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($641,$642);
     }
     $643 = $j;
     $644 = (($643) + 1)|0;
     $j = $644;
    }
    $645 = $i;
    $646 = (($645) + 1)|0;
    $i = $646;
   }
   $647 = $ind;
   $648 = (2112 + (($647*116)|0)|0);
   $649 = HEAP32[$648>>2]|0;
   $650 = ($649|0)==(3);
   if ($650) {
    $651 = $ind;
    $652 = (2112 + (($651*116)|0)|0);
    $653 = (($652) + 52|0);
    $654 = HEAP32[$653>>2]|0;
    $655 = (($vv) + ($654<<2)|0);
    $656 = HEAP32[$655>>2]|0;
    $657 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($656)|0);
    $658 = $ind;
    $659 = (2112 + (($658*116)|0)|0);
    $660 = (($659) + 52|0);
    $661 = (($660) + 4|0);
    $662 = HEAP32[$661>>2]|0;
    $663 = (($vv) + ($662<<2)|0);
    $664 = HEAP32[$663>>2]|0;
    $665 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($664)|0);
    $666 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($657,$665));
    $667 = $ind;
    $668 = (2112 + (($667*116)|0)|0);
    $669 = (($668) + 52|0);
    $670 = (($669) + 8|0);
    $671 = HEAP32[$670>>2]|0;
    $672 = (($vv) + ($671<<2)|0);
    $673 = HEAP32[$672>>2]|0;
    $674 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($673)|0);
    $675 = $ind;
    $676 = (2112 + (($675*116)|0)|0);
    $677 = (($676) + 52|0);
    $678 = (($677) + 8|0);
    $679 = (($678) + 4|0);
    $680 = HEAP32[$679>>2]|0;
    $681 = (($vv) + ($680<<2)|0);
    $682 = HEAP32[$681>>2]|0;
    $683 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($682)|0);
    $684 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($674,$683));
    $685 = $666 < $684;
    if ($685) {
     $686 = (($nf) + 4|0);
     $687 = HEAP32[$686>>2]|0;
     $688 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($687,0)|0);
     $689 = HEAP32[$688>>2]|0;
     $690 = (($nf) + 8|0);
     $691 = HEAP32[$690>>2]|0;
     $692 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($691,1)|0);
     HEAP32[$692>>2] = $689;
     $693 = (($nf) + 8|0);
     $694 = HEAP32[$693>>2]|0;
     $695 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($694,0)|0);
     $696 = HEAP32[$695>>2]|0;
     $697 = (($nf) + 4|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($698,1)|0);
     HEAP32[$699>>2] = $696;
     $700 = $151;
     $701 = (__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($700)|0);
     if ($701) {
      $702 = (($nf) + 8|0);
      $703 = HEAP32[$702>>2]|0;
      $704 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($703,1)|0);
      $705 = (($nf) + 4|0);
      $706 = HEAP32[$705>>2]|0;
      $707 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($706,0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($704,$707)|0);
      $708 = (($nf) + 4|0);
      $709 = HEAP32[$708>>2]|0;
      $710 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($709,1)|0);
      $711 = (($nf) + 8|0);
      $712 = HEAP32[$711>>2]|0;
      $713 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($712,0)|0);
      (__ZN3vcg9TexCoord2IfLi1EEaSERKS1_($710,$713)|0);
     }
     $714 = (($nf) + 4|0);
     $715 = HEAP32[$714>>2]|0;
     $716 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($715,0)|0);
     if ($716) {
      $717 = (($nf) + 8|0);
      $718 = HEAP32[$717>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($718,1);
     } else {
      $719 = (($nf) + 8|0);
      $720 = HEAP32[$719>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($720,1);
     }
     $721 = (($nf) + 8|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($722,0)|0);
     if ($723) {
      $724 = (($nf) + 4|0);
      $725 = HEAP32[$724>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($725,1);
     } else {
      $726 = (($nf) + 4|0);
      $727 = HEAP32[$726>>2]|0;
      __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($727,1);
     }
     $728 = (($nf) + 4|0);
     $729 = HEAP32[$728>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($729,0);
     $730 = (($nf) + 8|0);
     $731 = HEAP32[$730>>2]|0;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($731,0);
    }
   }
  }
  $41 = $fi;
  $732 = $41;
  $733 = HEAP32[$732>>2]|0;
  $734 = (($733) + 44|0);
  HEAP32[$732>>2] = $734;
 }
 if ((label|0) == 98) {
  ___assert_fail((3040|0),(1904|0),484,(1992|0));
  // unreachable;
 }
 $735 = $151;
 $736 = (($735) + 32|0);
 $46 = $736;
 $737 = $46;
 $738 = (($737) + 4|0);
 $739 = HEAP32[$738>>2]|0;
 $44 = $737;
 $45 = $739;
 $740 = $45;
 $42 = $170;
 $43 = $740;
 $741 = $42;
 $742 = $43;
 HEAP32[$741>>2] = $742;
 $49 = $lastf;
 $50 = $170;
 $743 = $49;
 $48 = $743;
 $744 = $48;
 $745 = HEAP32[$744>>2]|0;
 $746 = $50;
 $47 = $746;
 $747 = $47;
 $748 = HEAP32[$747>>2]|0;
 $749 = ($745|0)==($748|0);
 if (!($749)) {
  ___assert_fail((3064|0),(1904|0),512,(1992|0));
  // unreachable;
 }
 $750 = $151;
 $51 = $750;
 $751 = $51;
 $752 = HEAP32[$751>>2]|0;
 $753 = (($751) + 4|0);
 $754 = HEAP32[$753>>2]|0;
 $755 = ($752|0)==($754|0);
 if ($755) {
  ___assert_fail((3088|0),(1904|0),513,(1992|0));
  // unreachable;
 }
 $756 = $151;
 $757 = (($756) + 32|0);
 $56 = $757;
 $758 = $56;
 $759 = HEAP32[$758>>2]|0;
 $54 = $758;
 $55 = $759;
 $760 = $55;
 $52 = $171;
 $53 = $760;
 $761 = $52;
 $762 = $53;
 HEAP32[$761>>2] = $762;
 ;HEAP32[$fi+0>>2]=HEAP32[$171+0>>2]|0;
 while(1) {
  $763 = $151;
  $764 = (($763) + 32|0);
  $61 = $764;
  $765 = $61;
  $766 = (($765) + 4|0);
  $767 = HEAP32[$766>>2]|0;
  $59 = $765;
  $60 = $767;
  $768 = $60;
  $57 = $172;
  $58 = $768;
  $769 = $57;
  $770 = $58;
  HEAP32[$769>>2] = $770;
  $66 = $fi;
  $67 = $172;
  $771 = $66;
  $772 = $67;
  $64 = $771;
  $65 = $772;
  $773 = $64;
  $63 = $773;
  $774 = $63;
  $775 = HEAP32[$774>>2]|0;
  $776 = $65;
  $62 = $776;
  $777 = $62;
  $778 = HEAP32[$777>>2]|0;
  $779 = ($775|0)==($778|0);
  $780 = $779 ^ 1;
  if (!($780)) {
   label = 142;
   break;
  }
  $68 = $fi;
  $781 = $68;
  $782 = HEAP32[$781>>2]|0;
  $783 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($782)|0);
  if (!($783)) {
   $75 = $fi;
   $784 = $75;
   $785 = HEAP32[$784>>2]|0;
   $786 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($785,0)|0);
   $787 = HEAP32[$786>>2]|0;
   $788 = $151;
   $85 = $788;
   $789 = $85;
   $790 = HEAP32[$789>>2]|0;
   $83 = $789;
   $84 = $790;
   $791 = $84;
   $81 = $173;
   $82 = $791;
   $792 = $81;
   $793 = $82;
   HEAP32[$792>>2] = $793;
   $86 = $173;
   $794 = $86;
   $795 = HEAP32[$794>>2]|0;
   $796 = ($787>>>0)>=($795>>>0);
   if (!($796)) {
    label = 132;
    break;
   }
   $87 = $fi;
   $797 = $87;
   $798 = HEAP32[$797>>2]|0;
   $799 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($798,0)|0);
   $800 = HEAP32[$799>>2]|0;
   $801 = $151;
   $93 = $801;
   $802 = $93;
   $803 = (($802) + 4|0);
   $804 = HEAP32[$803>>2]|0;
   $805 = (($804) + -36|0);
   $806 = ($800>>>0)<=($805>>>0);
   if (!($806)) {
    label = 132;
    break;
   }
   $94 = $fi;
   $807 = $94;
   $808 = HEAP32[$807>>2]|0;
   $809 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($808,1)|0);
   $810 = HEAP32[$809>>2]|0;
   $811 = $151;
   $100 = $811;
   $812 = $100;
   $813 = HEAP32[$812>>2]|0;
   $98 = $812;
   $99 = $813;
   $814 = $99;
   $96 = $174;
   $97 = $814;
   $815 = $96;
   $816 = $97;
   HEAP32[$815>>2] = $816;
   $101 = $174;
   $817 = $101;
   $818 = HEAP32[$817>>2]|0;
   $819 = ($810>>>0)>=($818>>>0);
   if (!($819)) {
    label = 135;
    break;
   }
   $102 = $fi;
   $820 = $102;
   $821 = HEAP32[$820>>2]|0;
   $822 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($821,1)|0);
   $823 = HEAP32[$822>>2]|0;
   $824 = $151;
   $104 = $824;
   $825 = $104;
   $826 = (($825) + 4|0);
   $827 = HEAP32[$826>>2]|0;
   $828 = (($827) + -36|0);
   $829 = ($823>>>0)<=($828>>>0);
   if (!($829)) {
    label = 135;
    break;
   }
   $105 = $fi;
   $830 = $105;
   $831 = HEAP32[$830>>2]|0;
   $832 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($831,2)|0);
   $833 = HEAP32[$832>>2]|0;
   $834 = $151;
   $111 = $834;
   $835 = $111;
   $836 = HEAP32[$835>>2]|0;
   $109 = $835;
   $110 = $836;
   $837 = $110;
   $107 = $175;
   $108 = $837;
   $838 = $107;
   $839 = $108;
   HEAP32[$838>>2] = $839;
   $112 = $175;
   $840 = $112;
   $841 = HEAP32[$840>>2]|0;
   $842 = ($833>>>0)>=($841>>>0);
   if (!($842)) {
    label = 138;
    break;
   }
   $113 = $fi;
   $843 = $113;
   $844 = HEAP32[$843>>2]|0;
   $845 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($844,2)|0);
   $846 = HEAP32[$845>>2]|0;
   $847 = $151;
   $115 = $847;
   $848 = $115;
   $849 = (($848) + 4|0);
   $850 = HEAP32[$849>>2]|0;
   $851 = (($850) + -36|0);
   $852 = ($846>>>0)<=($851>>>0);
   if (!($852)) {
    label = 138;
    break;
   }
  }
  $116 = $fi;
  $853 = $116;
  $854 = HEAP32[$853>>2]|0;
  $855 = (($854) + 44|0);
  HEAP32[$853>>2] = $855;
 }
 if ((label|0) == 132) {
  ___assert_fail((3104|0),(1904|0),515,(1992|0));
  // unreachable;
 }
 else if ((label|0) == 135) {
  ___assert_fail((3168|0),(1904|0),516,(1992|0));
  // unreachable;
 }
 else if ((label|0) == 138) {
  ___assert_fail((3232|0),(1904|0),517,(1992|0));
  // unreachable;
 }
 else if ((label|0) == 142) {
  $856 = $151;
  __ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_($856);
  $857 = $151;
  __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($857,$RD);
  $$expand_i1_val3 = 1;
  $150 = $$expand_i1_val3;
  $$pre_trunc = $150;
  $858 = $$pre_trunc&1;
  STACKTOP = sp;return ($858|0);
 }
 return (0)|0;
}
function __ZN3vcg3tri2io11ExporterOFFI6MyMeshE10SaveStreamERS3_i($m,$mask) {
 $m = $m|0;
 $mask = $mask|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0.0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0;
 var $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0;
 var $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0;
 var $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0.0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0;
 var $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0;
 var $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0;
 var $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0.0;
 var $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0;
 var $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0;
 var $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0;
 var $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0;
 var $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0;
 var $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0;
 var $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0;
 var $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0;
 var $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0;
 var $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0;
 var $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0;
 var $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0;
 var $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0;
 var $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0;
 var $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0;
 var $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0;
 var $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0;
 var $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0;
 var $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0;
 var $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0;
 var $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0.0, $1623 = 0.0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0;
 var $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0;
 var $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0;
 var $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0;
 var $1682 = 0, $1683 = 0, $1684 = 0.0, $1685 = 0.0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0;
 var $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0;
 var $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0;
 var $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0.0, $1747 = 0.0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0;
 var $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0;
 var $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0;
 var $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0;
 var $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0;
 var $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0.0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0;
 var $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0;
 var $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0;
 var $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0.0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0;
 var $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0, $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0;
 var $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0;
 var $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0;
 var $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0;
 var $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0, $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0;
 var $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0;
 var $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0;
 var $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0;
 var $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0;
 var $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0;
 var $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0;
 var $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0;
 var $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0;
 var $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0;
 var $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0;
 var $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0;
 var $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0;
 var $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0;
 var $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0;
 var $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0;
 var $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0;
 var $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0;
 var $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0;
 var $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0;
 var $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0;
 var $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0;
 var $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0;
 var $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0;
 var $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0;
 var $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0;
 var $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0;
 var $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0;
 var $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0;
 var $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0;
 var $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0;
 var $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0;
 var $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0;
 var $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0;
 var $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0;
 var $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0;
 var $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0;
 var $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0;
 var $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0;
 var $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0;
 var $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0;
 var $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0;
 var $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0;
 var $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0;
 var $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0;
 var $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0, $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0;
 var $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0, $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0;
 var $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0, $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0;
 var $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0, $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0;
 var $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0, $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0;
 var $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0, $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0;
 var $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0, $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0;
 var $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0, $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0;
 var $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0, $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0;
 var $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0, $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $DGT = 0, $FlagV = 0, $__a$i$i$i = 0, $__annotator$i = 0;
 var $__i$i$i$i = 0, $fi = 0, $fi1 = 0, $fpout = 0, $he = 0, $hei = 0, $i = 0, $j = 0, $polygon = 0, $polynumber = 0, $size = 0, $str = 0, $vi = 0, $vp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3808|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $313 = sp + 1288|0;
 $317 = sp + 1304|0;
 $321 = sp + 1320|0;
 $326 = sp + 1340|0;
 $329 = sp + 1352|0;
 $332 = sp + 1364|0;
 $333 = sp + 1368|0;
 $334 = sp + 1372|0;
 $__annotator$i = sp + 3800|0;
 $754 = sp + 3052|0;
 $758 = sp + 3068|0;
 $762 = sp + 3084|0;
 $767 = sp + 3104|0;
 $770 = sp + 3116|0;
 $773 = sp + 3128|0;
 $774 = sp + 3132|0;
 $775 = sp + 3136|0;
 $he = sp + 3400|0;
 $hei = sp + 3412|0;
 $str = sp + 3424|0;
 $841 = sp + 3448|0;
 $842 = sp + 3460|0;
 $FlagV = sp + 3476|0;
 $vi = sp + 3492|0;
 $843 = sp + 3500|0;
 $844 = sp + 3504|0;
 $845 = sp + 3508|0;
 $846 = sp + 3520|0;
 $847 = sp + 3532|0;
 $848 = sp + 3544|0;
 $849 = sp + 3556|0;
 $850 = sp + 3568|0;
 $851 = sp + 3580|0;
 $852 = sp + 3592|0;
 $853 = sp + 3604|0;
 $854 = sp + 3616|0;
 $855 = sp + 3628|0;
 $856 = sp + 3640|0;
 $polygon = sp + 3652|0;
 $fi = sp + 3664|0;
 $857 = sp + 3668|0;
 $858 = sp + 128|0;
 $859 = sp + 52|0;
 $fi1 = sp + 72|0;
 $860 = sp + 64|0;
 $861 = sp + 40|0;
 $862 = sp + 76|0;
 $863 = sp + 3704|0;
 $864 = sp + 3692|0;
 $865 = sp + 24|0;
 $866 = sp + 92|0;
 $867 = sp + 12|0;
 $868 = sp + 108|0;
 $869 = sp;
 $870 = sp + 120|0;
 $871 = sp + 3720|0;
 $837 = $m;
 $838 = $mask;
 (_setlocale(6,(192|0))|0);
 __ZN3vcg4face3PosI6MyFaceEC2Ev($he);
 __ZN3vcg4face3PosI6MyFaceEC2Ev($hei);
 $836 = $str;
 $873 = $836;
 $835 = $873;
 $874 = $835;
 $834 = $874;
 $875 = $834;
 $833 = $875;
 $876 = $833;
 $832 = $876;
 $831 = $874;
 $877 = $831;
 $830 = $877;
 $878 = $830;
 $829 = $878;
 $879 = $829;
 $__a$i$i$i = $879;
 $__i$i$i$i = 0;
 while(1) {
  $880 = $__i$i$i$i;
  $881 = ($880>>>0)<(3);
  if (!($881)) {
   break;
  }
  $882 = $__i$i$i$i;
  $883 = $__a$i$i$i;
  $884 = (($883) + ($882<<2)|0);
  HEAP32[$884>>2] = 0;
  $885 = $__i$i$i$i;
  $886 = (($885) + 1)|0;
  $__i$i$i$i = $886;
 }
 $887 = $837;
 __THREW__ = 0;
 $888 = (invoke_ii(408,($887|0))|0);
 $889 = __THREW__; __THREW__ = 0;
 $890 = $889&1;
 L5: do {
  if ($890) {
   label = 9;
  } else {
   if ($888) {
    $891 = $838;
    $892 = $891 & 16;
    $893 = ($892|0)!=(0);
    if ($893) {
     __THREW__ = 0;
     (invoke_iii(409,($str|0),(200|0))|0);
     $894 = __THREW__; __THREW__ = 0;
     $895 = $894&1;
     if ($895) {
      label = 9;
      break;
     }
    }
   }
   $898 = $837;
   __THREW__ = 0;
   $899 = (invoke_ii(408,($898|0))|0);
   $900 = __THREW__; __THREW__ = 0;
   $901 = $900&1;
   if ($901) {
    label = 9;
   } else {
    if ($899) {
     $902 = $838;
     $903 = $902 & 4;
     $904 = ($903|0)!=(0);
     if ($904) {
      __THREW__ = 0;
      (invoke_iii(409,($str|0),(208|0))|0);
      $905 = __THREW__; __THREW__ = 0;
      $906 = $905&1;
      if ($906) {
       label = 9;
       break;
      }
     }
    }
    $907 = $837;
    __THREW__ = 0;
    $908 = (invoke_ii(410,($907|0))|0);
    $909 = __THREW__; __THREW__ = 0;
    $910 = $909&1;
    if ($910) {
     label = 9;
    } else {
     if ($908) {
      $911 = $838;
      $912 = $911 & 32;
      $913 = ($912|0)!=(0);
      if ($913) {
       __THREW__ = 0;
       (invoke_iii(409,($str|0),(216|0))|0);
       $914 = __THREW__; __THREW__ = 0;
       $915 = $914&1;
       if ($915) {
        label = 9;
        break;
       }
      }
     }
     __THREW__ = 0;
     (invoke_iii(409,($str|0),(224|0))|0);
     $916 = __THREW__; __THREW__ = 0;
     $917 = $916&1;
     if ($917) {
      label = 9;
     } else {
      $918 = $838;
      $919 = $918 & 131072;
      $920 = ($919|0)!=(0);
      if ($920) {
       $921 = $837;
       __THREW__ = 0;
       $922 = (invoke_ii(411,($921|0))|0);
       $923 = __THREW__; __THREW__ = 0;
       $924 = $923&1;
       if ($924) {
        label = 9;
        break;
       }
       $polynumber = $922;
      } else {
       $925 = $837;
       $926 = (($925) + 44|0);
       $927 = HEAP32[$926>>2]|0;
       $polynumber = $927;
      }
      $928 = $837;
      $929 = (($928) + 12|0);
      $930 = HEAP32[$929>>2]|0;
      __THREW__ = 0;
      invoke_vii(412,($841|0),($930|0));
      $931 = __THREW__; __THREW__ = 0;
      $932 = $931&1;
      if ($932) {
       label = 9;
      } else {
       $827 = $str;
       $828 = $841;
       $933 = $827;
       $934 = $828;
       $826 = $934;
       $935 = $826;
       $825 = $935;
       $936 = $825;
       $824 = $936;
       $937 = $824;
       $823 = $937;
       $938 = $823;
       $822 = $938;
       $939 = $822;
       $940 = HEAP8[$939>>0]|0;
       $941 = $940&255;
       $942 = $941 & 1;
       $943 = ($942|0)!=(0);
       if ($943) {
        $816 = $936;
        $944 = $816;
        $815 = $944;
        $945 = $815;
        $814 = $945;
        $946 = $814;
        $947 = (($946) + 8|0);
        $948 = HEAP32[$947>>2]|0;
        $955 = $948;
       } else {
        $821 = $936;
        $949 = $821;
        $820 = $949;
        $950 = $820;
        $819 = $950;
        $951 = $819;
        $952 = (($951) + 1|0);
        $818 = $952;
        $953 = $818;
        $817 = $953;
        $954 = $817;
        $955 = $954;
       }
       $813 = $955;
       $956 = $813;
       $957 = $828;
       $812 = $957;
       $958 = $812;
       $811 = $958;
       $959 = $811;
       $810 = $959;
       $960 = $810;
       $809 = $960;
       $961 = $809;
       $962 = HEAP8[$961>>0]|0;
       $963 = $962&255;
       $964 = $963 & 1;
       $965 = ($964|0)!=(0);
       if ($965) {
        $805 = $958;
        $966 = $805;
        $804 = $966;
        $967 = $804;
        $803 = $967;
        $968 = $803;
        $969 = (($968) + 4|0);
        $970 = HEAP32[$969>>2]|0;
        $977 = $970;
       } else {
        $808 = $958;
        $971 = $808;
        $807 = $971;
        $972 = $807;
        $806 = $972;
        $973 = $806;
        $974 = HEAP8[$973>>0]|0;
        $975 = $974&255;
        $976 = $975 >> 1;
        $977 = $976;
       }
       __THREW__ = 0;
       $978 = (invoke_iiii(392,($933|0),($956|0),($977|0))|0);
       $979 = __THREW__; __THREW__ = 0;
       $980 = $979&1;
       L39: do {
        if ($980) {
         label = 156;
        } else {
         __THREW__ = 0;
         $981 = (invoke_iii(409,($978|0),(232|0))|0);
         $982 = __THREW__; __THREW__ = 0;
         $983 = $982&1;
         if ($983) {
          label = 156;
         } else {
          $984 = $polynumber;
          __THREW__ = 0;
          invoke_vii(412,($842|0),($984|0));
          $985 = __THREW__; __THREW__ = 0;
          $986 = $985&1;
          if ($986) {
           label = 156;
          } else {
           $801 = $981;
           $802 = $842;
           $987 = $801;
           $988 = $802;
           $800 = $988;
           $989 = $800;
           $799 = $989;
           $990 = $799;
           $798 = $990;
           $991 = $798;
           $797 = $991;
           $992 = $797;
           $796 = $992;
           $993 = $796;
           $994 = HEAP8[$993>>0]|0;
           $995 = $994&255;
           $996 = $995 & 1;
           $997 = ($996|0)!=(0);
           if ($997) {
            $790 = $990;
            $998 = $790;
            $789 = $998;
            $999 = $789;
            $788 = $999;
            $1000 = $788;
            $1001 = (($1000) + 8|0);
            $1002 = HEAP32[$1001>>2]|0;
            $1009 = $1002;
           } else {
            $795 = $990;
            $1003 = $795;
            $794 = $1003;
            $1004 = $794;
            $793 = $1004;
            $1005 = $793;
            $1006 = (($1005) + 1|0);
            $792 = $1006;
            $1007 = $792;
            $791 = $1007;
            $1008 = $791;
            $1009 = $1008;
           }
           $787 = $1009;
           $1010 = $787;
           $1011 = $802;
           $786 = $1011;
           $1012 = $786;
           $785 = $1012;
           $1013 = $785;
           $784 = $1013;
           $1014 = $784;
           $783 = $1014;
           $1015 = $783;
           $1016 = HEAP8[$1015>>0]|0;
           $1017 = $1016&255;
           $1018 = $1017 & 1;
           $1019 = ($1018|0)!=(0);
           if ($1019) {
            $779 = $1012;
            $1020 = $779;
            $778 = $1020;
            $1021 = $778;
            $777 = $1021;
            $1022 = $777;
            $1023 = (($1022) + 4|0);
            $1024 = HEAP32[$1023>>2]|0;
            $1031 = $1024;
           } else {
            $782 = $1012;
            $1025 = $782;
            $781 = $1025;
            $1026 = $781;
            $780 = $1026;
            $1027 = $780;
            $1028 = HEAP8[$1027>>0]|0;
            $1029 = $1028&255;
            $1030 = $1029 >> 1;
            $1031 = $1030;
           }
           __THREW__ = 0;
           $1032 = (invoke_iiii(392,($987|0),($1010|0),($1031|0))|0);
           $1033 = __THREW__; __THREW__ = 0;
           $1034 = $1033&1;
           do {
            if (!($1034)) {
             __THREW__ = 0;
             (invoke_iii(409,($1032|0),(240|0))|0);
             $1035 = __THREW__; __THREW__ = 0;
             $1036 = $1035&1;
             if ($1036) {
              break;
             }
             __THREW__ = 0;
             invoke_vi(396,($842|0));
             $1037 = __THREW__; __THREW__ = 0;
             $1038 = $1037&1;
             if ($1038) {
              label = 156;
              break L39;
             }
             __THREW__ = 0;
             invoke_vi(396,($841|0));
             $1039 = __THREW__; __THREW__ = 0;
             $1040 = $1039&1;
             if ($1040) {
              label = 9;
              break L5;
             }
             $776 = $FlagV;
             $1041 = $776;
             $772 = $1041;
             $1042 = $772;
             $771 = $1042;
             $752 = $754;
             $753 = -1;
             $1043 = $752;
             HEAP32[$1043>>2] = 0;
             $1044 = HEAP32[$754>>2]|0;
             HEAP32[$773>>2] = $1044;
             $755 = $773;
             HEAP32[$1042>>2] = 0;
             $1045 = (($1042) + 4|0);
             $756 = $758;
             $757 = -1;
             $1046 = $756;
             HEAP32[$1046>>2] = 0;
             $1047 = HEAP32[$758>>2]|0;
             HEAP32[$774>>2] = $1047;
             $759 = $774;
             HEAP32[$1045>>2] = 0;
             $1048 = (($1042) + 8|0);
             $760 = $762;
             $761 = -1;
             $1049 = $760;
             HEAP32[$1049>>2] = 0;
             $1050 = HEAP32[$762>>2]|0;
             HEAP32[$775>>2] = $1050;
             $763 = $775;
             $769 = $1048;
             HEAP32[$770>>2] = 0;
             $1051 = $769;
             $768 = $770;
             $1052 = $768;
             $1053 = HEAP32[$1052>>2]|0;
             $766 = $1051;
             HEAP32[$767>>2] = $1053;
             $1054 = $766;
             $765 = $1054;
             $764 = $767;
             $1055 = $764;
             $1056 = HEAP32[$1055>>2]|0;
             HEAP32[$1054>>2] = $1056;
             $751 = $vi;
             __THREW__ = 0;
             $1057 = (invoke_i(413)|0);
             $1058 = __THREW__; __THREW__ = 0;
             $1059 = $1058&1;
             L59: do {
              if ($1059) {
               label = 161;
              } else {
               $DGT = $1057;
               $j = 0;
               $1060 = $837;
               $750 = $1060;
               $1061 = $750;
               $1062 = HEAP32[$1061>>2]|0;
               $748 = $1061;
               $749 = $1062;
               $1063 = $749;
               $746 = $843;
               $747 = $1063;
               $1064 = $746;
               $1065 = $747;
               HEAP32[$1064>>2] = $1065;
               ;HEAP32[$vi+0>>2]=HEAP32[$843+0>>2]|0;
               L61: while(1) {
                $1066 = $837;
                $718 = $1066;
                $1067 = $718;
                $1068 = (($1067) + 4|0);
                $1069 = HEAP32[$1068>>2]|0;
                $716 = $1067;
                $717 = $1069;
                $1070 = $717;
                $714 = $844;
                $715 = $1070;
                $1071 = $714;
                $1072 = $715;
                HEAP32[$1071>>2] = $1072;
                $666 = $vi;
                $667 = $844;
                $1073 = $666;
                $1074 = $667;
                $664 = $1073;
                $665 = $1074;
                $1075 = $664;
                $663 = $1075;
                $1076 = $663;
                $1077 = HEAP32[$1076>>2]|0;
                $1078 = $665;
                $662 = $1078;
                $1079 = $662;
                $1080 = HEAP32[$1079>>2]|0;
                $1081 = ($1077|0)==($1080|0);
                $1082 = $1081 ^ 1;
                if (!($1082)) {
                 label = 272;
                 break;
                }
                $661 = $vi;
                $1083 = $661;
                $1084 = HEAP32[$1083>>2]|0;
                $vp = $1084;
                $1085 = $vp;
                __THREW__ = 0;
                $1086 = (invoke_ii(414,($1085|0))|0);
                $1087 = __THREW__; __THREW__ = 0;
                $1088 = $1087&1;
                if ($1088) {
                 label = 161;
                 break L59;
                }
                $659 = $FlagV;
                $660 = $1086;
                $1089 = $659;
                $1090 = (($1089) + 4|0);
                $1091 = HEAP32[$1090>>2]|0;
                $658 = $1089;
                $1092 = $658;
                $1093 = (($1092) + 8|0);
                $657 = $1093;
                $1094 = $657;
                $656 = $1094;
                $1095 = $656;
                $1096 = HEAP32[$1095>>2]|0;
                $1097 = ($1091|0)!=($1096|0);
                if ($1097) {
                 __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$1089,1);
                 $655 = $1089;
                 $1098 = $655;
                 $1099 = (($1098) + 8|0);
                 $654 = $1099;
                 $1100 = $654;
                 $653 = $1100;
                 $1101 = $653;
                 $1102 = (($1089) + 4|0);
                 $1103 = HEAP32[$1102>>2]|0;
                 $652 = $1103;
                 $1104 = $652;
                 $1105 = $660;
                 $649 = $1101;
                 $650 = $1104;
                 $651 = $1105;
                 $1106 = $650;
                 $1107 = ($1106|0)==(0|0);
                 if (!($1107)) {
                  $1108 = $651;
                  $1109 = HEAP32[$1108>>2]|0;
                  HEAP32[$1106>>2] = $1109;
                 }
                 __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
                 $1110 = (($1089) + 4|0);
                 $1111 = HEAP32[$1110>>2]|0;
                 $1112 = (($1111) + 4|0);
                 HEAP32[$1110>>2] = $1112;
                } else {
                 $1113 = $660;
                 __THREW__ = 0;
                 invoke_vii(415,($1089|0),($1113|0));
                 $1114 = __THREW__; __THREW__ = 0;
                 $1115 = $1114&1;
                 if ($1115) {
                  label = 161;
                  break L59;
                 }
                }
                $1116 = $vp;
                __THREW__ = 0;
                $1117 = (invoke_ii(416,($1116|0))|0);
                $1118 = __THREW__; __THREW__ = 0;
                $1119 = $1118&1;
                if ($1119) {
                 label = 161;
                 break L59;
                }
                if (!($1117)) {
                 $1120 = $vp;
                 __THREW__ = 0;
                 $1121 = (invoke_ii(417,($1120|0))|0);
                 $1122 = __THREW__; __THREW__ = 0;
                 $1123 = $1122&1;
                 if ($1123) {
                  label = 161;
                  break L59;
                 }
                 __THREW__ = 0;
                 $1124 = (invoke_iii(418,($1121|0),0)|0);
                 $1125 = __THREW__; __THREW__ = 0;
                 $1126 = $1125&1;
                 if ($1126) {
                  label = 161;
                  break L59;
                 }
                 $1127 = +HEAPF32[$1124>>2];
                 __THREW__ = 0;
                 invoke_vid(419,($845|0),(+$1127));
                 $1128 = __THREW__; __THREW__ = 0;
                 $1129 = $1128&1;
                 if ($1129) {
                  label = 161;
                  break L59;
                 }
                 $647 = $str;
                 $648 = $845;
                 $1130 = $647;
                 $1131 = $648;
                 $646 = $1131;
                 $1132 = $646;
                 $645 = $1132;
                 $1133 = $645;
                 $644 = $1133;
                 $1134 = $644;
                 $643 = $1134;
                 $1135 = $643;
                 $642 = $1135;
                 $1136 = $642;
                 $1137 = HEAP8[$1136>>0]|0;
                 $1138 = $1137&255;
                 $1139 = $1138 & 1;
                 $1140 = ($1139|0)!=(0);
                 if ($1140) {
                  $636 = $1133;
                  $1141 = $636;
                  $635 = $1141;
                  $1142 = $635;
                  $634 = $1142;
                  $1143 = $634;
                  $1144 = (($1143) + 8|0);
                  $1145 = HEAP32[$1144>>2]|0;
                  $1152 = $1145;
                 } else {
                  $641 = $1133;
                  $1146 = $641;
                  $640 = $1146;
                  $1147 = $640;
                  $639 = $1147;
                  $1148 = $639;
                  $1149 = (($1148) + 1|0);
                  $638 = $1149;
                  $1150 = $638;
                  $637 = $1150;
                  $1151 = $637;
                  $1152 = $1151;
                 }
                 $633 = $1152;
                 $1153 = $633;
                 $1154 = $648;
                 $632 = $1154;
                 $1155 = $632;
                 $631 = $1155;
                 $1156 = $631;
                 $630 = $1156;
                 $1157 = $630;
                 $629 = $1157;
                 $1158 = $629;
                 $1159 = HEAP8[$1158>>0]|0;
                 $1160 = $1159&255;
                 $1161 = $1160 & 1;
                 $1162 = ($1161|0)!=(0);
                 if ($1162) {
                  $625 = $1155;
                  $1163 = $625;
                  $624 = $1163;
                  $1164 = $624;
                  $623 = $1164;
                  $1165 = $623;
                  $1166 = (($1165) + 4|0);
                  $1167 = HEAP32[$1166>>2]|0;
                  $1174 = $1167;
                 } else {
                  $628 = $1155;
                  $1168 = $628;
                  $627 = $1168;
                  $1169 = $627;
                  $626 = $1169;
                  $1170 = $626;
                  $1171 = HEAP8[$1170>>0]|0;
                  $1172 = $1171&255;
                  $1173 = $1172 >> 1;
                  $1174 = $1173;
                 }
                 __THREW__ = 0;
                 $1175 = (invoke_iiii(392,($1130|0),($1153|0),($1174|0))|0);
                 $1176 = __THREW__; __THREW__ = 0;
                 $1177 = $1176&1;
                 if ($1177) {
                  label = 162;
                  break;
                 }
                 __THREW__ = 0;
                 $1178 = (invoke_iii(409,($1175|0),(232|0))|0);
                 $1179 = __THREW__; __THREW__ = 0;
                 $1180 = $1179&1;
                 if ($1180) {
                  label = 162;
                  break;
                 }
                 $1181 = $vp;
                 __THREW__ = 0;
                 $1182 = (invoke_ii(417,($1181|0))|0);
                 $1183 = __THREW__; __THREW__ = 0;
                 $1184 = $1183&1;
                 if ($1184) {
                  label = 162;
                  break;
                 }
                 __THREW__ = 0;
                 $1185 = (invoke_iii(418,($1182|0),1)|0);
                 $1186 = __THREW__; __THREW__ = 0;
                 $1187 = $1186&1;
                 if ($1187) {
                  label = 162;
                  break;
                 }
                 $1188 = +HEAPF32[$1185>>2];
                 __THREW__ = 0;
                 invoke_vid(419,($846|0),(+$1188));
                 $1189 = __THREW__; __THREW__ = 0;
                 $1190 = $1189&1;
                 if ($1190) {
                  label = 162;
                  break;
                 }
                 $621 = $1178;
                 $622 = $846;
                 $1191 = $621;
                 $1192 = $622;
                 $620 = $1192;
                 $1193 = $620;
                 $619 = $1193;
                 $1194 = $619;
                 $618 = $1194;
                 $1195 = $618;
                 $617 = $1195;
                 $1196 = $617;
                 $616 = $1196;
                 $1197 = $616;
                 $1198 = HEAP8[$1197>>0]|0;
                 $1199 = $1198&255;
                 $1200 = $1199 & 1;
                 $1201 = ($1200|0)!=(0);
                 if ($1201) {
                  $610 = $1194;
                  $1202 = $610;
                  $609 = $1202;
                  $1203 = $609;
                  $608 = $1203;
                  $1204 = $608;
                  $1205 = (($1204) + 8|0);
                  $1206 = HEAP32[$1205>>2]|0;
                  $1213 = $1206;
                 } else {
                  $615 = $1194;
                  $1207 = $615;
                  $614 = $1207;
                  $1208 = $614;
                  $613 = $1208;
                  $1209 = $613;
                  $1210 = (($1209) + 1|0);
                  $612 = $1210;
                  $1211 = $612;
                  $611 = $1211;
                  $1212 = $611;
                  $1213 = $1212;
                 }
                 $607 = $1213;
                 $1214 = $607;
                 $1215 = $622;
                 $606 = $1215;
                 $1216 = $606;
                 $605 = $1216;
                 $1217 = $605;
                 $604 = $1217;
                 $1218 = $604;
                 $603 = $1218;
                 $1219 = $603;
                 $1220 = HEAP8[$1219>>0]|0;
                 $1221 = $1220&255;
                 $1222 = $1221 & 1;
                 $1223 = ($1222|0)!=(0);
                 if ($1223) {
                  $599 = $1216;
                  $1224 = $599;
                  $598 = $1224;
                  $1225 = $598;
                  $597 = $1225;
                  $1226 = $597;
                  $1227 = (($1226) + 4|0);
                  $1228 = HEAP32[$1227>>2]|0;
                  $1235 = $1228;
                 } else {
                  $602 = $1216;
                  $1229 = $602;
                  $601 = $1229;
                  $1230 = $601;
                  $600 = $1230;
                  $1231 = $600;
                  $1232 = HEAP8[$1231>>0]|0;
                  $1233 = $1232&255;
                  $1234 = $1233 >> 1;
                  $1235 = $1234;
                 }
                 __THREW__ = 0;
                 $1236 = (invoke_iiii(392,($1191|0),($1214|0),($1235|0))|0);
                 $1237 = __THREW__; __THREW__ = 0;
                 $1238 = $1237&1;
                 if ($1238) {
                  label = 163;
                  break;
                 }
                 __THREW__ = 0;
                 $1239 = (invoke_iii(409,($1236|0),(232|0))|0);
                 $1240 = __THREW__; __THREW__ = 0;
                 $1241 = $1240&1;
                 if ($1241) {
                  label = 163;
                  break;
                 }
                 $1242 = $vp;
                 __THREW__ = 0;
                 $1243 = (invoke_ii(417,($1242|0))|0);
                 $1244 = __THREW__; __THREW__ = 0;
                 $1245 = $1244&1;
                 if ($1245) {
                  label = 163;
                  break;
                 }
                 __THREW__ = 0;
                 $1246 = (invoke_iii(418,($1243|0),2)|0);
                 $1247 = __THREW__; __THREW__ = 0;
                 $1248 = $1247&1;
                 if ($1248) {
                  label = 163;
                  break;
                 }
                 $1249 = +HEAPF32[$1246>>2];
                 __THREW__ = 0;
                 invoke_vid(419,($847|0),(+$1249));
                 $1250 = __THREW__; __THREW__ = 0;
                 $1251 = $1250&1;
                 if ($1251) {
                  label = 163;
                  break;
                 }
                 $595 = $1239;
                 $596 = $847;
                 $1252 = $595;
                 $1253 = $596;
                 $594 = $1253;
                 $1254 = $594;
                 $593 = $1254;
                 $1255 = $593;
                 $592 = $1255;
                 $1256 = $592;
                 $591 = $1256;
                 $1257 = $591;
                 $590 = $1257;
                 $1258 = $590;
                 $1259 = HEAP8[$1258>>0]|0;
                 $1260 = $1259&255;
                 $1261 = $1260 & 1;
                 $1262 = ($1261|0)!=(0);
                 if ($1262) {
                  $584 = $1255;
                  $1263 = $584;
                  $583 = $1263;
                  $1264 = $583;
                  $582 = $1264;
                  $1265 = $582;
                  $1266 = (($1265) + 8|0);
                  $1267 = HEAP32[$1266>>2]|0;
                  $1274 = $1267;
                 } else {
                  $589 = $1255;
                  $1268 = $589;
                  $588 = $1268;
                  $1269 = $588;
                  $587 = $1269;
                  $1270 = $587;
                  $1271 = (($1270) + 1|0);
                  $586 = $1271;
                  $1272 = $586;
                  $585 = $1272;
                  $1273 = $585;
                  $1274 = $1273;
                 }
                 $581 = $1274;
                 $1275 = $581;
                 $1276 = $596;
                 $580 = $1276;
                 $1277 = $580;
                 $579 = $1277;
                 $1278 = $579;
                 $578 = $1278;
                 $1279 = $578;
                 $577 = $1279;
                 $1280 = $577;
                 $1281 = HEAP8[$1280>>0]|0;
                 $1282 = $1281&255;
                 $1283 = $1282 & 1;
                 $1284 = ($1283|0)!=(0);
                 if ($1284) {
                  $573 = $1277;
                  $1285 = $573;
                  $572 = $1285;
                  $1286 = $572;
                  $571 = $1286;
                  $1287 = $571;
                  $1288 = (($1287) + 4|0);
                  $1289 = HEAP32[$1288>>2]|0;
                  $1296 = $1289;
                 } else {
                  $576 = $1277;
                  $1290 = $576;
                  $575 = $1290;
                  $1291 = $575;
                  $574 = $1291;
                  $1292 = $574;
                  $1293 = HEAP8[$1292>>0]|0;
                  $1294 = $1293&255;
                  $1295 = $1294 >> 1;
                  $1296 = $1295;
                 }
                 __THREW__ = 0;
                 $1297 = (invoke_iiii(392,($1252|0),($1275|0),($1296|0))|0);
                 $1298 = __THREW__; __THREW__ = 0;
                 $1299 = $1298&1;
                 if ($1299) {
                  label = 164;
                  break;
                 }
                 __THREW__ = 0;
                 (invoke_iii(409,($1297|0),(232|0))|0);
                 $1300 = __THREW__; __THREW__ = 0;
                 $1301 = $1300&1;
                 if ($1301) {
                  label = 164;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_vi(396,($847|0));
                 $1302 = __THREW__; __THREW__ = 0;
                 $1303 = $1302&1;
                 if ($1303) {
                  label = 163;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_vi(396,($846|0));
                 $1304 = __THREW__; __THREW__ = 0;
                 $1305 = $1304&1;
                 if ($1305) {
                  label = 162;
                  break;
                 }
                 __THREW__ = 0;
                 invoke_vi(396,($845|0));
                 $1306 = __THREW__; __THREW__ = 0;
                 $1307 = $1306&1;
                 if ($1307) {
                  label = 161;
                  break L59;
                 }
                 $1308 = $837;
                 __THREW__ = 0;
                 $1309 = (invoke_ii(408,($1308|0))|0);
                 $1310 = __THREW__; __THREW__ = 0;
                 $1311 = $1310&1;
                 if ($1311) {
                  label = 161;
                  break L59;
                 }
                 do {
                  if ($1309) {
                   $1312 = $838;
                   $1313 = $1312 & 4;
                   $1314 = ($1313|0)!=(0);
                   if (!($1314)) {
                    break;
                   }
                   $1315 = $vp;
                   __THREW__ = 0;
                   $1316 = (invoke_ii(420,($1315|0))|0);
                   $1317 = __THREW__; __THREW__ = 0;
                   $1318 = $1317&1;
                   if ($1318) {
                    label = 161;
                    break L59;
                   }
                   __THREW__ = 0;
                   $1319 = (invoke_iii(421,($1316|0),0)|0);
                   $1320 = __THREW__; __THREW__ = 0;
                   $1321 = $1320&1;
                   if ($1321) {
                    label = 161;
                    break L59;
                   }
                   $1322 = HEAP8[$1319>>0]|0;
                   $1323 = $1322&255;
                   __THREW__ = 0;
                   invoke_vii(412,($848|0),($1323|0));
                   $1324 = __THREW__; __THREW__ = 0;
                   $1325 = $1324&1;
                   if ($1325) {
                    label = 161;
                    break L59;
                   }
                   $569 = $str;
                   $570 = $848;
                   $1326 = $569;
                   $1327 = $570;
                   $568 = $1327;
                   $1328 = $568;
                   $567 = $1328;
                   $1329 = $567;
                   $566 = $1329;
                   $1330 = $566;
                   $565 = $1330;
                   $1331 = $565;
                   $564 = $1331;
                   $1332 = $564;
                   $1333 = HEAP8[$1332>>0]|0;
                   $1334 = $1333&255;
                   $1335 = $1334 & 1;
                   $1336 = ($1335|0)!=(0);
                   if ($1336) {
                    $558 = $1329;
                    $1337 = $558;
                    $557 = $1337;
                    $1338 = $557;
                    $556 = $1338;
                    $1339 = $556;
                    $1340 = (($1339) + 8|0);
                    $1341 = HEAP32[$1340>>2]|0;
                    $1348 = $1341;
                   } else {
                    $563 = $1329;
                    $1342 = $563;
                    $562 = $1342;
                    $1343 = $562;
                    $561 = $1343;
                    $1344 = $561;
                    $1345 = (($1344) + 1|0);
                    $560 = $1345;
                    $1346 = $560;
                    $559 = $1346;
                    $1347 = $559;
                    $1348 = $1347;
                   }
                   $555 = $1348;
                   $1349 = $555;
                   $1350 = $570;
                   $554 = $1350;
                   $1351 = $554;
                   $553 = $1351;
                   $1352 = $553;
                   $552 = $1352;
                   $1353 = $552;
                   $551 = $1353;
                   $1354 = $551;
                   $1355 = HEAP8[$1354>>0]|0;
                   $1356 = $1355&255;
                   $1357 = $1356 & 1;
                   $1358 = ($1357|0)!=(0);
                   if ($1358) {
                    $547 = $1351;
                    $1359 = $547;
                    $546 = $1359;
                    $1360 = $546;
                    $545 = $1360;
                    $1361 = $545;
                    $1362 = (($1361) + 4|0);
                    $1363 = HEAP32[$1362>>2]|0;
                    $1370 = $1363;
                   } else {
                    $550 = $1351;
                    $1364 = $550;
                    $549 = $1364;
                    $1365 = $549;
                    $548 = $1365;
                    $1366 = $548;
                    $1367 = HEAP8[$1366>>0]|0;
                    $1368 = $1367&255;
                    $1369 = $1368 >> 1;
                    $1370 = $1369;
                   }
                   __THREW__ = 0;
                   $1371 = (invoke_iiii(392,($1326|0),($1349|0),($1370|0))|0);
                   $1372 = __THREW__; __THREW__ = 0;
                   $1373 = $1372&1;
                   if ($1373) {
                    label = 170;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1374 = (invoke_iii(409,($1371|0),(232|0))|0);
                   $1375 = __THREW__; __THREW__ = 0;
                   $1376 = $1375&1;
                   if ($1376) {
                    label = 170;
                    break L61;
                   }
                   $1377 = $vp;
                   __THREW__ = 0;
                   $1378 = (invoke_ii(420,($1377|0))|0);
                   $1379 = __THREW__; __THREW__ = 0;
                   $1380 = $1379&1;
                   if ($1380) {
                    label = 170;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1381 = (invoke_iii(421,($1378|0),1)|0);
                   $1382 = __THREW__; __THREW__ = 0;
                   $1383 = $1382&1;
                   if ($1383) {
                    label = 170;
                    break L61;
                   }
                   $1384 = HEAP8[$1381>>0]|0;
                   $1385 = $1384&255;
                   __THREW__ = 0;
                   invoke_vii(412,($849|0),($1385|0));
                   $1386 = __THREW__; __THREW__ = 0;
                   $1387 = $1386&1;
                   if ($1387) {
                    label = 170;
                    break L61;
                   }
                   $543 = $1374;
                   $544 = $849;
                   $1388 = $543;
                   $1389 = $544;
                   $542 = $1389;
                   $1390 = $542;
                   $541 = $1390;
                   $1391 = $541;
                   $540 = $1391;
                   $1392 = $540;
                   $539 = $1392;
                   $1393 = $539;
                   $538 = $1393;
                   $1394 = $538;
                   $1395 = HEAP8[$1394>>0]|0;
                   $1396 = $1395&255;
                   $1397 = $1396 & 1;
                   $1398 = ($1397|0)!=(0);
                   if ($1398) {
                    $532 = $1391;
                    $1399 = $532;
                    $531 = $1399;
                    $1400 = $531;
                    $530 = $1400;
                    $1401 = $530;
                    $1402 = (($1401) + 8|0);
                    $1403 = HEAP32[$1402>>2]|0;
                    $1410 = $1403;
                   } else {
                    $537 = $1391;
                    $1404 = $537;
                    $536 = $1404;
                    $1405 = $536;
                    $535 = $1405;
                    $1406 = $535;
                    $1407 = (($1406) + 1|0);
                    $534 = $1407;
                    $1408 = $534;
                    $533 = $1408;
                    $1409 = $533;
                    $1410 = $1409;
                   }
                   $529 = $1410;
                   $1411 = $529;
                   $1412 = $544;
                   $528 = $1412;
                   $1413 = $528;
                   $527 = $1413;
                   $1414 = $527;
                   $526 = $1414;
                   $1415 = $526;
                   $525 = $1415;
                   $1416 = $525;
                   $1417 = HEAP8[$1416>>0]|0;
                   $1418 = $1417&255;
                   $1419 = $1418 & 1;
                   $1420 = ($1419|0)!=(0);
                   if ($1420) {
                    $521 = $1413;
                    $1421 = $521;
                    $520 = $1421;
                    $1422 = $520;
                    $519 = $1422;
                    $1423 = $519;
                    $1424 = (($1423) + 4|0);
                    $1425 = HEAP32[$1424>>2]|0;
                    $1432 = $1425;
                   } else {
                    $524 = $1413;
                    $1426 = $524;
                    $523 = $1426;
                    $1427 = $523;
                    $522 = $1427;
                    $1428 = $522;
                    $1429 = HEAP8[$1428>>0]|0;
                    $1430 = $1429&255;
                    $1431 = $1430 >> 1;
                    $1432 = $1431;
                   }
                   __THREW__ = 0;
                   $1433 = (invoke_iiii(392,($1388|0),($1411|0),($1432|0))|0);
                   $1434 = __THREW__; __THREW__ = 0;
                   $1435 = $1434&1;
                   if ($1435) {
                    label = 171;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1436 = (invoke_iii(409,($1433|0),(232|0))|0);
                   $1437 = __THREW__; __THREW__ = 0;
                   $1438 = $1437&1;
                   if ($1438) {
                    label = 171;
                    break L61;
                   }
                   $1439 = $vp;
                   __THREW__ = 0;
                   $1440 = (invoke_ii(420,($1439|0))|0);
                   $1441 = __THREW__; __THREW__ = 0;
                   $1442 = $1441&1;
                   if ($1442) {
                    label = 171;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1443 = (invoke_iii(421,($1440|0),2)|0);
                   $1444 = __THREW__; __THREW__ = 0;
                   $1445 = $1444&1;
                   if ($1445) {
                    label = 171;
                    break L61;
                   }
                   $1446 = HEAP8[$1443>>0]|0;
                   $1447 = $1446&255;
                   __THREW__ = 0;
                   invoke_vii(412,($850|0),($1447|0));
                   $1448 = __THREW__; __THREW__ = 0;
                   $1449 = $1448&1;
                   if ($1449) {
                    label = 171;
                    break L61;
                   }
                   $517 = $1436;
                   $518 = $850;
                   $1450 = $517;
                   $1451 = $518;
                   $516 = $1451;
                   $1452 = $516;
                   $515 = $1452;
                   $1453 = $515;
                   $514 = $1453;
                   $1454 = $514;
                   $513 = $1454;
                   $1455 = $513;
                   $512 = $1455;
                   $1456 = $512;
                   $1457 = HEAP8[$1456>>0]|0;
                   $1458 = $1457&255;
                   $1459 = $1458 & 1;
                   $1460 = ($1459|0)!=(0);
                   if ($1460) {
                    $506 = $1453;
                    $1461 = $506;
                    $505 = $1461;
                    $1462 = $505;
                    $504 = $1462;
                    $1463 = $504;
                    $1464 = (($1463) + 8|0);
                    $1465 = HEAP32[$1464>>2]|0;
                    $1472 = $1465;
                   } else {
                    $511 = $1453;
                    $1466 = $511;
                    $510 = $1466;
                    $1467 = $510;
                    $509 = $1467;
                    $1468 = $509;
                    $1469 = (($1468) + 1|0);
                    $508 = $1469;
                    $1470 = $508;
                    $507 = $1470;
                    $1471 = $507;
                    $1472 = $1471;
                   }
                   $503 = $1472;
                   $1473 = $503;
                   $1474 = $518;
                   $502 = $1474;
                   $1475 = $502;
                   $501 = $1475;
                   $1476 = $501;
                   $500 = $1476;
                   $1477 = $500;
                   $499 = $1477;
                   $1478 = $499;
                   $1479 = HEAP8[$1478>>0]|0;
                   $1480 = $1479&255;
                   $1481 = $1480 & 1;
                   $1482 = ($1481|0)!=(0);
                   if ($1482) {
                    $495 = $1475;
                    $1483 = $495;
                    $494 = $1483;
                    $1484 = $494;
                    $493 = $1484;
                    $1485 = $493;
                    $1486 = (($1485) + 4|0);
                    $1487 = HEAP32[$1486>>2]|0;
                    $1494 = $1487;
                   } else {
                    $498 = $1475;
                    $1488 = $498;
                    $497 = $1488;
                    $1489 = $497;
                    $496 = $1489;
                    $1490 = $496;
                    $1491 = HEAP8[$1490>>0]|0;
                    $1492 = $1491&255;
                    $1493 = $1492 >> 1;
                    $1494 = $1493;
                   }
                   __THREW__ = 0;
                   $1495 = (invoke_iiii(392,($1450|0),($1473|0),($1494|0))|0);
                   $1496 = __THREW__; __THREW__ = 0;
                   $1497 = $1496&1;
                   if ($1497) {
                    label = 172;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1498 = (invoke_iii(409,($1495|0),(232|0))|0);
                   $1499 = __THREW__; __THREW__ = 0;
                   $1500 = $1499&1;
                   if ($1500) {
                    label = 172;
                    break L61;
                   }
                   $1501 = $vp;
                   __THREW__ = 0;
                   $1502 = (invoke_ii(420,($1501|0))|0);
                   $1503 = __THREW__; __THREW__ = 0;
                   $1504 = $1503&1;
                   if ($1504) {
                    label = 172;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1505 = (invoke_iii(421,($1502|0),3)|0);
                   $1506 = __THREW__; __THREW__ = 0;
                   $1507 = $1506&1;
                   if ($1507) {
                    label = 172;
                    break L61;
                   }
                   $1508 = HEAP8[$1505>>0]|0;
                   $1509 = $1508&255;
                   __THREW__ = 0;
                   invoke_vii(412,($851|0),($1509|0));
                   $1510 = __THREW__; __THREW__ = 0;
                   $1511 = $1510&1;
                   if ($1511) {
                    label = 172;
                    break L61;
                   }
                   $491 = $1498;
                   $492 = $851;
                   $1512 = $491;
                   $1513 = $492;
                   $490 = $1513;
                   $1514 = $490;
                   $489 = $1514;
                   $1515 = $489;
                   $488 = $1515;
                   $1516 = $488;
                   $487 = $1516;
                   $1517 = $487;
                   $486 = $1517;
                   $1518 = $486;
                   $1519 = HEAP8[$1518>>0]|0;
                   $1520 = $1519&255;
                   $1521 = $1520 & 1;
                   $1522 = ($1521|0)!=(0);
                   if ($1522) {
                    $480 = $1515;
                    $1523 = $480;
                    $479 = $1523;
                    $1524 = $479;
                    $478 = $1524;
                    $1525 = $478;
                    $1526 = (($1525) + 8|0);
                    $1527 = HEAP32[$1526>>2]|0;
                    $1534 = $1527;
                   } else {
                    $485 = $1515;
                    $1528 = $485;
                    $484 = $1528;
                    $1529 = $484;
                    $483 = $1529;
                    $1530 = $483;
                    $1531 = (($1530) + 1|0);
                    $482 = $1531;
                    $1532 = $482;
                    $481 = $1532;
                    $1533 = $481;
                    $1534 = $1533;
                   }
                   $477 = $1534;
                   $1535 = $477;
                   $1536 = $492;
                   $476 = $1536;
                   $1537 = $476;
                   $475 = $1537;
                   $1538 = $475;
                   $474 = $1538;
                   $1539 = $474;
                   $473 = $1539;
                   $1540 = $473;
                   $1541 = HEAP8[$1540>>0]|0;
                   $1542 = $1541&255;
                   $1543 = $1542 & 1;
                   $1544 = ($1543|0)!=(0);
                   if ($1544) {
                    $469 = $1537;
                    $1545 = $469;
                    $468 = $1545;
                    $1546 = $468;
                    $467 = $1546;
                    $1547 = $467;
                    $1548 = (($1547) + 4|0);
                    $1549 = HEAP32[$1548>>2]|0;
                    $1556 = $1549;
                   } else {
                    $472 = $1537;
                    $1550 = $472;
                    $471 = $1550;
                    $1551 = $471;
                    $470 = $1551;
                    $1552 = $470;
                    $1553 = HEAP8[$1552>>0]|0;
                    $1554 = $1553&255;
                    $1555 = $1554 >> 1;
                    $1556 = $1555;
                   }
                   __THREW__ = 0;
                   $1557 = (invoke_iiii(392,($1512|0),($1535|0),($1556|0))|0);
                   $1558 = __THREW__; __THREW__ = 0;
                   $1559 = $1558&1;
                   if ($1559) {
                    label = 173;
                    break L61;
                   }
                   __THREW__ = 0;
                   (invoke_iii(409,($1557|0),(232|0))|0);
                   $1560 = __THREW__; __THREW__ = 0;
                   $1561 = $1560&1;
                   if ($1561) {
                    label = 173;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($851|0));
                   $1562 = __THREW__; __THREW__ = 0;
                   $1563 = $1562&1;
                   if ($1563) {
                    label = 172;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($850|0));
                   $1564 = __THREW__; __THREW__ = 0;
                   $1565 = $1564&1;
                   if ($1565) {
                    label = 171;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($849|0));
                   $1566 = __THREW__; __THREW__ = 0;
                   $1567 = $1566&1;
                   if ($1567) {
                    label = 170;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($848|0));
                   $1568 = __THREW__; __THREW__ = 0;
                   $1569 = $1568&1;
                   if ($1569) {
                    label = 161;
                    break L59;
                   }
                  }
                 } while(0);
                 $1608 = $837;
                 __THREW__ = 0;
                 $1609 = (invoke_ii(422,($1608|0))|0);
                 $1610 = __THREW__; __THREW__ = 0;
                 $1611 = $1610&1;
                 if ($1611) {
                  label = 161;
                  break L59;
                 }
                 do {
                  if ($1609) {
                   $1612 = $838;
                   $1613 = $1612 & 16;
                   $1614 = ($1613|0)!=(0);
                   if (!($1614)) {
                    break;
                   }
                   $1615 = $vp;
                   __THREW__ = 0;
                   $1616 = (invoke_ii(423,($1615|0))|0);
                   $1617 = __THREW__; __THREW__ = 0;
                   $1618 = $1617&1;
                   if ($1618) {
                    label = 161;
                    break L59;
                   }
                   __THREW__ = 0;
                   $1619 = (invoke_iii(418,($1616|0),0)|0);
                   $1620 = __THREW__; __THREW__ = 0;
                   $1621 = $1620&1;
                   if ($1621) {
                    label = 161;
                    break L59;
                   }
                   $1622 = +HEAPF32[$1619>>2];
                   $1623 = $1622;
                   __THREW__ = 0;
                   invoke_vid(424,($852|0),(+$1623));
                   $1624 = __THREW__; __THREW__ = 0;
                   $1625 = $1624&1;
                   if ($1625) {
                    label = 161;
                    break L59;
                   }
                   $465 = $str;
                   $466 = $852;
                   $1626 = $465;
                   $1627 = $466;
                   $464 = $1627;
                   $1628 = $464;
                   $463 = $1628;
                   $1629 = $463;
                   $462 = $1629;
                   $1630 = $462;
                   $461 = $1630;
                   $1631 = $461;
                   $460 = $1631;
                   $1632 = $460;
                   $1633 = HEAP8[$1632>>0]|0;
                   $1634 = $1633&255;
                   $1635 = $1634 & 1;
                   $1636 = ($1635|0)!=(0);
                   if ($1636) {
                    $454 = $1629;
                    $1637 = $454;
                    $453 = $1637;
                    $1638 = $453;
                    $452 = $1638;
                    $1639 = $452;
                    $1640 = (($1639) + 8|0);
                    $1641 = HEAP32[$1640>>2]|0;
                    $1648 = $1641;
                   } else {
                    $459 = $1629;
                    $1642 = $459;
                    $458 = $1642;
                    $1643 = $458;
                    $457 = $1643;
                    $1644 = $457;
                    $1645 = (($1644) + 1|0);
                    $456 = $1645;
                    $1646 = $456;
                    $455 = $1646;
                    $1647 = $455;
                    $1648 = $1647;
                   }
                   $451 = $1648;
                   $1649 = $451;
                   $1650 = $466;
                   $450 = $1650;
                   $1651 = $450;
                   $449 = $1651;
                   $1652 = $449;
                   $448 = $1652;
                   $1653 = $448;
                   $447 = $1653;
                   $1654 = $447;
                   $1655 = HEAP8[$1654>>0]|0;
                   $1656 = $1655&255;
                   $1657 = $1656 & 1;
                   $1658 = ($1657|0)!=(0);
                   if ($1658) {
                    $443 = $1651;
                    $1659 = $443;
                    $442 = $1659;
                    $1660 = $442;
                    $441 = $1660;
                    $1661 = $441;
                    $1662 = (($1661) + 4|0);
                    $1663 = HEAP32[$1662>>2]|0;
                    $1670 = $1663;
                   } else {
                    $446 = $1651;
                    $1664 = $446;
                    $445 = $1664;
                    $1665 = $445;
                    $444 = $1665;
                    $1666 = $444;
                    $1667 = HEAP8[$1666>>0]|0;
                    $1668 = $1667&255;
                    $1669 = $1668 >> 1;
                    $1670 = $1669;
                   }
                   __THREW__ = 0;
                   $1671 = (invoke_iiii(392,($1626|0),($1649|0),($1670|0))|0);
                   $1672 = __THREW__; __THREW__ = 0;
                   $1673 = $1672&1;
                   if ($1673) {
                    label = 224;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1674 = (invoke_iii(409,($1671|0),(232|0))|0);
                   $1675 = __THREW__; __THREW__ = 0;
                   $1676 = $1675&1;
                   if ($1676) {
                    label = 224;
                    break L61;
                   }
                   $1677 = $vp;
                   __THREW__ = 0;
                   $1678 = (invoke_ii(423,($1677|0))|0);
                   $1679 = __THREW__; __THREW__ = 0;
                   $1680 = $1679&1;
                   if ($1680) {
                    label = 224;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1681 = (invoke_iii(418,($1678|0),1)|0);
                   $1682 = __THREW__; __THREW__ = 0;
                   $1683 = $1682&1;
                   if ($1683) {
                    label = 224;
                    break L61;
                   }
                   $1684 = +HEAPF32[$1681>>2];
                   $1685 = $1684;
                   __THREW__ = 0;
                   invoke_vid(424,($853|0),(+$1685));
                   $1686 = __THREW__; __THREW__ = 0;
                   $1687 = $1686&1;
                   if ($1687) {
                    label = 224;
                    break L61;
                   }
                   $439 = $1674;
                   $440 = $853;
                   $1688 = $439;
                   $1689 = $440;
                   $438 = $1689;
                   $1690 = $438;
                   $437 = $1690;
                   $1691 = $437;
                   $436 = $1691;
                   $1692 = $436;
                   $435 = $1692;
                   $1693 = $435;
                   $434 = $1693;
                   $1694 = $434;
                   $1695 = HEAP8[$1694>>0]|0;
                   $1696 = $1695&255;
                   $1697 = $1696 & 1;
                   $1698 = ($1697|0)!=(0);
                   if ($1698) {
                    $428 = $1691;
                    $1699 = $428;
                    $427 = $1699;
                    $1700 = $427;
                    $426 = $1700;
                    $1701 = $426;
                    $1702 = (($1701) + 8|0);
                    $1703 = HEAP32[$1702>>2]|0;
                    $1710 = $1703;
                   } else {
                    $433 = $1691;
                    $1704 = $433;
                    $432 = $1704;
                    $1705 = $432;
                    $431 = $1705;
                    $1706 = $431;
                    $1707 = (($1706) + 1|0);
                    $430 = $1707;
                    $1708 = $430;
                    $429 = $1708;
                    $1709 = $429;
                    $1710 = $1709;
                   }
                   $425 = $1710;
                   $1711 = $425;
                   $1712 = $440;
                   $424 = $1712;
                   $1713 = $424;
                   $423 = $1713;
                   $1714 = $423;
                   $422 = $1714;
                   $1715 = $422;
                   $421 = $1715;
                   $1716 = $421;
                   $1717 = HEAP8[$1716>>0]|0;
                   $1718 = $1717&255;
                   $1719 = $1718 & 1;
                   $1720 = ($1719|0)!=(0);
                   if ($1720) {
                    $417 = $1713;
                    $1721 = $417;
                    $416 = $1721;
                    $1722 = $416;
                    $415 = $1722;
                    $1723 = $415;
                    $1724 = (($1723) + 4|0);
                    $1725 = HEAP32[$1724>>2]|0;
                    $1732 = $1725;
                   } else {
                    $420 = $1713;
                    $1726 = $420;
                    $419 = $1726;
                    $1727 = $419;
                    $418 = $1727;
                    $1728 = $418;
                    $1729 = HEAP8[$1728>>0]|0;
                    $1730 = $1729&255;
                    $1731 = $1730 >> 1;
                    $1732 = $1731;
                   }
                   __THREW__ = 0;
                   $1733 = (invoke_iiii(392,($1688|0),($1711|0),($1732|0))|0);
                   $1734 = __THREW__; __THREW__ = 0;
                   $1735 = $1734&1;
                   if ($1735) {
                    label = 225;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1736 = (invoke_iii(409,($1733|0),(232|0))|0);
                   $1737 = __THREW__; __THREW__ = 0;
                   $1738 = $1737&1;
                   if ($1738) {
                    label = 225;
                    break L61;
                   }
                   $1739 = $vp;
                   __THREW__ = 0;
                   $1740 = (invoke_ii(423,($1739|0))|0);
                   $1741 = __THREW__; __THREW__ = 0;
                   $1742 = $1741&1;
                   if ($1742) {
                    label = 225;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1743 = (invoke_iii(418,($1740|0),2)|0);
                   $1744 = __THREW__; __THREW__ = 0;
                   $1745 = $1744&1;
                   if ($1745) {
                    label = 225;
                    break L61;
                   }
                   $1746 = +HEAPF32[$1743>>2];
                   $1747 = $1746;
                   __THREW__ = 0;
                   invoke_vid(424,($854|0),(+$1747));
                   $1748 = __THREW__; __THREW__ = 0;
                   $1749 = $1748&1;
                   if ($1749) {
                    label = 225;
                    break L61;
                   }
                   $413 = $1736;
                   $414 = $854;
                   $1750 = $413;
                   $1751 = $414;
                   $412 = $1751;
                   $1752 = $412;
                   $411 = $1752;
                   $1753 = $411;
                   $410 = $1753;
                   $1754 = $410;
                   $409 = $1754;
                   $1755 = $409;
                   $408 = $1755;
                   $1756 = $408;
                   $1757 = HEAP8[$1756>>0]|0;
                   $1758 = $1757&255;
                   $1759 = $1758 & 1;
                   $1760 = ($1759|0)!=(0);
                   if ($1760) {
                    $402 = $1753;
                    $1761 = $402;
                    $401 = $1761;
                    $1762 = $401;
                    $400 = $1762;
                    $1763 = $400;
                    $1764 = (($1763) + 8|0);
                    $1765 = HEAP32[$1764>>2]|0;
                    $1772 = $1765;
                   } else {
                    $407 = $1753;
                    $1766 = $407;
                    $406 = $1766;
                    $1767 = $406;
                    $405 = $1767;
                    $1768 = $405;
                    $1769 = (($1768) + 1|0);
                    $404 = $1769;
                    $1770 = $404;
                    $403 = $1770;
                    $1771 = $403;
                    $1772 = $1771;
                   }
                   $399 = $1772;
                   $1773 = $399;
                   $1774 = $414;
                   $398 = $1774;
                   $1775 = $398;
                   $397 = $1775;
                   $1776 = $397;
                   $396 = $1776;
                   $1777 = $396;
                   $395 = $1777;
                   $1778 = $395;
                   $1779 = HEAP8[$1778>>0]|0;
                   $1780 = $1779&255;
                   $1781 = $1780 & 1;
                   $1782 = ($1781|0)!=(0);
                   if ($1782) {
                    $391 = $1775;
                    $1783 = $391;
                    $390 = $1783;
                    $1784 = $390;
                    $389 = $1784;
                    $1785 = $389;
                    $1786 = (($1785) + 4|0);
                    $1787 = HEAP32[$1786>>2]|0;
                    $1794 = $1787;
                   } else {
                    $394 = $1775;
                    $1788 = $394;
                    $393 = $1788;
                    $1789 = $393;
                    $392 = $1789;
                    $1790 = $392;
                    $1791 = HEAP8[$1790>>0]|0;
                    $1792 = $1791&255;
                    $1793 = $1792 >> 1;
                    $1794 = $1793;
                   }
                   __THREW__ = 0;
                   $1795 = (invoke_iiii(392,($1750|0),($1773|0),($1794|0))|0);
                   $1796 = __THREW__; __THREW__ = 0;
                   $1797 = $1796&1;
                   if ($1797) {
                    label = 226;
                    break L61;
                   }
                   __THREW__ = 0;
                   (invoke_iii(409,($1795|0),(232|0))|0);
                   $1798 = __THREW__; __THREW__ = 0;
                   $1799 = $1798&1;
                   if ($1799) {
                    label = 226;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($854|0));
                   $1800 = __THREW__; __THREW__ = 0;
                   $1801 = $1800&1;
                   if ($1801) {
                    label = 225;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($853|0));
                   $1802 = __THREW__; __THREW__ = 0;
                   $1803 = $1802&1;
                   if ($1803) {
                    label = 224;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($852|0));
                   $1804 = __THREW__; __THREW__ = 0;
                   $1805 = $1804&1;
                   if ($1805) {
                    label = 161;
                    break L59;
                   }
                  }
                 } while(0);
                 $1818 = $837;
                 __THREW__ = 0;
                 $1819 = (invoke_ii(410,($1818|0))|0);
                 $1820 = __THREW__; __THREW__ = 0;
                 $1821 = $1820&1;
                 if ($1821) {
                  label = 161;
                  break L59;
                 }
                 do {
                  if ($1819) {
                   $1822 = $838;
                   $1823 = $1822 & 32;
                   $1824 = ($1823|0)!=(0);
                   if (!($1824)) {
                    break;
                   }
                   $1825 = $vp;
                   __THREW__ = 0;
                   $1826 = (invoke_ii(425,($1825|0))|0);
                   $1827 = __THREW__; __THREW__ = 0;
                   $1828 = $1827&1;
                   if ($1828) {
                    label = 161;
                    break L59;
                   }
                   __THREW__ = 0;
                   $1829 = (invoke_ii(426,($1826|0))|0);
                   $1830 = __THREW__; __THREW__ = 0;
                   $1831 = $1830&1;
                   if ($1831) {
                    label = 161;
                    break L59;
                   }
                   $1832 = +HEAPF32[$1829>>2];
                   __THREW__ = 0;
                   invoke_vid(419,($855|0),(+$1832));
                   $1833 = __THREW__; __THREW__ = 0;
                   $1834 = $1833&1;
                   if ($1834) {
                    label = 161;
                    break L59;
                   }
                   $387 = $str;
                   $388 = $855;
                   $1835 = $387;
                   $1836 = $388;
                   $386 = $1836;
                   $1837 = $386;
                   $385 = $1837;
                   $1838 = $385;
                   $384 = $1838;
                   $1839 = $384;
                   $383 = $1839;
                   $1840 = $383;
                   $382 = $1840;
                   $1841 = $382;
                   $1842 = HEAP8[$1841>>0]|0;
                   $1843 = $1842&255;
                   $1844 = $1843 & 1;
                   $1845 = ($1844|0)!=(0);
                   if ($1845) {
                    $376 = $1838;
                    $1846 = $376;
                    $375 = $1846;
                    $1847 = $375;
                    $374 = $1847;
                    $1848 = $374;
                    $1849 = (($1848) + 8|0);
                    $1850 = HEAP32[$1849>>2]|0;
                    $1857 = $1850;
                   } else {
                    $381 = $1838;
                    $1851 = $381;
                    $380 = $1851;
                    $1852 = $380;
                    $379 = $1852;
                    $1853 = $379;
                    $1854 = (($1853) + 1|0);
                    $378 = $1854;
                    $1855 = $378;
                    $377 = $1855;
                    $1856 = $377;
                    $1857 = $1856;
                   }
                   $373 = $1857;
                   $1858 = $373;
                   $1859 = $388;
                   $372 = $1859;
                   $1860 = $372;
                   $371 = $1860;
                   $1861 = $371;
                   $370 = $1861;
                   $1862 = $370;
                   $369 = $1862;
                   $1863 = $369;
                   $1864 = HEAP8[$1863>>0]|0;
                   $1865 = $1864&255;
                   $1866 = $1865 & 1;
                   $1867 = ($1866|0)!=(0);
                   if ($1867) {
                    $365 = $1860;
                    $1868 = $365;
                    $364 = $1868;
                    $1869 = $364;
                    $363 = $1869;
                    $1870 = $363;
                    $1871 = (($1870) + 4|0);
                    $1872 = HEAP32[$1871>>2]|0;
                    $1879 = $1872;
                   } else {
                    $368 = $1860;
                    $1873 = $368;
                    $367 = $1873;
                    $1874 = $367;
                    $366 = $1874;
                    $1875 = $366;
                    $1876 = HEAP8[$1875>>0]|0;
                    $1877 = $1876&255;
                    $1878 = $1877 >> 1;
                    $1879 = $1878;
                   }
                   __THREW__ = 0;
                   $1880 = (invoke_iiii(392,($1835|0),($1858|0),($1879|0))|0);
                   $1881 = __THREW__; __THREW__ = 0;
                   $1882 = $1881&1;
                   if ($1882) {
                    label = 262;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1883 = (invoke_iii(409,($1880|0),(232|0))|0);
                   $1884 = __THREW__; __THREW__ = 0;
                   $1885 = $1884&1;
                   if ($1885) {
                    label = 262;
                    break L61;
                   }
                   $1886 = $vp;
                   __THREW__ = 0;
                   $1887 = (invoke_ii(425,($1886|0))|0);
                   $1888 = __THREW__; __THREW__ = 0;
                   $1889 = $1888&1;
                   if ($1889) {
                    label = 262;
                    break L61;
                   }
                   __THREW__ = 0;
                   $1890 = (invoke_ii(427,($1887|0))|0);
                   $1891 = __THREW__; __THREW__ = 0;
                   $1892 = $1891&1;
                   if ($1892) {
                    label = 262;
                    break L61;
                   }
                   $1893 = +HEAPF32[$1890>>2];
                   __THREW__ = 0;
                   invoke_vid(419,($856|0),(+$1893));
                   $1894 = __THREW__; __THREW__ = 0;
                   $1895 = $1894&1;
                   if ($1895) {
                    label = 262;
                    break L61;
                   }
                   $361 = $1883;
                   $362 = $856;
                   $1896 = $361;
                   $1897 = $362;
                   $360 = $1897;
                   $1898 = $360;
                   $359 = $1898;
                   $1899 = $359;
                   $358 = $1899;
                   $1900 = $358;
                   $357 = $1900;
                   $1901 = $357;
                   $356 = $1901;
                   $1902 = $356;
                   $1903 = HEAP8[$1902>>0]|0;
                   $1904 = $1903&255;
                   $1905 = $1904 & 1;
                   $1906 = ($1905|0)!=(0);
                   if ($1906) {
                    $350 = $1899;
                    $1907 = $350;
                    $349 = $1907;
                    $1908 = $349;
                    $348 = $1908;
                    $1909 = $348;
                    $1910 = (($1909) + 8|0);
                    $1911 = HEAP32[$1910>>2]|0;
                    $1918 = $1911;
                   } else {
                    $355 = $1899;
                    $1912 = $355;
                    $354 = $1912;
                    $1913 = $354;
                    $353 = $1913;
                    $1914 = $353;
                    $1915 = (($1914) + 1|0);
                    $352 = $1915;
                    $1916 = $352;
                    $351 = $1916;
                    $1917 = $351;
                    $1918 = $1917;
                   }
                   $347 = $1918;
                   $1919 = $347;
                   $1920 = $362;
                   $346 = $1920;
                   $1921 = $346;
                   $345 = $1921;
                   $1922 = $345;
                   $344 = $1922;
                   $1923 = $344;
                   $343 = $1923;
                   $1924 = $343;
                   $1925 = HEAP8[$1924>>0]|0;
                   $1926 = $1925&255;
                   $1927 = $1926 & 1;
                   $1928 = ($1927|0)!=(0);
                   if ($1928) {
                    $339 = $1921;
                    $1929 = $339;
                    $338 = $1929;
                    $1930 = $338;
                    $337 = $1930;
                    $1931 = $337;
                    $1932 = (($1931) + 4|0);
                    $1933 = HEAP32[$1932>>2]|0;
                    $1940 = $1933;
                   } else {
                    $342 = $1921;
                    $1934 = $342;
                    $341 = $1934;
                    $1935 = $341;
                    $340 = $1935;
                    $1936 = $340;
                    $1937 = HEAP8[$1936>>0]|0;
                    $1938 = $1937&255;
                    $1939 = $1938 >> 1;
                    $1940 = $1939;
                   }
                   __THREW__ = 0;
                   $1941 = (invoke_iiii(392,($1896|0),($1919|0),($1940|0))|0);
                   $1942 = __THREW__; __THREW__ = 0;
                   $1943 = $1942&1;
                   if ($1943) {
                    label = 263;
                    break L61;
                   }
                   __THREW__ = 0;
                   (invoke_iii(409,($1941|0),(232|0))|0);
                   $1944 = __THREW__; __THREW__ = 0;
                   $1945 = $1944&1;
                   if ($1945) {
                    label = 263;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($856|0));
                   $1946 = __THREW__; __THREW__ = 0;
                   $1947 = $1946&1;
                   if ($1947) {
                    label = 262;
                    break L61;
                   }
                   __THREW__ = 0;
                   invoke_vi(396,($855|0));
                   $1948 = __THREW__; __THREW__ = 0;
                   $1949 = $1948&1;
                   if ($1949) {
                    label = 161;
                    break L59;
                   }
                  }
                 } while(0);
                 __THREW__ = 0;
                 (invoke_iii(409,($str|0),(248|0))|0);
                 $1958 = __THREW__; __THREW__ = 0;
                 $1959 = $1958&1;
                 if ($1959) {
                  label = 161;
                  break L59;
                 }
                 $1960 = $j;
                 $1961 = $vp;
                 __THREW__ = 0;
                 $1962 = (invoke_ii(414,($1961|0))|0);
                 $1963 = __THREW__; __THREW__ = 0;
                 $1964 = $1963&1;
                 if ($1964) {
                  label = 161;
                  break L59;
                 }
                 HEAP32[$1962>>2] = $1960;
                 $1965 = $j;
                 $1966 = (($1965) + 1)|0;
                 $j = $1966;
                }
                $336 = $vi;
                $1967 = $336;
                $1968 = HEAP32[$1967>>2]|0;
                $1969 = (($1968) + 36|0);
                HEAP32[$1967>>2] = $1969;
               }
               switch (label|0) {
                case 162: {
                 $1580 = ___cxa_find_matching_catch()|0;
                 $1581 = tempRet0;
                 $839 = $1580;
                 $840 = $1581;
                 label = 168;
                 break;
                }
                case 163: {
                 $1582 = ___cxa_find_matching_catch()|0;
                 $1583 = tempRet0;
                 $839 = $1582;
                 $840 = $1583;
                 label = 166;
                 break;
                }
                case 164: {
                 $1584 = ___cxa_find_matching_catch()|0;
                 $1585 = tempRet0;
                 $839 = $1584;
                 $840 = $1585;
                 __THREW__ = 0;
                 invoke_vi(396,($847|0));
                 $1586 = __THREW__; __THREW__ = 0;
                 $1587 = $1586&1;
                 if ($1587) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 166;
                  break;
                 }
                 break;
                }
                case 170: {
                 $1592 = ___cxa_find_matching_catch()|0;
                 $1593 = tempRet0;
                 $839 = $1592;
                 $840 = $1593;
                 break;
                }
                case 171: {
                 $1594 = ___cxa_find_matching_catch()|0;
                 $1595 = tempRet0;
                 $839 = $1594;
                 $840 = $1595;
                 label = 177;
                 break;
                }
                case 172: {
                 $1596 = ___cxa_find_matching_catch()|0;
                 $1597 = tempRet0;
                 $839 = $1596;
                 $840 = $1597;
                 label = 175;
                 break;
                }
                case 173: {
                 $1598 = ___cxa_find_matching_catch()|0;
                 $1599 = tempRet0;
                 $839 = $1598;
                 $840 = $1599;
                 __THREW__ = 0;
                 invoke_vi(396,($851|0));
                 $1600 = __THREW__; __THREW__ = 0;
                 $1601 = $1600&1;
                 if ($1601) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 175;
                  break;
                 }
                 break;
                }
                case 224: {
                 $1806 = ___cxa_find_matching_catch()|0;
                 $1807 = tempRet0;
                 $839 = $1806;
                 $840 = $1807;
                 label = 230;
                 break;
                }
                case 225: {
                 $1808 = ___cxa_find_matching_catch()|0;
                 $1809 = tempRet0;
                 $839 = $1808;
                 $840 = $1809;
                 label = 228;
                 break;
                }
                case 226: {
                 $1810 = ___cxa_find_matching_catch()|0;
                 $1811 = tempRet0;
                 $839 = $1810;
                 $840 = $1811;
                 __THREW__ = 0;
                 invoke_vi(396,($854|0));
                 $1812 = __THREW__; __THREW__ = 0;
                 $1813 = $1812&1;
                 if ($1813) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 228;
                  break;
                 }
                 break;
                }
                case 262: {
                 $1950 = ___cxa_find_matching_catch()|0;
                 $1951 = tempRet0;
                 $839 = $1950;
                 $840 = $1951;
                 label = 265;
                 break;
                }
                case 263: {
                 $1952 = ___cxa_find_matching_catch()|0;
                 $1953 = tempRet0;
                 $839 = $1952;
                 $840 = $1953;
                 __THREW__ = 0;
                 invoke_vi(396,($856|0));
                 $1954 = __THREW__; __THREW__ = 0;
                 $1955 = $1954&1;
                 if ($1955) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 265;
                  break;
                 }
                 break;
                }
                case 272: {
                 $1970 = $j;
                 $1971 = $837;
                 $1972 = (($1971) + 12|0);
                 $1973 = HEAP32[$1972>>2]|0;
                 $1974 = ($1970|0)==($1973|0);
                 if (!($1974)) {
                  __THREW__ = 0;
                  invoke_viiii(402,(256|0),(264|0),118,(352|0));
                  $1975 = __THREW__; __THREW__ = 0;
                  $1976 = $1975&1;
                  if ($1976) {
                   label = 161;
                   break L59;
                  }
                  // unreachable;
                 }
                 $1977 = $838;
                 $1978 = $1977 & 131072;
                 $1979 = ($1978|0)!=(0);
                 L306: do {
                  if ($1979) {
                   $1980 = $837;
                   __THREW__ = 0;
                   invoke_vi(428,($1980|0));
                   $1981 = __THREW__; __THREW__ = 0;
                   $1982 = $1981&1;
                   if ($1982) {
                    label = 161;
                    break L59;
                   }
                   $335 = $polygon;
                   $1983 = $335;
                   $331 = $1983;
                   $1984 = $331;
                   $330 = $1984;
                   $311 = $313;
                   $312 = -1;
                   $1985 = $311;
                   HEAP32[$1985>>2] = 0;
                   $1986 = HEAP32[$313>>2]|0;
                   HEAP32[$332>>2] = $1986;
                   $314 = $332;
                   HEAP32[$1984>>2] = 0;
                   $1987 = (($1984) + 4|0);
                   $315 = $317;
                   $316 = -1;
                   $1988 = $315;
                   HEAP32[$1988>>2] = 0;
                   $1989 = HEAP32[$317>>2]|0;
                   HEAP32[$333>>2] = $1989;
                   $318 = $333;
                   HEAP32[$1987>>2] = 0;
                   $1990 = (($1984) + 8|0);
                   $319 = $321;
                   $320 = -1;
                   $1991 = $319;
                   HEAP32[$1991>>2] = 0;
                   $1992 = HEAP32[$321>>2]|0;
                   HEAP32[$334>>2] = $1992;
                   $322 = $334;
                   $328 = $1990;
                   HEAP32[$329>>2] = 0;
                   $1993 = $328;
                   $327 = $329;
                   $1994 = $327;
                   $1995 = HEAP32[$1994>>2]|0;
                   $325 = $1993;
                   HEAP32[$326>>2] = $1995;
                   $1996 = $325;
                   $324 = $1996;
                   $323 = $326;
                   $1997 = $323;
                   $1998 = HEAP32[$1997>>2]|0;
                   HEAP32[$1996>>2] = $1998;
                   $1999 = $837;
                   __THREW__ = 0;
                   invoke_vi(429,($1999|0));
                   $2000 = __THREW__; __THREW__ = 0;
                   $2001 = $2000&1;
                   L512: do {
                    if ($2001) {
                     label = 313;
                    } else {
                     $2002 = $837;
                     $2003 = (($2002) + 32|0);
                     $310 = $2003;
                     $2004 = $310;
                     $2005 = HEAP32[$2004>>2]|0;
                     $308 = $2004;
                     $309 = $2005;
                     $2006 = $309;
                     $306 = $fi;
                     $307 = $2006;
                     $2007 = $306;
                     $2008 = $307;
                     HEAP32[$2007>>2] = $2008;
                     L514: while(1) {
                      $2009 = $837;
                      $2010 = (($2009) + 32|0);
                      $278 = $2010;
                      $2011 = $278;
                      $2012 = (($2011) + 4|0);
                      $2013 = HEAP32[$2012>>2]|0;
                      $276 = $2011;
                      $277 = $2013;
                      $2014 = $277;
                      $274 = $857;
                      $275 = $2014;
                      $2015 = $274;
                      $2016 = $275;
                      HEAP32[$2015>>2] = $2016;
                      $272 = $fi;
                      $273 = $857;
                      $2017 = $272;
                      $2018 = $273;
                      $270 = $2017;
                      $271 = $2018;
                      $2019 = $270;
                      $269 = $2019;
                      $2020 = $269;
                      $2021 = HEAP32[$2020>>2]|0;
                      $2022 = $271;
                      $268 = $2022;
                      $2023 = $268;
                      $2024 = HEAP32[$2023>>2]|0;
                      $2025 = ($2021|0)==($2024|0);
                      $2026 = $2025 ^ 1;
                      if (!($2026)) {
                       label = 324;
                       break;
                      }
                      $267 = $fi;
                      $2027 = $267;
                      $2028 = HEAP32[$2027>>2]|0;
                      __THREW__ = 0;
                      $2029 = (invoke_ii(430,($2028|0))|0);
                      $2030 = __THREW__; __THREW__ = 0;
                      $2031 = $2030&1;
                      if ($2031) {
                       label = 313;
                       break L512;
                      }
                      if (!($2029)) {
                       $239 = $fi;
                       $2032 = $239;
                       $2033 = HEAP32[$2032>>2]|0;
                       __THREW__ = 0;
                       $2034 = (invoke_ii(431,($2033|0))|0);
                       $2035 = __THREW__; __THREW__ = 0;
                       $2036 = $2035&1;
                       if ($2036) {
                        label = 313;
                        break L512;
                       }
                       if (!($2034)) {
                        $238 = $fi;
                        $2037 = $238;
                        $2038 = HEAP32[$2037>>2]|0;
                        __THREW__ = 0;
                        invoke_vii(432,($2038|0),($polygon|0));
                        $2039 = __THREW__; __THREW__ = 0;
                        $2040 = $2039&1;
                        if ($2040) {
                         label = 313;
                         break L512;
                        }
                        $237 = $polygon;
                        $2041 = $237;
                        $2042 = HEAP32[$2041>>2]|0;
                        $2043 = (($2041) + 4|0);
                        $2044 = HEAP32[$2043>>2]|0;
                        $2045 = ($2042|0)==($2044|0);
                        if (!($2045)) {
                         $209 = $polygon;
                         $2046 = $209;
                         $2047 = (($2046) + 4|0);
                         $2048 = HEAP32[$2047>>2]|0;
                         $2049 = HEAP32[$2046>>2]|0;
                         $2050 = $2048;
                         $2051 = $2049;
                         $2052 = (($2050) - ($2051))|0;
                         $2053 = (($2052|0) / 4)&-1;
                         __THREW__ = 0;
                         invoke_vii(412,($858|0),($2053|0));
                         $2054 = __THREW__; __THREW__ = 0;
                         $2055 = $2054&1;
                         if ($2055) {
                          label = 313;
                          break L512;
                         }
                         $207 = $str;
                         $208 = $858;
                         $2056 = $207;
                         $2057 = $208;
                         $206 = $2057;
                         $2058 = $206;
                         $205 = $2058;
                         $2059 = $205;
                         $204 = $2059;
                         $2060 = $204;
                         $203 = $2060;
                         $2061 = $203;
                         $202 = $2061;
                         $2062 = $202;
                         $2063 = HEAP8[$2062>>0]|0;
                         $2064 = $2063&255;
                         $2065 = $2064 & 1;
                         $2066 = ($2065|0)!=(0);
                         if ($2066) {
                          $196 = $2059;
                          $2067 = $196;
                          $195 = $2067;
                          $2068 = $195;
                          $194 = $2068;
                          $2069 = $194;
                          $2070 = (($2069) + 8|0);
                          $2071 = HEAP32[$2070>>2]|0;
                          $2078 = $2071;
                         } else {
                          $201 = $2059;
                          $2072 = $201;
                          $200 = $2072;
                          $2073 = $200;
                          $199 = $2073;
                          $2074 = $199;
                          $2075 = (($2074) + 1|0);
                          $198 = $2075;
                          $2076 = $198;
                          $197 = $2076;
                          $2077 = $197;
                          $2078 = $2077;
                         }
                         $193 = $2078;
                         $2079 = $193;
                         $2080 = $208;
                         $192 = $2080;
                         $2081 = $192;
                         $191 = $2081;
                         $2082 = $191;
                         $190 = $2082;
                         $2083 = $190;
                         $189 = $2083;
                         $2084 = $189;
                         $2085 = HEAP8[$2084>>0]|0;
                         $2086 = $2085&255;
                         $2087 = $2086 & 1;
                         $2088 = ($2087|0)!=(0);
                         if ($2088) {
                          $185 = $2081;
                          $2089 = $185;
                          $184 = $2089;
                          $2090 = $184;
                          $183 = $2090;
                          $2091 = $183;
                          $2092 = (($2091) + 4|0);
                          $2093 = HEAP32[$2092>>2]|0;
                          $2100 = $2093;
                         } else {
                          $188 = $2081;
                          $2094 = $188;
                          $187 = $2094;
                          $2095 = $187;
                          $186 = $2095;
                          $2096 = $186;
                          $2097 = HEAP8[$2096>>0]|0;
                          $2098 = $2097&255;
                          $2099 = $2098 >> 1;
                          $2100 = $2099;
                         }
                         __THREW__ = 0;
                         (invoke_iiii(392,($2056|0),($2079|0),($2100|0))|0);
                         $2101 = __THREW__; __THREW__ = 0;
                         $2102 = $2101&1;
                         if ($2102) {
                          label = 314;
                          break;
                         }
                         __THREW__ = 0;
                         invoke_vi(396,($858|0));
                         $2103 = __THREW__; __THREW__ = 0;
                         $2104 = $2103&1;
                         if ($2104) {
                          label = 313;
                          break L512;
                         }
                         $i = 0;
                         while(1) {
                          $2105 = $i;
                          $182 = $polygon;
                          $2106 = $182;
                          $2107 = (($2106) + 4|0);
                          $2108 = HEAP32[$2107>>2]|0;
                          $2109 = HEAP32[$2106>>2]|0;
                          $2110 = $2108;
                          $2111 = $2109;
                          $2112 = (($2110) - ($2111))|0;
                          $2113 = (($2112|0) / 4)&-1;
                          $2114 = ($2105>>>0)<($2113>>>0);
                          if (!($2114)) {
                           break;
                          }
                          $2115 = $i;
                          $180 = $polygon;
                          $181 = $2115;
                          $2116 = $180;
                          $2117 = $181;
                          $2118 = HEAP32[$2116>>2]|0;
                          $2119 = (($2118) + ($2117<<2)|0);
                          $2120 = HEAP32[$2119>>2]|0;
                          __THREW__ = 0;
                          $2121 = (invoke_ii(414,($2120|0))|0);
                          $2122 = __THREW__; __THREW__ = 0;
                          $2123 = $2122&1;
                          if ($2123) {
                           label = 313;
                           break L512;
                          }
                          $2124 = HEAP32[$2121>>2]|0;
                          __THREW__ = 0;
                          invoke_vii(412,($859|0),($2124|0));
                          $2125 = __THREW__; __THREW__ = 0;
                          $2126 = $2125&1;
                          if ($2126) {
                           label = 313;
                           break L512;
                          }
                          $151 = $str;
                          $152 = $859;
                          $2127 = $151;
                          $2128 = $152;
                          $150 = $2128;
                          $2129 = $150;
                          $149 = $2129;
                          $2130 = $149;
                          $148 = $2130;
                          $2131 = $148;
                          $147 = $2131;
                          $2132 = $147;
                          $146 = $2132;
                          $2133 = $146;
                          $2134 = HEAP8[$2133>>0]|0;
                          $2135 = $2134&255;
                          $2136 = $2135 & 1;
                          $2137 = ($2136|0)!=(0);
                          if ($2137) {
                           $140 = $2130;
                           $2138 = $140;
                           $139 = $2138;
                           $2139 = $139;
                           $138 = $2139;
                           $2140 = $138;
                           $2141 = (($2140) + 8|0);
                           $2142 = HEAP32[$2141>>2]|0;
                           $2149 = $2142;
                          } else {
                           $145 = $2130;
                           $2143 = $145;
                           $144 = $2143;
                           $2144 = $144;
                           $143 = $2144;
                           $2145 = $143;
                           $2146 = (($2145) + 1|0);
                           $142 = $2146;
                           $2147 = $142;
                           $141 = $2147;
                           $2148 = $141;
                           $2149 = $2148;
                          }
                          $137 = $2149;
                          $2150 = $137;
                          $2151 = $152;
                          $136 = $2151;
                          $2152 = $136;
                          $135 = $2152;
                          $2153 = $135;
                          $134 = $2153;
                          $2154 = $134;
                          $133 = $2154;
                          $2155 = $133;
                          $2156 = HEAP8[$2155>>0]|0;
                          $2157 = $2156&255;
                          $2158 = $2157 & 1;
                          $2159 = ($2158|0)!=(0);
                          if ($2159) {
                           $129 = $2152;
                           $2160 = $129;
                           $128 = $2160;
                           $2161 = $128;
                           $127 = $2161;
                           $2162 = $127;
                           $2163 = (($2162) + 4|0);
                           $2164 = HEAP32[$2163>>2]|0;
                           $2171 = $2164;
                          } else {
                           $132 = $2152;
                           $2165 = $132;
                           $131 = $2165;
                           $2166 = $131;
                           $130 = $2166;
                           $2167 = $130;
                           $2168 = HEAP8[$2167>>0]|0;
                           $2169 = $2168&255;
                           $2170 = $2169 >> 1;
                           $2171 = $2170;
                          }
                          __THREW__ = 0;
                          (invoke_iiii(392,($2127|0),($2150|0),($2171|0))|0);
                          $2172 = __THREW__; __THREW__ = 0;
                          $2173 = $2172&1;
                          if ($2173) {
                           label = 316;
                           break L514;
                          }
                          __THREW__ = 0;
                          invoke_vi(396,($859|0));
                          $2174 = __THREW__; __THREW__ = 0;
                          $2175 = $2174&1;
                          if ($2175) {
                           label = 313;
                           break L512;
                          }
                          $2176 = $i;
                          $2177 = (($2176) + 1)|0;
                          $i = $2177;
                         }
                         __THREW__ = 0;
                         (invoke_iii(409,($str|0),(248|0))|0);
                         $2188 = __THREW__; __THREW__ = 0;
                         $2189 = $2188&1;
                         if ($2189) {
                          label = 313;
                          break L512;
                         }
                        }
                       }
                      }
                      $126 = $fi;
                      $2190 = $126;
                      $2191 = HEAP32[$2190>>2]|0;
                      $2192 = (($2191) + 44|0);
                      HEAP32[$2190>>2] = $2192;
                     }
                     if ((label|0) == 314) {
                      $2180 = ___cxa_find_matching_catch()|0;
                      $2181 = tempRet0;
                      $839 = $2180;
                      $840 = $2181;
                      __THREW__ = 0;
                      invoke_vi(396,($858|0));
                      $2182 = __THREW__; __THREW__ = 0;
                      $2183 = $2182&1;
                      if ($2183) {
                       $2954 = ___cxa_find_matching_catch(0|0)|0;
                       $2955 = tempRet0;
                       ___clang_call_terminate($2954);
                       // unreachable;
                      } else {
                       break;
                      }
                     }
                     else if ((label|0) == 316) {
                      $2184 = ___cxa_find_matching_catch()|0;
                      $2185 = tempRet0;
                      $839 = $2184;
                      $840 = $2185;
                      __THREW__ = 0;
                      invoke_vi(396,($859|0));
                      $2186 = __THREW__; __THREW__ = 0;
                      $2187 = $2186&1;
                      if ($2187) {
                       $2954 = ___cxa_find_matching_catch(0|0)|0;
                       $2955 = tempRet0;
                       ___clang_call_terminate($2954);
                       // unreachable;
                      } else {
                       break;
                      }
                     }
                     else if ((label|0) == 324) {
                      __THREW__ = 0;
                      invoke_vi(433,($polygon|0));
                      $2193 = __THREW__; __THREW__ = 0;
                      $2194 = $2193&1;
                      if ($2194) {
                       label = 161;
                       break L59;
                      }
                      break L306;
                     }
                    }
                   } while(0);
                   if ((label|0) == 313) {
                    $2178 = ___cxa_find_matching_catch()|0;
                    $2179 = tempRet0;
                    $839 = $2178;
                    $840 = $2179;
                   }
                   __THREW__ = 0;
                   invoke_vi(433,($polygon|0));
                   $2195 = __THREW__; __THREW__ = 0;
                   $2196 = $2195&1;
                   if ($2196) {
                    $2954 = ___cxa_find_matching_catch(0|0)|0;
                    $2955 = tempRet0;
                    ___clang_call_terminate($2954);
                    // unreachable;
                   } else {
                    break L59;
                   }
                  } else {
                   $2197 = $837;
                   $2198 = (($2197) + 32|0);
                   $125 = $2198;
                   $2199 = $125;
                   $2200 = HEAP32[$2199>>2]|0;
                   $123 = $2199;
                   $124 = $2200;
                   $2201 = $124;
                   $121 = $fi1;
                   $122 = $2201;
                   $2202 = $121;
                   $2203 = $122;
                   HEAP32[$2202>>2] = $2203;
                   L308: while(1) {
                    $2204 = $837;
                    $2205 = (($2204) + 32|0);
                    $120 = $2205;
                    $2206 = $120;
                    $2207 = (($2206) + 4|0);
                    $2208 = HEAP32[$2207>>2]|0;
                    $118 = $2206;
                    $119 = $2208;
                    $2209 = $119;
                    $116 = $860;
                    $117 = $2209;
                    $2210 = $116;
                    $2211 = $117;
                    HEAP32[$2210>>2] = $2211;
                    $87 = $fi1;
                    $88 = $860;
                    $2212 = $87;
                    $2213 = $88;
                    $85 = $2212;
                    $86 = $2213;
                    $2214 = $85;
                    $84 = $2214;
                    $2215 = $84;
                    $2216 = HEAP32[$2215>>2]|0;
                    $2217 = $86;
                    $83 = $2217;
                    $2218 = $83;
                    $2219 = HEAP32[$2218>>2]|0;
                    $2220 = ($2216|0)==($2219|0);
                    $2221 = $2220 ^ 1;
                    if (!($2221)) {
                     label = 484;
                     break;
                    }
                    $82 = $fi1;
                    $2222 = $82;
                    $2223 = HEAP32[$2222>>2]|0;
                    __THREW__ = 0;
                    $2224 = (invoke_ii(430,($2223|0))|0);
                    $2225 = __THREW__; __THREW__ = 0;
                    $2226 = $2225&1;
                    if ($2226) {
                     label = 161;
                     break L59;
                    }
                    if (!($2224)) {
                     $2227 = $837;
                     __THREW__ = 0;
                     $2228 = (invoke_ii(434,($2227|0))|0);
                     $2229 = __THREW__; __THREW__ = 0;
                     $2230 = $2229&1;
                     if ($2230) {
                      label = 161;
                      break L59;
                     }
                     do {
                      if ($2228) {
                       $2231 = $838;
                       $2232 = $2231 & 256;
                       $2233 = ($2232|0)!=(0);
                       if (!($2233)) {
                        label = 432;
                        break;
                       }
                       __THREW__ = 0;
                       $2234 = (invoke_iii(409,($str|0),(368|0))|0);
                       $2235 = __THREW__; __THREW__ = 0;
                       $2236 = $2235&1;
                       if ($2236) {
                        label = 161;
                        break L59;
                       }
                       $81 = $fi1;
                       $2237 = $81;
                       $2238 = HEAP32[$2237>>2]|0;
                       __THREW__ = 0;
                       $2239 = (invoke_iii(435,($2238|0),0)|0);
                       $2240 = __THREW__; __THREW__ = 0;
                       $2241 = $2240&1;
                       if ($2241) {
                        label = 161;
                        break L59;
                       }
                       __THREW__ = 0;
                       $2242 = (invoke_ii(414,($2239|0))|0);
                       $2243 = __THREW__; __THREW__ = 0;
                       $2244 = $2243&1;
                       if ($2244) {
                        label = 161;
                        break L59;
                       }
                       $2245 = HEAP32[$2242>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(412,($861|0),($2245|0));
                       $2246 = __THREW__; __THREW__ = 0;
                       $2247 = $2246&1;
                       if ($2247) {
                        label = 161;
                        break L59;
                       }
                       $52 = $2234;
                       $53 = $861;
                       $2248 = $52;
                       $2249 = $53;
                       $51 = $2249;
                       $2250 = $51;
                       $50 = $2250;
                       $2251 = $50;
                       $49 = $2251;
                       $2252 = $49;
                       $48 = $2252;
                       $2253 = $48;
                       $47 = $2253;
                       $2254 = $47;
                       $2255 = HEAP8[$2254>>0]|0;
                       $2256 = $2255&255;
                       $2257 = $2256 & 1;
                       $2258 = ($2257|0)!=(0);
                       if ($2258) {
                        $41 = $2251;
                        $2259 = $41;
                        $40 = $2259;
                        $2260 = $40;
                        $39 = $2260;
                        $2261 = $39;
                        $2262 = (($2261) + 8|0);
                        $2263 = HEAP32[$2262>>2]|0;
                        $2270 = $2263;
                       } else {
                        $46 = $2251;
                        $2264 = $46;
                        $45 = $2264;
                        $2265 = $45;
                        $44 = $2265;
                        $2266 = $44;
                        $2267 = (($2266) + 1|0);
                        $43 = $2267;
                        $2268 = $43;
                        $42 = $2268;
                        $2269 = $42;
                        $2270 = $2269;
                       }
                       $38 = $2270;
                       $2271 = $38;
                       $2272 = $53;
                       $37 = $2272;
                       $2273 = $37;
                       $36 = $2273;
                       $2274 = $36;
                       $35 = $2274;
                       $2275 = $35;
                       $34 = $2275;
                       $2276 = $34;
                       $2277 = HEAP8[$2276>>0]|0;
                       $2278 = $2277&255;
                       $2279 = $2278 & 1;
                       $2280 = ($2279|0)!=(0);
                       if ($2280) {
                        $30 = $2273;
                        $2281 = $30;
                        $29 = $2281;
                        $2282 = $29;
                        $28 = $2282;
                        $2283 = $28;
                        $2284 = (($2283) + 4|0);
                        $2285 = HEAP32[$2284>>2]|0;
                        $2292 = $2285;
                       } else {
                        $33 = $2273;
                        $2286 = $33;
                        $32 = $2286;
                        $2287 = $32;
                        $31 = $2287;
                        $2288 = $31;
                        $2289 = HEAP8[$2288>>0]|0;
                        $2290 = $2289&255;
                        $2291 = $2290 >> 1;
                        $2292 = $2291;
                       }
                       __THREW__ = 0;
                       $2293 = (invoke_iiii(392,($2248|0),($2271|0),($2292|0))|0);
                       $2294 = __THREW__; __THREW__ = 0;
                       $2295 = $2294&1;
                       if ($2295) {
                        label = 415;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2296 = (invoke_iii(409,($2293|0),(232|0))|0);
                       $2297 = __THREW__; __THREW__ = 0;
                       $2298 = $2297&1;
                       if ($2298) {
                        label = 415;
                        break L308;
                       }
                       $27 = $fi1;
                       $2299 = $27;
                       $2300 = HEAP32[$2299>>2]|0;
                       __THREW__ = 0;
                       $2301 = (invoke_iii(435,($2300|0),1)|0);
                       $2302 = __THREW__; __THREW__ = 0;
                       $2303 = $2302&1;
                       if ($2303) {
                        label = 415;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2304 = (invoke_ii(414,($2301|0))|0);
                       $2305 = __THREW__; __THREW__ = 0;
                       $2306 = $2305&1;
                       if ($2306) {
                        label = 415;
                        break L308;
                       }
                       $2307 = HEAP32[$2304>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(412,($862|0),($2307|0));
                       $2308 = __THREW__; __THREW__ = 0;
                       $2309 = $2308&1;
                       if ($2309) {
                        label = 415;
                        break L308;
                       }
                       $25 = $2296;
                       $26 = $862;
                       $2310 = $25;
                       $2311 = $26;
                       $24 = $2311;
                       $2312 = $24;
                       $23 = $2312;
                       $2313 = $23;
                       $22 = $2313;
                       $2314 = $22;
                       $21 = $2314;
                       $2315 = $21;
                       $20 = $2315;
                       $2316 = $20;
                       $2317 = HEAP8[$2316>>0]|0;
                       $2318 = $2317&255;
                       $2319 = $2318 & 1;
                       $2320 = ($2319|0)!=(0);
                       if ($2320) {
                        $14 = $2313;
                        $2321 = $14;
                        $13 = $2321;
                        $2322 = $13;
                        $12 = $2322;
                        $2323 = $12;
                        $2324 = (($2323) + 8|0);
                        $2325 = HEAP32[$2324>>2]|0;
                        $2332 = $2325;
                       } else {
                        $19 = $2313;
                        $2326 = $19;
                        $18 = $2326;
                        $2327 = $18;
                        $17 = $2327;
                        $2328 = $17;
                        $2329 = (($2328) + 1|0);
                        $16 = $2329;
                        $2330 = $16;
                        $15 = $2330;
                        $2331 = $15;
                        $2332 = $2331;
                       }
                       $11 = $2332;
                       $2333 = $11;
                       $2334 = $26;
                       $10 = $2334;
                       $2335 = $10;
                       $9 = $2335;
                       $2336 = $9;
                       $8 = $2336;
                       $2337 = $8;
                       $7 = $2337;
                       $2338 = $7;
                       $2339 = HEAP8[$2338>>0]|0;
                       $2340 = $2339&255;
                       $2341 = $2340 & 1;
                       $2342 = ($2341|0)!=(0);
                       if ($2342) {
                        $3 = $2335;
                        $2343 = $3;
                        $2 = $2343;
                        $2344 = $2;
                        $1 = $2344;
                        $2345 = $1;
                        $2346 = (($2345) + 4|0);
                        $2347 = HEAP32[$2346>>2]|0;
                        $2354 = $2347;
                       } else {
                        $6 = $2335;
                        $2348 = $6;
                        $5 = $2348;
                        $2349 = $5;
                        $4 = $2349;
                        $2350 = $4;
                        $2351 = HEAP8[$2350>>0]|0;
                        $2352 = $2351&255;
                        $2353 = $2352 >> 1;
                        $2354 = $2353;
                       }
                       __THREW__ = 0;
                       $2355 = (invoke_iiii(392,($2310|0),($2333|0),($2354|0))|0);
                       $2356 = __THREW__; __THREW__ = 0;
                       $2357 = $2356&1;
                       if ($2357) {
                        label = 416;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2358 = (invoke_iii(409,($2355|0),(232|0))|0);
                       $2359 = __THREW__; __THREW__ = 0;
                       $2360 = $2359&1;
                       if ($2360) {
                        label = 416;
                        break L308;
                       }
                       $0 = $fi1;
                       $2361 = $0;
                       $2362 = HEAP32[$2361>>2]|0;
                       __THREW__ = 0;
                       $2363 = (invoke_iii(435,($2362|0),2)|0);
                       $2364 = __THREW__; __THREW__ = 0;
                       $2365 = $2364&1;
                       if ($2365) {
                        label = 416;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2366 = (invoke_ii(414,($2363|0))|0);
                       $2367 = __THREW__; __THREW__ = 0;
                       $2368 = $2367&1;
                       if ($2368) {
                        label = 416;
                        break L308;
                       }
                       $2369 = HEAP32[$2366>>2]|0;
                       __THREW__ = 0;
                       invoke_vii(412,($863|0),($2369|0));
                       $2370 = __THREW__; __THREW__ = 0;
                       $2371 = $2370&1;
                       if ($2371) {
                        label = 416;
                        break L308;
                       }
                       $78 = $2358;
                       $79 = $863;
                       $2372 = $78;
                       $2373 = $79;
                       $77 = $2373;
                       $2374 = $77;
                       $76 = $2374;
                       $2375 = $76;
                       $75 = $2375;
                       $2376 = $75;
                       $74 = $2376;
                       $2377 = $74;
                       $73 = $2377;
                       $2378 = $73;
                       $2379 = HEAP8[$2378>>0]|0;
                       $2380 = $2379&255;
                       $2381 = $2380 & 1;
                       $2382 = ($2381|0)!=(0);
                       if ($2382) {
                        $67 = $2375;
                        $2383 = $67;
                        $66 = $2383;
                        $2384 = $66;
                        $65 = $2384;
                        $2385 = $65;
                        $2386 = (($2385) + 8|0);
                        $2387 = HEAP32[$2386>>2]|0;
                        $2394 = $2387;
                       } else {
                        $72 = $2375;
                        $2388 = $72;
                        $71 = $2388;
                        $2389 = $71;
                        $70 = $2389;
                        $2390 = $70;
                        $2391 = (($2390) + 1|0);
                        $69 = $2391;
                        $2392 = $69;
                        $68 = $2392;
                        $2393 = $68;
                        $2394 = $2393;
                       }
                       $64 = $2394;
                       $2395 = $64;
                       $2396 = $79;
                       $63 = $2396;
                       $2397 = $63;
                       $62 = $2397;
                       $2398 = $62;
                       $61 = $2398;
                       $2399 = $61;
                       $60 = $2399;
                       $2400 = $60;
                       $2401 = HEAP8[$2400>>0]|0;
                       $2402 = $2401&255;
                       $2403 = $2402 & 1;
                       $2404 = ($2403|0)!=(0);
                       if ($2404) {
                        $56 = $2397;
                        $2405 = $56;
                        $55 = $2405;
                        $2406 = $55;
                        $54 = $2406;
                        $2407 = $54;
                        $2408 = (($2407) + 4|0);
                        $2409 = HEAP32[$2408>>2]|0;
                        $2416 = $2409;
                       } else {
                        $59 = $2397;
                        $2410 = $59;
                        $58 = $2410;
                        $2411 = $58;
                        $57 = $2411;
                        $2412 = $57;
                        $2413 = HEAP8[$2412>>0]|0;
                        $2414 = $2413&255;
                        $2415 = $2414 >> 1;
                        $2416 = $2415;
                       }
                       __THREW__ = 0;
                       $2417 = (invoke_iiii(392,($2372|0),($2395|0),($2416|0))|0);
                       $2418 = __THREW__; __THREW__ = 0;
                       $2419 = $2418&1;
                       if ($2419) {
                        label = 417;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2420 = (invoke_iii(409,($2417|0),(232|0))|0);
                       $2421 = __THREW__; __THREW__ = 0;
                       $2422 = $2421&1;
                       if ($2422) {
                        label = 417;
                        break L308;
                       }
                       $80 = $fi1;
                       $2423 = $80;
                       $2424 = HEAP32[$2423>>2]|0;
                       __THREW__ = 0;
                       $2425 = (invoke_ii(436,($2424|0))|0);
                       $2426 = __THREW__; __THREW__ = 0;
                       $2427 = $2426&1;
                       if ($2427) {
                        label = 417;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2428 = (invoke_iii(421,($2425|0),0)|0);
                       $2429 = __THREW__; __THREW__ = 0;
                       $2430 = $2429&1;
                       if ($2430) {
                        label = 417;
                        break L308;
                       }
                       $2431 = HEAP8[$2428>>0]|0;
                       $2432 = $2431&255;
                       __THREW__ = 0;
                       invoke_vii(412,($864|0),($2432|0));
                       $2433 = __THREW__; __THREW__ = 0;
                       $2434 = $2433&1;
                       if ($2434) {
                        label = 417;
                        break L308;
                       }
                       $113 = $2420;
                       $114 = $864;
                       $2435 = $113;
                       $2436 = $114;
                       $112 = $2436;
                       $2437 = $112;
                       $111 = $2437;
                       $2438 = $111;
                       $110 = $2438;
                       $2439 = $110;
                       $109 = $2439;
                       $2440 = $109;
                       $108 = $2440;
                       $2441 = $108;
                       $2442 = HEAP8[$2441>>0]|0;
                       $2443 = $2442&255;
                       $2444 = $2443 & 1;
                       $2445 = ($2444|0)!=(0);
                       if ($2445) {
                        $102 = $2438;
                        $2446 = $102;
                        $101 = $2446;
                        $2447 = $101;
                        $100 = $2447;
                        $2448 = $100;
                        $2449 = (($2448) + 8|0);
                        $2450 = HEAP32[$2449>>2]|0;
                        $2457 = $2450;
                       } else {
                        $107 = $2438;
                        $2451 = $107;
                        $106 = $2451;
                        $2452 = $106;
                        $105 = $2452;
                        $2453 = $105;
                        $2454 = (($2453) + 1|0);
                        $104 = $2454;
                        $2455 = $104;
                        $103 = $2455;
                        $2456 = $103;
                        $2457 = $2456;
                       }
                       $99 = $2457;
                       $2458 = $99;
                       $2459 = $114;
                       $98 = $2459;
                       $2460 = $98;
                       $97 = $2460;
                       $2461 = $97;
                       $96 = $2461;
                       $2462 = $96;
                       $95 = $2462;
                       $2463 = $95;
                       $2464 = HEAP8[$2463>>0]|0;
                       $2465 = $2464&255;
                       $2466 = $2465 & 1;
                       $2467 = ($2466|0)!=(0);
                       if ($2467) {
                        $91 = $2460;
                        $2468 = $91;
                        $90 = $2468;
                        $2469 = $90;
                        $89 = $2469;
                        $2470 = $89;
                        $2471 = (($2470) + 4|0);
                        $2472 = HEAP32[$2471>>2]|0;
                        $2479 = $2472;
                       } else {
                        $94 = $2460;
                        $2473 = $94;
                        $93 = $2473;
                        $2474 = $93;
                        $92 = $2474;
                        $2475 = $92;
                        $2476 = HEAP8[$2475>>0]|0;
                        $2477 = $2476&255;
                        $2478 = $2477 >> 1;
                        $2479 = $2478;
                       }
                       __THREW__ = 0;
                       $2480 = (invoke_iiii(392,($2435|0),($2458|0),($2479|0))|0);
                       $2481 = __THREW__; __THREW__ = 0;
                       $2482 = $2481&1;
                       if ($2482) {
                        label = 418;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2483 = (invoke_iii(409,($2480|0),(232|0))|0);
                       $2484 = __THREW__; __THREW__ = 0;
                       $2485 = $2484&1;
                       if ($2485) {
                        label = 418;
                        break L308;
                       }
                       $115 = $fi1;
                       $2486 = $115;
                       $2487 = HEAP32[$2486>>2]|0;
                       __THREW__ = 0;
                       $2488 = (invoke_ii(436,($2487|0))|0);
                       $2489 = __THREW__; __THREW__ = 0;
                       $2490 = $2489&1;
                       if ($2490) {
                        label = 418;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2491 = (invoke_iii(421,($2488|0),1)|0);
                       $2492 = __THREW__; __THREW__ = 0;
                       $2493 = $2492&1;
                       if ($2493) {
                        label = 418;
                        break L308;
                       }
                       $2494 = HEAP8[$2491>>0]|0;
                       $2495 = $2494&255;
                       __THREW__ = 0;
                       invoke_vii(412,($865|0),($2495|0));
                       $2496 = __THREW__; __THREW__ = 0;
                       $2497 = $2496&1;
                       if ($2497) {
                        label = 418;
                        break L308;
                       }
                       $177 = $2483;
                       $178 = $865;
                       $2498 = $177;
                       $2499 = $178;
                       $176 = $2499;
                       $2500 = $176;
                       $175 = $2500;
                       $2501 = $175;
                       $174 = $2501;
                       $2502 = $174;
                       $173 = $2502;
                       $2503 = $173;
                       $172 = $2503;
                       $2504 = $172;
                       $2505 = HEAP8[$2504>>0]|0;
                       $2506 = $2505&255;
                       $2507 = $2506 & 1;
                       $2508 = ($2507|0)!=(0);
                       if ($2508) {
                        $166 = $2501;
                        $2509 = $166;
                        $165 = $2509;
                        $2510 = $165;
                        $164 = $2510;
                        $2511 = $164;
                        $2512 = (($2511) + 8|0);
                        $2513 = HEAP32[$2512>>2]|0;
                        $2520 = $2513;
                       } else {
                        $171 = $2501;
                        $2514 = $171;
                        $170 = $2514;
                        $2515 = $170;
                        $169 = $2515;
                        $2516 = $169;
                        $2517 = (($2516) + 1|0);
                        $168 = $2517;
                        $2518 = $168;
                        $167 = $2518;
                        $2519 = $167;
                        $2520 = $2519;
                       }
                       $163 = $2520;
                       $2521 = $163;
                       $2522 = $178;
                       $162 = $2522;
                       $2523 = $162;
                       $161 = $2523;
                       $2524 = $161;
                       $160 = $2524;
                       $2525 = $160;
                       $159 = $2525;
                       $2526 = $159;
                       $2527 = HEAP8[$2526>>0]|0;
                       $2528 = $2527&255;
                       $2529 = $2528 & 1;
                       $2530 = ($2529|0)!=(0);
                       if ($2530) {
                        $155 = $2523;
                        $2531 = $155;
                        $154 = $2531;
                        $2532 = $154;
                        $153 = $2532;
                        $2533 = $153;
                        $2534 = (($2533) + 4|0);
                        $2535 = HEAP32[$2534>>2]|0;
                        $2542 = $2535;
                       } else {
                        $158 = $2523;
                        $2536 = $158;
                        $157 = $2536;
                        $2537 = $157;
                        $156 = $2537;
                        $2538 = $156;
                        $2539 = HEAP8[$2538>>0]|0;
                        $2540 = $2539&255;
                        $2541 = $2540 >> 1;
                        $2542 = $2541;
                       }
                       __THREW__ = 0;
                       $2543 = (invoke_iiii(392,($2498|0),($2521|0),($2542|0))|0);
                       $2544 = __THREW__; __THREW__ = 0;
                       $2545 = $2544&1;
                       if ($2545) {
                        label = 419;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2546 = (invoke_iii(409,($2543|0),(232|0))|0);
                       $2547 = __THREW__; __THREW__ = 0;
                       $2548 = $2547&1;
                       if ($2548) {
                        label = 419;
                        break L308;
                       }
                       $179 = $fi1;
                       $2549 = $179;
                       $2550 = HEAP32[$2549>>2]|0;
                       __THREW__ = 0;
                       $2551 = (invoke_ii(436,($2550|0))|0);
                       $2552 = __THREW__; __THREW__ = 0;
                       $2553 = $2552&1;
                       if ($2553) {
                        label = 419;
                        break L308;
                       }
                       __THREW__ = 0;
                       $2554 = (invoke_iii(421,($2551|0),2)|0);
                       $2555 = __THREW__; __THREW__ = 0;
                       $2556 = $2555&1;
                       if ($2556) {
                        label = 419;
                        break L308;
                       }
                       $2557 = HEAP8[$2554>>0]|0;
                       $2558 = $2557&255;
                       __THREW__ = 0;
                       invoke_vii(412,($866|0),($2558|0));
                       $2559 = __THREW__; __THREW__ = 0;
                       $2560 = $2559&1;
                       if ($2560) {
                        label = 419;
                        break L308;
                       }
                       $234 = $2546;
                       $235 = $866;
                       $2561 = $234;
                       $2562 = $235;
                       $233 = $2562;
                       $2563 = $233;
                       $232 = $2563;
                       $2564 = $232;
                       $231 = $2564;
                       $2565 = $231;
                       $230 = $2565;
                       $2566 = $230;
                       $229 = $2566;
                       $2567 = $229;
                       $2568 = HEAP8[$2567>>0]|0;
                       $2569 = $2568&255;
                       $2570 = $2569 & 1;
                       $2571 = ($2570|0)!=(0);
                       if ($2571) {
                        $223 = $2564;
                        $2572 = $223;
                        $222 = $2572;
                        $2573 = $222;
                        $221 = $2573;
                        $2574 = $221;
                        $2575 = (($2574) + 8|0);
                        $2576 = HEAP32[$2575>>2]|0;
                        $2583 = $2576;
                       } else {
                        $228 = $2564;
                        $2577 = $228;
                        $227 = $2577;
                        $2578 = $227;
                        $226 = $2578;
                        $2579 = $226;
                        $2580 = (($2579) + 1|0);
                        $225 = $2580;
                        $2581 = $225;
                        $224 = $2581;
                        $2582 = $224;
                        $2583 = $2582;
                       }
                       $220 = $2583;
                       $2584 = $220;
                       $2585 = $235;
                       $219 = $2585;
                       $2586 = $219;
                       $218 = $2586;
                       $2587 = $218;
                       $217 = $2587;
                       $2588 = $217;
                       $216 = $2588;
                       $2589 = $216;
                       $2590 = HEAP8[$2589>>0]|0;
                       $2591 = $2590&255;
                       $2592 = $2591 & 1;
                       $2593 = ($2592|0)!=(0);
                       if ($2593) {
                        $212 = $2586;
                        $2594 = $212;
                        $211 = $2594;
                        $2595 = $211;
                        $210 = $2595;
                        $2596 = $210;
                        $2597 = (($2596) + 4|0);
                        $2598 = HEAP32[$2597>>2]|0;
                        $2605 = $2598;
                       } else {
                        $215 = $2586;
                        $2599 = $215;
                        $214 = $2599;
                        $2600 = $214;
                        $213 = $2600;
                        $2601 = $213;
                        $2602 = HEAP8[$2601>>0]|0;
                        $2603 = $2602&255;
                        $2604 = $2603 >> 1;
                        $2605 = $2604;
                       }
                       __THREW__ = 0;
                       $2606 = (invoke_iiii(392,($2561|0),($2584|0),($2605|0))|0);
                       $2607 = __THREW__; __THREW__ = 0;
                       $2608 = $2607&1;
                       if ($2608) {
                        label = 420;
                        break L308;
                       }
                       __THREW__ = 0;
                       (invoke_iii(409,($2606|0),(248|0))|0);
                       $2609 = __THREW__; __THREW__ = 0;
                       $2610 = $2609&1;
                       if ($2610) {
                        label = 420;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($866|0));
                       $2611 = __THREW__; __THREW__ = 0;
                       $2612 = $2611&1;
                       if ($2612) {
                        label = 419;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($865|0));
                       $2613 = __THREW__; __THREW__ = 0;
                       $2614 = $2613&1;
                       if ($2614) {
                        label = 418;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($864|0));
                       $2615 = __THREW__; __THREW__ = 0;
                       $2616 = $2615&1;
                       if ($2616) {
                        label = 417;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($863|0));
                       $2617 = __THREW__; __THREW__ = 0;
                       $2618 = $2617&1;
                       if ($2618) {
                        label = 416;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($862|0));
                       $2619 = __THREW__; __THREW__ = 0;
                       $2620 = $2619&1;
                       if ($2620) {
                        label = 415;
                        break L308;
                       }
                       __THREW__ = 0;
                       invoke_vi(396,($861|0));
                       $2621 = __THREW__; __THREW__ = 0;
                       $2622 = $2621&1;
                       if ($2622) {
                        label = 161;
                        break L59;
                       }
                      } else {
                       label = 432;
                      }
                     } while(0);
                     if ((label|0) == 432) {
                      label = 0;
                      __THREW__ = 0;
                      $2647 = (invoke_iii(409,($str|0),(368|0))|0);
                      $2648 = __THREW__; __THREW__ = 0;
                      $2649 = $2648&1;
                      if ($2649) {
                       label = 161;
                       break L59;
                      }
                      $236 = $fi1;
                      $2650 = $236;
                      $2651 = HEAP32[$2650>>2]|0;
                      __THREW__ = 0;
                      $2652 = (invoke_iii(435,($2651|0),0)|0);
                      $2653 = __THREW__; __THREW__ = 0;
                      $2654 = $2653&1;
                      if ($2654) {
                       label = 161;
                       break L59;
                      }
                      __THREW__ = 0;
                      $2655 = (invoke_ii(414,($2652|0))|0);
                      $2656 = __THREW__; __THREW__ = 0;
                      $2657 = $2656&1;
                      if ($2657) {
                       label = 161;
                       break L59;
                      }
                      $2658 = HEAP32[$2655>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(412,($867|0),($2658|0));
                      $2659 = __THREW__; __THREW__ = 0;
                      $2660 = $2659&1;
                      if ($2660) {
                       label = 161;
                       break L59;
                      }
                      $264 = $2647;
                      $265 = $867;
                      $2661 = $264;
                      $2662 = $265;
                      $263 = $2662;
                      $2663 = $263;
                      $262 = $2663;
                      $2664 = $262;
                      $261 = $2664;
                      $2665 = $261;
                      $260 = $2665;
                      $2666 = $260;
                      $259 = $2666;
                      $2667 = $259;
                      $2668 = HEAP8[$2667>>0]|0;
                      $2669 = $2668&255;
                      $2670 = $2669 & 1;
                      $2671 = ($2670|0)!=(0);
                      if ($2671) {
                       $253 = $2664;
                       $2672 = $253;
                       $252 = $2672;
                       $2673 = $252;
                       $251 = $2673;
                       $2674 = $251;
                       $2675 = (($2674) + 8|0);
                       $2676 = HEAP32[$2675>>2]|0;
                       $2683 = $2676;
                      } else {
                       $258 = $2664;
                       $2677 = $258;
                       $257 = $2677;
                       $2678 = $257;
                       $256 = $2678;
                       $2679 = $256;
                       $2680 = (($2679) + 1|0);
                       $255 = $2680;
                       $2681 = $255;
                       $254 = $2681;
                       $2682 = $254;
                       $2683 = $2682;
                      }
                      $250 = $2683;
                      $2684 = $250;
                      $2685 = $265;
                      $249 = $2685;
                      $2686 = $249;
                      $248 = $2686;
                      $2687 = $248;
                      $247 = $2687;
                      $2688 = $247;
                      $246 = $2688;
                      $2689 = $246;
                      $2690 = HEAP8[$2689>>0]|0;
                      $2691 = $2690&255;
                      $2692 = $2691 & 1;
                      $2693 = ($2692|0)!=(0);
                      if ($2693) {
                       $242 = $2686;
                       $2694 = $242;
                       $241 = $2694;
                       $2695 = $241;
                       $240 = $2695;
                       $2696 = $240;
                       $2697 = (($2696) + 4|0);
                       $2698 = HEAP32[$2697>>2]|0;
                       $2705 = $2698;
                      } else {
                       $245 = $2686;
                       $2699 = $245;
                       $244 = $2699;
                       $2700 = $244;
                       $243 = $2700;
                       $2701 = $243;
                       $2702 = HEAP8[$2701>>0]|0;
                       $2703 = $2702&255;
                       $2704 = $2703 >> 1;
                       $2705 = $2704;
                      }
                      __THREW__ = 0;
                      $2706 = (invoke_iiii(392,($2661|0),($2684|0),($2705|0))|0);
                      $2707 = __THREW__; __THREW__ = 0;
                      $2708 = $2707&1;
                      if ($2708) {
                       label = 473;
                       break;
                      }
                      __THREW__ = 0;
                      $2709 = (invoke_iii(409,($2706|0),(232|0))|0);
                      $2710 = __THREW__; __THREW__ = 0;
                      $2711 = $2710&1;
                      if ($2711) {
                       label = 473;
                       break;
                      }
                      $266 = $fi1;
                      $2712 = $266;
                      $2713 = HEAP32[$2712>>2]|0;
                      __THREW__ = 0;
                      $2714 = (invoke_iii(435,($2713|0),1)|0);
                      $2715 = __THREW__; __THREW__ = 0;
                      $2716 = $2715&1;
                      if ($2716) {
                       label = 473;
                       break;
                      }
                      __THREW__ = 0;
                      $2717 = (invoke_ii(414,($2714|0))|0);
                      $2718 = __THREW__; __THREW__ = 0;
                      $2719 = $2718&1;
                      if ($2719) {
                       label = 473;
                       break;
                      }
                      $2720 = HEAP32[$2717>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(412,($868|0),($2720|0));
                      $2721 = __THREW__; __THREW__ = 0;
                      $2722 = $2721&1;
                      if ($2722) {
                       label = 473;
                       break;
                      }
                      $303 = $2709;
                      $304 = $868;
                      $2723 = $303;
                      $2724 = $304;
                      $302 = $2724;
                      $2725 = $302;
                      $301 = $2725;
                      $2726 = $301;
                      $300 = $2726;
                      $2727 = $300;
                      $299 = $2727;
                      $2728 = $299;
                      $298 = $2728;
                      $2729 = $298;
                      $2730 = HEAP8[$2729>>0]|0;
                      $2731 = $2730&255;
                      $2732 = $2731 & 1;
                      $2733 = ($2732|0)!=(0);
                      if ($2733) {
                       $292 = $2726;
                       $2734 = $292;
                       $291 = $2734;
                       $2735 = $291;
                       $290 = $2735;
                       $2736 = $290;
                       $2737 = (($2736) + 8|0);
                       $2738 = HEAP32[$2737>>2]|0;
                       $2745 = $2738;
                      } else {
                       $297 = $2726;
                       $2739 = $297;
                       $296 = $2739;
                       $2740 = $296;
                       $295 = $2740;
                       $2741 = $295;
                       $2742 = (($2741) + 1|0);
                       $294 = $2742;
                       $2743 = $294;
                       $293 = $2743;
                       $2744 = $293;
                       $2745 = $2744;
                      }
                      $289 = $2745;
                      $2746 = $289;
                      $2747 = $304;
                      $288 = $2747;
                      $2748 = $288;
                      $287 = $2748;
                      $2749 = $287;
                      $286 = $2749;
                      $2750 = $286;
                      $285 = $2750;
                      $2751 = $285;
                      $2752 = HEAP8[$2751>>0]|0;
                      $2753 = $2752&255;
                      $2754 = $2753 & 1;
                      $2755 = ($2754|0)!=(0);
                      if ($2755) {
                       $281 = $2748;
                       $2756 = $281;
                       $280 = $2756;
                       $2757 = $280;
                       $279 = $2757;
                       $2758 = $279;
                       $2759 = (($2758) + 4|0);
                       $2760 = HEAP32[$2759>>2]|0;
                       $2767 = $2760;
                      } else {
                       $284 = $2748;
                       $2761 = $284;
                       $283 = $2761;
                       $2762 = $283;
                       $282 = $2762;
                       $2763 = $282;
                       $2764 = HEAP8[$2763>>0]|0;
                       $2765 = $2764&255;
                       $2766 = $2765 >> 1;
                       $2767 = $2766;
                      }
                      __THREW__ = 0;
                      $2768 = (invoke_iiii(392,($2723|0),($2746|0),($2767|0))|0);
                      $2769 = __THREW__; __THREW__ = 0;
                      $2770 = $2769&1;
                      if ($2770) {
                       label = 474;
                       break;
                      }
                      __THREW__ = 0;
                      $2771 = (invoke_iii(409,($2768|0),(232|0))|0);
                      $2772 = __THREW__; __THREW__ = 0;
                      $2773 = $2772&1;
                      if ($2773) {
                       label = 474;
                       break;
                      }
                      $305 = $fi1;
                      $2774 = $305;
                      $2775 = HEAP32[$2774>>2]|0;
                      __THREW__ = 0;
                      $2776 = (invoke_iii(435,($2775|0),2)|0);
                      $2777 = __THREW__; __THREW__ = 0;
                      $2778 = $2777&1;
                      if ($2778) {
                       label = 474;
                       break;
                      }
                      __THREW__ = 0;
                      $2779 = (invoke_ii(414,($2776|0))|0);
                      $2780 = __THREW__; __THREW__ = 0;
                      $2781 = $2780&1;
                      if ($2781) {
                       label = 474;
                       break;
                      }
                      $2782 = HEAP32[$2779>>2]|0;
                      __THREW__ = 0;
                      invoke_vii(412,($869|0),($2782|0));
                      $2783 = __THREW__; __THREW__ = 0;
                      $2784 = $2783&1;
                      if ($2784) {
                       label = 474;
                       break;
                      }
                      $692 = $2771;
                      $693 = $869;
                      $2785 = $692;
                      $2786 = $693;
                      $691 = $2786;
                      $2787 = $691;
                      $690 = $2787;
                      $2788 = $690;
                      $689 = $2788;
                      $2789 = $689;
                      $688 = $2789;
                      $2790 = $688;
                      $687 = $2790;
                      $2791 = $687;
                      $2792 = HEAP8[$2791>>0]|0;
                      $2793 = $2792&255;
                      $2794 = $2793 & 1;
                      $2795 = ($2794|0)!=(0);
                      if ($2795) {
                       $681 = $2788;
                       $2796 = $681;
                       $680 = $2796;
                       $2797 = $680;
                       $679 = $2797;
                       $2798 = $679;
                       $2799 = (($2798) + 8|0);
                       $2800 = HEAP32[$2799>>2]|0;
                       $2807 = $2800;
                      } else {
                       $686 = $2788;
                       $2801 = $686;
                       $685 = $2801;
                       $2802 = $685;
                       $684 = $2802;
                       $2803 = $684;
                       $2804 = (($2803) + 1|0);
                       $683 = $2804;
                       $2805 = $683;
                       $682 = $2805;
                       $2806 = $682;
                       $2807 = $2806;
                      }
                      $678 = $2807;
                      $2808 = $678;
                      $2809 = $693;
                      $677 = $2809;
                      $2810 = $677;
                      $676 = $2810;
                      $2811 = $676;
                      $675 = $2811;
                      $2812 = $675;
                      $674 = $2812;
                      $2813 = $674;
                      $2814 = HEAP8[$2813>>0]|0;
                      $2815 = $2814&255;
                      $2816 = $2815 & 1;
                      $2817 = ($2816|0)!=(0);
                      if ($2817) {
                       $670 = $2810;
                       $2818 = $670;
                       $669 = $2818;
                       $2819 = $669;
                       $668 = $2819;
                       $2820 = $668;
                       $2821 = (($2820) + 4|0);
                       $2822 = HEAP32[$2821>>2]|0;
                       $2829 = $2822;
                      } else {
                       $673 = $2810;
                       $2823 = $673;
                       $672 = $2823;
                       $2824 = $672;
                       $671 = $2824;
                       $2825 = $671;
                       $2826 = HEAP8[$2825>>0]|0;
                       $2827 = $2826&255;
                       $2828 = $2827 >> 1;
                       $2829 = $2828;
                      }
                      __THREW__ = 0;
                      $2830 = (invoke_iiii(392,($2785|0),($2808|0),($2829|0))|0);
                      $2831 = __THREW__; __THREW__ = 0;
                      $2832 = $2831&1;
                      if ($2832) {
                       label = 475;
                       break;
                      }
                      __THREW__ = 0;
                      (invoke_iii(409,($2830|0),(248|0))|0);
                      $2833 = __THREW__; __THREW__ = 0;
                      $2834 = $2833&1;
                      if ($2834) {
                       label = 475;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vi(396,($869|0));
                      $2835 = __THREW__; __THREW__ = 0;
                      $2836 = $2835&1;
                      if ($2836) {
                       label = 474;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vi(396,($868|0));
                      $2837 = __THREW__; __THREW__ = 0;
                      $2838 = $2837&1;
                      if ($2838) {
                       label = 473;
                       break;
                      }
                      __THREW__ = 0;
                      invoke_vi(396,($867|0));
                      $2839 = __THREW__; __THREW__ = 0;
                      $2840 = $2839&1;
                      if ($2840) {
                       label = 161;
                       break L59;
                      }
                     }
                    }
                    $694 = $fi1;
                    $2853 = $694;
                    $2854 = HEAP32[$2853>>2]|0;
                    $2855 = (($2854) + 44|0);
                    HEAP32[$2853>>2] = $2855;
                   }
                   switch (label|0) {
                    case 415: {
                     $2623 = ___cxa_find_matching_catch()|0;
                     $2624 = tempRet0;
                     $839 = $2623;
                     $840 = $2624;
                     break;
                    }
                    case 416: {
                     $2625 = ___cxa_find_matching_catch()|0;
                     $2626 = tempRet0;
                     $839 = $2625;
                     $840 = $2626;
                     label = 428;
                     break;
                    }
                    case 417: {
                     $2627 = ___cxa_find_matching_catch()|0;
                     $2628 = tempRet0;
                     $839 = $2627;
                     $840 = $2628;
                     label = 426;
                     break;
                    }
                    case 418: {
                     $2629 = ___cxa_find_matching_catch()|0;
                     $2630 = tempRet0;
                     $839 = $2629;
                     $840 = $2630;
                     label = 424;
                     break;
                    }
                    case 419: {
                     $2631 = ___cxa_find_matching_catch()|0;
                     $2632 = tempRet0;
                     $839 = $2631;
                     $840 = $2632;
                     label = 422;
                     break;
                    }
                    case 420: {
                     $2633 = ___cxa_find_matching_catch()|0;
                     $2634 = tempRet0;
                     $839 = $2633;
                     $840 = $2634;
                     __THREW__ = 0;
                     invoke_vi(396,($866|0));
                     $2635 = __THREW__; __THREW__ = 0;
                     $2636 = $2635&1;
                     if ($2636) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 422;
                      break;
                     }
                     break;
                    }
                    case 473: {
                     $2841 = ___cxa_find_matching_catch()|0;
                     $2842 = tempRet0;
                     $839 = $2841;
                     $840 = $2842;
                     label = 479;
                     break;
                    }
                    case 474: {
                     $2843 = ___cxa_find_matching_catch()|0;
                     $2844 = tempRet0;
                     $839 = $2843;
                     $840 = $2844;
                     label = 477;
                     break;
                    }
                    case 475: {
                     $2845 = ___cxa_find_matching_catch()|0;
                     $2846 = tempRet0;
                     $839 = $2845;
                     $840 = $2846;
                     __THREW__ = 0;
                     invoke_vi(396,($869|0));
                     $2847 = __THREW__; __THREW__ = 0;
                     $2848 = $2847&1;
                     if ($2848) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 477;
                      break;
                     }
                     break;
                    }
                    case 484: {
                     break L306;
                     break;
                    }
                   }
                   do {
                    if ((label|0) == 422) {
                     __THREW__ = 0;
                     invoke_vi(396,($865|0));
                     $2637 = __THREW__; __THREW__ = 0;
                     $2638 = $2637&1;
                     if ($2638) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 424;
                      break;
                     }
                    }
                    else if ((label|0) == 477) {
                     __THREW__ = 0;
                     invoke_vi(396,($868|0));
                     $2849 = __THREW__; __THREW__ = 0;
                     $2850 = $2849&1;
                     if ($2850) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 479;
                      break;
                     }
                    }
                   } while(0);
                   do {
                    if ((label|0) == 424) {
                     __THREW__ = 0;
                     invoke_vi(396,($864|0));
                     $2639 = __THREW__; __THREW__ = 0;
                     $2640 = $2639&1;
                     if ($2640) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 426;
                      break;
                     }
                    }
                    else if ((label|0) == 479) {
                     __THREW__ = 0;
                     invoke_vi(396,($867|0));
                     $2851 = __THREW__; __THREW__ = 0;
                     $2852 = $2851&1;
                     if ($2852) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      break L59;
                     }
                    }
                   } while(0);
                   do {
                    if ((label|0) == 426) {
                     __THREW__ = 0;
                     invoke_vi(396,($863|0));
                     $2641 = __THREW__; __THREW__ = 0;
                     $2642 = $2641&1;
                     if ($2642) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      label = 428;
                      break;
                     }
                    }
                   } while(0);
                   do {
                    if ((label|0) == 428) {
                     __THREW__ = 0;
                     invoke_vi(396,($862|0));
                     $2643 = __THREW__; __THREW__ = 0;
                     $2644 = $2643&1;
                     if ($2644) {
                      $2954 = ___cxa_find_matching_catch(0|0)|0;
                      $2955 = tempRet0;
                      ___clang_call_terminate($2954);
                      // unreachable;
                     } else {
                      break;
                     }
                    }
                   } while(0);
                   __THREW__ = 0;
                   invoke_vi(396,($861|0));
                   $2645 = __THREW__; __THREW__ = 0;
                   $2646 = $2645&1;
                   if ($2646) {
                    $2954 = ___cxa_find_matching_catch(0|0)|0;
                    $2955 = tempRet0;
                    ___clang_call_terminate($2954);
                    // unreachable;
                   } else {
                    break L59;
                   }
                  }
                 } while(0);
                 $j = 0;
                 $2856 = $837;
                 $699 = $2856;
                 $2857 = $699;
                 $2858 = HEAP32[$2857>>2]|0;
                 $697 = $2857;
                 $698 = $2858;
                 $2859 = $698;
                 $695 = $870;
                 $696 = $2859;
                 $2860 = $695;
                 $2861 = $696;
                 HEAP32[$2860>>2] = $2861;
                 ;HEAP32[$vi+0>>2]=HEAP32[$870+0>>2]|0;
                 while(1) {
                  $2862 = $837;
                  $704 = $2862;
                  $2863 = $704;
                  $2864 = (($2863) + 4|0);
                  $2865 = HEAP32[$2864>>2]|0;
                  $702 = $2863;
                  $703 = $2865;
                  $2866 = $703;
                  $700 = $871;
                  $701 = $2866;
                  $2867 = $700;
                  $2868 = $701;
                  HEAP32[$2867>>2] = $2868;
                  $709 = $vi;
                  $710 = $871;
                  $2869 = $709;
                  $2870 = $710;
                  $707 = $2869;
                  $708 = $2870;
                  $2871 = $707;
                  $706 = $2871;
                  $2872 = $706;
                  $2873 = HEAP32[$2872>>2]|0;
                  $2874 = $708;
                  $705 = $2874;
                  $2875 = $705;
                  $2876 = HEAP32[$2875>>2]|0;
                  $2877 = ($2873|0)==($2876|0);
                  $2878 = $2877 ^ 1;
                  if (!($2878)) {
                   break;
                  }
                  $2879 = $j;
                  $2880 = (($2879) + 1)|0;
                  $j = $2880;
                  $711 = $FlagV;
                  $712 = $2879;
                  $2881 = $711;
                  $2882 = $712;
                  $2883 = HEAP32[$2881>>2]|0;
                  $2884 = (($2883) + ($2882<<2)|0);
                  $2885 = HEAP32[$2884>>2]|0;
                  $713 = $vi;
                  $2886 = $713;
                  $2887 = HEAP32[$2886>>2]|0;
                  __THREW__ = 0;
                  $2888 = (invoke_ii(414,($2887|0))|0);
                  $2889 = __THREW__; __THREW__ = 0;
                  $2890 = $2889&1;
                  if ($2890) {
                   label = 161;
                   break L59;
                  }
                  HEAP32[$2888>>2] = $2885;
                  $719 = $vi;
                  $2891 = $719;
                  $2892 = HEAP32[$2891>>2]|0;
                  $2893 = (($2892) + 36|0);
                  HEAP32[$2891>>2] = $2893;
                 }
                 $730 = $str;
                 $2894 = $730;
                 $729 = $2894;
                 $2895 = $729;
                 $728 = $2895;
                 $2896 = $728;
                 $727 = $2896;
                 $2897 = $727;
                 $726 = $2897;
                 $2898 = $726;
                 $2899 = HEAP8[$2898>>0]|0;
                 $2900 = $2899&255;
                 $2901 = $2900 & 1;
                 $2902 = ($2901|0)!=(0);
                 if ($2902) {
                  $722 = $2895;
                  $2903 = $722;
                  $721 = $2903;
                  $2904 = $721;
                  $720 = $2904;
                  $2905 = $720;
                  $2906 = (($2905) + 4|0);
                  $2907 = HEAP32[$2906>>2]|0;
                  $2914 = $2907;
                 } else {
                  $725 = $2895;
                  $2908 = $725;
                  $724 = $2908;
                  $2909 = $724;
                  $723 = $2909;
                  $2910 = $723;
                  $2911 = HEAP8[$2910>>0]|0;
                  $2912 = $2911&255;
                  $2913 = $2912 >> 1;
                  $2914 = $2913;
                 }
                 $size = $2914;
                 $2915 = $size;
                 __THREW__ = 0;
                 $2916 = (invoke_ii(437,($2915|0))|0);
                 $2917 = __THREW__; __THREW__ = 0;
                 $2918 = $2917&1;
                 if ($2918) {
                  label = 161;
                  break L59;
                 }
                 $fpout = $2916;
                 $2919 = $fpout;
                 $745 = $str;
                 $2920 = $745;
                 $744 = $2920;
                 $2921 = $744;
                 $743 = $2921;
                 $2922 = $743;
                 $742 = $2922;
                 $2923 = $742;
                 $741 = $2923;
                 $2924 = $741;
                 $740 = $2924;
                 $2925 = $740;
                 $2926 = HEAP8[$2925>>0]|0;
                 $2927 = $2926&255;
                 $2928 = $2927 & 1;
                 $2929 = ($2928|0)!=(0);
                 if ($2929) {
                  $734 = $2922;
                  $2930 = $734;
                  $733 = $2930;
                  $2931 = $733;
                  $732 = $2931;
                  $2932 = $732;
                  $2933 = (($2932) + 8|0);
                  $2934 = HEAP32[$2933>>2]|0;
                  $2941 = $2934;
                 } else {
                  $739 = $2922;
                  $2935 = $739;
                  $738 = $2935;
                  $2936 = $738;
                  $737 = $2936;
                  $2937 = $737;
                  $2938 = (($2937) + 1|0);
                  $736 = $2938;
                  $2939 = $736;
                  $735 = $2939;
                  $2940 = $735;
                  $2941 = $2940;
                 }
                 $731 = $2941;
                 $2942 = $731;
                 __THREW__ = 0;
                 (invoke_iii(438,($2919|0),($2942|0))|0);
                 $2943 = __THREW__; __THREW__ = 0;
                 $2944 = $2943&1;
                 if ($2944) {
                  label = 161;
                  break L59;
                 }
                 $2945 = $fpout;
                 $872 = 1;
                 __THREW__ = 0;
                 invoke_vi(439,($FlagV|0));
                 $2946 = __THREW__; __THREW__ = 0;
                 $2947 = $2946&1;
                 if ($2947) {
                  label = 9;
                  break L5;
                 }
                 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($str);
                 STACKTOP = sp;return ($2945|0);
                 break;
                }
               }
               do {
                if ((label|0) == 166) {
                 __THREW__ = 0;
                 invoke_vi(396,($846|0));
                 $1588 = __THREW__; __THREW__ = 0;
                 $1589 = $1588&1;
                 if ($1589) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 168;
                  break;
                 }
                }
                else if ((label|0) == 175) {
                 __THREW__ = 0;
                 invoke_vi(396,($850|0));
                 $1602 = __THREW__; __THREW__ = 0;
                 $1603 = $1602&1;
                 if ($1603) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 177;
                  break;
                 }
                }
                else if ((label|0) == 228) {
                 __THREW__ = 0;
                 invoke_vi(396,($853|0));
                 $1814 = __THREW__; __THREW__ = 0;
                 $1815 = $1814&1;
                 if ($1815) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  label = 230;
                  break;
                 }
                }
                else if ((label|0) == 265) {
                 __THREW__ = 0;
                 invoke_vi(396,($855|0));
                 $1956 = __THREW__; __THREW__ = 0;
                 $1957 = $1956&1;
                 if ($1957) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  break L59;
                 }
                }
               } while(0);
               do {
                if ((label|0) == 168) {
                 __THREW__ = 0;
                 invoke_vi(396,($845|0));
                 $1590 = __THREW__; __THREW__ = 0;
                 $1591 = $1590&1;
                 if ($1591) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  break L59;
                 }
                }
                else if ((label|0) == 177) {
                 __THREW__ = 0;
                 invoke_vi(396,($849|0));
                 $1604 = __THREW__; __THREW__ = 0;
                 $1605 = $1604&1;
                 if ($1605) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  break;
                 }
                }
                else if ((label|0) == 230) {
                 __THREW__ = 0;
                 invoke_vi(396,($852|0));
                 $1816 = __THREW__; __THREW__ = 0;
                 $1817 = $1816&1;
                 if ($1817) {
                  $2954 = ___cxa_find_matching_catch(0|0)|0;
                  $2955 = tempRet0;
                  ___clang_call_terminate($2954);
                  // unreachable;
                 } else {
                  break L59;
                 }
                }
               } while(0);
               __THREW__ = 0;
               invoke_vi(396,($848|0));
               $1606 = __THREW__; __THREW__ = 0;
               $1607 = $1606&1;
               if ($1607) {
                $2954 = ___cxa_find_matching_catch(0|0)|0;
                $2955 = tempRet0;
                ___clang_call_terminate($2954);
                // unreachable;
               } else {
                break;
               }
              }
             } while(0);
             if ((label|0) == 161) {
              $1578 = ___cxa_find_matching_catch()|0;
              $1579 = tempRet0;
              $839 = $1578;
              $840 = $1579;
             }
             __THREW__ = 0;
             invoke_vi(439,($FlagV|0));
             $2948 = __THREW__; __THREW__ = 0;
             $2949 = $2948&1;
             if ($2949) {
              $2954 = ___cxa_find_matching_catch(0|0)|0;
              $2955 = tempRet0;
              ___clang_call_terminate($2954);
              // unreachable;
             } else {
              break L5;
             }
            }
           } while(0);
           $1572 = ___cxa_find_matching_catch()|0;
           $1573 = tempRet0;
           $839 = $1572;
           $840 = $1573;
           __THREW__ = 0;
           invoke_vi(396,($842|0));
           $1574 = __THREW__; __THREW__ = 0;
           $1575 = $1574&1;
           if ($1575) {
            $2954 = ___cxa_find_matching_catch(0|0)|0;
            $2955 = tempRet0;
            ___clang_call_terminate($2954);
            // unreachable;
           } else {
            break;
           }
          }
         }
        }
       } while(0);
       if ((label|0) == 156) {
        $1570 = ___cxa_find_matching_catch()|0;
        $1571 = tempRet0;
        $839 = $1570;
        $840 = $1571;
       }
       __THREW__ = 0;
       invoke_vi(396,($841|0));
       $1576 = __THREW__; __THREW__ = 0;
       $1577 = $1576&1;
       if ($1577) {
        $2954 = ___cxa_find_matching_catch(0|0)|0;
        $2955 = tempRet0;
        ___clang_call_terminate($2954);
        // unreachable;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 9) {
  $896 = ___cxa_find_matching_catch()|0;
  $897 = tempRet0;
  $839 = $896;
  $840 = $897;
 }
 __THREW__ = 0;
 invoke_vi(396,($str|0));
 $2950 = __THREW__; __THREW__ = 0;
 $2951 = $2950&1;
 if ($2951) {
  $2954 = ___cxa_find_matching_catch(0|0)|0;
  $2955 = tempRet0;
  ___clang_call_terminate($2954);
  // unreachable;
 }
 $2952 = $839;
 $2953 = $840;
 ___resumeException($2952|0);
 // unreachable;
 return (0)|0;
}
function __ZN6MyMeshD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEED2Ev($1);
 STACKTOP = sp;return;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN3vcg4face3PosI6MyFaceEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP32[$1>>2] = 0;
 $2 = (($1) + 4|0);
 HEAP32[$2>>2] = -1;
 $3 = (($1) + 8|0);
 HEAP32[$3>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri29VertexVectorHasPerVertexColorI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri20HasPerVertexTexCoordI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri32VertexVectorHasPerVertexTexCoordI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri5CleanI6MyMeshE21CountBitLargePolygonsERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $countE = 0, $countV = 0;
 var $fi = 0, $fi1 = 0, $i = 0, $i2 = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fi = sp + 224|0;
 $60 = sp + 4|0;
 $fi1 = sp;
 $61 = sp + 220|0;
 $vi = sp + 244|0;
 $62 = sp + 104|0;
 $59 = $m;
 $63 = $59;
 __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($63);
 $64 = $59;
 __ZN3vcg3tri11UpdateFlagsI6MyMeshE10VertexSetVERS2_($64);
 $65 = $59;
 $66 = (($65) + 32|0);
 $58 = $66;
 $67 = $58;
 $68 = HEAP32[$67>>2]|0;
 $56 = $67;
 $57 = $68;
 $69 = $57;
 $54 = $fi;
 $55 = $69;
 $70 = $54;
 $71 = $55;
 HEAP32[$70>>2] = $71;
 while(1) {
  $72 = $59;
  $73 = (($72) + 32|0);
  $52 = $73;
  $74 = $52;
  $75 = (($74) + 4|0);
  $76 = HEAP32[$75>>2]|0;
  $50 = $74;
  $51 = $76;
  $77 = $51;
  $48 = $60;
  $49 = $77;
  $78 = $48;
  $79 = $49;
  HEAP32[$78>>2] = $79;
  $45 = $fi;
  $46 = $60;
  $80 = $45;
  $81 = $46;
  $43 = $80;
  $44 = $81;
  $82 = $43;
  $42 = $82;
  $83 = $42;
  $84 = HEAP32[$83>>2]|0;
  $85 = $44;
  $41 = $85;
  $86 = $41;
  $87 = HEAP32[$86>>2]|0;
  $88 = ($84|0)==($87|0);
  $89 = $88 ^ 1;
  if (!($89)) {
   break;
  }
  $22 = $fi;
  $90 = $22;
  $91 = HEAP32[$90>>2]|0;
  $92 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($91)|0);
  if (!($92)) {
   $i = 0;
   while(1) {
    $93 = $i;
    $94 = ($93|0)<(3);
    if (!($94)) {
     break;
    }
    $21 = $fi;
    $95 = $21;
    $96 = HEAP32[$95>>2]|0;
    $97 = $i;
    $98 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($96,$97)|0);
    $99 = HEAP32[$98>>2]|0;
    __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E6ClearVEv($99);
    $100 = $i;
    $101 = (($100) + 1)|0;
    $i = $101;
   }
  }
  $19 = $fi;
  $102 = $19;
  $103 = HEAP32[$102>>2]|0;
  $104 = (($103) + 44|0);
  HEAP32[$102>>2] = $104;
 }
 $countE = 0;
 $105 = $59;
 $106 = (($105) + 32|0);
 $18 = $106;
 $107 = $18;
 $108 = HEAP32[$107>>2]|0;
 $16 = $107;
 $17 = $108;
 $109 = $17;
 $14 = $fi1;
 $15 = $109;
 $110 = $14;
 $111 = $15;
 HEAP32[$110>>2] = $111;
 while(1) {
  $112 = $59;
  $113 = (($112) + 32|0);
  $12 = $113;
  $114 = $12;
  $115 = (($114) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $10 = $114;
  $11 = $116;
  $117 = $11;
  $8 = $61;
  $9 = $117;
  $118 = $8;
  $119 = $9;
  HEAP32[$118>>2] = $119;
  $5 = $fi1;
  $6 = $61;
  $120 = $5;
  $121 = $6;
  $3 = $120;
  $4 = $121;
  $122 = $3;
  $2 = $122;
  $123 = $2;
  $124 = HEAP32[$123>>2]|0;
  $125 = $4;
  $1 = $125;
  $126 = $1;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($124|0)==($127|0);
  $129 = $128 ^ 1;
  if (!($129)) {
   break;
  }
  $0 = $fi1;
  $130 = $0;
  $131 = HEAP32[$130>>2]|0;
  $132 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($131)|0);
  if (!($132)) {
   $i2 = 0;
   while(1) {
    $133 = $i2;
    $134 = ($133|0)<(3);
    if (!($134)) {
     break;
    }
    $7 = $fi1;
    $135 = $7;
    $136 = HEAP32[$135>>2]|0;
    $137 = $i2;
    $138 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($136,$137)|0);
    if ($138) {
     $139 = $countE;
     $140 = (($139) + 1)|0;
     $countE = $140;
    } else {
     $13 = $fi1;
     $141 = $13;
     $142 = HEAP32[$141>>2]|0;
     $143 = $i2;
     $144 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V0Ei($142,$143)|0);
     $145 = HEAP32[$144>>2]|0;
     __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E4SetVEv($145);
     $20 = $fi1;
     $146 = $20;
     $147 = HEAP32[$146>>2]|0;
     $148 = $i2;
     $149 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($147,$148)|0);
     $150 = HEAP32[$149>>2]|0;
     __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E4SetVEv($150);
    }
    $151 = $i2;
    $152 = (($151) + 1)|0;
    $i2 = $152;
   }
  }
  $23 = $fi1;
  $153 = $23;
  $154 = HEAP32[$153>>2]|0;
  $155 = (($154) + 44|0);
  HEAP32[$153>>2] = $155;
 }
 $countV = 0;
 $156 = $59;
 $28 = $156;
 $157 = $28;
 $158 = HEAP32[$157>>2]|0;
 $26 = $157;
 $27 = $158;
 $159 = $27;
 $24 = $vi;
 $25 = $159;
 $160 = $24;
 $161 = $25;
 HEAP32[$160>>2] = $161;
 while(1) {
  $162 = $59;
  $33 = $162;
  $163 = $33;
  $164 = (($163) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  $31 = $163;
  $32 = $165;
  $166 = $32;
  $29 = $62;
  $30 = $166;
  $167 = $29;
  $168 = $30;
  HEAP32[$167>>2] = $168;
  $38 = $vi;
  $39 = $62;
  $169 = $38;
  $170 = $39;
  $36 = $169;
  $37 = $170;
  $171 = $36;
  $35 = $171;
  $172 = $35;
  $173 = HEAP32[$172>>2]|0;
  $174 = $37;
  $34 = $174;
  $175 = $34;
  $176 = HEAP32[$175>>2]|0;
  $177 = ($173|0)==($176|0);
  $178 = $177 ^ 1;
  if (!($178)) {
   break;
  }
  $40 = $vi;
  $179 = $40;
  $180 = HEAP32[$179>>2]|0;
  $181 = (__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($180)|0);
  if (!($181)) {
   $47 = $vi;
   $182 = $47;
   $183 = HEAP32[$182>>2]|0;
   $184 = (__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsVEv($183)|0);
   if (!($184)) {
    $185 = $countV;
    $186 = (($185) + 1)|0;
    $countV = $186;
   }
  }
  $53 = $vi;
  $187 = $53;
  $188 = HEAP32[$187>>2]|0;
  $189 = (($188) + 36|0);
  HEAP32[$187>>2] = $189;
 }
 $190 = $59;
 $191 = (($190) + 44|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = $countE;
 $194 = (($193|0) / 2)&-1;
 $195 = (($192) - ($194))|0;
 $196 = $countV;
 $197 = (($195) + ($196))|0;
 STACKTOP = sp;return ($197|0);
}
function __ZN3vcg3tri2io9PrecisionIfE6digitsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 7;
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 32|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE6cFlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1752|0),(1768|0),220,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 24|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Point4IhEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1648|0),(1664|0),145,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri18HasPerVertexNormalI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri30VertexVectorHasPerVertexNormalI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 12|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = HEAP8[1544>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((1544|0))|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    __THREW__ = 0;
    invoke_vi(440,(1528|0));
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     ___cxa_guard_release((1544|0));
     break;
    }
    $10 = ___cxa_find_matching_catch()|0;
    $11 = tempRet0;
    $2 = $10;
    $3 = $11;
    ___cxa_guard_abort((1544|0));
    $12 = $2;
    $13 = $3;
    ___resumeException($12|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((392|0),(1552|0),94,(1640|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg9TexCoord2IfLi1EE1uEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6Point2IfEixEi($1,0)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg9TexCoord2IfLi1EE1vEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6Point2IfEixEi($1,1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($m) {
 $m = $m|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 20|0;
 $7 = $m;
 $12 = $7;
 $13 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($12)|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(8)|0);
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $5 = $8;
 $6 = 1392;
 $15 = $5;
 $16 = $6;
 $3 = $15;
 $4 = $16;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $4;
 $21 = $4;
 __THREW__ = 0;
 $22 = (invoke_ii(441,($21|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(442,($17|0),($20|0),($22|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 7;
   } else {
    __THREW__ = 0;
    invoke_vii(443,($14|0),($8|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $$expand_i1_val2 = 0;
     $11 = $$expand_i1_val2;
     __THREW__ = 0;
     invoke_viii(444,($14|0),(1184|0),(1|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      // unreachable;
     }
    }
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $9 = $33;
    $10 = $34;
    __THREW__ = 0;
    invoke_vi(396,($8|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $40 = ___cxa_find_matching_catch(0|0)|0;
     $41 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $9 = $31;
  $10 = $32;
 }
 $$pre_trunc = $11;
 $37 = $$pre_trunc&1;
 if ($37) {
  ___cxa_free_exception(($14|0));
 }
 $38 = $9;
 $39 = $10;
 ___resumeException($38|0);
 // unreachable;
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE10FaceClearVERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 __ZN3vcg3tri11UpdateFlagsI6MyMeshE9FaceClearERS2_j($1,16);
 STACKTOP = sp;return;
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($1)|0);
 $3 = $2 & 16;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg3tri14PolygonSupportI6MyMeshS2_E14ExtractPolygonEP6MyFaceRNSt3__16vectorIP8MyVertexNS6_9allocatorIS9_EEEE($tfp,$vs) {
 $tfp = $tfp|0;
 $vs = $vs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fs = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 40|0;
 $6 = sp + 12|0;
 $10 = sp + 24|0;
 $15 = sp + 124|0;
 $18 = sp + 60|0;
 $21 = sp + 72|0;
 $22 = sp + 4|0;
 $23 = sp + 84|0;
 $fs = sp + 28|0;
 $25 = $tfp;
 $26 = $vs;
 $24 = $fs;
 $29 = $24;
 $20 = $29;
 $30 = $20;
 $19 = $30;
 $0 = $2;
 $1 = -1;
 $31 = $0;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $32;
 $3 = $21;
 HEAP32[$30>>2] = 0;
 $33 = (($30) + 4|0);
 $4 = $6;
 $5 = -1;
 $34 = $4;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $35;
 $7 = $22;
 HEAP32[$33>>2] = 0;
 $36 = (($30) + 8|0);
 $8 = $10;
 $9 = -1;
 $37 = $8;
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $38;
 $11 = $23;
 $17 = $36;
 HEAP32[$18>>2] = 0;
 $39 = $17;
 $16 = $18;
 $40 = $16;
 $41 = HEAP32[$40>>2]|0;
 $14 = $39;
 HEAP32[$15>>2] = $41;
 $42 = $14;
 $13 = $42;
 $12 = $15;
 $43 = $12;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = $25;
 $46 = $26;
 __THREW__ = 0;
 invoke_viii(445,($45|0),($46|0),($fs|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if (!($48)) {
  __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEED2Ev($fs);
  STACKTOP = sp;return;
 }
 $49 = ___cxa_find_matching_catch()|0;
 $50 = tempRet0;
 $27 = $49;
 $28 = $50;
 __THREW__ = 0;
 invoke_vi(446,($fs|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $55 = ___cxa_find_matching_catch(0|0)|0;
  $56 = tempRet0;
  ___clang_call_terminate($55);
  // unreachable;
 }
 $53 = $27;
 $54 = $28;
 ___resumeException($53|0);
 // unreachable;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri15HasPerFaceColorI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri25FaceVectorHasPerFaceColorI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 12|0);
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 ___assert_fail((488|0),(400|0),174,(504|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $4 = HEAP8[384>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $6 = (___cxa_guard_acquire((384|0))|0);
   $7 = ($6|0)!=(0);
   if ($7) {
    __THREW__ = 0;
    invoke_vii(447,(376|0),-1);
    $8 = __THREW__; __THREW__ = 0;
    $9 = $8&1;
    if (!($9)) {
     ___cxa_guard_release((384|0));
     break;
    }
    $10 = ___cxa_find_matching_catch()|0;
    $11 = tempRet0;
    $2 = $10;
    $3 = $11;
    ___cxa_guard_abort((384|0));
    $12 = $2;
    $13 = $3;
    ___resumeException($12|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((392|0),(400|0),75,(208|0));
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2ENS1_13ColorConstantE($this,$cc) {
 $this = $this|0;
 $cc = $cc|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $cc;
 $2 = $0;
 __ZN3vcg6Point4IhEC2Ev($2);
 $3 = $1;
 HEAP32[$2>>2] = $3;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri25FaceVectorHasPerFaceColorI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE8HasColorEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE8HasColorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14PolygonSupportI6MyMeshS2_E14ExtractPolygonEP6MyFaceRNSt3__16vectorIP8MyVertexNS6_9allocatorIS9_EEEERNS7_IS5_NSA_IS5_EEEE($tfp,$vs,$fs) {
 $tfp = $tfp|0;
 $vs = $vs|0;
 $fs = $fs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i4 = 0;
 var $__annotator$i5 = 0, $__old_size$i = 0, $__old_size$i1 = 0, $i = 0, $p = 0, $se = 0, $start = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i5 = sp + 336|0;
 $__annotator$i4 = sp + 337|0;
 $__annotator$i = sp + 338|0;
 $39 = sp;
 $42 = sp + 339|0;
 $57 = sp + 8|0;
 $60 = sp + 340|0;
 $start = sp + 96|0;
 $p = sp + 40|0;
 $72 = $tfp;
 $73 = $vs;
 $74 = $fs;
 $75 = $73;
 $69 = $75;
 $76 = $69;
 $68 = $76;
 $77 = $68;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$77>>2]|0;
 $81 = $79;
 $82 = $80;
 $83 = (($81) - ($82))|0;
 $84 = (($83|0) / 4)&-1;
 $__old_size$i = $84;
 $66 = $76;
 $85 = $66;
 $86 = HEAP32[$85>>2]|0;
 $64 = $85;
 $65 = $86;
 $87 = $64;
 while(1) {
  $88 = $65;
  $89 = (($87) + 4|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88|0)!=($90|0);
  if (!($91)) {
   break;
  }
  $63 = $87;
  $92 = $63;
  $93 = (($92) + 8|0);
  $62 = $93;
  $94 = $62;
  $61 = $94;
  $95 = $61;
  $96 = (($87) + 4|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = (($97) + -4|0);
  HEAP32[$96>>2] = $98;
  $54 = $98;
  $99 = $54;
  $58 = $95;
  $59 = $99;
  $100 = $58;
  $101 = $59;
  ;HEAP8[$57+0>>0]=HEAP8[$60+0>>0]|0;
  $55 = $100;
  $56 = $101;
 }
 $102 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(448,($76|0),($102|0));
 $103 = __THREW__; __THREW__ = 0;
 $104 = $103&1;
 if ($104) {
  $105 = ___cxa_find_matching_catch()|0;
  $106 = tempRet0;
  $70 = $105;
  $71 = $106;
  $107 = $70;
  ___cxa_call_unexpected(($107|0));
  // unreachable;
 }
 $67 = $76;
 $108 = $74;
 $51 = $108;
 $109 = $51;
 $50 = $109;
 $110 = $50;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = HEAP32[$110>>2]|0;
 $114 = $112;
 $115 = $113;
 $116 = (($114) - ($115))|0;
 $117 = (($116|0) / 4)&-1;
 $__old_size$i1 = $117;
 $48 = $109;
 $118 = $48;
 $119 = HEAP32[$118>>2]|0;
 $46 = $118;
 $47 = $119;
 $120 = $46;
 while(1) {
  $121 = $47;
  $122 = (($120) + 4|0);
  $123 = HEAP32[$122>>2]|0;
  $124 = ($121|0)!=($123|0);
  if (!($124)) {
   break;
  }
  $45 = $120;
  $125 = $45;
  $126 = (($125) + 8|0);
  $44 = $126;
  $127 = $44;
  $43 = $127;
  $128 = $43;
  $129 = (($120) + 4|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (($130) + -4|0);
  HEAP32[$129>>2] = $131;
  $36 = $131;
  $132 = $36;
  $40 = $128;
  $41 = $132;
  $133 = $40;
  $134 = $41;
  ;HEAP8[$39+0>>0]=HEAP8[$42+0>>0]|0;
  $37 = $133;
  $38 = $134;
 }
 $135 = $__old_size$i1;
 __THREW__ = 0;
 invoke_vii(449,($109|0),($135|0));
 $136 = __THREW__; __THREW__ = 0;
 $137 = $136&1;
 if ($137) {
  $138 = ___cxa_find_matching_catch()|0;
  $139 = tempRet0;
  $52 = $138;
  $53 = $139;
  $140 = $52;
  ___cxa_call_unexpected(($140|0));
  // unreachable;
 }
 $49 = $109;
 $se = -1;
 $i = 0;
 while(1) {
  $141 = $i;
  $142 = ($141|0)<(3);
  if (!($142)) {
   break;
  }
  $143 = $72;
  $144 = $i;
  $145 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($143,$144)|0);
  if (!($145)) {
   label = 14;
   break;
  }
  $147 = $i;
  $148 = (($147) + 1)|0;
  $i = $148;
 }
 if ((label|0) == 14) {
  $146 = $i;
  $se = $146;
 }
 $149 = $se;
 $150 = ($149|0)==(-1);
 if ($150) {
  STACKTOP = sp;return;
 }
 $151 = $72;
 $152 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsVEv($151)|0);
 if ($152) {
  STACKTOP = sp;return;
 }
 $153 = $72;
 $154 = $se;
 $155 = $72;
 $156 = $se;
 $157 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($155,$156)|0);
 $158 = HEAP32[$157>>2]|0;
 __ZN3vcg4face3PosI6MyFaceEC2EPS2_iP8MyVertex($start,$153,$154,$158);
 ;HEAP32[$p+0>>2]=HEAP32[$start+0>>2]|0;HEAP32[$p+4>>2]=HEAP32[$start+4>>2]|0;HEAP32[$p+8>>2]=HEAP32[$start+8>>2]|0;
 $159 = $74;
 $160 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
 $34 = $159;
 $35 = $160;
 $161 = $34;
 $162 = (($161) + 4|0);
 $163 = HEAP32[$162>>2]|0;
 $33 = $161;
 $164 = $33;
 $165 = (($164) + 8|0);
 $32 = $165;
 $166 = $32;
 $31 = $166;
 $167 = $31;
 $168 = HEAP32[$167>>2]|0;
 $169 = ($163|0)!=($168|0);
 if ($169) {
  __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i,$161,1);
  $30 = $161;
  $170 = $30;
  $171 = (($170) + 8|0);
  $29 = $171;
  $172 = $29;
  $28 = $172;
  $173 = $28;
  $174 = (($161) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $27 = $175;
  $176 = $27;
  $177 = $35;
  $24 = $173;
  $25 = $176;
  $26 = $177;
  $178 = $25;
  $179 = ($178|0)==(0|0);
  if (!($179)) {
   $180 = $26;
   $181 = HEAP32[$180>>2]|0;
   HEAP32[$178>>2] = $181;
  }
  __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $182 = (($161) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = (($183) + 4|0);
  HEAP32[$182>>2] = $184;
 } else {
  $185 = $35;
  __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($161,$185);
 }
 $186 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
 $187 = HEAP32[$186>>2]|0;
 __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($187);
 while(1) {
  $188 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
  $189 = HEAP32[$188>>2]|0;
  $190 = (__ZN3vcg4face3PosI6MyFaceE1EEv($p)|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($189,$191)|0);
  if ($192) {
   label = 28;
   break;
  }
  $193 = $73;
  $194 = (__ZN3vcg4face3PosI6MyFaceE1VEv($p)|0);
  $22 = $193;
  $23 = $194;
  $195 = $22;
  $196 = (($195) + 4|0);
  $197 = HEAP32[$196>>2]|0;
  $21 = $195;
  $198 = $21;
  $199 = (($198) + 8|0);
  $20 = $199;
  $200 = $20;
  $19 = $200;
  $201 = $19;
  $202 = HEAP32[$201>>2]|0;
  $203 = ($197|0)!=($202|0);
  if ($203) {
   __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i4,$195,1);
   $18 = $195;
   $204 = $18;
   $205 = (($204) + 8|0);
   $17 = $205;
   $206 = $17;
   $16 = $206;
   $207 = $16;
   $208 = (($195) + 4|0);
   $209 = HEAP32[$208>>2]|0;
   $15 = $209;
   $210 = $15;
   $211 = $23;
   $12 = $207;
   $13 = $210;
   $14 = $211;
   $212 = $13;
   $213 = ($212|0)==(0|0);
   if (!($213)) {
    $214 = $14;
    $215 = HEAP32[$214>>2]|0;
    HEAP32[$212>>2] = $215;
   }
   __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
   $216 = (($195) + 4|0);
   $217 = HEAP32[$216>>2]|0;
   $218 = (($217) + 4|0);
   HEAP32[$216>>2] = $218;
  } else {
   $219 = $23;
   __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($195,$219);
  }
  __ZN3vcg4face3PosI6MyFaceE5FlipEEv($p);
  while(1) {
   $220 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
   $221 = HEAP32[$220>>2]|0;
   $222 = (__ZN3vcg4face3PosI6MyFaceE1EEv($p)|0);
   $223 = HEAP32[$222>>2]|0;
   $224 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($221,$223)|0);
   if (!($224)) {
    break;
   }
   __ZN3vcg4face3PosI6MyFaceE5FlipFEv($p);
   $225 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
   $226 = HEAP32[$225>>2]|0;
   $227 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsVEv($226)|0);
   if (!($227)) {
    $228 = $74;
    $229 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
    $10 = $228;
    $11 = $229;
    $230 = $10;
    $231 = (($230) + 4|0);
    $232 = HEAP32[$231>>2]|0;
    $9 = $230;
    $233 = $9;
    $234 = (($233) + 8|0);
    $8 = $234;
    $235 = $8;
    $7 = $235;
    $236 = $7;
    $237 = HEAP32[$236>>2]|0;
    $238 = ($232|0)!=($237|0);
    if ($238) {
     __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator$i5,$230,1);
     $6 = $230;
     $239 = $6;
     $240 = (($239) + 8|0);
     $5 = $240;
     $241 = $5;
     $4 = $241;
     $242 = $4;
     $243 = (($230) + 4|0);
     $244 = HEAP32[$243>>2]|0;
     $3 = $244;
     $245 = $3;
     $246 = $11;
     $0 = $242;
     $1 = $245;
     $2 = $246;
     $247 = $1;
     $248 = ($247|0)==(0|0);
     if (!($248)) {
      $249 = $2;
      $250 = HEAP32[$249>>2]|0;
      HEAP32[$247>>2] = $250;
     }
     __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i5);
     $251 = (($230) + 4|0);
     $252 = HEAP32[$251>>2]|0;
     $253 = (($252) + 4|0);
     HEAP32[$251>>2] = $253;
    } else {
     $254 = $11;
     __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($230,$254);
    }
    $255 = (__ZN3vcg4face3PosI6MyFaceE1FEv($p)|0);
    $256 = HEAP32[$255>>2]|0;
    __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($256);
   }
   __ZN3vcg4face3PosI6MyFaceE5FlipEEv($p);
  }
  __ZN3vcg4face3PosI6MyFaceE5FlipVEv($p);
  $257 = (__ZNK3vcg4face3PosI6MyFaceEneERKS3_($p,$start)|0);
  if (!($257)) {
   label = 46;
   break;
  }
 }
 if ((label|0) == 28) {
  ___assert_fail((512|0),(536|0),186,(632|0));
  // unreachable;
 }
 else if ((label|0) == 46) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIP6MyFaceNS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIP6MyFaceNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($2)|0);
 $4 = $1;
 $5 = 262144 << $4;
 $6 = $3 & $5;
 $7 = ($6|0)!=(0);
 STACKTOP = sp;return ($7|0);
}
function __ZN3vcg4face3PosI6MyFaceEC2EPS2_iP8MyVertex($this,$fp,$zp,$vp) {
 $this = $this|0;
 $fp = $fp|0;
 $zp = $zp|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fp;
 $2 = $zp;
 $3 = $vp;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = $2;
 $7 = (($4) + 4|0);
 HEAP32[$7>>2] = $6;
 $8 = $3;
 $9 = (($4) + 8|0);
 HEAP32[$9>>2] = $8;
 $10 = $3;
 $11 = $1;
 $12 = $2;
 $13 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V0Ei($11,$12)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($10|0)==($14|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = $3;
 $17 = $1;
 $18 = $2;
 $19 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($17,$18)|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($16|0)==($20|0);
 if ($21) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((1072|0),(712|0),80,(1112|0));
  // unreachable;
 }
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 12|0);
   $9 = (($8) + ($7<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((488|0),(400|0),173,(1064|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face3PosI6MyFaceE1FEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 16;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3vcg4face3PosI6MyFaceE1EEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face3PosI6MyFaceE1VEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face3PosI6MyFaceE5FlipEEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($1) + 4|0);
 $5 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($3,$4)|0);
 $6 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($2,$5)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)!=($9|0);
 if (!($10)) {
  ___assert_fail((984|0),(712|0),177,(1056|0));
  // unreachable;
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($1) + 4|0);
 $14 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($12,$13)|0);
 $15 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($11,$14)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($1) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)==($18|0);
 if (!($19)) {
  $20 = HEAP32[$1>>2]|0;
  $21 = (($1) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 0)|0;
  $24 = HEAP32[$1>>2]|0;
  $25 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($24)|0);
  $26 = (($23|0) % ($25|0))&-1;
  $27 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($20,$26)|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($1) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if (!($31)) {
   ___assert_fail((984|0),(712|0),177,(1056|0));
   // unreachable;
  }
 }
 $32 = HEAP32[$1>>2]|0;
 $33 = HEAP32[$1>>2]|0;
 $34 = (($1) + 4|0);
 $35 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($33,$34)|0);
 $36 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($32,$35)|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($1) + 8|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($37|0)==($39|0);
 if ($40) {
  $41 = HEAP32[$1>>2]|0;
  $42 = (($1) + 4|0);
  $43 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($41,$42)|0);
  $44 = (($1) + 4|0);
  HEAP32[$44>>2] = $43;
 } else {
  $45 = HEAP32[$1>>2]|0;
  $46 = (($1) + 4|0);
  $47 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($45,$46)|0);
  $48 = (($1) + 4|0);
  HEAP32[$48>>2] = $47;
 }
 $49 = HEAP32[$1>>2]|0;
 $50 = HEAP32[$1>>2]|0;
 $51 = (($1) + 4|0);
 $52 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($50,$51)|0);
 $53 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($49,$52)|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = (($1) + 8|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ($54|0)!=($56|0);
 if (!($57)) {
  ___assert_fail((840|0),(712|0),180,(1056|0));
  // unreachable;
 }
 $58 = HEAP32[$1>>2]|0;
 $59 = HEAP32[$1>>2]|0;
 $60 = (($1) + 4|0);
 $61 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($59,$60)|0);
 $62 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($58,$61)|0);
 $63 = HEAP32[$62>>2]|0;
 $64 = (($1) + 8|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($63|0)==($65|0);
 if ($66) {
  STACKTOP = sp;return;
 }
 $67 = HEAP32[$1>>2]|0;
 $68 = (($1) + 4|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($67,$69)|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($1) + 8|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = ($71|0)==($73|0);
 if ($74) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((840|0),(712|0),180,(1056|0));
  // unreachable;
 }
}
function __ZN3vcg4face3PosI6MyFaceE5FlipFEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $nf = 0, $nz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $nz = sp;
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($2,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$1>>2]|0;
 $8 = (($1) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($7,$9)|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($6,$12)|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = ($14|0)==($15|0);
 if (!($16)) {
  ___assert_fail((800|0),(712|0),192,(832|0));
  // unreachable;
 }
 $17 = HEAP32[$1>>2]|0;
 $18 = HEAP32[$1>>2]|0;
 $19 = (($1) + 4|0);
 $20 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($18,$19)|0);
 $21 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($17,$20)|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($1) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($22|0)!=($24|0);
 if (!($25)) {
  ___assert_fail((840|0),(712|0),194,(832|0));
  // unreachable;
 }
 $26 = HEAP32[$1>>2]|0;
 $27 = HEAP32[$1>>2]|0;
 $28 = (($1) + 4|0);
 $29 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($27,$28)|0);
 $30 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($26,$29)|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($1) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31|0)==($33|0);
 if (!($34)) {
  $35 = HEAP32[$1>>2]|0;
  $36 = (($1) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($35,$37)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (($1) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)==($41|0);
  if (!($42)) {
   ___assert_fail((840|0),(712|0),194,(832|0));
   // unreachable;
  }
 }
 $43 = HEAP32[$1>>2]|0;
 $44 = (($1) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($43,$45)|0);
 $47 = HEAP32[$46>>2]|0;
 $nf = $47;
 $48 = HEAP32[$1>>2]|0;
 $49 = (($1) + 4|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($48,$50)|0);
 $52 = HEAP8[$51>>0]|0;
 $53 = $52 << 24 >> 24;
 HEAP32[$nz>>2] = $53;
 $54 = $nf;
 $55 = $nf;
 $56 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($55,$nz)|0);
 $57 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($54,$56)|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = (($1) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($58|0)!=($60|0);
 if (!($61)) {
  ___assert_fail((904|0),(712|0),197,(832|0));
  // unreachable;
 }
 $62 = $nf;
 $63 = $nf;
 $64 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($63,$nz)|0);
 $65 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($62,$64)|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = (($1) + 8|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($66|0)==($68|0);
 if (!($69)) {
  $70 = $nf;
  $71 = HEAP32[$nz>>2]|0;
  $72 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($70,$71)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($1) + 8|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if (!($76)) {
   ___assert_fail((904|0),(712|0),197,(832|0));
   // unreachable;
  }
 }
 $77 = $nf;
 HEAP32[$1>>2] = $77;
 $78 = HEAP32[$nz>>2]|0;
 $79 = (($1) + 4|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$1>>2]|0;
 $81 = HEAP32[$1>>2]|0;
 $82 = (($1) + 4|0);
 $83 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($81,$82)|0);
 $84 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($80,$83)|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = (($1) + 8|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($85|0)!=($87|0);
 if (!($88)) {
  ___assert_fail((648|0),(712|0),200,(832|0));
  // unreachable;
 }
 $89 = HEAP32[$1>>2]|0;
 $90 = HEAP32[$1>>2]|0;
 $91 = (($1) + 4|0);
 $92 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($90,$91)|0);
 $93 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($89,$92)|0);
 $94 = HEAP32[$93>>2]|0;
 $95 = (($1) + 8|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($94|0)==($96|0);
 if ($97) {
  STACKTOP = sp;return;
 }
 $98 = HEAP32[$1>>2]|0;
 $99 = (($1) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($98,$100)|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = (($1) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($102|0)==($104|0);
 if ($105) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((648|0),(712|0),200,(832|0));
  // unreachable;
 }
}
function __ZN3vcg4face3PosI6MyFaceE5FlipVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = (($1) + 4|0);
 $5 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($3,$4)|0);
 $6 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($2,$5)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($1) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)!=($9|0);
 if (!($10)) {
  ___assert_fail((648|0),(712|0),206,(792|0));
  // unreachable;
 }
 $11 = HEAP32[$1>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (($1) + 4|0);
 $14 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($12,$13)|0);
 $15 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($11,$14)|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($1) + 8|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($16|0)==($18|0);
 if (!($19)) {
  $20 = HEAP32[$1>>2]|0;
  $21 = (($1) + 4|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($20,$22)|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($1) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($24|0)==($26|0);
  if (!($27)) {
   ___assert_fail((648|0),(712|0),206,(792|0));
   // unreachable;
  }
 }
 $28 = HEAP32[$1>>2]|0;
 $29 = HEAP32[$1>>2]|0;
 $30 = (($1) + 4|0);
 $31 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($29,$30)|0);
 $32 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($28,$31)|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($1) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33|0)==($35|0);
 if ($36) {
  $37 = HEAP32[$1>>2]|0;
  $38 = (($1) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($37,$39)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($1) + 8|0);
  HEAP32[$42>>2] = $41;
 } else {
  $43 = HEAP32[$1>>2]|0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($1) + 4|0);
  $46 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($44,$45)|0);
  $47 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($43,$46)|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($1) + 8|0);
  HEAP32[$49>>2] = $48;
 }
 $50 = HEAP32[$1>>2]|0;
 $51 = HEAP32[$1>>2]|0;
 $52 = (($1) + 4|0);
 $53 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($51,$52)|0);
 $54 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($50,$53)|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($1) + 8|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($55|0)!=($57|0);
 if (!($58)) {
  ___assert_fail((648|0),(712|0),213,(792|0));
  // unreachable;
 }
 $59 = HEAP32[$1>>2]|0;
 $60 = HEAP32[$1>>2]|0;
 $61 = (($1) + 4|0);
 $62 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($60,$61)|0);
 $63 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($59,$62)|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = (($1) + 8|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = ($64|0)==($66|0);
 if ($67) {
  STACKTOP = sp;return;
 }
 $68 = HEAP32[$1>>2]|0;
 $69 = (($1) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($68,$70)|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = (($1) + 8|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($72|0)==($74|0);
 if ($75) {
  STACKTOP = sp;return;
 } else {
  ___assert_fail((648|0),(712|0),213,(792|0));
  // unreachable;
 }
}
function __ZNK3vcg4face3PosI6MyFaceEneERKS3_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)!=($5|0);
 if ($6) {
  $19 = 1;
  STACKTOP = sp;return ($19|0);
 }
 $7 = (($2) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)!=($11|0);
 if ($12) {
  $19 = 1;
  STACKTOP = sp;return ($19|0);
 }
 $13 = (($2) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($14|0)!=($17|0);
 $19 = $18;
 STACKTOP = sp;return ($19|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 2)|0;
 $5 = (($4|0) % 3)&-1;
 STACKTOP = sp;return ($5|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 1)|0;
 $5 = (($4|0) % 3)&-1;
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 24|0);
   $9 = (($8) + ($7<<2)|0);
   STACKTOP = sp;return ($9|0);
  }
 }
 ___assert_fail((488|0),(400|0),617,(976|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 36|0);
 $5 = (($4) + ($3)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 3;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 68|0;
 $23 = sp + 16|0;
 $__v = sp + 72|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIP8MyVertexRNS_9allocatorIS2_EEEC2EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$99>>2] = $102;
 }
 $103 = (($__v) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 HEAP32[$103>>2] = $105;
 __THREW__ = 0;
 invoke_vii(450,($32|0),($__v|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if (!($107)) {
  __ZNSt3__114__split_bufferIP8MyVertexRNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(451,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 }
 $112 = $30;
 $113 = $31;
 ___resumeException($112|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIP8MyVertexRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 48|0;
 $__t$i1 = sp + 28|0;
 $__t$i = sp + 72|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP8MyVertexRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE21__push_back_slow_pathIKS2_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 68|0;
 $23 = sp + 16|0;
 $__v = sp + 72|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIP6MyFaceRNS_9allocatorIS2_EEEC2EjjS5_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$99>>2] = $102;
 }
 $103 = (($__v) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 HEAP32[$103>>2] = $105;
 __THREW__ = 0;
 invoke_vii(452,($32|0),($__v|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if (!($107)) {
  __ZNSt3__114__split_bufferIP6MyFaceRNS_9allocatorIS2_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(453,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 }
 $112 = $30;
 $113 = $31;
 ___resumeException($112|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIP6MyFaceRNS_9allocatorIS2_EEEC2EjjS5_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 48|0;
 $__t$i1 = sp + 28|0;
 $__t$i = sp + 72|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIP6MyFaceRNS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V0Ei($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($3) + 1)|0;
 $5 = (($4|0) % 3)&-1;
 $6 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($2,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 40|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE31__annotate_contiguous_containerEPKvS7_S7_S7_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE9FaceClearERS2_j($m,$FlagMask) {
 $m = $m|0;
 $FlagMask = $FlagMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $andMask = 0, $fi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fi = sp + 24|0;
 $21 = sp + 76|0;
 $19 = $m;
 $20 = $FlagMask;
 $22 = $19;
 __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($22);
 $23 = $20;
 $24 = $23 ^ -1;
 $andMask = $24;
 $25 = $19;
 $26 = (($25) + 32|0);
 $18 = $26;
 $27 = $18;
 $28 = HEAP32[$27>>2]|0;
 $16 = $27;
 $17 = $28;
 $29 = $17;
 $14 = $fi;
 $15 = $29;
 $30 = $14;
 $31 = $15;
 HEAP32[$30>>2] = $31;
 while(1) {
  $32 = $19;
  $33 = (($32) + 32|0);
  $12 = $33;
  $34 = $12;
  $35 = (($34) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $10 = $34;
  $11 = $36;
  $37 = $11;
  $8 = $21;
  $9 = $37;
  $38 = $8;
  $39 = $9;
  HEAP32[$38>>2] = $39;
  $5 = $fi;
  $6 = $21;
  $40 = $5;
  $41 = $6;
  $3 = $40;
  $4 = $41;
  $42 = $3;
  $2 = $42;
  $43 = $2;
  $44 = HEAP32[$43>>2]|0;
  $45 = $4;
  $1 = $45;
  $46 = $1;
  $47 = HEAP32[$46>>2]|0;
  $48 = ($44|0)==($47|0);
  $49 = $48 ^ 1;
  if (!($49)) {
   break;
  }
  $0 = $fi;
  $50 = $0;
  $51 = HEAP32[$50>>2]|0;
  $52 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($51)|0);
  if (!($52)) {
   $53 = $andMask;
   $7 = $fi;
   $54 = $7;
   $55 = HEAP32[$54>>2]|0;
   $56 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($55)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & $53;
   HEAP32[$56>>2] = $58;
  }
  $13 = $fi;
  $59 = $13;
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) + 44|0);
  HEAP32[$59>>2] = $61;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($m) {
 $m = $m|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 20|0;
 $7 = $m;
 $12 = $7;
 $13 = (__ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_($12)|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(8)|0);
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $5 = $8;
 $6 = 1120;
 $15 = $5;
 $16 = $6;
 $3 = $15;
 $4 = $16;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $4;
 $21 = $4;
 __THREW__ = 0;
 $22 = (invoke_ii(441,($21|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(442,($17|0),($20|0),($22|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 7;
   } else {
    __THREW__ = 0;
    invoke_vii(443,($14|0),($8|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $$expand_i1_val2 = 0;
     $11 = $$expand_i1_val2;
     __THREW__ = 0;
     invoke_viii(444,($14|0),(1184|0),(1|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      // unreachable;
     }
    }
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $9 = $33;
    $10 = $34;
    __THREW__ = 0;
    invoke_vi(396,($8|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $40 = ___cxa_find_matching_catch(0|0)|0;
     $41 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $9 = $31;
  $10 = $32;
 }
 $$pre_trunc = $11;
 $37 = $$pre_trunc&1;
 if ($37) {
  ___cxa_free_exception(($14|0));
 }
 $38 = $9;
 $39 = $10;
 ___resumeException($38|0);
 // unreachable;
}
function __ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri25FaceVectorHasPerFaceFlagsI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg25MissingComponentExceptionC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE($this,$err) {
 $this = $this|0;
 $err = $err|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $err;
 $4 = $0;
 $5 = $1;
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($4,$5);
 $6 = (1200 + 8|0);
 HEAP32[$4>>2] = $6;
 __THREW__ = 0;
 $7 = (invoke_iii(454,(7888|0),(1224|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  $10 = $1;
  __THREW__ = 0;
  $11 = (invoke_iii(455,($7|0),($10|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if (!($13)) {
   __THREW__ = 0;
   (invoke_iii(454,($11|0),(1256|0))|0);
   $14 = __THREW__; __THREW__ = 0;
   $15 = $14&1;
   if (!($15)) {
    STACKTOP = sp;return;
   }
  }
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __ZNSt13runtime_errorD2Ev($4);
 $18 = $2;
 $19 = $3;
 ___resumeException($18|0);
 // unreachable;
}
function __ZN3vcg25MissingComponentExceptionD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt13runtime_errorD2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen(($1|0))|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__os;
 $1 = $__str;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = (__ZNSt3__111char_traitsIcE6lengthEPKc($4)|0);
 $6 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($2,$3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE($__os,$__str) {
 $__os = $__os|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = $__os;
 $25 = $__str;
 $26 = $24;
 $27 = $25;
 $23 = $27;
 $28 = $23;
 $22 = $28;
 $29 = $22;
 $21 = $29;
 $30 = $21;
 $20 = $30;
 $31 = $20;
 $19 = $31;
 $32 = $19;
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 & 1;
 $36 = ($35|0)!=(0);
 if ($36) {
  $13 = $29;
  $37 = $13;
  $12 = $37;
  $38 = $12;
  $11 = $38;
  $39 = $11;
  $40 = (($39) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $48 = $41;
 } else {
  $18 = $29;
  $42 = $18;
  $17 = $42;
  $43 = $17;
  $16 = $43;
  $44 = $16;
  $45 = (($44) + 1|0);
  $15 = $45;
  $46 = $15;
  $14 = $46;
  $47 = $14;
  $48 = $47;
 }
 $10 = $48;
 $49 = $10;
 $50 = $25;
 $9 = $50;
 $51 = $9;
 $8 = $51;
 $52 = $8;
 $7 = $52;
 $53 = $7;
 $6 = $53;
 $54 = $6;
 $55 = HEAP8[$54>>0]|0;
 $56 = $55&255;
 $57 = $56 & 1;
 $58 = ($57|0)!=(0);
 if ($58) {
  $2 = $51;
  $59 = $2;
  $1 = $59;
  $60 = $1;
  $0 = $60;
  $61 = $0;
  $62 = (($61) + 4|0);
  $63 = HEAP32[$62>>2]|0;
  $70 = $63;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 } else {
  $5 = $51;
  $64 = $5;
  $4 = $64;
  $65 = $4;
  $3 = $65;
  $66 = $3;
  $67 = HEAP8[$66>>0]|0;
  $68 = $67&255;
  $69 = $68 >> 1;
  $70 = $69;
  $71 = (__ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($26,$49,$70)|0);
  STACKTOP = sp;return ($71|0);
 }
 return (0)|0;
}
function __ZN3vcg25MissingComponentExceptionD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg25MissingComponentExceptionD2Ev($1);
 __ZdlPv($1);
 STACKTOP = sp;return;
}
function __ZNK3vcg25MissingComponentException4whatEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return (1264|0);
}
function __ZNSt3__124__put_character_sequenceIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_PKS4_j($__os,$__str,$__len) {
 $__os = $__os|0;
 $__str = $__str|0;
 $__len = $__len|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__s = 0, $eh$lpad$body$index2Z2D = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 44|0;
 $5 = sp + 16|0;
 $__s = sp;
 $25 = sp + 12|0;
 $26 = sp + 88|0;
 $20 = $__os;
 $21 = $__str;
 $22 = $__len;
 $27 = $20;
 __THREW__ = 0;
 invoke_vii(456,($__s|0),($27|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 L1: do {
  if ($29) {
   label = 23;
  } else {
   $19 = $__s;
   $30 = $19;
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&1;
   L4: do {
    if ($32) {
     $33 = $20;
     $17 = $25;
     $18 = $33;
     $34 = $17;
     $35 = $18;
     $36 = HEAP32[$35>>2]|0;
     $37 = (($36) + -12|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = (($35) + ($38)|0);
     $16 = $39;
     $40 = $16;
     $15 = $40;
     $41 = $15;
     $42 = (($41) + 24|0);
     $43 = HEAP32[$42>>2]|0;
     HEAP32[$34>>2] = $43;
     $44 = $21;
     $45 = $20;
     $46 = HEAP32[$45>>2]|0;
     $47 = (($46) + -12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (($45) + ($48)|0);
     $10 = $49;
     $50 = $10;
     $51 = (($50) + 4|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 & 176;
     $54 = ($53|0)==(32);
     if ($54) {
      $55 = $21;
      $56 = $22;
      $57 = (($55) + ($56)|0);
      $108 = $57;
     } else {
      $58 = $21;
      $108 = $58;
     }
     $59 = $21;
     $60 = $22;
     $61 = (($59) + ($60)|0);
     $62 = $20;
     $63 = HEAP32[$62>>2]|0;
     $64 = (($63) + -12|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($62) + ($65)|0);
     $67 = $20;
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + -12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($67) + ($70)|0);
     $8 = $71;
     $72 = $8;
     $73 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $74 = (($72) + 76|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($73,$75)|0);
     do {
      if ($76) {
       $3 = $72;
       $4 = 32;
       $77 = $3;
       __THREW__ = 0;
       invoke_vii(457,($5|0),($77|0));
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 24;
       } else {
        $2 = $5;
        $80 = $2;
        __THREW__ = 0;
        $81 = (invoke_iii(458,($80|0),(12416|0))|0);
        $82 = __THREW__; __THREW__ = 0;
        $83 = $82&1;
        if (!($83)) {
         $84 = $4;
         $0 = $81;
         $1 = $84;
         $85 = $0;
         $86 = HEAP32[$85>>2]|0;
         $87 = (($86) + 28|0);
         $88 = HEAP32[$87>>2]|0;
         $89 = $1;
         __THREW__ = 0;
         $90 = (invoke_iii($88|0,($85|0),($89|0))|0);
         $91 = __THREW__; __THREW__ = 0;
         $92 = $91&1;
         if (!($92)) {
          __THREW__ = 0;
          invoke_vi(459,($5|0));
          $101 = __THREW__; __THREW__ = 0;
          $102 = $101&1;
          if ($102) {
           label = 24;
           break;
          }
          $103 = $90 << 24 >> 24;
          $104 = (($72) + 76|0);
          HEAP32[$104>>2] = $103;
          label = 17;
          break;
         }
        }
        $93 = ___cxa_find_matching_catch(0|0,0|0)|0;
        $94 = tempRet0;
        $6 = $93;
        $7 = $94;
        __THREW__ = 0;
        invoke_vi(459,($5|0));
        $95 = __THREW__; __THREW__ = 0;
        $96 = $95&1;
        if ($96) {
         $99 = ___cxa_find_matching_catch(0|0,0|0,0|0)|0;
         $100 = tempRet0;
         ___clang_call_terminate($99);
         // unreachable;
        } else {
         $97 = $6;
         $98 = $7;
         $eh$lpad$body$index2Z2D = $98;$eh$lpad$body$indexZ2D = $97;
         break;
        }
       }
      } else {
       label = 17;
      }
     } while(0);
     do {
      if ((label|0) == 17) {
       $105 = (($72) + 76|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = $106&255;
       __THREW__ = 0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$25+0>>2]|0;
       invoke_viiiiiii(460,($26|0),($$byval_copy|0),($44|0),($108|0),($61|0),($66|0),($107|0));
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
       } else {
        $9 = $26;
        $111 = $9;
        $112 = HEAP32[$111>>2]|0;
        $113 = ($112|0)==(0|0);
        if ($113) {
         $114 = $20;
         $115 = HEAP32[$114>>2]|0;
         $116 = (($115) + -12|0);
         $117 = HEAP32[$116>>2]|0;
         $118 = (($114) + ($117)|0);
         $13 = $118;
         $14 = 5;
         $119 = $13;
         $120 = $14;
         $11 = $119;
         $12 = $120;
         $121 = $11;
         $122 = (($121) + 16|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = $12;
         $125 = $123 | $124;
         __THREW__ = 0;
         invoke_vii(461,($121|0),($125|0));
         $126 = __THREW__; __THREW__ = 0;
         $127 = $126&1;
         if ($127) {
          label = 24;
          break;
         }
        }
        break L4;
       }
      }
     } while(0);
     if ((label|0) == 24) {
      $130 = ___cxa_find_matching_catch(0|0)|0;
      $131 = tempRet0;
      $eh$lpad$body$index2Z2D = $131;$eh$lpad$body$indexZ2D = $130;
     }
     $23 = $eh$lpad$body$indexZ2D;
     $24 = $eh$lpad$body$index2Z2D;
     __THREW__ = 0;
     invoke_vi(462,($__s|0));
     $132 = __THREW__; __THREW__ = 0;
     $133 = $132&1;
     if ($133) {
      $151 = ___cxa_find_matching_catch(0|0)|0;
      $152 = tempRet0;
      ___clang_call_terminate($151);
      // unreachable;
     } else {
      break L1;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(462,($__s|0));
   $134 = __THREW__; __THREW__ = 0;
   $135 = $134&1;
   if ($135) {
    label = 23;
   } else {
    $144 = $20;
    STACKTOP = sp;return ($144|0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $128 = ___cxa_find_matching_catch(0|0)|0;
  $129 = tempRet0;
  $23 = $128;
  $24 = $129;
 }
 $136 = $23;
 (___cxa_begin_catch(($136|0))|0);
 $137 = $20;
 $138 = HEAP32[$137>>2]|0;
 $139 = (($138) + -12|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = (($137) + ($140)|0);
 __THREW__ = 0;
 invoke_vi(463,($141|0));
 $142 = __THREW__; __THREW__ = 0;
 $143 = $142&1;
 if (!($143)) {
  ___cxa_end_catch();
  $144 = $20;
  STACKTOP = sp;return ($144|0);
 }
 $145 = ___cxa_find_matching_catch()|0;
 $146 = tempRet0;
 $23 = $145;
 $24 = $146;
 __THREW__ = 0;
 invoke_v(464);
 $147 = __THREW__; __THREW__ = 0;
 $148 = $147&1;
 if ($148) {
  $151 = ___cxa_find_matching_catch(0|0)|0;
  $152 = tempRet0;
  ___clang_call_terminate($151);
  // unreachable;
 }
 $149 = $23;
 $150 = $24;
 ___resumeException($149|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__np = 0, $__ns = 0, $__r$i = 0, $__sp = 0, $__sz = 0, $cleanup$dest = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $26 = sp + 84|0;
 $35 = sp + 124|0;
 $43 = sp + 156|0;
 $50 = sp + 188|0;
 $56 = sp + 220|0;
 $57 = sp + 212|0;
 $__sp = sp + 96|0;
 $60 = sp + 88|0;
 $62 = sp + 208|0;
 $51 = $__ob;
 $52 = $__op;
 $53 = $__oe;
 $54 = $__iob;
 $55 = $__fl;
 $63 = HEAP32[$__s>>2]|0;
 $48 = $50;
 $49 = -1;
 $64 = $48;
 HEAP32[$64>>2] = 0;
 $65 = HEAP32[$50>>2]|0;
 HEAP32[$56>>2] = $65;
 $47 = $56;
 $66 = ($63|0)==(0|0);
 if ($66) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
  STACKTOP = sp;return;
 }
 $67 = $53;
 $68 = $51;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $__sz = $71;
 $72 = $54;
 $37 = $72;
 $73 = $37;
 $74 = (($73) + 12|0);
 $75 = HEAP32[$74>>2]|0;
 $__ns = $75;
 $76 = $__ns;
 $77 = $__sz;
 $78 = ($76|0)>($77|0);
 if ($78) {
  $79 = $__sz;
  $80 = $__ns;
  $81 = (($80) - ($79))|0;
  $__ns = $81;
 } else {
  $__ns = 0;
 }
 $82 = $52;
 $83 = $51;
 $84 = $82;
 $85 = $83;
 $86 = (($84) - ($85))|0;
 $__np = $86;
 $87 = $__np;
 $88 = ($87|0)>(0);
 do {
  if ($88) {
   $89 = HEAP32[$__s>>2]|0;
   $90 = $51;
   $91 = $__np;
   $27 = $89;
   $28 = $90;
   $29 = $91;
   $92 = $27;
   $93 = HEAP32[$92>>2]|0;
   $94 = (($93) + 48|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $28;
   $97 = $29;
   $98 = (FUNCTION_TABLE_iiii[$95 & 1023]($92,$96,$97)|0);
   $99 = $__np;
   $100 = ($98|0)!=($99|0);
   if (!($100)) {
    break;
   }
   $24 = $26;
   $25 = -1;
   $101 = $24;
   HEAP32[$101>>2] = 0;
   $102 = HEAP32[$26>>2]|0;
   HEAP32[$57>>2] = $102;
   $0 = $57;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $103 = $__ns;
 $104 = ($103|0)>(0);
 do {
  if ($104) {
   $105 = $__ns;
   $106 = $55;
   $7 = $__sp;
   $8 = $105;
   $9 = $106;
   $107 = $7;
   $108 = $8;
   $109 = $9;
   $4 = $107;
   $5 = $108;
   $6 = $109;
   $110 = $4;
   $3 = $110;
   $111 = $3;
   $2 = $111;
   $112 = $2;
   $1 = $112;
   $113 = $5;
   $114 = $6;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($110,$113,$114);
   $115 = HEAP32[$__s>>2]|0;
   $23 = $__sp;
   $116 = $23;
   $22 = $116;
   $117 = $22;
   $21 = $117;
   $118 = $21;
   $20 = $118;
   $119 = $20;
   $19 = $119;
   $120 = $19;
   $121 = HEAP8[$120>>0]|0;
   $122 = $121&255;
   $123 = $122 & 1;
   $124 = ($123|0)!=(0);
   if ($124) {
    $13 = $117;
    $125 = $13;
    $12 = $125;
    $126 = $12;
    $11 = $126;
    $127 = $11;
    $128 = (($127) + 8|0);
    $129 = HEAP32[$128>>2]|0;
    $136 = $129;
   } else {
    $18 = $117;
    $130 = $18;
    $17 = $130;
    $131 = $17;
    $16 = $131;
    $132 = $16;
    $133 = (($132) + 1|0);
    $15 = $133;
    $134 = $15;
    $14 = $134;
    $135 = $14;
    $136 = $135;
   }
   $10 = $136;
   $137 = $10;
   $138 = $__ns;
   $30 = $115;
   $31 = $137;
   $32 = $138;
   $139 = $30;
   $140 = HEAP32[$139>>2]|0;
   $141 = (($140) + 48|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = $31;
   $144 = $32;
   __THREW__ = 0;
   $145 = (invoke_iiii($142|0,($139|0),($143|0),($144|0))|0);
   $146 = __THREW__; __THREW__ = 0;
   $147 = $146&1;
   if ($147) {
    $152 = ___cxa_find_matching_catch()|0;
    $153 = tempRet0;
    $58 = $152;
    $59 = $153;
    __THREW__ = 0;
    invoke_vi(396,($__sp|0));
    $154 = __THREW__; __THREW__ = 0;
    $155 = $154&1;
    if ($155) {
     $185 = ___cxa_find_matching_catch(0|0)|0;
     $186 = tempRet0;
     ___clang_call_terminate($185);
     // unreachable;
    }
    $183 = $58;
    $184 = $59;
    ___resumeException($183|0);
    // unreachable;
   }
   $148 = $__ns;
   $149 = ($145|0)!=($148|0);
   if ($149) {
    $33 = $35;
    $34 = -1;
    $150 = $33;
    HEAP32[$150>>2] = 0;
    $151 = HEAP32[$35>>2]|0;
    HEAP32[$60>>2] = $151;
    $36 = $60;
    HEAP32[$__s>>2] = 0;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
    $61 = 1;
   } else {
    $61 = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
   $cleanup$dest = $61;
   if ((($cleanup$dest|0) == 1)) {
    STACKTOP = sp;return;
   } else if ((($cleanup$dest|0) == 0)) {
    break;
   } else {
    // unreachable;
   }
  }
 } while(0);
 $156 = $53;
 $157 = $52;
 $158 = $156;
 $159 = $157;
 $160 = (($158) - ($159))|0;
 $__np = $160;
 $161 = $__np;
 $162 = ($161|0)>(0);
 do {
  if ($162) {
   $163 = HEAP32[$__s>>2]|0;
   $164 = $52;
   $165 = $__np;
   $38 = $163;
   $39 = $164;
   $40 = $165;
   $166 = $38;
   $167 = HEAP32[$166>>2]|0;
   $168 = (($167) + 48|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = $39;
   $171 = $40;
   $172 = (FUNCTION_TABLE_iiii[$169 & 1023]($166,$170,$171)|0);
   $173 = $__np;
   $174 = ($172|0)!=($173|0);
   if (!($174)) {
    break;
   }
   $41 = $43;
   $42 = -1;
   $175 = $41;
   HEAP32[$175>>2] = 0;
   $176 = HEAP32[$43>>2]|0;
   HEAP32[$62>>2] = $176;
   $44 = $62;
   HEAP32[$__s>>2] = 0;
   ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
   STACKTOP = sp;return;
  }
 } while(0);
 $177 = $54;
 $45 = $177;
 $46 = 0;
 $178 = $45;
 $179 = (($178) + 12|0);
 $180 = HEAP32[$179>>2]|0;
 $__r$i = $180;
 $181 = $46;
 $182 = (($178) + 12|0);
 HEAP32[$182>>2] = $181;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$__s+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE11eq_int_typeEii($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $1;
 $4 = ($2|0)==($3|0);
 STACKTOP = sp;return ($4|0);
}
function __ZNSt3__111char_traitsIcE3eofEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZN3vcg3tri25FaceVectorHasPerFaceFlagsI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri24FaceVectorHasFFAdjacencyI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg3tri24FaceVectorHasFFAdjacencyI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg6Point2IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(2);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1408|0),(1424|0),117,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg9TexCoord2IfLi1EEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 $3 = $1;
 while(1) {
  __ZN3vcg6Point2IfEC2Ev($3);
  $4 = (($3) + 8|0);
  $5 = ($4|0)==($2|0);
  if ($5) {
   break;
  } else {
   $3 = $4;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri30VertexVectorHasPerVertexNormalI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE9HasNormalEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE9HasNormalEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNK3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE6cFlagsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 68|0;
 $23 = sp + 16|0;
 $__v = sp + 72|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 4)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 4)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 4)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  $102 = HEAP32[$101>>2]|0;
  HEAP32[$99>>2] = $102;
 }
 $103 = (($__v) + 8|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = (($104) + 4|0);
 HEAP32[$103>>2] = $105;
 __THREW__ = 0;
 invoke_vii(465,($32|0),($__v|0));
 $106 = __THREW__; __THREW__ = 0;
 $107 = $106&1;
 if (!($107)) {
  __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $108 = ___cxa_find_matching_catch()|0;
 $109 = tempRet0;
 $30 = $108;
 $31 = $109;
 __THREW__ = 0;
 invoke_vi(466,($__v|0));
 $110 = __THREW__; __THREW__ = 0;
 $111 = $110&1;
 if ($111) {
  $114 = ___cxa_find_matching_catch(0|0)|0;
  $115 = tempRet0;
  ___clang_call_terminate($114);
  // unreachable;
 }
 $112 = $30;
 $113 = $31;
 ___resumeException($112|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<2;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<2)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<2)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 48|0;
 $__t$i1 = sp + 28|0;
 $__t$i = sp + 72|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 4)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<2)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<2;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 4)&-1;
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 4)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 4)&-1;
 $51 = (($42) + ($50<<2)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 4)&-1;
 $67 = (($54) + ($66<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 4)&-1;
 $39 = (($26) + ($38<<2)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 4)&-1;
 $55 = (($42) + ($54<<2)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 1073741823;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE10VertexSetVERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 __ZN3vcg3tri11UpdateFlagsI6MyMeshE9VertexSetERS2_j($1,16);
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E6ClearVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -17;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E4SetVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 16;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsVEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE6cFlagsEv($1)|0);
 $3 = $2 & 16;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE9VertexSetERS2_j($m,$FlagMask) {
 $m = $m|0;
 $FlagMask = $FlagMask|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vi = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vi = sp + 68|0;
 $21 = sp + 24|0;
 $19 = $m;
 $20 = $FlagMask;
 $22 = $19;
 __ZN3vcg3tri21RequirePerVertexFlagsI6MyMeshEEvRT_($22);
 $23 = $19;
 $18 = $23;
 $24 = $18;
 $25 = HEAP32[$24>>2]|0;
 $16 = $24;
 $17 = $25;
 $26 = $17;
 $14 = $vi;
 $15 = $26;
 $27 = $14;
 $28 = $15;
 HEAP32[$27>>2] = $28;
 while(1) {
  $29 = $19;
  $12 = $29;
  $30 = $12;
  $31 = (($30) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $10 = $30;
  $11 = $32;
  $33 = $11;
  $8 = $21;
  $9 = $33;
  $34 = $8;
  $35 = $9;
  HEAP32[$34>>2] = $35;
  $5 = $vi;
  $6 = $21;
  $36 = $5;
  $37 = $6;
  $3 = $36;
  $4 = $37;
  $38 = $3;
  $2 = $38;
  $39 = $2;
  $40 = HEAP32[$39>>2]|0;
  $41 = $4;
  $1 = $41;
  $42 = $1;
  $43 = HEAP32[$42>>2]|0;
  $44 = ($40|0)==($43|0);
  $45 = $44 ^ 1;
  if (!($45)) {
   break;
  }
  $0 = $vi;
  $46 = $0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($47)|0);
  if (!($48)) {
   $49 = $20;
   $7 = $vi;
   $50 = $7;
   $51 = HEAP32[$50>>2]|0;
   $52 = (__ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE5FlagsEv($51)|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = $53 | $49;
   HEAP32[$52>>2] = $54;
  }
  $13 = $vi;
  $55 = $13;
  $56 = HEAP32[$55>>2]|0;
  $57 = (($56) + 36|0);
  HEAP32[$55>>2] = $57;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri21RequirePerVertexFlagsI6MyMeshEEvRT_($m) {
 $m = $m|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 20|0;
 $7 = $m;
 $12 = $7;
 $13 = (__ZN3vcg3tri17HasPerVertexFlagsI6MyMeshEEbRKT_($12)|0);
 if ($13) {
  STACKTOP = sp;return;
 }
 $14 = (___cxa_allocate_exception(8)|0);
 $$expand_i1_val = 1;
 $11 = $$expand_i1_val;
 $5 = $8;
 $6 = 1856;
 $15 = $5;
 $16 = $6;
 $3 = $15;
 $4 = $16;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 $1 = $18;
 $19 = $1;
 $0 = $19;
 $20 = $4;
 $21 = $4;
 __THREW__ = 0;
 $22 = (invoke_ii(441,($21|0))|0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 do {
  if ($24) {
   label = 7;
  } else {
   __THREW__ = 0;
   invoke_viii(442,($17|0),($20|0),($22|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    label = 7;
   } else {
    __THREW__ = 0;
    invoke_vii(443,($14|0),($8|0));
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if (!($28)) {
     $$expand_i1_val2 = 0;
     $11 = $$expand_i1_val2;
     __THREW__ = 0;
     invoke_viii(444,($14|0),(1184|0),(1|0));
     $29 = __THREW__; __THREW__ = 0;
     $30 = $29&1;
     if (!($30)) {
      // unreachable;
     }
    }
    $33 = ___cxa_find_matching_catch()|0;
    $34 = tempRet0;
    $9 = $33;
    $10 = $34;
    __THREW__ = 0;
    invoke_vi(396,($8|0));
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if ($36) {
     $40 = ___cxa_find_matching_catch(0|0)|0;
     $41 = tempRet0;
     ___clang_call_terminate($40);
     // unreachable;
    } else {
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 7) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  $9 = $31;
  $10 = $32;
 }
 $$pre_trunc = $11;
 $37 = $$pre_trunc&1;
 if ($37) {
  ___cxa_free_exception(($14|0));
 }
 $38 = $9;
 $39 = $10;
 ___resumeException($38|0);
 // unreachable;
}
function __ZN3vcg3tri17HasPerVertexFlagsI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri29VertexVectorHasPerVertexFlagsI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri29VertexVectorHasPerVertexFlagsI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE8HasFlagsEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE8HasFlagsEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg3tri32VertexVectorHasPerVertexTexCoordI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE11HasTexCoordEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE11HasTexCoordEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg3tri29VertexVectorHasPerVertexColorI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE8HasColorEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE8HasColorEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg3tri11UpdateFlagsI6MyMeshE16FaceBorderFromFFERS2_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $fi = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fi = sp + 76|0;
 $23 = sp + 64|0;
 $22 = $m;
 $24 = $22;
 __ZN3vcg3tri19RequirePerFaceFlagsI6MyMeshEEvRT_($24);
 $25 = $22;
 __ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_($25);
 $26 = $22;
 $27 = (($26) + 32|0);
 $21 = $27;
 $28 = $21;
 $29 = HEAP32[$28>>2]|0;
 $19 = $28;
 $20 = $29;
 $30 = $20;
 $17 = $fi;
 $18 = $30;
 $31 = $17;
 $32 = $18;
 HEAP32[$31>>2] = $32;
 while(1) {
  $33 = $22;
  $34 = (($33) + 32|0);
  $15 = $34;
  $35 = $15;
  $36 = (($35) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $13 = $35;
  $14 = $37;
  $38 = $14;
  $11 = $23;
  $12 = $38;
  $39 = $11;
  $40 = $12;
  HEAP32[$39>>2] = $40;
  $8 = $fi;
  $9 = $23;
  $41 = $8;
  $42 = $9;
  $6 = $41;
  $7 = $42;
  $43 = $6;
  $5 = $43;
  $44 = $5;
  $45 = HEAP32[$44>>2]|0;
  $46 = $7;
  $4 = $46;
  $47 = $4;
  $48 = HEAP32[$47>>2]|0;
  $49 = ($45|0)==($48|0);
  $50 = $49 ^ 1;
  if (!($50)) {
   break;
  }
  $2 = $fi;
  $51 = $2;
  $52 = HEAP32[$51>>2]|0;
  $53 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($52)|0);
  if (!($53)) {
   $j = 0;
   while(1) {
    $54 = $j;
    $0 = $fi;
    $55 = $0;
    $56 = HEAP32[$55>>2]|0;
    $57 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($56)|0);
    $58 = ($54|0)<($57|0);
    if (!($58)) {
     break;
    }
    $1 = $fi;
    $59 = $1;
    $60 = HEAP32[$59>>2]|0;
    $61 = $j;
    $62 = (__ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($60,$61)|0);
    if ($62) {
     $3 = $fi;
     $63 = $3;
     $64 = HEAP32[$63>>2]|0;
     $65 = $j;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($64,$65);
    } else {
     $10 = $fi;
     $66 = $10;
     $67 = HEAP32[$66>>2]|0;
     $68 = $j;
     __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($67,$68);
    }
    $69 = $j;
    $70 = (($69) + 1)|0;
    $j = $70;
   }
  }
  $16 = $fi;
  $71 = $16;
  $72 = HEAP32[$71>>2]|0;
  $73 = (($72) + 44|0);
  HEAP32[$71>>2] = $73;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE19AddPerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEENS0_7TriMeshINSt3__16vectorIS6_NSA_9allocatorIS6_EEEENSB_I6MyFaceNSC_ISF_EEEENSB_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EERS2_NSA_12basic_stringIcNSA_11char_traitsIcEENSC_IcEEEE($agg$result,$m,$name) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $h = 0, $i = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 16|0;
 $10 = sp + 32|0;
 $13 = sp + 48|0;
 $17 = sp;
 $27 = sp + 260|0;
 $29 = sp + 8|0;
 $32 = sp + 168|0;
 $i = sp + 180|0;
 $h = sp + 184|0;
 $48 = sp + 220|0;
 $49 = sp + 92|0;
 $res = sp + 240|0;
 $45 = $m;
 $44 = $i;
 __ZN3vcg18PointerToAttributeC2Ev($h);
 $51 = (($h) + 4|0);
 __THREW__ = 0;
 (invoke_iii(467,($51|0),($name|0))|0);
 $52 = __THREW__; __THREW__ = 0;
 $53 = $52&1;
 L1: do {
  if ($53) {
   label = 12;
  } else {
   $43 = $name;
   $54 = $43;
   $42 = $54;
   $55 = $42;
   $41 = $55;
   $56 = $41;
   $40 = $56;
   $57 = $40;
   $39 = $57;
   $58 = $39;
   $59 = HEAP8[$58>>0]|0;
   $60 = $59&255;
   $61 = $60 & 1;
   $62 = ($61|0)!=(0);
   if ($62) {
    $35 = $55;
    $63 = $35;
    $34 = $63;
    $64 = $34;
    $33 = $64;
    $65 = $33;
    $66 = (($65) + 4|0);
    $67 = HEAP32[$66>>2]|0;
    $75 = $67;
   } else {
    $38 = $55;
    $68 = $38;
    $37 = $68;
    $69 = $37;
    $36 = $69;
    $70 = $36;
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 >> 1;
    $75 = $73;
   }
   $74 = ($75|0)==(0);
   do {
    if (!($74)) {
     $76 = $45;
     $77 = (($76) + 140|0);
     $30 = $77;
     $31 = $h;
     $78 = $30;
     $79 = $31;
     __THREW__ = 0;
     invoke_viii(468,($32|0),($78|0),($79|0));
     $80 = __THREW__; __THREW__ = 0;
     $81 = $80&1;
     if ($81) {
      label = 12;
      break L1;
     }
     ;HEAP8[$29+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$29+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$29+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$29+3>>0]=HEAP8[$32+3>>0]|0;
     $28 = $48;
     $82 = $28;
     $83 = HEAP32[$29>>2]|0;
     HEAP32[$82>>2] = $83;
     ;HEAP32[$i+0>>2]=HEAP32[$48+0>>2]|0;
     $84 = $45;
     $85 = (($84) + 140|0);
     $26 = $85;
     $86 = $26;
     $25 = $86;
     $87 = $25;
     $24 = $87;
     $88 = $24;
     $89 = (($88) + 4|0);
     $23 = $89;
     $90 = $23;
     $22 = $90;
     $91 = $22;
     $21 = $91;
     $92 = $21;
     $20 = $92;
     $93 = $20;
     $18 = $27;
     $19 = $93;
     $94 = $18;
     $95 = $19;
     HEAP32[$94>>2] = $95;
     ;HEAP8[$17+0>>0]=HEAP8[$27+0>>0]|0;HEAP8[$17+1>>0]=HEAP8[$27+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$27+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$27+3>>0]|0;
     $16 = $49;
     $96 = $16;
     $97 = HEAP32[$17>>2]|0;
     HEAP32[$96>>2] = $97;
     $14 = $i;
     $15 = $49;
     $98 = $14;
     $99 = HEAP32[$98>>2]|0;
     $100 = $15;
     $101 = HEAP32[$100>>2]|0;
     $102 = ($99|0)==($101|0);
     if ($102) {
      break;
     }
     __THREW__ = 0;
     invoke_viiii(402,(4056|0),(3600|0),1308,(4080|0));
     $103 = __THREW__; __THREW__ = 0;
     $104 = $103&1;
     if ($104) {
      label = 12;
      break L1;
     }
     // unreachable;
    }
   } while(0);
   $107 = (($h) + 16|0);
   HEAP32[$107>>2] = 16;
   $108 = (($h) + 20|0);
   HEAP32[$108>>2] = 0;
   __THREW__ = 0;
   $109 = (invoke_ii(469,24)|0);
   $110 = __THREW__; __THREW__ = 0;
   $111 = $110&1;
   if ($111) {
    label = 12;
   } else {
    $112 = $45;
    $113 = (($112) + 32|0);
    __THREW__ = 0;
    invoke_vii(470,($109|0),($113|0));
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     $154 = ___cxa_find_matching_catch()|0;
     $155 = tempRet0;
     $46 = $154;
     $47 = $155;
     __ZdlPv($109);
     break;
    }
    HEAP32[$h>>2] = $109;
    $116 = $45;
    $117 = (($116) + 112|0);
    $118 = HEAP32[$117>>2]|0;
    $119 = (($118) + 1)|0;
    HEAP32[$117>>2] = $119;
    $120 = $45;
    $121 = (($120) + 112|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($h) + 24|0);
    HEAP32[$123>>2] = $122;
    $124 = $45;
    $125 = (($124) + 140|0);
    $11 = $125;
    $12 = $h;
    $126 = $11;
    $127 = $12;
    __THREW__ = 0;
    invoke_viii(471,($13|0),($126|0),($127|0));
    $128 = __THREW__; __THREW__ = 0;
    $129 = $128&1;
    if ($129) {
     label = 12;
    } else {
     $8 = $res;
     $9 = $13;
     $130 = $8;
     $131 = $9;
     ;HEAP32[$10+0>>2]=HEAP32[$131+0>>2]|0;
     ;HEAP8[$7+0>>0]=HEAP8[$10+0>>0]|0;HEAP8[$7+1>>0]=HEAP8[$10+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$10+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$10+3>>0]|0;
     $6 = $130;
     $132 = $6;
     $133 = HEAP32[$7>>2]|0;
     HEAP32[$132>>2] = $133;
     $134 = (($130) + 4|0);
     $135 = $9;
     $136 = (($135) + 4|0);
     $137 = HEAP8[$136>>0]|0;
     $138 = $137&1;
     $139 = $138&1;
     HEAP8[$134>>0] = $139;
     $5 = $res;
     $140 = $5;
     $141 = HEAP32[$140>>2]|0;
     $142 = (($141) + 16|0);
     $4 = $142;
     $143 = $4;
     $3 = $143;
     $144 = $3;
     $145 = HEAP32[$144>>2]|0;
     $2 = $res;
     $146 = $2;
     $147 = HEAP32[$146>>2]|0;
     $148 = (($147) + 16|0);
     $1 = $148;
     $149 = $1;
     $0 = $149;
     $150 = $0;
     $151 = (($150) + 24|0);
     __THREW__ = 0;
     invoke_viii(472,($agg$result|0),($145|0),($151|0));
     $152 = __THREW__; __THREW__ = 0;
     $153 = $152&1;
     if ($153) {
      label = 12;
     } else {
      $50 = 1;
      __ZN3vcg18PointerToAttributeD2Ev($h);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $105 = ___cxa_find_matching_catch()|0;
  $106 = tempRet0;
  $46 = $105;
  $47 = $106;
 }
 __THREW__ = 0;
 invoke_vi(473,($h|0));
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 if ($157) {
  $160 = ___cxa_find_matching_catch(0|0)|0;
  $161 = tempRet0;
  ___clang_call_terminate($160);
  // unreachable;
 }
 $158 = $46;
 $159 = $47;
 ___resumeException($158|0);
 // unreachable;
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsSEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($1)|0);
 $3 = $2 & 32;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixINS2_11__wrap_iterIPS8_EEEERSJ_RKT_($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixERKNS1_11__wrap_iterIPS3_EE($3,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face3PosI6MyFaceEC2EPS2_i($this,$fp,$zp) {
 $this = $this|0;
 $fp = $fp|0;
 $zp = $zp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $fp;
 $2 = $zp;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$3>>2]|0;
 $8 = $2;
 $9 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($7,$8)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (($3) + 8|0);
 HEAP32[$11>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNK3vcg4face3PosI6MyFaceE5FFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $nf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($2,$4)|0);
 $6 = HEAP32[$5>>2]|0;
 $nf = $6;
 $7 = $nf;
 STACKTOP = sp;return ($7|0);
}
function __ZNK3vcg3tri7EdgeLenI6MyMeshfEclENS_4face3PosI6MyFaceEE($this,$ep) {
 $this = $this|0;
 $ep = $ep|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face3PosI6MyFaceE1VEv($ep)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($3)|0);
 $5 = (__ZNK3vcg4face3PosI6MyFaceE5VFlipEv($ep)|0);
 $6 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($5)|0);
 $7 = (+__ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($4,$6));
 $8 = +HEAPF32[$1>>2];
 $9 = $7 > $8;
 STACKTOP = sp;return ($9|0);
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EixIPS8_EERSJ_RKT_($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEPKS3_($3,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg4face3PosI6MyFaceE10IsManifoldEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face10IsManifoldI6MyFaceEEbRKT_i($2,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg4face3PosI6MyFaceE8IsBorderEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($1) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (__ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($2,$4)|0);
 STACKTOP = sp;return ($5|0);
}
function __ZN3vcg3tri9AllocatorI6MyMeshE22DeletePerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEEvRS2_RNS0_7TriMeshINSt3__16vectorIS6_NSB_9allocatorIS6_EEEENSC_I6MyFaceNSD_ISG_EEEENSC_I6MyEdgeNSD_ISJ_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EE($m,$h) {
 $m = $m|0;
 $h = $h|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $7 = sp;
 $17 = sp + 156|0;
 $19 = sp + 16|0;
 $21 = sp + 84|0;
 $22 = sp + 88|0;
 $23 = sp + 8|0;
 $25 = sp + 24|0;
 $31 = sp + 64|0;
 $i = sp + 144|0;
 $36 = sp + 72|0;
 $37 = sp + 168|0;
 $38 = sp + 132|0;
 $39 = sp + 128|0;
 $34 = $m;
 $35 = $h;
 $33 = $i;
 $40 = $34;
 $41 = (($40) + 140|0);
 $30 = $41;
 $42 = $30;
 $29 = $42;
 $43 = $29;
 $28 = $43;
 $44 = $28;
 $45 = HEAP32[$44>>2]|0;
 $26 = $31;
 $27 = $45;
 $46 = $26;
 $47 = $27;
 HEAP32[$46>>2] = $47;
 ;HEAP8[$25+0>>0]=HEAP8[$31+0>>0]|0;HEAP8[$25+1>>0]=HEAP8[$31+1>>0]|0;HEAP8[$25+2>>0]=HEAP8[$31+2>>0]|0;HEAP8[$25+3>>0]=HEAP8[$31+3>>0]|0;
 $24 = $36;
 $48 = $24;
 $49 = HEAP32[$25>>2]|0;
 HEAP32[$48>>2] = $49;
 ;HEAP32[$i+0>>2]=HEAP32[$36+0>>2]|0;
 while(1) {
  $50 = $34;
  $51 = (($50) + 140|0);
  $16 = $51;
  $52 = $16;
  $15 = $52;
  $53 = $15;
  $14 = $53;
  $54 = $14;
  $55 = (($54) + 4|0);
  $13 = $55;
  $56 = $13;
  $12 = $56;
  $57 = $12;
  $11 = $57;
  $58 = $11;
  $10 = $58;
  $59 = $10;
  $8 = $17;
  $9 = $59;
  $60 = $8;
  $61 = $9;
  HEAP32[$60>>2] = $61;
  ;HEAP8[$7+0>>0]=HEAP8[$17+0>>0]|0;HEAP8[$7+1>>0]=HEAP8[$17+1>>0]|0;HEAP8[$7+2>>0]=HEAP8[$17+2>>0]|0;HEAP8[$7+3>>0]=HEAP8[$17+3>>0]|0;
  $6 = $37;
  $62 = $6;
  $63 = HEAP32[$7>>2]|0;
  HEAP32[$62>>2] = $63;
  $4 = $i;
  $5 = $37;
  $64 = $4;
  $65 = $5;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = HEAP32[$66>>2]|0;
  $68 = $3;
  $69 = HEAP32[$68>>2]|0;
  $70 = ($67|0)==($69|0);
  $71 = $70 ^ 1;
  if (!($71)) {
   label = 9;
   break;
  }
  $0 = $i;
  $72 = $0;
  $73 = HEAP32[$72>>2]|0;
  $74 = (($73) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = $35;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75|0)==($77|0);
  if ($78) {
   break;
  }
  $32 = $i;
  $92 = $32;
  $93 = HEAP32[$92>>2]|0;
  $94 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($93)|0);
  HEAP32[$92>>2] = $94;
 }
 if ((label|0) == 9) {
  STACKTOP = sp;return;
 }
 $1 = $i;
 $79 = $1;
 $80 = HEAP32[$79>>2]|0;
 $81 = (($80) + 16|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = ($82|0)==(0|0);
 if (!($83)) {
  $84 = HEAP32[$82>>2]|0;
  $85 = (($84) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vi[$86 & 1023]($82);
 }
 $87 = $34;
 $88 = (($87) + 140|0);
 ;HEAP32[$38+0>>2]=HEAP32[$i+0>>2]|0;
 ;HEAP8[$23+0>>0]=HEAP8[$38+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$38+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$38+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$38+3>>0]|0;
 $20 = $88;
 $89 = $20;
 ;HEAP32[$22+0>>2]=HEAP32[$23+0>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$22+0>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($21,$89,$$byval_copy);
 ;HEAP8[$19+0>>0]=HEAP8[$21+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$21+3>>0]|0;
 $18 = $39;
 $90 = $18;
 $91 = HEAP32[$19>>2]|0;
 HEAP32[$90>>2] = $91;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j($agg$result,$m,$n) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 16|0;
 $0 = $m;
 $1 = $n;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC2Ev($pu);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viiii(474,($agg$result|0),($5|0),($6|0),($pu|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $4 = 1;
  __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED2Ev($pu);
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $2 = $9;
 $3 = $10;
 __THREW__ = 0;
 invoke_vi(475,($pu|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 $13 = $2;
 $14 = $3;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEclER8MyVertexNS_4face3PosI6MyFaceEE($this,$nv,$ep) {
 $this = $this|0;
 $nv = $nv|0;
 $ep = $ep|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0;
 var $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 64|0;
 $2 = sp + 16|0;
 $3 = sp + 76|0;
 $4 = sp;
 $5 = sp + 32|0;
 $6 = sp + 56|0;
 $7 = sp + 44|0;
 $0 = $this;
 $1 = $nv;
 $8 = $0;
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((3712|0),(1904|0),143,(3720|0));
  // unreachable;
 }
 $11 = $1;
 $12 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($11)|0);
 $13 = HEAP32[$ep>>2]|0;
 $14 = (($ep) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($13,$15)|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($17)|0);
 $19 = HEAP32[$ep>>2]|0;
 $20 = (($ep) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($19,$21)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv($23)|0);
 __ZNK3vcg6Point3IfEplERKS1_($3,$18,$24);
 __ZNK3vcg6Point3IfEdvEf($2,$3,2.0);
 (__ZN3vcg6Point3IfEaSERKS1_($12,$2)|0);
 $25 = HEAP32[$8>>2]|0;
 $26 = (__ZN3vcg3tri18HasPerVertexNormalI6MyMeshEEbRKT_($25)|0);
 if ($26) {
  $27 = $1;
  $28 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($27)|0);
  $29 = HEAP32[$ep>>2]|0;
  $30 = (($ep) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($29,$31)|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($33)|0);
  $35 = HEAP32[$ep>>2]|0;
  $36 = (($ep) + 4|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($35,$37)|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv($39)|0);
  __ZNK3vcg6Point3IfEplERKS1_($4,$34,$40);
  $41 = (__ZN3vcg6Point3IfE10normalizedEv($4)|0);
  (__ZN3vcg6Point3IfEaSERKS1_($28,$41)|0);
 }
 $42 = HEAP32[$8>>2]|0;
 $43 = (__ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_($42)|0);
 if ($43) {
  $44 = $1;
  $45 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($44)|0);
  $46 = HEAP32[$ep>>2]|0;
  $47 = (($ep) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($46,$48)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($50)|0);
  $52 = HEAP32[$ep>>2]|0;
  $53 = (($ep) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($52,$54)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = (__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv($56)|0);
  __ZN3vcg6Color4IhE4lerpIfEEvRKS1_S4_T_($45,$51,$57,0.5);
 }
 $58 = HEAP32[$8>>2]|0;
 $59 = (__ZN3vcg3tri19HasPerVertexQualityI6MyMeshEEbRKT_($58)|0);
 if ($59) {
  $60 = HEAP32[$ep>>2]|0;
  $61 = (($ep) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($60,$62)|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($64)|0);
  $66 = +HEAPF32[$65>>2];
  $67 = HEAP32[$ep>>2]|0;
  $68 = (($ep) + 4|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($67,$69)|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($71)|0);
  $73 = +HEAPF32[$72>>2];
  $74 = $66 + $73;
  $75 = $74;
  $76 = $75 / 2.0;
  $77 = $76;
  $78 = $1;
  $79 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($78)|0);
  HEAPF32[$79>>2] = $77;
 }
 $80 = HEAP32[$8>>2]|0;
 $81 = (__ZN3vcg3tri20HasPerVertexTexCoordI6MyMeshEEbRKT_($80)|0);
 if ($81) {
  $82 = $1;
  $83 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($82)|0);
  $84 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($83)|0);
  $85 = HEAP32[$ep>>2]|0;
  $86 = (($ep) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  $88 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($85,$87)|0);
  $89 = HEAP32[$88>>2]|0;
  $90 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($89)|0);
  $91 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($90)|0);
  $92 = HEAP32[$ep>>2]|0;
  $93 = (($ep) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2V1Ei($92,$94)|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv($96)|0);
  $98 = (__ZN3vcg9TexCoord2IfLi1EE1PEv($97)|0);
  __ZNK3vcg6Point2IfEplERKS1_($6,$91,$98);
  __ZNK3vcg6Point2IfEdvEf($5,$6,2.0);
  (__ZN3vcg6Point2IfEaSERKS1_($84,$5)|0);
 }
 $99 = (($8) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if (!($101)) {
  STACKTOP = sp;return;
 }
 $102 = (($8) + 4|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = $1;
 ;HEAP32[$7+0>>2]=HEAP32[$ep+0>>2]|0;HEAP32[$7+4>>2]=HEAP32[$ep+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$ep+8>>2]|0;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$7+8>>2]|0;
 __ZN3vcg3tri16BaseInterpolatorI6MyMeshEclER8MyVertexNS_4face3PosI6MyFaceEE($103,$104,$$byval_copy);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j($agg$result,$m,$n) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 16|0;
 $0 = $m;
 $1 = $n;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($pu);
 $5 = $0;
 $6 = $1;
 __THREW__ = 0;
 invoke_viiii(476,($agg$result|0),($5|0),($6|0),($pu|0));
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if (!($8)) {
  $4 = 1;
  __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($pu);
  STACKTOP = sp;return;
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 $2 = $9;
 $3 = $10;
 __THREW__ = 0;
 invoke_vi(477,($pu|0));
 $11 = __THREW__; __THREW__ = 0;
 $12 = $11&1;
 if ($12) {
  $15 = ___cxa_find_matching_catch(0|0)|0;
  $16 = tempRet0;
  ___clang_call_terminate($15);
  // unreachable;
 }
 $13 = $2;
 $14 = $3;
 ___resumeException($13|0);
 // unreachable;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetSEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($1)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 | 32;
 HEAP32[$2>>2] = $4;
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE8HasFlagsEv()|0);
 if ($3) {
  $4 = $1;
  $5 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($4)|0);
  $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
  HEAP32[$6>>2] = $5;
 }
 $7 = $1;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE10ImportDataI6MyFaceEEvRKT_($2,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (($1) + 32|0);
 $3 = (__ZN3vcg3tri29FaceVectorHasPerWedgeTexCoordI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($2)|0);
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg9TexCoord2IfLi1EEaSERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $__i0 = 0;
 while(1) {
  $4 = $__i0;
  $5 = ($4|0)!=(1);
  if (!($5)) {
   break;
  }
  $6 = $__i0;
  $7 = (($3) + ($6<<3)|0);
  $8 = $__i0;
  $9 = $2;
  $10 = (($9) + ($8<<3)|0);
  (__ZN3vcg6Point2IfEaSERKS1_($7,$10)|0);
  $11 = $__i0;
  $12 = (($11) + 1)|0;
  $__i0 = $12;
 }
 $13 = (($3) + 8|0);
 $14 = $2;
 $15 = (($14) + 8|0);
 ;HEAP16[$13+0>>1]=HEAP16[$15+0>>1]|0;
 STACKTOP = sp;return ($3|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE2WTEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 $6 = HEAP8[3344>>0]|0;
 $7 = ($6<<24>>24)==(0);
 do {
  if ($7) {
   $8 = (___cxa_guard_acquire((3344|0))|0);
   $9 = ($8|0)!=(0);
   if ($9) {
    __THREW__ = 0;
    invoke_vi(440,(3328|0));
    $10 = __THREW__; __THREW__ = 0;
    $11 = $10&1;
    if (!($11)) {
     ___cxa_guard_release((3344|0));
     break;
    }
    $12 = ___cxa_find_matching_catch()|0;
    $13 = tempRet0;
    $4 = $12;
    $5 = $13;
    ___cxa_guard_abort((3344|0));
    $14 = $4;
    $15 = $5;
    ___resumeException($14|0);
    // unreachable;
   }
  }
 } while(0);
 ___assert_fail((392|0),(400|0),58,(3352|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEE11WedgeInterpIfEENS_9TexCoord2IT_Li1EEERS9_SA_($agg$result,$this,$t0,$t1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $t0 = $t0|0;
 $t1 = $t1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 8|0;
 $4 = sp;
 $0 = $this;
 $1 = $t0;
 $2 = $t1;
 __ZN3vcg9TexCoord2IfLi1EEC2Ev($agg$result);
 $5 = $1;
 $6 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($5)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = $2;
 $10 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($9)|0);
 $11 = HEAP16[$10>>1]|0;
 $12 = $11 << 16 >> 16;
 $13 = ($8|0)==($12|0);
 if ($13) {
  $14 = $1;
  $15 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($14)|0);
  $16 = HEAP16[$15>>1]|0;
  $17 = (__ZN3vcg9TexCoord2IfLi1EE1nEv($agg$result)|0);
  HEAP16[$17>>1] = $16;
  $18 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($agg$result)|0);
  $19 = $1;
  $20 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($19)|0);
  $21 = $2;
  $22 = (__ZN3vcg9TexCoord2IfLi1EE1tEv($21)|0);
  __ZNK3vcg6Point2IfEplERKS1_($4,$20,$22);
  __ZNK3vcg6Point2IfEdvEf($3,$4,2.0);
  (__ZN3vcg6Point2IfEaSERKS1_($18,$3)|0);
  STACKTOP = sp;return;
 } else {
  ___assert_fail((3296|0),(1904|0),171,(3312|0));
  // unreachable;
 }
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 64 << $3;
 $5 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 64 << $3;
 $5 = $4 ^ -1;
 $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & $5;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg15SquaredDistanceIfEET_RKNS_6Point3IS1_EES5_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $p1;
 $1 = $p2;
 $3 = $0;
 $4 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($2,$3,$4);
 $5 = (+__ZNK3vcg6Point3IfE11SquaredNormEv($2));
 STACKTOP = sp;return (+$5);
}
function __ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsBEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = (__ZNK3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE6cFlagsEv($2)|0);
 $4 = $1;
 $5 = 64 << $4;
 $6 = $3 & $5;
 $7 = ($6|0)!=(0);
 STACKTOP = sp;return ($7|0);
}
function __ZNK3vcg6Point3IfEmiERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 - $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 - $11;
 $13 = (($2) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 - $17;
 __ZN3vcg6Point3IfEC2Efff($agg$result,$6,$12,$18);
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfE11SquaredNormEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 STACKTOP = sp;return (+$16);
}
function __ZN3vcg6Point3IfEC2Efff($this,$nx,$ny,$nz) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $0;
 $5 = $1;
 HEAPF32[$4>>2] = $5;
 $6 = $2;
 $7 = (($4) + 4|0);
 HEAPF32[$7>>2] = $6;
 $8 = $3;
 $9 = (($4) + 8|0);
 HEAPF32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg9TexCoord2IfLi1EE1nEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg9TexCoord2IfLi1EE1tEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point2IfEaSERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg6Point2IfEplERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 + $11;
 __ZN3vcg6Point2IfEC2Eff($agg$result,$6,$12);
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point2IfEdvEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 / $4;
 $6 = (($2) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 / $8;
 __ZN3vcg6Point2IfEC2Eff($agg$result,$5,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IfEC2Eff($this,$nx,$ny) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 HEAPF32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAPF32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri29FaceVectorHasPerWedgeTexCoordI6MyFaceEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE16HasWedgeTexCoordEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE16HasWedgeTexCoordEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $0 = $this;
 $1 = $rightF;
 $3 = $0;
 $4 = $1;
 $5 = (__ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE15IsNormalEnabledEv($4)|0);
 if ($5) {
  $6 = (__ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE1NEv($3)|0);
  $7 = $1;
  __ZNK3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE2cNEv($2,$7);
  __ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE($6,$2);
 }
 $8 = $1;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($3,$8);
 STACKTOP = sp;return;
}
function __ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE15IsNormalEnabledEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = (__ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE9HasNormalEv()|0);
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE1NEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point3IfEixEi($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 HEAPF32[$2>>2] = $5;
 $6 = $1;
 $7 = (__ZNK3vcg6Point3IfEixEi($6,1)|0);
 $8 = +HEAPF32[$7>>2];
 $9 = (($2) + 4|0);
 HEAPF32[$9>>2] = $8;
 $10 = $1;
 $11 = (__ZNK3vcg6Point3IfEixEi($10,2)|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($2) + 8|0);
 HEAPF32[$13>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNK3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE2cNEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2ERKS1_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE10ImportDataI6MyFaceEEvRKT_($this,$rightF) {
 $this = $this|0;
 $rightF = $rightF|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $rightF;
 $2 = $0;
 $3 = $1;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE10ImportDataI6MyFaceEEvRKT_($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE10ImportDataI6MyFaceEEvRKT_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC2ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1752|0),(1768|0),225,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE9HasNormalEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 84|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 52|0;
 $18 = sp + 60|0;
 $21 = sp + 20|0;
 $22 = sp + 24|0;
 $23 = sp + 76|0;
 $25 = $this;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($26) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 8|0);
 HEAP32[$28>>2] = 0;
 $29 = (($26) + 12|0);
 HEAP32[$29>>2] = 0;
 $30 = (($26) + 16|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = (($32) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = (($32) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = (($26) + 28|0);
 HEAP8[$47>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_jRNS3_14PointerUpdaterIP6MyFaceEE($agg$result,$m,$n,$pu) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 $pu = $pu|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ai = 0, $ei = 0, $fi = 0;
 var $fi1 = 0, $firstNewFace = 0, $hi = 0, $i = 0, $i2 = 0, $siz = 0, $vi = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 752|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $67 = sp + 16|0;
 $77 = sp + 312|0;
 $96 = sp + 8|0;
 $102 = sp + 416|0;
 $110 = sp;
 $113 = sp + 740|0;
 $158 = sp + 632|0;
 $firstNewFace = sp + 640|0;
 $ai = sp + 644|0;
 $159 = sp + 648|0;
 $160 = sp + 76|0;
 $161 = sp + 28|0;
 $164 = sp + 140|0;
 $fi = sp + 684|0;
 $fi1 = sp + 692|0;
 $vi = sp + 708|0;
 $165 = sp + 348|0;
 $ei = sp + 716|0;
 $166 = sp + 56|0;
 $hi = sp + 356|0;
 $167 = sp + 456|0;
 $155 = $m;
 $156 = $n;
 $157 = $pu;
 $168 = $157;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE5ClearEv($168);
 $169 = $156;
 $170 = ($169|0)==(0);
 if ($170) {
  $171 = $155;
  $172 = (($171) + 32|0);
  $154 = $172;
  $173 = $154;
  $174 = (($173) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $152 = $173;
  $153 = $175;
  $176 = $153;
  $150 = $agg$result;
  $151 = $176;
  $177 = $150;
  $178 = $151;
  HEAP32[$177>>2] = $178;
  STACKTOP = sp;return;
 }
 $179 = $155;
 $180 = (($179) + 32|0);
 $149 = $180;
 $181 = $149;
 $182 = HEAP32[$181>>2]|0;
 $183 = (($181) + 4|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = ($182|0)==($184|0);
 if (!($185)) {
  $186 = $155;
  $187 = (($186) + 32|0);
  $147 = $187;
  $188 = $147;
  $189 = HEAP32[$188>>2]|0;
  $145 = $188;
  $146 = $189;
  $190 = $146;
  $143 = $158;
  $144 = $190;
  $191 = $143;
  $192 = $144;
  HEAP32[$191>>2] = $192;
  $142 = $158;
  $193 = $142;
  $194 = HEAP32[$193>>2]|0;
  $195 = $157;
  $196 = (($195) + 4|0);
  HEAP32[$196>>2] = $194;
  $197 = $155;
  $198 = (($197) + 32|0);
  $140 = $198;
  $199 = $140;
  $200 = (($199) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = (($201) + -44|0);
  $203 = (($202) + 44|0);
  $204 = $157;
  $205 = (($204) + 12|0);
  HEAP32[$205>>2] = $203;
 }
 $206 = $155;
 $207 = (($206) + 32|0);
 $208 = $155;
 $209 = (($208) + 32|0);
 $138 = $209;
 $210 = $138;
 $211 = (($210) + 4|0);
 $212 = HEAP32[$211>>2]|0;
 $213 = HEAP32[$210>>2]|0;
 $214 = $212;
 $215 = $213;
 $216 = (($214) - ($215))|0;
 $217 = (($216|0) / 44)&-1;
 $218 = $156;
 $219 = (($217) + ($218))|0;
 __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($207,$219);
 $220 = $156;
 $221 = $155;
 $222 = (($221) + 44|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = (($223) + ($220))|0;
 HEAP32[$222>>2] = $224;
 $225 = $155;
 $226 = (($225) + 32|0);
 $120 = $226;
 $227 = $120;
 $228 = (($227) + 4|0);
 $229 = HEAP32[$228>>2]|0;
 $230 = HEAP32[$227>>2]|0;
 $231 = $229;
 $232 = $230;
 $233 = (($231) - ($232))|0;
 $234 = (($233|0) / 44)&-1;
 $235 = $156;
 $236 = (($234) - ($235))|0;
 $siz = $236;
 $237 = $155;
 $238 = (($237) + 32|0);
 $118 = $238;
 $239 = $118;
 $240 = HEAP32[$239>>2]|0;
 $116 = $239;
 $117 = $240;
 $241 = $117;
 $114 = $firstNewFace;
 $115 = $241;
 $242 = $114;
 $243 = $115;
 HEAP32[$242>>2] = $243;
 $244 = $siz;
 $111 = $firstNewFace;
 $112 = $244;
 $245 = $111;
 $246 = $112;
 ;HEAP8[$110+0>>0]=HEAP8[$113+0>>0]|0;
 $108 = $245;
 $109 = $246;
 $247 = $108;
 $248 = $109;
 $106 = $247;
 $107 = $248;
 $249 = $106;
 $250 = $107;
 $251 = HEAP32[$249>>2]|0;
 $252 = (($251) + (($250*44)|0)|0);
 HEAP32[$249>>2] = $252;
 $104 = $ai;
 $253 = $155;
 $254 = (($253) + 140|0);
 $101 = $254;
 $255 = $101;
 $100 = $255;
 $256 = $100;
 $99 = $256;
 $257 = $99;
 $258 = HEAP32[$257>>2]|0;
 $97 = $102;
 $98 = $258;
 $259 = $97;
 $260 = $98;
 HEAP32[$259>>2] = $260;
 ;HEAP8[$96+0>>0]=HEAP8[$102+0>>0]|0;HEAP8[$96+1>>0]=HEAP8[$102+1>>0]|0;HEAP8[$96+2>>0]=HEAP8[$102+2>>0]|0;HEAP8[$96+3>>0]=HEAP8[$102+3>>0]|0;
 $95 = $159;
 $261 = $95;
 $262 = HEAP32[$96>>2]|0;
 HEAP32[$261>>2] = $262;
 ;HEAP32[$ai+0>>2]=HEAP32[$159+0>>2]|0;
 while(1) {
  $263 = $155;
  $264 = (($263) + 140|0);
  $76 = $264;
  $265 = $76;
  $75 = $265;
  $266 = $75;
  $74 = $266;
  $267 = $74;
  $268 = (($267) + 4|0);
  $73 = $268;
  $269 = $73;
  $72 = $269;
  $270 = $72;
  $71 = $270;
  $271 = $71;
  $70 = $271;
  $272 = $70;
  $68 = $77;
  $69 = $272;
  $273 = $68;
  $274 = $69;
  HEAP32[$273>>2] = $274;
  ;HEAP8[$67+0>>0]=HEAP8[$77+0>>0]|0;HEAP8[$67+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$67+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$67+3>>0]=HEAP8[$77+3>>0]|0;
  $66 = $160;
  $275 = $66;
  $276 = HEAP32[$67>>2]|0;
  HEAP32[$275>>2] = $276;
  $63 = $ai;
  $64 = $160;
  $277 = $63;
  $278 = $64;
  $61 = $277;
  $62 = $278;
  $279 = $61;
  $280 = HEAP32[$279>>2]|0;
  $281 = $62;
  $282 = HEAP32[$281>>2]|0;
  $283 = ($280|0)==($282|0);
  $284 = $283 ^ 1;
  if (!($284)) {
   break;
  }
  $60 = $ai;
  $285 = $60;
  $286 = HEAP32[$285>>2]|0;
  $287 = (($286) + 16|0);
  __ZN3vcg18PointerToAttributeC2ERKS0_($161,$287);
  $288 = $155;
  $289 = (($288) + 32|0);
  $58 = $289;
  $290 = $58;
  $291 = (($290) + 4|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = HEAP32[$290>>2]|0;
  $294 = $292;
  $295 = $293;
  $296 = (($294) - ($295))|0;
  $297 = (($296|0) / 44)&-1;
  __THREW__ = 0;
  invoke_vii(478,($161|0),($297|0));
  $298 = __THREW__; __THREW__ = 0;
  $299 = $298&1;
  if ($299) {
   label = 10;
   break;
  }
  __ZN3vcg18PointerToAttributeD2Ev($161);
  $56 = $ai;
  $300 = $56;
  $301 = HEAP32[$300>>2]|0;
  $302 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($301)|0);
  HEAP32[$300>>2] = $302;
 }
 if ((label|0) == 10) {
  $303 = ___cxa_find_matching_catch()|0;
  $304 = tempRet0;
  $162 = $303;
  $163 = $304;
  __THREW__ = 0;
  invoke_vi(473,($161|0));
  $305 = __THREW__; __THREW__ = 0;
  $306 = $305&1;
  if ($306) {
   $535 = ___cxa_find_matching_catch(0|0)|0;
   $536 = tempRet0;
   ___clang_call_terminate($535);
   // unreachable;
  }
  $533 = $162;
  $534 = $163;
  ___resumeException($533|0);
  // unreachable;
 }
 $307 = $155;
 $308 = (($307) + 32|0);
 $55 = $308;
 $309 = $55;
 $310 = HEAP32[$309>>2]|0;
 $53 = $309;
 $54 = $310;
 $311 = $54;
 $51 = $164;
 $52 = $311;
 $312 = $51;
 $313 = $52;
 HEAP32[$312>>2] = $313;
 $32 = $164;
 $314 = $32;
 $315 = HEAP32[$314>>2]|0;
 $316 = $157;
 HEAP32[$316>>2] = $315;
 $317 = $155;
 $318 = (($317) + 32|0);
 $31 = $318;
 $319 = $31;
 $320 = (($319) + 4|0);
 $321 = HEAP32[$320>>2]|0;
 $322 = (($321) + -44|0);
 $323 = (($322) + 44|0);
 $324 = $157;
 $325 = (($324) + 8|0);
 HEAP32[$325>>2] = $323;
 $326 = $157;
 $327 = (__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE10NeedUpdateEv($326)|0);
 if ($327) {
  $328 = $155;
  $329 = (__ZN3vcg3tri14HasFFAdjacencyI6MyMeshEEbRKT_($328)|0);
  if ($329) {
   $330 = $155;
   $331 = (($330) + 32|0);
   $29 = $331;
   $332 = $29;
   $333 = HEAP32[$332>>2]|0;
   $27 = $332;
   $28 = $333;
   $334 = $28;
   $25 = $fi;
   $26 = $334;
   $335 = $25;
   $336 = $26;
   HEAP32[$335>>2] = $336;
   while(1) {
    $22 = $fi;
    $23 = $firstNewFace;
    $337 = $22;
    $338 = $23;
    $20 = $337;
    $21 = $338;
    $339 = $20;
    $19 = $339;
    $340 = $19;
    $341 = HEAP32[$340>>2]|0;
    $342 = $21;
    $18 = $342;
    $343 = $18;
    $344 = HEAP32[$343>>2]|0;
    $345 = ($341|0)==($344|0);
    $346 = $345 ^ 1;
    if (!($346)) {
     break;
    }
    $16 = $fi;
    $347 = $16;
    $348 = HEAP32[$347>>2]|0;
    $349 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($348)|0);
    if (!($349)) {
     $i = 0;
     while(1) {
      $350 = $i;
      $3 = $fi;
      $351 = $3;
      $352 = HEAP32[$351>>2]|0;
      $353 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($352)|0);
      $354 = ($350|0)<($353|0);
      if (!($354)) {
       break;
      }
      $2 = $fi;
      $355 = $2;
      $356 = HEAP32[$355>>2]|0;
      $357 = $i;
      $358 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($356,$357)|0);
      $359 = ($358|0)!=(0|0);
      if ($359) {
       $360 = $157;
       $0 = $fi;
       $361 = $0;
       $362 = HEAP32[$361>>2]|0;
       $363 = $i;
       $364 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi($362,$363)|0);
       __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($360,$364);
      }
      $365 = $i;
      $366 = (($365) + 1)|0;
      $i = $366;
     }
    }
    $1 = $fi;
    $367 = $1;
    $368 = HEAP32[$367>>2]|0;
    $369 = (($368) + 44|0);
    HEAP32[$367>>2] = $369;
   }
  }
  $370 = $155;
  $371 = (__ZN3vcg3tri23HasPerVertexVFAdjacencyI6MyMeshEEbRKT_($370)|0);
  if ($371) {
   $372 = $155;
   $373 = (__ZN3vcg3tri21HasPerFaceVFAdjacencyI6MyMeshEEbRKT_($372)|0);
   if ($373) {
    $374 = $155;
    $375 = (($374) + 32|0);
    $8 = $375;
    $376 = $8;
    $377 = HEAP32[$376>>2]|0;
    $6 = $376;
    $7 = $377;
    $378 = $7;
    $4 = $fi1;
    $5 = $378;
    $379 = $4;
    $380 = $5;
    HEAP32[$379>>2] = $380;
    while(1) {
     $13 = $fi1;
     $14 = $firstNewFace;
     $381 = $13;
     $382 = $14;
     $11 = $381;
     $12 = $382;
     $383 = $11;
     $10 = $383;
     $384 = $10;
     $385 = HEAP32[$384>>2]|0;
     $386 = $12;
     $9 = $386;
     $387 = $9;
     $388 = HEAP32[$387>>2]|0;
     $389 = ($385|0)==($388|0);
     $390 = $389 ^ 1;
     if (!($390)) {
      break;
     }
     $15 = $fi1;
     $391 = $15;
     $392 = HEAP32[$391>>2]|0;
     $393 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($392)|0);
     if (!($393)) {
      $i2 = 0;
      while(1) {
       $394 = $i2;
       $17 = $fi1;
       $395 = $17;
       $396 = HEAP32[$395>>2]|0;
       $397 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($396)|0);
       $398 = ($394|0)<($397|0);
       if (!($398)) {
        break;
       }
       $24 = $fi1;
       $399 = $24;
       $400 = HEAP32[$399>>2]|0;
       $401 = $i2;
       $402 = (__ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE4cVFpEi($400,$401)|0);
       $403 = ($402|0)!=(0|0);
       if ($403) {
        $404 = $157;
        $30 = $fi1;
        $405 = $30;
        $406 = HEAP32[$405>>2]|0;
        $407 = $i2;
        $408 = (__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE3VFpEi($406,$407)|0);
        __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($404,$408);
       }
       $409 = $i2;
       $410 = (($409) + 1)|0;
       $i2 = $410;
      }
     }
     $33 = $fi1;
     $411 = $33;
     $412 = HEAP32[$411>>2]|0;
     $413 = (($412) + 44|0);
     HEAP32[$411>>2] = $413;
    }
    $414 = $155;
    $38 = $414;
    $415 = $38;
    $416 = HEAP32[$415>>2]|0;
    $36 = $415;
    $37 = $416;
    $417 = $37;
    $34 = $vi;
    $35 = $417;
    $418 = $34;
    $419 = $35;
    HEAP32[$418>>2] = $419;
    while(1) {
     $420 = $155;
     $43 = $420;
     $421 = $43;
     $422 = (($421) + 4|0);
     $423 = HEAP32[$422>>2]|0;
     $41 = $421;
     $42 = $423;
     $424 = $42;
     $39 = $165;
     $40 = $424;
     $425 = $39;
     $426 = $40;
     HEAP32[$425>>2] = $426;
     $48 = $vi;
     $49 = $165;
     $427 = $48;
     $428 = $49;
     $46 = $427;
     $47 = $428;
     $429 = $46;
     $45 = $429;
     $430 = $45;
     $431 = HEAP32[$430>>2]|0;
     $432 = $47;
     $44 = $432;
     $433 = $44;
     $434 = HEAP32[$433>>2]|0;
     $435 = ($431|0)==($434|0);
     $436 = $435 ^ 1;
     if (!($436)) {
      break;
     }
     $50 = $vi;
     $437 = $50;
     $438 = HEAP32[$437>>2]|0;
     $439 = (__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv($438)|0);
     if (!($439)) {
      $57 = $vi;
      $440 = $57;
      $441 = HEAP32[$440>>2]|0;
      $442 = (__ZNK3vcg6vertex9EmptyCoreI11MyUsedTypesE4cVFpEv($441)|0);
      $443 = ($442|0)!=(0|0);
      if ($443) {
       $444 = $157;
       $59 = $vi;
       $445 = $59;
       $446 = HEAP32[$445>>2]|0;
       $447 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE3VFpEv($446)|0);
       __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($444,$447);
      }
     }
     $65 = $vi;
     $448 = $65;
     $449 = HEAP32[$448>>2]|0;
     $450 = (($449) + 36|0);
     HEAP32[$448>>2] = $450;
    }
   }
  }
  $451 = $155;
  $452 = (__ZN3vcg3tri14HasEFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($451)|0);
  if ($452) {
   $453 = $155;
   $454 = (($453) + 16|0);
   $82 = $454;
   $455 = $82;
   $456 = HEAP32[$455>>2]|0;
   $80 = $455;
   $81 = $456;
   $457 = $81;
   $78 = $ei;
   $79 = $457;
   $458 = $78;
   $459 = $79;
   HEAP32[$458>>2] = $459;
   while(1) {
    $460 = $155;
    $461 = (($460) + 16|0);
    $87 = $461;
    $462 = $87;
    $463 = (($462) + 4|0);
    $464 = HEAP32[$463>>2]|0;
    $85 = $462;
    $86 = $464;
    $465 = $86;
    $83 = $166;
    $84 = $465;
    $466 = $83;
    $467 = $84;
    HEAP32[$466>>2] = $467;
    $92 = $ei;
    $93 = $166;
    $468 = $92;
    $469 = $93;
    $90 = $468;
    $91 = $469;
    $470 = $90;
    $89 = $470;
    $471 = $89;
    $472 = HEAP32[$471>>2]|0;
    $473 = $91;
    $88 = $473;
    $474 = $88;
    $475 = HEAP32[$474>>2]|0;
    $476 = ($472|0)==($475|0);
    $477 = $476 ^ 1;
    if (!($477)) {
     break;
    }
    $94 = $ei;
    $478 = $94;
    $479 = HEAP32[$478>>2]|0;
    $480 = (__ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($479)|0);
    if (!($480)) {
     $103 = $ei;
     $481 = $103;
     $482 = HEAP32[$481>>2]|0;
     $483 = (__ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE4cEFpEv($482)|0);
     $484 = ($483|0)!=(0|0);
     if ($484) {
      $485 = $157;
      $105 = $ei;
      $486 = $105;
      $487 = HEAP32[$486>>2]|0;
      $488 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE3EFpEv($487)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($485,$488);
     }
    }
    $119 = $ei;
    $489 = $119;
    $490 = HEAP32[$489>>2]|0;
    $491 = (($490) + 1|0);
    HEAP32[$489>>2] = $491;
   }
  }
  $492 = $155;
  $493 = (__ZN3vcg3tri14HasHFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($492)|0);
  if ($493) {
   $494 = $155;
   $495 = (($494) + 48|0);
   $125 = $495;
   $496 = $125;
   $497 = HEAP32[$496>>2]|0;
   $123 = $496;
   $124 = $497;
   $498 = $124;
   $121 = $hi;
   $122 = $498;
   $499 = $121;
   $500 = $122;
   HEAP32[$499>>2] = $500;
   while(1) {
    $501 = $155;
    $502 = (($501) + 48|0);
    $130 = $502;
    $503 = $130;
    $504 = (($503) + 4|0);
    $505 = HEAP32[$504>>2]|0;
    $128 = $503;
    $129 = $505;
    $506 = $129;
    $126 = $167;
    $127 = $506;
    $507 = $126;
    $508 = $127;
    HEAP32[$507>>2] = $508;
    $135 = $hi;
    $136 = $167;
    $509 = $135;
    $510 = $136;
    $133 = $509;
    $134 = $510;
    $511 = $133;
    $132 = $511;
    $512 = $132;
    $513 = HEAP32[$512>>2]|0;
    $514 = $134;
    $131 = $514;
    $515 = $131;
    $516 = HEAP32[$515>>2]|0;
    $517 = ($513|0)==($516|0);
    $518 = $517 ^ 1;
    if (!($518)) {
     break;
    }
    $137 = $hi;
    $519 = $137;
    $520 = HEAP32[$519>>2]|0;
    $521 = (__ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($520)|0);
    if (!($521)) {
     $139 = $hi;
     $522 = $139;
     $523 = HEAP32[$522>>2]|0;
     $524 = (__ZNK3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE4cHFpEv($523)|0);
     $525 = ($524|0)!=(0|0);
     if ($525) {
      $526 = $157;
      $141 = $hi;
      $527 = $141;
      $528 = HEAP32[$527>>2]|0;
      $529 = (__ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE3HFpEv($528)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($526,$529);
     }
    }
    $148 = $hi;
    $530 = $148;
    $531 = HEAP32[$530>>2]|0;
    $532 = (($531) + 1|0);
    HEAP32[$530>>2] = $532;
   }
  }
 }
 ;HEAP32[$agg$result+0>>2]=HEAP32[$firstNewFace+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIjNS_9allocatorIjEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -4|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 4)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = (($19) + 4|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$19>>2] = 0;
 $23 = (($19) + 16|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 4)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(479,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 } else {
  $13 = $24;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 44)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + (($39*44)|0)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 44)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -44|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(480,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttributeC2ERKS0_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = (($3) + 4|0);
 $7 = $2;
 $8 = (($7) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($6,$8);
 $9 = (($3) + 16|0);
 $10 = $2;
 $11 = (($10) + 16|0);
 ;HEAP32[$9+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$9+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$9+8>>2]=HEAP32[$11+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttribute6ResizeEj($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sz;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $1;
 FUNCTION_TABLE_vii[$6 & 1023]($3,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg18PointerToAttributeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE10NeedUpdateEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = (($3) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if ($10) {
   $11 = (($3) + 28|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&1;
   if ($13) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = (($3) + 16|0);
  $0 = $14;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($15) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $$expand_i1_val2 = 0;
   $1 = $$expand_i1_val2;
   $$pre_trunc = $1;
   $20 = $$pre_trunc&1;
   STACKTOP = sp;return ($20|0);
  }
 }
 $$expand_i1_val = 1;
 $1 = $$expand_i1_val;
 $$pre_trunc = $1;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(3);
  if ($6) {
   $7 = $1;
   $8 = (($2) + 24|0);
   $9 = (($8) + ($7<<2)|0);
   $10 = HEAP32[$9>>2]|0;
   STACKTOP = sp;return ($10|0);
  }
 }
 ___assert_fail((488|0),(400|0),618,(3704|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceE6UpdateERS6_($this,$vp) {
 $this = $this|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $vp;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)>($14>>>0);
  if (!($15)) {
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($5) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17>>>0)>=($19>>>0);
   if (!($20)) {
    ___assert_fail((3584|0),(3600|0),133,(3680|0));
    // unreachable;
   }
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22>>>0)<($24>>>0);
   if (!($25)) {
    ___assert_fail((3688|0),(3600|0),134,(3680|0));
    // unreachable;
   }
   $26 = HEAP32[$5>>2]|0;
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($5) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $28;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($33|0) / 44)&-1;
   $35 = (($26) + (($34*44)|0)|0);
   $36 = $4;
   HEAP32[$36>>2] = $35;
   $37 = (($5) + 16|0);
   $2 = $37;
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($38) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    STACKTOP = sp;return;
   }
   $43 = HEAP32[$5>>2]|0;
   $44 = (($5) + 16|0);
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$5>>2]|0;
   $48 = $46;
   $49 = $47;
   $50 = (($48) - ($49))|0;
   $51 = (($50|0) / 44)&-1;
   $0 = $44;
   $1 = $51;
   $52 = $0;
   $53 = $1;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($43) + (($56*44)|0)|0);
   $58 = $4;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri23HasPerVertexVFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri26VertexVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri21HasPerFaceVFAdjacencyI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri24FaceVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE4cVFpEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 ___assert_fail((392|0),(400|0),108,(3576|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE3VFpEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 ___assert_fail((392|0),(400|0),107,(3568|0));
 // unreachable;
 return (0)|0;
}
function __ZNK3vcg6vertex9EmptyCoreI11MyUsedTypesE4cVFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(1552|0),105,(3576|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE3VFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(1552|0),104,(3568|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri14HasEFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE5FlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE4cEFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(3464|0),93,(3560|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE3EFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(3464|0),92,(3552|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri14HasHFAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE14HasHFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZNK3vcg5hedge13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESE_SE_SE_SE_EEEEE5FlagsEv($1)|0);
 $3 = $2 & 1;
 $4 = ($3|0)!=(0);
 STACKTOP = sp;return ($4|0);
}
function __ZNK3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE4cHFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(3360|0),331,(3456|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE3HFpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(3360|0),330,(3448|0));
 // unreachable;
 return (0)|0;
}
function __ZNK3vcg5hedge13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESE_SE_SE_SE_EEEEE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN3vcg5hedge10EmptyHFAdjINS0_12EmptyHOppAdjINS0_13EmptyHNextAdjINS0_10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENSA_I6MyEdgeE10AsEdgeTypeENSA_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESK_SK_SK_SK_EEEEEEEEEEEEEEEEE14HasHFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNK3vcg4edge9EmptyCoreI11MyUsedTypesE5FlagsEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 0;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg3tri24FaceVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg3tri26VertexVectorHasVFAdjacencyI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE14HasVFAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $6 = sp + 48|0;
 $10 = sp + 28|0;
 $15 = sp + 12|0;
 $12 = $__x;
 $16 = $12;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $8 = $10;
 $9 = -1;
 $19 = $8;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$10>>2]|0;
 HEAP32[$15>>2] = $20;
 $0 = $15;
 $21 = ($18|0)!=(0|0);
 if ($21) {
  $22 = $12;
  $23 = (($22) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $5 = $24;
  while(1) {
   $25 = $5;
   $26 = HEAP32[$25>>2]|0;
   $2 = $4;
   $3 = -1;
   $27 = $2;
   HEAP32[$27>>2] = 0;
   $28 = HEAP32[$4>>2]|0;
   HEAP32[$6>>2] = $28;
   $1 = $6;
   $29 = ($26|0)!=(0|0);
   if (!($29)) {
    break;
   }
   $30 = $5;
   $31 = HEAP32[$30>>2]|0;
   $5 = $31;
  }
  $32 = $5;
  $11 = $32;
  $47 = $11;
  STACKTOP = sp;return ($47|0);
 } else {
  while(1) {
   $33 = $12;
   $7 = $33;
   $34 = $7;
   $35 = $7;
   $36 = (($35) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = HEAP32[$37>>2]|0;
   $39 = ($34|0)==($38|0);
   $40 = $39 ^ 1;
   if (!($40)) {
    break;
   }
   $41 = $12;
   $42 = (($41) + 8|0);
   $43 = HEAP32[$42>>2]|0;
   $12 = $43;
  }
  $44 = $12;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $11 = $46;
  $47 = $11;
  STACKTOP = sp;return ($47|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 76|0;
 $__v = sp + 40|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 44)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 44)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 44)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 44)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC2EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(481,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(482,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(483,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 44)&-1;
 $35 = (($22) + (($34*44)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*44)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 44)&-1;
 $52 = (($43) + (($51*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   dest=$17+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN6MyFaceC2Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 44|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*44)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*44)|0)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*44)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   dest=$19+0|0; stop=dest+44|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN6MyFaceC2Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 44|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 116|0;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 76|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -44|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -44|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZN6MyFaceC2ERKS_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -44|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 44)&-1;
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -44|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 44)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 44)&-1;
 $39 = (($26) + (($38*44)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 44)&-1;
 $51 = (($42) + (($50*44)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 44)&-1;
 $67 = (($54) + (($66*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 44)&-1;
 $39 = (($26) + (($38*44)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 44)&-1;
 $55 = (($42) + (($54*44)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*44)|0)|0);
 __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2ERKS8_($3,$4);
 $5 = (($3) + 40|0);
 $6 = $2;
 $7 = (($6) + 40|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2ERKS7_($3,$4);
 $5 = (($3) + 24|0);
 $6 = $2;
 $7 = (($6) + 24|0);
 ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;HEAP16[$5+12>>1]=HEAP16[$7+12>>1]|0;HEAP8[$5+14>>0]=HEAP8[$7+14>>0]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2ERKS6_($3,$4);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 ;HEAP32[$5+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$7+8>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2ERKS6_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2ERKS5_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2ERKS5_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2ERKS7_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point3IfEC2ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN6MyFaceC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4FaceI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_S9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverES9_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsES0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsENS_14DefaultDeriverEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS5_9VertexRefENS5_5FFAdjENS5_8BitFlagsEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjENS4_8BitFlagsEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2Ev($1);
 $2 = (($1) + 40|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefENS4_5FFAdjEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2Ev($1);
 $2 = (($1) + 24|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 24|0);
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 24|0);
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fENS4_9VertexRefEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2Ev($1);
 $2 = (($1) + 12|0);
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 12|0);
 $4 = (($3) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 12|0);
 $6 = (($5) + 8|0);
 HEAP32[$6>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_8FaceBaseI11MyUsedTypesEENS_4face8Normal3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face8Normal3fINS_8FaceBaseI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 97612893;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIjNS_9allocatorIjEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfEaSERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = +HEAPF32[$3>>2];
 HEAPF32[$2>>2] = $4;
 $5 = $1;
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = (($2) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $1;
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = (($2) + 8|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return ($2|0);
}
function __ZNK3vcg6Point3IfEplERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 + $11;
 $13 = (($2) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $1;
 $16 = (($15) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $14 + $17;
 __ZN3vcg6Point3IfEC2Efff($agg$result,$6,$12,$18);
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfEdvEf($agg$result,$this,$s) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $s = +$s;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $s;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = $3 / $4;
 $6 = (($2) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $1;
 $9 = $7 / $8;
 $10 = (($2) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $1;
 $13 = $11 / $12;
 __ZN3vcg6Point3IfEC2Efff($agg$result,$5,$9,$13);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfE10normalizedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (__ZN3vcg6Point3IfE9NormalizeEv($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Color4IhE4lerpIfEEvRKS1_S4_T_($this,$c0,$c1,$x) {
 $this = $this|0;
 $c0 = $c0|0;
 $c1 = $c1|0;
 $x = +$x;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0.0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0;
 var $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $c0;
 $2 = $c1;
 $3 = $x;
 $4 = $0;
 $5 = $3;
 $6 = $5 >= 0.0;
 if (!($6)) {
  ___assert_fail((3736|0),(3744|0),110,(3824|0));
  // unreachable;
 }
 $7 = $3;
 $8 = $7 <= 1.0;
 if ($8) {
  $9 = $2;
  $10 = (__ZNK3vcg6Point4IhE1VEv($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (+($12|0));
  $14 = $3;
  $15 = $13 * $14;
  $16 = $1;
  $17 = (__ZNK3vcg6Point4IhE1VEv($16)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  $20 = (+($19|0));
  $21 = $3;
  $22 = 1.0 - $21;
  $23 = $20 * $22;
  $24 = $15 + $23;
  $25 = (~~(($24))&255);
  $26 = (__ZN3vcg6Point4IhEixEi($4,0)|0);
  HEAP8[$26>>0] = $25;
  $27 = $2;
  $28 = (__ZNK3vcg6Point4IhE1VEv($27)|0);
  $29 = (($28) + 1|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (+($31|0));
  $33 = $3;
  $34 = $32 * $33;
  $35 = $1;
  $36 = (__ZNK3vcg6Point4IhE1VEv($35)|0);
  $37 = (($36) + 1|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = (+($39|0));
  $41 = $3;
  $42 = 1.0 - $41;
  $43 = $40 * $42;
  $44 = $34 + $43;
  $45 = (~~(($44))&255);
  $46 = (__ZN3vcg6Point4IhEixEi($4,1)|0);
  HEAP8[$46>>0] = $45;
  $47 = $2;
  $48 = (__ZNK3vcg6Point4IhE1VEv($47)|0);
  $49 = (($48) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (+($51|0));
  $53 = $3;
  $54 = $52 * $53;
  $55 = $1;
  $56 = (__ZNK3vcg6Point4IhE1VEv($55)|0);
  $57 = (($56) + 2|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = $58&255;
  $60 = (+($59|0));
  $61 = $3;
  $62 = 1.0 - $61;
  $63 = $60 * $62;
  $64 = $54 + $63;
  $65 = (~~(($64))&255);
  $66 = (__ZN3vcg6Point4IhEixEi($4,2)|0);
  HEAP8[$66>>0] = $65;
  $67 = $2;
  $68 = (__ZNK3vcg6Point4IhE1VEv($67)|0);
  $69 = (($68) + 3|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = (+($71|0));
  $73 = $3;
  $74 = $72 * $73;
  $75 = $1;
  $76 = (__ZNK3vcg6Point4IhE1VEv($75)|0);
  $77 = (($76) + 3|0);
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = (+($79|0));
  $81 = $3;
  $82 = 1.0 - $81;
  $83 = $80 * $82;
  $84 = $74 + $83;
  $85 = (~~(($84))&255);
  $86 = (__ZN3vcg6Point4IhEixEi($4,3)|0);
  HEAP8[$86>>0] = $85;
  STACKTOP = sp;return;
 } else {
  ___assert_fail((3832|0),(3744|0),111,(3824|0));
  // unreachable;
 }
}
function __ZN3vcg3tri19HasPerVertexQualityI6MyMeshEEbRKT_($m) {
 $m = $m|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $m;
 $1 = $0;
 $2 = (__ZN3vcg3tri31VertexVectorHasPerVertexQualityI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE1QEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 28|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg9TexCoord2IfLi1EE1PEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg3tri16BaseInterpolatorI6MyMeshEclER8MyVertexNS_4face3PosI6MyFaceEE($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri31VertexVectorHasPerVertexQualityI8MyVertexEEbRKNSt3__16vectorIT_NS3_9allocatorIS5_EEEE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE10HasQualityEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEE10HasQualityEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNK3vcg6Point4IhE1VEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfE9NormalizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0.0, $3 = 0.0, $30 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, $n = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 $17 = (+__ZN3vcg4math4SqrtEf($16));
 $n = $17;
 $18 = $n;
 $19 = $18 > 0.0;
 if (!($19)) {
  STACKTOP = sp;return ($1|0);
 }
 $20 = $n;
 $21 = +HEAPF32[$1>>2];
 $22 = $21 / $20;
 HEAPF32[$1>>2] = $22;
 $23 = $n;
 $24 = (($1) + 4|0);
 $25 = +HEAPF32[$24>>2];
 $26 = $25 / $23;
 HEAPF32[$24>>2] = $26;
 $27 = $n;
 $28 = (($1) + 8|0);
 $29 = +HEAPF32[$28>>2];
 $30 = $29 / $27;
 HEAPF32[$28>>2] = $30;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg4math4SqrtEf($v) {
 $v = +$v;
 var $0 = 0.0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = (+Math_sqrt((+$1)));
 STACKTOP = sp;return (+$2);
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 84|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 52|0;
 $18 = sp + 60|0;
 $21 = sp + 20|0;
 $22 = sp + 24|0;
 $23 = sp + 76|0;
 $25 = $this;
 $26 = $25;
 HEAP32[$26>>2] = 0;
 $27 = (($26) + 4|0);
 HEAP32[$27>>2] = 0;
 $28 = (($26) + 8|0);
 HEAP32[$28>>2] = 0;
 $29 = (($26) + 12|0);
 HEAP32[$29>>2] = 0;
 $30 = (($26) + 16|0);
 $24 = $30;
 $31 = $24;
 $20 = $31;
 $32 = $20;
 $19 = $32;
 $0 = $2;
 $1 = -1;
 $33 = $0;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $34;
 $3 = $21;
 HEAP32[$32>>2] = 0;
 $35 = (($32) + 4|0);
 $4 = $6;
 $5 = -1;
 $36 = $4;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $37;
 $7 = $22;
 HEAP32[$35>>2] = 0;
 $38 = (($32) + 8|0);
 $8 = $10;
 $9 = -1;
 $39 = $8;
 HEAP32[$39>>2] = 0;
 $40 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $40;
 $11 = $23;
 $17 = $38;
 HEAP32[$18>>2] = 0;
 $41 = $17;
 $16 = $18;
 $42 = $16;
 $43 = HEAP32[$42>>2]|0;
 $14 = $41;
 HEAP32[$15>>2] = $43;
 $44 = $14;
 $13 = $44;
 $12 = $15;
 $45 = $12;
 $46 = HEAP32[$45>>2]|0;
 HEAP32[$44>>2] = $46;
 $47 = (($26) + 28|0);
 HEAP8[$47>>0] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_jRNS3_14PointerUpdaterIP8MyVertexEE($agg$result,$m,$n,$pu) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $n = $n|0;
 $pu = $pu|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $ai = 0, $ei = 0, $fi = 0, $hi = 0, $i = 0, $last = 0, $siz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $54 = sp;
 $64 = sp + 440|0;
 $66 = sp + 8|0;
 $72 = sp + 272|0;
 $115 = sp + 16|0;
 $118 = sp + 616|0;
 $last = sp + 488|0;
 $128 = sp + 492|0;
 $ai = sp + 496|0;
 $129 = sp + 500|0;
 $130 = sp + 116|0;
 $131 = sp + 528|0;
 $134 = sp + 564|0;
 $fi = sp + 256|0;
 $135 = sp + 572|0;
 $ei = sp + 260|0;
 $136 = sp + 580|0;
 $hi = sp + 264|0;
 $137 = sp + 588|0;
 $138 = sp + 252|0;
 $139 = sp + 452|0;
 $125 = $m;
 $126 = $n;
 $127 = $pu;
 $124 = $last;
 $140 = $126;
 $141 = ($140|0)==(0);
 if ($141) {
  $142 = $125;
  $123 = $142;
  $143 = $123;
  $144 = (($143) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  $121 = $143;
  $122 = $145;
  $146 = $122;
  $119 = $agg$result;
  $120 = $146;
  $147 = $119;
  $148 = $120;
  HEAP32[$147>>2] = $148;
  STACKTOP = sp;return;
 }
 $149 = $127;
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE5ClearEv($149);
 $150 = $125;
 $103 = $150;
 $151 = $103;
 $152 = HEAP32[$151>>2]|0;
 $153 = (($151) + 4|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($152|0)==($154|0);
 if ($155) {
  $156 = $127;
  $157 = (($156) + 4|0);
  HEAP32[$157>>2] = 0;
 } else {
  $158 = $125;
  $102 = $158;
  $159 = $102;
  $160 = HEAP32[$159>>2]|0;
  $100 = $159;
  $101 = $160;
  $161 = $101;
  $98 = $128;
  $99 = $161;
  $162 = $98;
  $163 = $99;
  HEAP32[$162>>2] = $163;
  $96 = $128;
  $164 = $96;
  $165 = HEAP32[$164>>2]|0;
  $166 = $127;
  $167 = (($166) + 4|0);
  HEAP32[$167>>2] = $165;
  $168 = $125;
  $95 = $168;
  $169 = $95;
  $170 = (($169) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  $172 = (($171) + -36|0);
  $173 = (($172) + 36|0);
  $174 = $127;
  $175 = (($174) + 12|0);
  HEAP32[$175>>2] = $173;
 }
 $176 = $125;
 $177 = $125;
 $75 = $177;
 $178 = $75;
 $179 = (($178) + 4|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = HEAP32[$178>>2]|0;
 $182 = $180;
 $183 = $181;
 $184 = (($182) - ($183))|0;
 $185 = (($184|0) / 36)&-1;
 $186 = $126;
 $187 = (($185) + ($186))|0;
 __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($176,$187);
 $188 = $126;
 $189 = $125;
 $190 = (($189) + 12|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = (($191) + ($188))|0;
 HEAP32[$190>>2] = $192;
 $74 = $ai;
 $193 = $125;
 $194 = (($193) + 116|0);
 $71 = $194;
 $195 = $71;
 $70 = $195;
 $196 = $70;
 $69 = $196;
 $197 = $69;
 $198 = HEAP32[$197>>2]|0;
 $67 = $72;
 $68 = $198;
 $199 = $67;
 $200 = $68;
 HEAP32[$199>>2] = $200;
 ;HEAP8[$66+0>>0]=HEAP8[$72+0>>0]|0;HEAP8[$66+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$66+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$66+3>>0]=HEAP8[$72+3>>0]|0;
 $65 = $129;
 $201 = $65;
 $202 = HEAP32[$66>>2]|0;
 HEAP32[$201>>2] = $202;
 ;HEAP32[$ai+0>>2]=HEAP32[$129+0>>2]|0;
 while(1) {
  $203 = $125;
  $204 = (($203) + 116|0);
  $63 = $204;
  $205 = $63;
  $62 = $205;
  $206 = $62;
  $61 = $206;
  $207 = $61;
  $208 = (($207) + 4|0);
  $60 = $208;
  $209 = $60;
  $59 = $209;
  $210 = $59;
  $58 = $210;
  $211 = $58;
  $57 = $211;
  $212 = $57;
  $55 = $64;
  $56 = $212;
  $213 = $55;
  $214 = $56;
  HEAP32[$213>>2] = $214;
  ;HEAP8[$54+0>>0]=HEAP8[$64+0>>0]|0;HEAP8[$54+1>>0]=HEAP8[$64+1>>0]|0;HEAP8[$54+2>>0]=HEAP8[$64+2>>0]|0;HEAP8[$54+3>>0]=HEAP8[$64+3>>0]|0;
  $53 = $130;
  $215 = $53;
  $216 = HEAP32[$54>>2]|0;
  HEAP32[$215>>2] = $216;
  $50 = $ai;
  $51 = $130;
  $217 = $50;
  $218 = $51;
  $48 = $217;
  $49 = $218;
  $219 = $48;
  $220 = HEAP32[$219>>2]|0;
  $221 = $49;
  $222 = HEAP32[$221>>2]|0;
  $223 = ($220|0)==($222|0);
  $224 = $223 ^ 1;
  if (!($224)) {
   break;
  }
  $47 = $ai;
  $225 = $47;
  $226 = HEAP32[$225>>2]|0;
  $227 = (($226) + 16|0);
  __ZN3vcg18PointerToAttributeC2ERKS0_($131,$227);
  $228 = $125;
  $28 = $228;
  $229 = $28;
  $230 = (($229) + 4|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = HEAP32[$229>>2]|0;
  $233 = $231;
  $234 = $232;
  $235 = (($233) - ($234))|0;
  $236 = (($235|0) / 36)&-1;
  __THREW__ = 0;
  invoke_vii(478,($131|0),($236|0));
  $237 = __THREW__; __THREW__ = 0;
  $238 = $237&1;
  if ($238) {
   label = 11;
   break;
  }
  __ZN3vcg18PointerToAttributeD2Ev($131);
  $27 = $ai;
  $239 = $27;
  $240 = HEAP32[$239>>2]|0;
  $241 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($240)|0);
  HEAP32[$239>>2] = $241;
 }
 if ((label|0) == 11) {
  $242 = ___cxa_find_matching_catch()|0;
  $243 = tempRet0;
  $132 = $242;
  $133 = $243;
  __THREW__ = 0;
  invoke_vi(473,($131|0));
  $244 = __THREW__; __THREW__ = 0;
  $245 = $244&1;
  if ($245) {
   $419 = ___cxa_find_matching_catch(0|0)|0;
   $420 = tempRet0;
   ___clang_call_terminate($419);
   // unreachable;
  }
  $417 = $132;
  $418 = $133;
  ___resumeException($417|0);
  // unreachable;
 }
 $246 = $125;
 $26 = $246;
 $247 = $26;
 $248 = HEAP32[$247>>2]|0;
 $24 = $247;
 $25 = $248;
 $249 = $25;
 $22 = $134;
 $23 = $249;
 $250 = $22;
 $251 = $23;
 HEAP32[$250>>2] = $251;
 $20 = $134;
 $252 = $20;
 $253 = HEAP32[$252>>2]|0;
 $254 = $127;
 HEAP32[$254>>2] = $253;
 $255 = $125;
 $18 = $255;
 $256 = $18;
 $257 = (($256) + 4|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = (($258) + -36|0);
 $260 = (($259) + 36|0);
 $261 = $127;
 $262 = (($261) + 8|0);
 HEAP32[$262>>2] = $260;
 $263 = $127;
 $264 = (__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE10NeedUpdateEv($263)|0);
 if ($264) {
  $265 = $125;
  $266 = (($265) + 32|0);
  $16 = $266;
  $267 = $16;
  $268 = HEAP32[$267>>2]|0;
  $14 = $267;
  $15 = $268;
  $269 = $15;
  $12 = $fi;
  $13 = $269;
  $270 = $12;
  $271 = $13;
  HEAP32[$270>>2] = $271;
  while(1) {
   $272 = $125;
   $273 = (($272) + 32|0);
   $4 = $273;
   $274 = $4;
   $275 = (($274) + 4|0);
   $276 = HEAP32[$275>>2]|0;
   $2 = $274;
   $3 = $276;
   $277 = $3;
   $0 = $135;
   $1 = $277;
   $278 = $0;
   $279 = $1;
   HEAP32[$278>>2] = $279;
   $9 = $fi;
   $10 = $135;
   $280 = $9;
   $281 = $10;
   $7 = $280;
   $8 = $281;
   $282 = $7;
   $6 = $282;
   $283 = $6;
   $284 = HEAP32[$283>>2]|0;
   $285 = $8;
   $5 = $285;
   $286 = $5;
   $287 = HEAP32[$286>>2]|0;
   $288 = ($284|0)==($287|0);
   $289 = $288 ^ 1;
   if (!($289)) {
    break;
   }
   $11 = $fi;
   $290 = $11;
   $291 = HEAP32[$290>>2]|0;
   $292 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($291)|0);
   if (!($292)) {
    $i = 0;
    while(1) {
     $293 = $i;
     $17 = $fi;
     $294 = $17;
     $295 = HEAP32[$294>>2]|0;
     $296 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($295)|0);
     $297 = ($293|0)<($296|0);
     if (!($297)) {
      break;
     }
     $19 = $fi;
     $298 = $19;
     $299 = HEAP32[$298>>2]|0;
     $300 = $i;
     $301 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($299,$300)|0);
     $302 = ($301|0)!=(0|0);
     if ($302) {
      $303 = $127;
      $21 = $fi;
      $304 = $21;
      $305 = HEAP32[$304>>2]|0;
      $306 = $i;
      $307 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($305,$306)|0);
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($303,$307);
     }
     $308 = $i;
     $309 = (($308) + 1)|0;
     $i = $309;
    }
   }
   $29 = $fi;
   $310 = $29;
   $311 = HEAP32[$310>>2]|0;
   $312 = (($311) + 44|0);
   HEAP32[$310>>2] = $312;
  }
  $313 = $125;
  $314 = (($313) + 16|0);
  $34 = $314;
  $315 = $34;
  $316 = HEAP32[$315>>2]|0;
  $32 = $315;
  $33 = $316;
  $317 = $33;
  $30 = $ei;
  $31 = $317;
  $318 = $30;
  $319 = $31;
  HEAP32[$318>>2] = $319;
  while(1) {
   $320 = $125;
   $321 = (($320) + 16|0);
   $39 = $321;
   $322 = $39;
   $323 = (($322) + 4|0);
   $324 = HEAP32[$323>>2]|0;
   $37 = $322;
   $38 = $324;
   $325 = $38;
   $35 = $136;
   $36 = $325;
   $326 = $35;
   $327 = $36;
   HEAP32[$326>>2] = $327;
   $44 = $ei;
   $45 = $136;
   $328 = $44;
   $329 = $45;
   $42 = $328;
   $43 = $329;
   $330 = $42;
   $41 = $330;
   $331 = $41;
   $332 = HEAP32[$331>>2]|0;
   $333 = $43;
   $40 = $333;
   $334 = $40;
   $335 = HEAP32[$334>>2]|0;
   $336 = ($332|0)==($335|0);
   $337 = $336 ^ 1;
   if (!($337)) {
    break;
   }
   $46 = $ei;
   $338 = $46;
   $339 = HEAP32[$338>>2]|0;
   $340 = (__ZNK3vcg12EdgeArityMaxI11MyUsedTypesNS_14DefaultDeriverES2_S2_S2_S2_S2_S2_S2_S2_S2_E3IsDEv($339)|0);
   if (!($340)) {
    $341 = $125;
    $342 = (__ZN3vcg3tri14HasEVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($341)|0);
    if ($342) {
     $343 = $127;
     $52 = $ei;
     $344 = $52;
     $345 = HEAP32[$344>>2]|0;
     $346 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($345,0)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($343,$346);
     $347 = $127;
     $73 = $ei;
     $348 = $73;
     $349 = HEAP32[$348>>2]|0;
     $350 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($349,1)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($347,$350);
    }
   }
   $76 = $ei;
   $351 = $76;
   $352 = HEAP32[$351>>2]|0;
   $353 = (($352) + 1|0);
   HEAP32[$351>>2] = $353;
  }
  $77 = $hi;
  $354 = $125;
  $355 = (($354) + 48|0);
  $82 = $355;
  $356 = $82;
  $357 = HEAP32[$356>>2]|0;
  $80 = $356;
  $81 = $357;
  $358 = $81;
  $78 = $137;
  $79 = $358;
  $359 = $78;
  $360 = $79;
  HEAP32[$359>>2] = $360;
  ;HEAP32[$hi+0>>2]=HEAP32[$137+0>>2]|0;
  while(1) {
   $361 = $125;
   $362 = (($361) + 48|0);
   $87 = $362;
   $363 = $87;
   $364 = (($363) + 4|0);
   $365 = HEAP32[$364>>2]|0;
   $85 = $363;
   $86 = $365;
   $366 = $86;
   $83 = $138;
   $84 = $366;
   $367 = $83;
   $368 = $84;
   HEAP32[$367>>2] = $368;
   $92 = $hi;
   $93 = $138;
   $369 = $92;
   $370 = $93;
   $90 = $369;
   $91 = $370;
   $371 = $90;
   $89 = $371;
   $372 = $89;
   $373 = HEAP32[$372>>2]|0;
   $374 = $91;
   $88 = $374;
   $375 = $88;
   $376 = HEAP32[$375>>2]|0;
   $377 = ($373|0)==($376|0);
   $378 = $377 ^ 1;
   if (!($378)) {
    break;
   }
   $94 = $hi;
   $379 = $94;
   $380 = HEAP32[$379>>2]|0;
   $381 = (__ZNK3vcg13HEdgeArityMaxINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS2_I6MyEdgeE10AsEdgeTypeENS2_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESC_SC_SC_SC_EESC_SC_SC_SC_SC_SC_SC_SC_SC_SC_SC_E3IsDEv($380)|0);
   if (!($381)) {
    $382 = $125;
    $383 = (__ZN3vcg3tri14HasHVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($382)|0);
    if ($383) {
     $384 = $127;
     $97 = $hi;
     $385 = $97;
     $386 = HEAP32[$385>>2]|0;
     $387 = (__ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE3HVpEv($386)|0);
     __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($384,$387);
    }
   }
   $104 = $hi;
   $388 = $104;
   $389 = HEAP32[$388>>2]|0;
   $390 = (($389) + 1|0);
   HEAP32[$388>>2] = $390;
  }
 }
 $391 = $125;
 $105 = $391;
 $392 = $105;
 $393 = (($392) + 4|0);
 $394 = HEAP32[$393>>2]|0;
 $395 = HEAP32[$392>>2]|0;
 $396 = $394;
 $397 = $395;
 $398 = (($396) - ($397))|0;
 $399 = (($398|0) / 36)&-1;
 $400 = $126;
 $401 = (($399) - ($400))|0;
 $siz = $401;
 $402 = $125;
 $110 = $402;
 $403 = $110;
 $404 = HEAP32[$403>>2]|0;
 $108 = $403;
 $109 = $404;
 $405 = $109;
 $106 = $139;
 $107 = $405;
 $406 = $106;
 $407 = $107;
 HEAP32[$406>>2] = $407;
 ;HEAP32[$last+0>>2]=HEAP32[$139+0>>2]|0;
 $408 = $siz;
 $116 = $last;
 $117 = $408;
 $409 = $116;
 $410 = $117;
 ;HEAP8[$115+0>>0]=HEAP8[$118+0>>0]|0;
 $113 = $409;
 $114 = $410;
 $411 = $113;
 $412 = $114;
 $111 = $411;
 $112 = $412;
 $413 = $111;
 $414 = $112;
 $415 = HEAP32[$413>>2]|0;
 $416 = (($415) + (($414*36)|0)|0);
 HEAP32[$413>>2] = $416;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$last+0>>2]|0;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 16|0);
 __ZNSt3__16vectorIjNS_9allocatorIjEEED2Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 76|0;
 $18 = $this;
 $19 = $18;
 $20 = (($19) + 12|0);
 HEAP32[$20>>2] = 0;
 $21 = (($19) + 8|0);
 HEAP32[$21>>2] = 0;
 $22 = (($19) + 4|0);
 HEAP32[$22>>2] = 0;
 HEAP32[$19>>2] = 0;
 $23 = (($19) + 16|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 4)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -4|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(479,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 } else {
  $13 = $24;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 36)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + (($39*36)|0)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 36)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -36|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(484,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE10NeedUpdateEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $2;
 $4 = (($3) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0|0);
 if ($6) {
  $7 = HEAP32[$3>>2]|0;
  $8 = (($3) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)!=($9|0);
  if ($10) {
   $11 = (($3) + 28|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&1;
   if ($13) {
    label = 4;
   }
  } else {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $14 = (($3) + 16|0);
  $0 = $14;
  $15 = $0;
  $16 = HEAP32[$15>>2]|0;
  $17 = (($15) + 4|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($16|0)==($18|0);
  if ($19) {
   $$expand_i1_val2 = 0;
   $1 = $$expand_i1_val2;
   $$pre_trunc = $1;
   $20 = $$pre_trunc&1;
   STACKTOP = sp;return ($20|0);
  }
 }
 $$expand_i1_val = 1;
 $1 = $$expand_i1_val;
 $$pre_trunc = $1;
 $20 = $$pre_trunc&1;
 STACKTOP = sp;return ($20|0);
}
function __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexE6UpdateERS6_($this,$vp) {
 $this = $this|0;
 $vp = $vp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $vp;
 $5 = $3;
 $6 = $4;
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)<($9>>>0);
 if (!($10)) {
  $11 = $4;
  $12 = HEAP32[$11>>2]|0;
  $13 = (($5) + 12|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($12>>>0)>($14>>>0);
  if (!($15)) {
   $16 = $4;
   $17 = HEAP32[$16>>2]|0;
   $18 = (($5) + 4|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17>>>0)>=($19>>>0);
   if (!($20)) {
    ___assert_fail((3584|0),(3600|0),133,(3680|0));
    // unreachable;
   }
   $21 = $4;
   $22 = HEAP32[$21>>2]|0;
   $23 = (($5) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($22>>>0)<($24>>>0);
   if (!($25)) {
    ___assert_fail((3688|0),(3600|0),134,(3680|0));
    // unreachable;
   }
   $26 = HEAP32[$5>>2]|0;
   $27 = $4;
   $28 = HEAP32[$27>>2]|0;
   $29 = (($5) + 4|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $28;
   $32 = $30;
   $33 = (($31) - ($32))|0;
   $34 = (($33|0) / 36)&-1;
   $35 = (($26) + (($34*36)|0)|0);
   $36 = $4;
   HEAP32[$36>>2] = $35;
   $37 = (($5) + 16|0);
   $2 = $37;
   $38 = $2;
   $39 = HEAP32[$38>>2]|0;
   $40 = (($38) + 4|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($39|0)==($41|0);
   if ($42) {
    STACKTOP = sp;return;
   }
   $43 = HEAP32[$5>>2]|0;
   $44 = (($5) + 16|0);
   $45 = $4;
   $46 = HEAP32[$45>>2]|0;
   $47 = HEAP32[$5>>2]|0;
   $48 = $46;
   $49 = $47;
   $50 = (($48) - ($49))|0;
   $51 = (($50|0) / 36)&-1;
   $0 = $44;
   $1 = $51;
   $52 = $0;
   $53 = $1;
   $54 = HEAP32[$52>>2]|0;
   $55 = (($54) + ($53<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($43) + (($56*36)|0)|0);
   $58 = $4;
   HEAP32[$58>>2] = $57;
   STACKTOP = sp;return;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14HasEVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEVAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE1VEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $j;
 ___assert_fail((392|0),(3464|0),46,(1064|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg3tri14HasHVAdjacencyINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEEbRKNS0_7TriMeshIT_T0_T1_T2_EE($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $0;
 $2 = (__ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE14HasHVAdjacencyEv()|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE3HVpEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 ___assert_fail((392|0),(3360|0),160,(3840|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg5hedge10EmptyHVAdjINS0_10EmptyHEAdjINS0_13EmptyHPrevAdjINS0_13EmptyBitFlagsINS_15HEdgeTypeHolderINS_9UsedTypesINS_3UseI8MyVertexE12AsVertexTypeENS7_I6MyEdgeE10AsEdgeTypeENS7_I6MyFaceE10AsFaceTypeENS_14DefaultDeriverESH_SH_SH_SH_EEEEEEEEEEE14HasHVAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZN3vcg4edge9EmptyCoreI11MyUsedTypesE14HasEVAdjacencyEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 76|0;
 $__v = sp + 40|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 36)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 36)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 36)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 36)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC2EjjS4_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(485,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(486,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(487,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 36)&-1;
 $35 = (($22) + (($34*36)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*36)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 36)&-1;
 $52 = (($43) + (($51*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   dest=$17+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN8MyVertexC2Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 36|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEEC2EjjS4_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*36)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*36)|0)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*36)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   dest=$19+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   __ZN8MyVertexC2Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 36|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 116|0;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 76|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -36|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -36|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZN8MyVertexC2ERKS_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -36|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 36)&-1;
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -36|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 36)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 36)&-1;
 $51 = (($42) + (($50*36)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 36)&-1;
 $67 = (($54) + (($66*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 36)&-1;
 $39 = (($26) + (($38*36)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 36)&-1;
 $55 = (($42) + (($54*36)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*36)|0)|0);
 __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC2ERKS_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2ERKSC_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2ERKSC_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2ERKS9_($3,$4);
 $5 = (($3) + 32|0);
 $6 = $2;
 $7 = (($6) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2ERKS8_($3,$4);
 $5 = (($3) + 28|0);
 $6 = $2;
 $7 = (($6) + 28|0);
 $8 = +HEAPF32[$7>>2];
 HEAPF32[$5>>2] = $8;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKS9_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKS9_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKSB_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2ERKSB_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2ERKS7_($3,$4);
 $5 = (($3) + 24|0);
 $6 = $2;
 $7 = (($6) + 24|0);
 __ZN3vcg6Color4IhEC2ERKS1_($5,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKS8_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2ERKS1_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point4IhEC2ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IhEC2ERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = HEAP8[$3>>0]|0;
 HEAP8[$2>>0] = $4;
 $5 = $1;
 $6 = (($5) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = (($2) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $1;
 $10 = (($9) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($2) + 2|0);
 HEAP8[$12>>0] = $11;
 $13 = $1;
 $14 = (($13) + 3|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = (($2) + 3|0);
 HEAP8[$16>>0] = $15;
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKS8_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKSA_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2ERKSA_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2ERKS6_($3,$4);
 $5 = (($3) + 12|0);
 $6 = $2;
 $7 = (($6) + 12|0);
 __ZN3vcg6Point3IfEC2ERKS1_($5,$7);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2ERKS6_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS5_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS5_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS7_($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2ERKS7_($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $1;
 $4 = $2;
 __ZN3vcg6Point3IfEC2ERKS1_($3,$4);
 STACKTOP = sp;return;
}
function __ZN8MyVertexC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6VertexI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity12INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity11INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg7Arity10INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity9INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity8INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_SA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_S0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity7INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverESA_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsES0_EEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity6INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsENS_14DefaultDeriverEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14DefaultDeriverINS_6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS2_7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity5INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfENS1_8BitFlagsEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2Ev($1);
 $2 = (($1) + 32|0);
 HEAP32[$2>>2] = 0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity4INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bENS1_8QualityfEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8QualityfINS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7QualityIfNS_6Arity3INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2Ev($1);
 $2 = (($1) + 28|0);
 HEAPF32[$2>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity3INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fENS1_7Color4bEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Color4bINS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2Ev($1);
 $2 = (($1) + 24|0);
 __ZN3vcg6Color4IhEC2ENS1_13ColorConstantE($2,-1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity2INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fENS1_8Normal3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex8Normal3fINS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2Ev($1);
 $2 = (($1) + 12|0);
 __ZN3vcg6Point3IfEC2Ev($2);
 STACKTOP = sp;return;
}
function __ZN3vcg6Arity1INS_6vertex9EmptyCoreI11MyUsedTypesEENS1_7Coord3fEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex7Coord3fINS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 119304647;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotatorC2ERKS4_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE5eraseENS_21__tree_const_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEE($agg$result,$this,$__p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__p = $__p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $__na = 0;
 var $__np = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp;
 $19 = sp + 132|0;
 $31 = $this;
 $32 = $31;
 $33 = HEAP32[$__p>>2]|0;
 $__np = $33;
 $34 = $__np;
 $29 = $agg$result;
 $30 = $34;
 $35 = $29;
 $36 = $30;
 HEAP32[$35>>2] = $36;
 $21 = $agg$result;
 $37 = $21;
 $38 = HEAP32[$37>>2]|0;
 $39 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($38)|0);
 HEAP32[$37>>2] = $39;
 $20 = $32;
 $40 = $20;
 $41 = HEAP32[$40>>2]|0;
 $42 = $__np;
 $43 = ($41|0)==($42|0);
 if ($43) {
  $44 = HEAP32[$agg$result>>2]|0;
  $13 = $32;
  $45 = $13;
  HEAP32[$45>>2] = $44;
 }
 $10 = $32;
 $46 = $10;
 $47 = (($46) + 8|0);
 $9 = $47;
 $48 = $9;
 $8 = $48;
 $49 = $8;
 $50 = HEAP32[$49>>2]|0;
 $51 = (($50) + -1)|0;
 HEAP32[$49>>2] = $51;
 $2 = $32;
 $52 = $2;
 $53 = (($52) + 4|0);
 $1 = $53;
 $54 = $1;
 $0 = $54;
 $55 = $0;
 $__na = $55;
 $7 = $32;
 $56 = $7;
 $57 = (($56) + 4|0);
 $6 = $57;
 $58 = $6;
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $3 = $60;
 $61 = $3;
 $62 = HEAP32[$61>>2]|0;
 $63 = $__np;
 __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($62,$63);
 $64 = $__na;
 $11 = $__p;
 $65 = $11;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 16|0);
 $12 = $67;
 $68 = $12;
 $17 = $64;
 $18 = $68;
 $69 = $17;
 $70 = $18;
 ;HEAP8[$16+0>>0]=HEAP8[$19+0>>0]|0;
 $14 = $69;
 $15 = $70;
 $71 = $15;
 __ZN3vcg18PointerToAttributeD2Ev($71);
 $72 = $__na;
 $73 = $__np;
 $26 = $72;
 $27 = $73;
 $28 = 1;
 $74 = $26;
 $75 = $27;
 $76 = $28;
 $23 = $74;
 $24 = $75;
 $25 = $76;
 $77 = $24;
 $22 = $77;
 $78 = $22;
 __ZdlPv($78);
 STACKTOP = sp;return;
}
function __ZNSt3__113__tree_removeIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__z) {
 $__root = $__root|0;
 $__z = $__z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__removed_black = 0, $__w = 0;
 var $__x = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 268|0;
 $9 = sp + 20|0;
 $13 = sp + 36|0;
 $17 = sp + 48|0;
 $22 = sp + 68|0;
 $25 = sp + 80|0;
 $29 = sp + 96|0;
 $34 = sp + 112|0;
 $39 = sp + 312|0;
 $43 = sp + 148|0;
 $47 = sp + 164|0;
 $52 = sp + 184|0;
 $56 = sp + 200|0;
 $60 = sp + 216|0;
 $65 = sp + 236|0;
 $66 = sp + 240|0;
 $67 = sp + 248|0;
 $68 = sp;
 $69 = sp + 8|0;
 $70 = sp + 116|0;
 $71 = sp + 120|0;
 $72 = sp + 292|0;
 $73 = sp + 128|0;
 $74 = sp + 300|0;
 $75 = sp + 264|0;
 $76 = sp + 132|0;
 $77 = sp + 316|0;
 $78 = sp + 276|0;
 $61 = $__root;
 $62 = $__z;
 $79 = $62;
 $80 = HEAP32[$79>>2]|0;
 $58 = $60;
 $59 = -1;
 $81 = $58;
 HEAP32[$81>>2] = 0;
 $82 = HEAP32[$60>>2]|0;
 HEAP32[$65>>2] = $82;
 $57 = $65;
 $83 = ($80|0)==(0|0);
 if ($83) {
  label = 7;
 } else {
  $84 = $62;
  $85 = (($84) + 4|0);
  $86 = HEAP32[$85>>2]|0;
  $54 = $56;
  $55 = -1;
  $87 = $54;
  HEAP32[$87>>2] = 0;
  $88 = HEAP32[$56>>2]|0;
  HEAP32[$66>>2] = $88;
  $40 = $66;
  $89 = ($86|0)==(0|0);
  if ($89) {
   label = 7;
  } else {
   $91 = $62;
   $92 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($91)|0);
   $93 = $92;
  }
 }
 if ((label|0) == 7) {
  $90 = $62;
  $93 = $90;
 }
 $__y = $93;
 $94 = $__y;
 $95 = HEAP32[$94>>2]|0;
 $37 = $39;
 $38 = -1;
 $96 = $37;
 HEAP32[$96>>2] = 0;
 $97 = HEAP32[$39>>2]|0;
 HEAP32[$67>>2] = $97;
 $36 = $67;
 $98 = ($95|0)!=(0|0);
 if ($98) {
  $99 = $__y;
  $100 = HEAP32[$99>>2]|0;
  $104 = $100;
 } else {
  $101 = $__y;
  $102 = (($101) + 4|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = $103;
 }
 $__x = $104;
 $20 = $22;
 $21 = -1;
 $105 = $20;
 HEAP32[$105>>2] = 0;
 $106 = HEAP32[$22>>2]|0;
 HEAP32[$68>>2] = $106;
 $0 = $68;
 $__w = 0;
 $107 = $__x;
 $1 = $3;
 $2 = -1;
 $108 = $1;
 HEAP32[$108>>2] = 0;
 $109 = HEAP32[$3>>2]|0;
 HEAP32[$69>>2] = $109;
 $4 = $69;
 $110 = ($107|0)!=(0|0);
 if ($110) {
  $111 = $__y;
  $112 = (($111) + 8|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = $__x;
  $115 = (($114) + 8|0);
  HEAP32[$115>>2] = $113;
 }
 $116 = $__y;
 $5 = $116;
 $117 = $5;
 $118 = $5;
 $119 = (($118) + 8|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = HEAP32[$120>>2]|0;
 $122 = ($117|0)==($121|0);
 if ($122) {
  $123 = $__x;
  $124 = $__y;
  $125 = (($124) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  HEAP32[$126>>2] = $123;
  $127 = $__y;
  $128 = $61;
  $129 = ($127|0)!=($128|0);
  if ($129) {
   $130 = $__y;
   $131 = (($130) + 8|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = (($132) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $__w = $134;
  } else {
   $135 = $__x;
   $61 = $135;
  }
 } else {
  $136 = $__x;
  $137 = $__y;
  $138 = (($137) + 8|0);
  $139 = HEAP32[$138>>2]|0;
  $140 = (($139) + 4|0);
  HEAP32[$140>>2] = $136;
  $141 = $__y;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $144 = HEAP32[$143>>2]|0;
  $__w = $144;
 }
 $145 = $__y;
 $146 = (($145) + 12|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&1;
 $149 = $148&1;
 $__removed_black = $149;
 $150 = $__y;
 $151 = $62;
 $152 = ($150|0)!=($151|0);
 if ($152) {
  $153 = $62;
  $154 = (($153) + 8|0);
  $155 = HEAP32[$154>>2]|0;
  $156 = $__y;
  $157 = (($156) + 8|0);
  HEAP32[$157>>2] = $155;
  $158 = $62;
  $6 = $158;
  $159 = $6;
  $160 = $6;
  $161 = (($160) + 8|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = HEAP32[$162>>2]|0;
  $164 = ($159|0)==($163|0);
  if ($164) {
   $165 = $__y;
   $166 = $__y;
   $167 = (($166) + 8|0);
   $168 = HEAP32[$167>>2]|0;
   HEAP32[$168>>2] = $165;
  } else {
   $169 = $__y;
   $170 = $__y;
   $171 = (($170) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = (($172) + 4|0);
   HEAP32[$173>>2] = $169;
  }
  $174 = $62;
  $175 = HEAP32[$174>>2]|0;
  $176 = $__y;
  HEAP32[$176>>2] = $175;
  $177 = $__y;
  $178 = $__y;
  $179 = HEAP32[$178>>2]|0;
  $180 = (($179) + 8|0);
  HEAP32[$180>>2] = $177;
  $181 = $62;
  $182 = (($181) + 4|0);
  $183 = HEAP32[$182>>2]|0;
  $184 = $__y;
  $185 = (($184) + 4|0);
  HEAP32[$185>>2] = $183;
  $186 = $__y;
  $187 = (($186) + 4|0);
  $188 = HEAP32[$187>>2]|0;
  $7 = $9;
  $8 = -1;
  $189 = $7;
  HEAP32[$189>>2] = 0;
  $190 = HEAP32[$9>>2]|0;
  HEAP32[$70>>2] = $190;
  $10 = $70;
  $191 = ($188|0)!=(0|0);
  if ($191) {
   $192 = $__y;
   $193 = $__y;
   $194 = (($193) + 4|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = (($195) + 8|0);
   HEAP32[$196>>2] = $192;
  }
  $197 = $62;
  $198 = (($197) + 12|0);
  $199 = HEAP8[$198>>0]|0;
  $200 = $199&1;
  $201 = $__y;
  $202 = (($201) + 12|0);
  $203 = $200&1;
  HEAP8[$202>>0] = $203;
  $204 = $61;
  $205 = $62;
  $206 = ($204|0)==($205|0);
  if ($206) {
   $207 = $__y;
   $61 = $207;
  }
 }
 $208 = $__removed_black;
 $209 = $208&1;
 if (!($209)) {
  STACKTOP = sp;return;
 }
 $210 = $61;
 $11 = $13;
 $12 = -1;
 $211 = $11;
 HEAP32[$211>>2] = 0;
 $212 = HEAP32[$13>>2]|0;
 HEAP32[$71>>2] = $212;
 $14 = $71;
 $213 = ($210|0)!=(0|0);
 if (!($213)) {
  STACKTOP = sp;return;
 }
 $214 = $__x;
 $15 = $17;
 $16 = -1;
 $215 = $15;
 HEAP32[$215>>2] = 0;
 $216 = HEAP32[$17>>2]|0;
 HEAP32[$72>>2] = $216;
 $18 = $72;
 $217 = ($214|0)!=(0|0);
 if ($217) {
  $218 = $__x;
  $219 = (($218) + 12|0);
  HEAP8[$219>>0] = 1;
 } else {
  while(1) {
   $220 = $__w;
   $19 = $220;
   $221 = $19;
   $222 = $19;
   $223 = (($222) + 8|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = HEAP32[$224>>2]|0;
   $226 = ($221|0)==($225|0);
   if ($226) {
    $343 = $__w;
    $344 = (($343) + 12|0);
    $345 = HEAP8[$344>>0]|0;
    $346 = $345&1;
    if (!($346)) {
     $347 = $__w;
     $348 = (($347) + 12|0);
     HEAP8[$348>>0] = 1;
     $349 = $__w;
     $350 = (($349) + 8|0);
     $351 = HEAP32[$350>>2]|0;
     $352 = (($351) + 12|0);
     HEAP8[$352>>0] = 0;
     $353 = $__w;
     $354 = (($353) + 8|0);
     $355 = HEAP32[$354>>2]|0;
     __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($355);
     $356 = $61;
     $357 = $__w;
     $358 = (($357) + 4|0);
     $359 = HEAP32[$358>>2]|0;
     $360 = ($356|0)==($359|0);
     if ($360) {
      $361 = $__w;
      $61 = $361;
     }
     $362 = $__w;
     $363 = (($362) + 4|0);
     $364 = HEAP32[$363>>2]|0;
     $365 = HEAP32[$364>>2]|0;
     $__w = $365;
    }
    $366 = $__w;
    $367 = HEAP32[$366>>2]|0;
    $41 = $43;
    $42 = -1;
    $368 = $41;
    HEAP32[$368>>2] = 0;
    $369 = HEAP32[$43>>2]|0;
    HEAP32[$76>>2] = $369;
    $44 = $76;
    $370 = ($367|0)==(0|0);
    if (!($370)) {
     $371 = $__w;
     $372 = HEAP32[$371>>2]|0;
     $373 = (($372) + 12|0);
     $374 = HEAP8[$373>>0]|0;
     $375 = $374&1;
     if (!($375)) {
      label = 93;
      break;
     }
    }
    $376 = $__w;
    $377 = (($376) + 4|0);
    $378 = HEAP32[$377>>2]|0;
    $45 = $47;
    $46 = -1;
    $379 = $45;
    HEAP32[$379>>2] = 0;
    $380 = HEAP32[$47>>2]|0;
    HEAP32[$77>>2] = $380;
    $48 = $77;
    $381 = ($378|0)==(0|0);
    if (!($381)) {
     $382 = $__w;
     $383 = (($382) + 4|0);
     $384 = HEAP32[$383>>2]|0;
     $385 = (($384) + 12|0);
     $386 = HEAP8[$385>>0]|0;
     $387 = $386&1;
     if (!($387)) {
      label = 93;
      break;
     }
    }
    $388 = $__w;
    $389 = (($388) + 12|0);
    HEAP8[$389>>0] = 0;
    $390 = $__w;
    $391 = (($390) + 8|0);
    $392 = HEAP32[$391>>2]|0;
    $__x = $392;
    $393 = $__x;
    $394 = (($393) + 12|0);
    $395 = HEAP8[$394>>0]|0;
    $396 = $395&1;
    if (!($396)) {
     label = 88;
     break;
    }
    $397 = $__x;
    $398 = $61;
    $399 = ($397|0)==($398|0);
    if ($399) {
     label = 88;
     break;
    }
    $402 = $__x;
    $49 = $402;
    $403 = $49;
    $404 = $49;
    $405 = (($404) + 8|0);
    $406 = HEAP32[$405>>2]|0;
    $407 = HEAP32[$406>>2]|0;
    $408 = ($403|0)==($407|0);
    if ($408) {
     $409 = $__x;
     $410 = (($409) + 8|0);
     $411 = HEAP32[$410>>2]|0;
     $412 = (($411) + 4|0);
     $413 = HEAP32[$412>>2]|0;
     $418 = $413;
    } else {
     $414 = $__x;
     $415 = (($414) + 8|0);
     $416 = HEAP32[$415>>2]|0;
     $417 = HEAP32[$416>>2]|0;
     $418 = $417;
    }
    $__w = $418;
   } else {
    $227 = $__w;
    $228 = (($227) + 12|0);
    $229 = HEAP8[$228>>0]|0;
    $230 = $229&1;
    if (!($230)) {
     $231 = $__w;
     $232 = (($231) + 12|0);
     HEAP8[$232>>0] = 1;
     $233 = $__w;
     $234 = (($233) + 8|0);
     $235 = HEAP32[$234>>2]|0;
     $236 = (($235) + 12|0);
     HEAP8[$236>>0] = 0;
     $237 = $__w;
     $238 = (($237) + 8|0);
     $239 = HEAP32[$238>>2]|0;
     __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($239);
     $240 = $61;
     $241 = $__w;
     $242 = HEAP32[$241>>2]|0;
     $243 = ($240|0)==($242|0);
     if ($243) {
      $244 = $__w;
      $61 = $244;
     }
     $245 = $__w;
     $246 = HEAP32[$245>>2]|0;
     $247 = (($246) + 4|0);
     $248 = HEAP32[$247>>2]|0;
     $__w = $248;
    }
    $249 = $__w;
    $250 = HEAP32[$249>>2]|0;
    $23 = $25;
    $24 = -1;
    $251 = $23;
    HEAP32[$251>>2] = 0;
    $252 = HEAP32[$25>>2]|0;
    HEAP32[$73>>2] = $252;
    $26 = $73;
    $253 = ($250|0)==(0|0);
    if (!($253)) {
     $254 = $__w;
     $255 = HEAP32[$254>>2]|0;
     $256 = (($255) + 12|0);
     $257 = HEAP8[$256>>0]|0;
     $258 = $257&1;
     if (!($258)) {
      label = 67;
      break;
     }
    }
    $259 = $__w;
    $260 = (($259) + 4|0);
    $261 = HEAP32[$260>>2]|0;
    $27 = $29;
    $28 = -1;
    $262 = $27;
    HEAP32[$262>>2] = 0;
    $263 = HEAP32[$29>>2]|0;
    HEAP32[$74>>2] = $263;
    $30 = $74;
    $264 = ($261|0)==(0|0);
    if (!($264)) {
     $265 = $__w;
     $266 = (($265) + 4|0);
     $267 = HEAP32[$266>>2]|0;
     $268 = (($267) + 12|0);
     $269 = HEAP8[$268>>0]|0;
     $270 = $269&1;
     if (!($270)) {
      label = 67;
      break;
     }
    }
    $271 = $__w;
    $272 = (($271) + 12|0);
    HEAP8[$272>>0] = 0;
    $273 = $__w;
    $274 = (($273) + 8|0);
    $275 = HEAP32[$274>>2]|0;
    $__x = $275;
    $276 = $__x;
    $277 = $61;
    $278 = ($276|0)==($277|0);
    if ($278) {
     label = 62;
     break;
    }
    $279 = $__x;
    $280 = (($279) + 12|0);
    $281 = HEAP8[$280>>0]|0;
    $282 = $281&1;
    if (!($282)) {
     label = 62;
     break;
    }
    $285 = $__x;
    $31 = $285;
    $286 = $31;
    $287 = $31;
    $288 = (($287) + 8|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = HEAP32[$289>>2]|0;
    $291 = ($286|0)==($290|0);
    if ($291) {
     $292 = $__x;
     $293 = (($292) + 8|0);
     $294 = HEAP32[$293>>2]|0;
     $295 = (($294) + 4|0);
     $296 = HEAP32[$295>>2]|0;
     $301 = $296;
    } else {
     $297 = $__x;
     $298 = (($297) + 8|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = HEAP32[$299>>2]|0;
     $301 = $300;
    }
    $__w = $301;
   }
  }
  if ((label|0) == 62) {
   $283 = $__x;
   $284 = (($283) + 12|0);
   HEAP8[$284>>0] = 1;
  }
  else if ((label|0) == 67) {
   $302 = $__w;
   $303 = (($302) + 4|0);
   $304 = HEAP32[$303>>2]|0;
   $32 = $34;
   $33 = -1;
   $305 = $32;
   HEAP32[$305>>2] = 0;
   $306 = HEAP32[$34>>2]|0;
   HEAP32[$75>>2] = $306;
   $35 = $75;
   $307 = ($304|0)==(0|0);
   if ($307) {
    label = 71;
   } else {
    $308 = $__w;
    $309 = (($308) + 4|0);
    $310 = HEAP32[$309>>2]|0;
    $311 = (($310) + 12|0);
    $312 = HEAP8[$311>>0]|0;
    $313 = $312&1;
    if ($313) {
     label = 71;
    }
   }
   if ((label|0) == 71) {
    $314 = $__w;
    $315 = HEAP32[$314>>2]|0;
    $316 = (($315) + 12|0);
    HEAP8[$316>>0] = 1;
    $317 = $__w;
    $318 = (($317) + 12|0);
    HEAP8[$318>>0] = 0;
    $319 = $__w;
    __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($319);
    $320 = $__w;
    $321 = (($320) + 8|0);
    $322 = HEAP32[$321>>2]|0;
    $__w = $322;
   }
   $323 = $__w;
   $324 = (($323) + 8|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($325) + 12|0);
   $327 = HEAP8[$326>>0]|0;
   $328 = $327&1;
   $329 = $__w;
   $330 = (($329) + 12|0);
   $331 = $328&1;
   HEAP8[$330>>0] = $331;
   $332 = $__w;
   $333 = (($332) + 8|0);
   $334 = HEAP32[$333>>2]|0;
   $335 = (($334) + 12|0);
   HEAP8[$335>>0] = 1;
   $336 = $__w;
   $337 = (($336) + 4|0);
   $338 = HEAP32[$337>>2]|0;
   $339 = (($338) + 12|0);
   HEAP8[$339>>0] = 1;
   $340 = $__w;
   $341 = (($340) + 8|0);
   $342 = HEAP32[$341>>2]|0;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($342);
  }
  else if ((label|0) == 88) {
   $400 = $__x;
   $401 = (($400) + 12|0);
   HEAP8[$401>>0] = 1;
  }
  else if ((label|0) == 93) {
   $419 = $__w;
   $420 = HEAP32[$419>>2]|0;
   $50 = $52;
   $51 = -1;
   $421 = $50;
   HEAP32[$421>>2] = 0;
   $422 = HEAP32[$52>>2]|0;
   HEAP32[$78>>2] = $422;
   $53 = $78;
   $423 = ($420|0)==(0|0);
   if ($423) {
    label = 97;
   } else {
    $424 = $__w;
    $425 = HEAP32[$424>>2]|0;
    $426 = (($425) + 12|0);
    $427 = HEAP8[$426>>0]|0;
    $428 = $427&1;
    if ($428) {
     label = 97;
    }
   }
   if ((label|0) == 97) {
    $429 = $__w;
    $430 = (($429) + 4|0);
    $431 = HEAP32[$430>>2]|0;
    $432 = (($431) + 12|0);
    HEAP8[$432>>0] = 1;
    $433 = $__w;
    $434 = (($433) + 12|0);
    HEAP8[$434>>0] = 0;
    $435 = $__w;
    __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($435);
    $436 = $__w;
    $437 = (($436) + 8|0);
    $438 = HEAP32[$437>>2]|0;
    $__w = $438;
   }
   $439 = $__w;
   $440 = (($439) + 8|0);
   $441 = HEAP32[$440>>2]|0;
   $442 = (($441) + 12|0);
   $443 = HEAP8[$442>>0]|0;
   $444 = $443&1;
   $445 = $__w;
   $446 = (($445) + 12|0);
   $447 = $444&1;
   HEAP8[$446>>0] = $447;
   $448 = $__w;
   $449 = (($448) + 8|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = (($450) + 12|0);
   HEAP8[$451>>0] = 1;
   $452 = $__w;
   $453 = HEAP32[$452>>2]|0;
   $454 = (($453) + 12|0);
   HEAP8[$454>>0] = 1;
   $455 = $__w;
   $456 = (($455) + 8|0);
   $457 = HEAP32[$456>>2]|0;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($457);
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $__y = $11;
 $12 = $__y;
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 $15 = (($14) + 4|0);
 HEAP32[$15>>2] = $13;
 $16 = $5;
 $17 = (($16) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $2 = $4;
 $3 = -1;
 $19 = $2;
 HEAP32[$19>>2] = 0;
 $20 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $20;
 $0 = $8;
 $21 = ($18|0)!=(0|0);
 if ($21) {
  $22 = $5;
  $23 = $5;
  $24 = (($23) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 8|0);
  HEAP32[$26>>2] = $22;
 }
 $27 = $5;
 $28 = (($27) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $__y;
 $31 = (($30) + 8|0);
 HEAP32[$31>>2] = $29;
 $32 = $5;
 $1 = $32;
 $33 = $1;
 $34 = $1;
 $35 = (($34) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($33|0)==($37|0);
 if ($38) {
  $39 = $__y;
  $40 = $5;
  $41 = (($40) + 8|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$42>>2] = $39;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 } else {
  $43 = $__y;
  $44 = $5;
  $45 = (($44) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $43;
  $48 = $5;
  $49 = $__y;
  HEAP32[$49>>2] = $48;
  $50 = $__y;
  $51 = $5;
  $52 = (($51) + 8|0);
  HEAP32[$52>>2] = $50;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($__x) {
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 32|0;
 $8 = sp + 8|0;
 $5 = $__x;
 $9 = $5;
 $10 = HEAP32[$9>>2]|0;
 $__y = $10;
 $11 = $__y;
 $12 = (($11) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $5;
 HEAP32[$14>>2] = $13;
 $15 = $5;
 $16 = HEAP32[$15>>2]|0;
 $2 = $4;
 $3 = -1;
 $17 = $2;
 HEAP32[$17>>2] = 0;
 $18 = HEAP32[$4>>2]|0;
 HEAP32[$8>>2] = $18;
 $0 = $8;
 $19 = ($16|0)!=(0|0);
 if ($19) {
  $20 = $5;
  $21 = $5;
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 8|0);
  HEAP32[$23>>2] = $20;
 }
 $24 = $5;
 $25 = (($24) + 8|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $__y;
 $28 = (($27) + 8|0);
 HEAP32[$28>>2] = $26;
 $29 = $5;
 $1 = $29;
 $30 = $1;
 $31 = $1;
 $32 = (($31) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$33>>2]|0;
 $35 = ($30|0)==($34|0);
 if ($35) {
  $36 = $__y;
  $37 = $5;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  HEAP32[$39>>2] = $36;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 } else {
  $40 = $__y;
  $41 = $5;
  $42 = (($41) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + 4|0);
  HEAP32[$44>>2] = $40;
  $45 = $5;
  $46 = $__y;
  $47 = (($46) + 4|0);
  HEAP32[$47>>2] = $45;
  $48 = $__y;
  $49 = $5;
  $50 = (($49) + 8|0);
  HEAP32[$50>>2] = $48;
  STACKTOP = sp;return;
 }
}
function __ZN3vcg4face8IsBorderI6MyFaceEEbRKT_i($f,$j) {
 $f = $f|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $f;
 $1 = $j;
 $2 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 if ($2) {
  $3 = $0;
  $4 = $1;
  $5 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($3,$4)|0);
  $6 = $0;
  $7 = ($5|0)==($6|0);
  STACKTOP = sp;return ($7|0);
 } else {
  ___assert_fail((392|0),(3848|0),60,(3936|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3vcg4face10IsManifoldI6MyFaceEEbRKT_i($f,$j) {
 $f = $f|0;
 $j = $j|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $f;
 $2 = $j;
 $3 = $1;
 $4 = $2;
 $5 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($3,$4)|0);
 $6 = ($5|0)!=(0|0);
 if (!($6)) {
  ___assert_fail((3952|0),(3848|0),42,(3968|0));
  // unreachable;
 }
 $7 = (__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE14HasFFAdjacencyEv()|0);
 if (!($7)) {
  $$expand_i1_val2 = 1;
  $0 = $$expand_i1_val2;
  $$pre_trunc = $0;
  $24 = $$pre_trunc&1;
  STACKTOP = sp;return ($24|0);
 }
 $8 = $1;
 $9 = $2;
 $10 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($8,$9)|0);
 $11 = $1;
 $12 = ($10|0)==($11|0);
 if ($12) {
  $23 = 1;
 } else {
  $13 = $1;
  $14 = $1;
  $15 = $2;
  $16 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($14,$15)|0);
  $17 = $1;
  $18 = $2;
  $19 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFiEi($17,$18)|0);
  $20 = $19 << 24 >> 24;
  $21 = (__ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFpEi($16,$20)|0);
  $22 = ($13|0)==($21|0);
  $23 = $22;
 }
 $$expand_i1_val = $23&1;
 $0 = $$expand_i1_val;
 $$pre_trunc = $0;
 $24 = $$pre_trunc&1;
 STACKTOP = sp;return ($24|0);
}
function __ZNK3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE4cFFiEi($this,$j) {
 $this = $this|0;
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $j;
 $2 = $0;
 $3 = $1;
 $4 = (($2) + 36|0);
 $5 = (($4) + ($3)|0);
 $6 = HEAP8[$5>>0]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEPKS3_($this,$v) {
 $this = $this|0;
 $v = $v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = sp + 4|0;
 $8 = $this;
 $9 = $v;
 $11 = $8;
 $12 = (($11) + 8|0);
 $13 = $9;
 $14 = (($11) + 4|0);
 $15 = HEAP32[$14>>2]|0;
 $7 = $15;
 $16 = $7;
 $17 = HEAP32[$16>>2]|0;
 $5 = $16;
 $6 = $17;
 $18 = $6;
 $3 = $10;
 $4 = $18;
 $19 = $3;
 $20 = $4;
 HEAP32[$19>>2] = $20;
 $0 = $10;
 $21 = $0;
 $22 = HEAP32[$21>>2]|0;
 $23 = $13;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 44)&-1;
 $1 = $12;
 $2 = $26;
 $27 = $1;
 $28 = $2;
 $29 = HEAP32[$27>>2]|0;
 $30 = (($29) + ($28<<4)|0);
 STACKTOP = sp;return ($30|0);
}
function __ZNK3vcg4face3PosI6MyFaceE5VFlipEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$2>>2]|0;
 $5 = (($2) + 4|0);
 $6 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4PrevERKi($4,$5)|0);
 $7 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($3,$6)|0);
 $8 = (($2) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7|0)!=($9|0);
 if (!($10)) {
  ___assert_fail((3984|0),(712|0),219,(4048|0));
  // unreachable;
 }
 $11 = HEAP32[$2>>2]|0;
 $12 = HEAP32[$2>>2]|0;
 $13 = (($2) + 4|0);
 $14 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($12,$13)|0);
 $15 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($11,$14)|0);
 $16 = (($2) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($15|0)==($17|0);
 if (!($18)) {
  $19 = HEAP32[$2>>2]|0;
  $20 = (($2) + 4|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($19,$21)|0);
  $23 = (($2) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($22|0)==($24|0);
  if (!($25)) {
   ___assert_fail((3984|0),(712|0),219,(4048|0));
   // unreachable;
  }
 }
 $26 = HEAP32[$2>>2]|0;
 $27 = HEAP32[$2>>2]|0;
 $28 = (($2) + 4|0);
 $29 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($27,$28)|0);
 $30 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($26,$29)|0);
 $31 = (($2) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$2>>2]|0;
  $35 = (($2) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($34,$36)|0);
  $0 = $37;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 } else {
  $38 = HEAP32[$2>>2]|0;
  $39 = HEAP32[$2>>2]|0;
  $40 = (($2) + 4|0);
  $41 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($39,$40)|0);
  $42 = (__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi($38,$41)|0);
  $0 = $42;
  $43 = $0;
  STACKTOP = sp;return ($43|0);
 }
 return (0)|0;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixERKNS1_11__wrap_iterIPS3_EE($this,$cont) {
 $this = $this|0;
 $cont = $cont|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 28|0;
 $9 = $this;
 $10 = $cont;
 $12 = $9;
 $13 = (($12) + 8|0);
 $14 = $10;
 $8 = $14;
 $15 = $8;
 $16 = HEAP32[$15>>2]|0;
 $17 = (($12) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $4 = $18;
 $19 = $4;
 $20 = HEAP32[$19>>2]|0;
 $2 = $19;
 $3 = $20;
 $21 = $3;
 $0 = $11;
 $1 = $21;
 $22 = $0;
 $23 = $1;
 HEAP32[$22>>2] = $23;
 $5 = $11;
 $24 = $5;
 $25 = HEAP32[$24>>2]|0;
 $26 = $16;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $29 = (($28|0) / 44)&-1;
 $6 = $13;
 $7 = $29;
 $30 = $6;
 $31 = $7;
 $32 = HEAP32[$30>>2]|0;
 $33 = (($32) + ($31<<4)|0);
 STACKTOP = sp;return ($33|0);
}
function __ZN3vcg18PointerToAttributeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = $this;
 $9 = $8;
 $10 = (($9) + 4|0);
 $7 = $10;
 $11 = $7;
 $6 = $11;
 $12 = $6;
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $3 = $14;
 $2 = $12;
 $15 = $2;
 $1 = $15;
 $16 = $1;
 $0 = $16;
 $17 = $0;
 $__a$i$i$i = $17;
 $__i$i$i$i = 0;
 while(1) {
  $18 = $__i$i$i$i;
  $19 = ($18>>>0)<(3);
  if (!($19)) {
   break;
  }
  $20 = $__i$i$i$i;
  $21 = $__a$i$i$i;
  $22 = (($21) + ($20<<2)|0);
  HEAP32[$22>>2] = 0;
  $23 = $__i$i$i$i;
  $24 = (($23) + 1)|0;
  $__i$i$i$i = $24;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC2ERS6_($this,$_c) {
 $this = $this|0;
 $_c = $_c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $_c;
 $10 = $6;
 __ZN3vcg18SimpleTempDataBaseC2Ev($10);
 $11 = (4104 + 8|0);
 HEAP32[$10>>2] = $11;
 $12 = (($10) + 4|0);
 $13 = $7;
 HEAP32[$12>>2] = $13;
 $14 = (($10) + 8|0);
 __THREW__ = 0;
 invoke_vi(488,($14|0));
 $15 = __THREW__; __THREW__ = 0;
 $16 = $15&1;
 do {
  if ($16) {
   $48 = ___cxa_find_matching_catch()|0;
   $49 = tempRet0;
   $8 = $48;
   $9 = $49;
  } else {
   $17 = (($10) + 20|0);
   HEAP32[$17>>2] = 0;
   $18 = (($10) + 8|0);
   $19 = (($10) + 4|0);
   $20 = HEAP32[$19>>2]|0;
   $5 = $20;
   $21 = $5;
   $4 = $21;
   $22 = $4;
   $3 = $22;
   $23 = $3;
   $24 = (($23) + 8|0);
   $2 = $24;
   $25 = $2;
   $1 = $25;
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = HEAP32[$22>>2]|0;
   $29 = $27;
   $30 = $28;
   $31 = (($29) - ($30))|0;
   $32 = (($31|0) / 44)&-1;
   __THREW__ = 0;
   invoke_vii(489,($18|0),($32|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if (!($34)) {
    $35 = (($10) + 8|0);
    $36 = (($10) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $0 = $37;
    $38 = $0;
    $39 = (($38) + 4|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = HEAP32[$38>>2]|0;
    $42 = $40;
    $43 = $41;
    $44 = (($42) - ($43))|0;
    $45 = (($44|0) / 44)&-1;
    __THREW__ = 0;
    invoke_vii(490,($35|0),($45|0));
    $46 = __THREW__; __THREW__ = 0;
    $47 = $46&1;
    if (!($47)) {
     STACKTOP = sp;return;
    }
   }
   $50 = ___cxa_find_matching_catch()|0;
   $51 = tempRet0;
   $8 = $50;
   $9 = $51;
   __THREW__ = 0;
   invoke_vi(491,($14|0));
   $52 = __THREW__; __THREW__ = 0;
   $53 = $52&1;
   if ($53) {
    $58 = ___cxa_find_matching_catch(0|0)|0;
    $59 = tempRet0;
    ___clang_call_terminate($58);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(11,($10|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 }
 $56 = $8;
 $57 = $9;
 ___resumeException($56|0);
 // unreachable;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC2EPvRKi($this,$ah,$n) {
 $this = $this|0;
 $ah = $ah|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ah;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EC2EPvRKi($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE15AttributeHandleINS0_15RefinedFaceDataIPS4_EESA_EC2EPvRKi($this,$ah,$n) {
 $this = $this|0;
 $ah = $ah|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ah;
 $2 = $n;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 4|0);
 $6 = $2;
 $7 = HEAP32[$6>>2]|0;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i14 = 0, $__tmp$i$i2 = 0, $__tmp$i$i8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 736|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 32|0;
 $9 = sp + 720|0;
 $33 = sp + 40|0;
 $36 = sp + 721|0;
 $68 = sp + 48|0;
 $71 = sp + 722|0;
 $103 = sp + 444|0;
 $104 = sp + 16|0;
 $107 = sp + 456|0;
 $108 = sp + 464|0;
 $109 = sp + 24|0;
 $112 = sp + 480|0;
 $113 = sp;
 $123 = sp + 8|0;
 $126 = sp + 723|0;
 $152 = sp + 76|0;
 $__parent = sp + 304|0;
 $__inserted = sp + 724|0;
 $155 = sp + 80|0;
 $__h = sp + 336|0;
 $156 = sp + 680|0;
 $157 = sp + 536|0;
 $160 = sp + 696|0;
 $153 = $this;
 $154 = $__v;
 $161 = $153;
 $162 = $154;
 $163 = (__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($161,$__parent,$162)|0);
 $__child = $163;
 $164 = $__child;
 $165 = HEAP32[$164>>2]|0;
 $__r = $165;
 HEAP8[$__inserted>>0] = 0;
 $166 = $__child;
 $167 = HEAP32[$166>>2]|0;
 $150 = $152;
 $151 = -1;
 $168 = $150;
 HEAP32[$168>>2] = 0;
 $169 = HEAP32[$152>>2]|0;
 HEAP32[$155>>2] = $169;
 $149 = $155;
 $170 = ($167|0)==(0|0);
 if (!($170)) {
  $335 = $__r;
  $144 = $160;
  $145 = $335;
  $336 = $144;
  $337 = $145;
  HEAP32[$336>>2] = $337;
  $146 = $agg$result;
  $147 = $160;
  $148 = $__inserted;
  $338 = $146;
  $339 = $147;
  ;HEAP32[$338+0>>2]=HEAP32[$339+0>>2]|0;
  $340 = (($338) + 4|0);
  $341 = $148;
  $342 = HEAP8[$341>>0]|0;
  $343 = $342&1;
  $344 = $343&1;
  HEAP8[$340>>0] = $344;
  STACKTOP = sp;return;
 }
 $171 = $154;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($157,$161,$171);
 $116 = $157;
 $172 = $116;
 $114 = $156;
 $115 = $172;
 $173 = $114;
 $174 = $115;
 HEAP32[$173>>2] = $174;
 ;HEAP8[$113+0>>0]=HEAP8[$156+0>>0]|0;HEAP8[$113+1>>0]=HEAP8[$156+1>>0]|0;HEAP8[$113+2>>0]=HEAP8[$156+2>>0]|0;HEAP8[$113+3>>0]=HEAP8[$156+3>>0]|0;
 $111 = $__h;
 $175 = $111;
 $110 = $113;
 $176 = $110;
 $177 = HEAP32[$176>>2]|0;
 $93 = $177;
 $178 = $93;
 $92 = $178;
 $179 = $92;
 $91 = $179;
 $180 = $91;
 $181 = HEAP32[$180>>2]|0;
 $__t$i$i = $181;
 $90 = $178;
 $182 = $90;
 $89 = $182;
 $183 = $89;
 HEAP32[$183>>2] = 0;
 $184 = $__t$i$i;
 $94 = $113;
 $185 = $94;
 $186 = HEAP32[$185>>2]|0;
 $97 = $186;
 $187 = $97;
 $96 = $187;
 $188 = $96;
 $95 = $188;
 $189 = $95;
 $190 = (($189) + 4|0);
 $98 = $190;
 $191 = $98;
 ;HEAP32[$112+0>>2]=HEAP32[$191+0>>2]|0;HEAP32[$112+4>>2]=HEAP32[$191+4>>2]|0;
 ;HEAP8[$109+0>>0]=HEAP8[$112+0>>0]|0;HEAP8[$109+1>>0]=HEAP8[$112+1>>0]|0;HEAP8[$109+2>>0]=HEAP8[$112+2>>0]|0;HEAP8[$109+3>>0]=HEAP8[$112+3>>0]|0;HEAP8[$109+4>>0]=HEAP8[$112+4>>0]|0;HEAP8[$109+5>>0]=HEAP8[$112+5>>0]|0;HEAP8[$109+6>>0]=HEAP8[$112+6>>0]|0;HEAP8[$109+7>>0]=HEAP8[$112+7>>0]|0;
 $106 = $175;
 HEAP32[$107>>2] = $184;
 $192 = $106;
 $105 = $107;
 $193 = $105;
 $194 = HEAP32[$193>>2]|0;
 $99 = $109;
 $195 = $99;
 ;HEAP32[$108+0>>2]=HEAP32[$195+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$195+4>>2]|0;
 ;HEAP8[$104+0>>0]=HEAP8[$108+0>>0]|0;HEAP8[$104+1>>0]=HEAP8[$108+1>>0]|0;HEAP8[$104+2>>0]=HEAP8[$108+2>>0]|0;HEAP8[$104+3>>0]=HEAP8[$108+3>>0]|0;HEAP8[$104+4>>0]=HEAP8[$108+4>>0]|0;HEAP8[$104+5>>0]=HEAP8[$108+5>>0]|0;HEAP8[$104+6>>0]=HEAP8[$108+6>>0]|0;HEAP8[$104+7>>0]=HEAP8[$108+7>>0]|0;
 $102 = $192;
 HEAP32[$103>>2] = $194;
 $196 = $102;
 $101 = $103;
 $197 = $101;
 $198 = HEAP32[$197>>2]|0;
 HEAP32[$196>>2] = $198;
 $199 = (($196) + 4|0);
 $100 = $104;
 $200 = $100;
 ;HEAP32[$199+0>>2]=HEAP32[$200+0>>2]|0;HEAP32[$199+4>>2]=HEAP32[$200+4>>2]|0;
 $88 = $157;
 $201 = $88;
 $86 = $201;
 $87 = 0;
 $202 = $86;
 $85 = $202;
 $203 = $85;
 $84 = $203;
 $204 = $84;
 $205 = HEAP32[$204>>2]|0;
 $__tmp$i$i2 = $205;
 $206 = $87;
 $65 = $202;
 $207 = $65;
 $64 = $207;
 $208 = $64;
 HEAP32[$208>>2] = $206;
 $209 = $__tmp$i$i2;
 $210 = ($209|0)!=(0|0);
 if ($210) {
  $63 = $202;
  $211 = $63;
  $62 = $211;
  $212 = $62;
  $213 = (($212) + 4|0);
  $214 = $__tmp$i$i2;
  $80 = $213;
  $81 = $214;
  $215 = $80;
  $216 = (($215) + 4|0);
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&1;
  do {
   if ($218) {
    $219 = HEAP32[$215>>2]|0;
    $220 = $81;
    $221 = (($220) + 16|0);
    $79 = $221;
    $222 = $79;
    $69 = $219;
    $70 = $222;
    $223 = $69;
    $224 = $70;
    ;HEAP8[$68+0>>0]=HEAP8[$71+0>>0]|0;
    $66 = $223;
    $67 = $224;
    $225 = $67;
    __THREW__ = 0;
    invoke_vi(473,($225|0));
    $226 = __THREW__; __THREW__ = 0;
    $227 = $226&1;
    if ($227) {
     $228 = ___cxa_find_matching_catch()|0;
     $229 = tempRet0;
     $82 = $228;
     $83 = $229;
     $230 = $82;
     ___cxa_call_unexpected(($230|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $231 = $81;
  $232 = ($231|0)!=(0|0);
  if ($232) {
   $233 = HEAP32[$215>>2]|0;
   $234 = $81;
   $76 = $233;
   $77 = $234;
   $78 = 1;
   $235 = $76;
   $236 = $77;
   $237 = $78;
   $73 = $235;
   $74 = $236;
   $75 = $237;
   $238 = $74;
   $72 = $238;
   $239 = $72;
   __ZdlPv($239);
  }
 }
 $240 = HEAP32[$__parent>>2]|0;
 $241 = $__child;
 $61 = $__h;
 $242 = $61;
 $60 = $242;
 $243 = $60;
 $59 = $243;
 $244 = $59;
 $245 = HEAP32[$244>>2]|0;
 __THREW__ = 0;
 invoke_viiii(492,($161|0),($240|0),($241|0),($245|0));
 $246 = __THREW__; __THREW__ = 0;
 $247 = $246&1;
 if (!($247)) {
  $58 = $__h;
  $248 = $58;
  $57 = $248;
  $249 = $57;
  $56 = $249;
  $250 = $56;
  $251 = HEAP32[$250>>2]|0;
  $__t$i = $251;
  $55 = $248;
  $252 = $55;
  $54 = $252;
  $253 = $54;
  HEAP32[$253>>2] = 0;
  $254 = $__t$i;
  $__r = $254;
  HEAP8[$__inserted>>0] = 1;
  $53 = $__h;
  $255 = $53;
  $51 = $255;
  $52 = 0;
  $256 = $51;
  $50 = $256;
  $257 = $50;
  $49 = $257;
  $258 = $49;
  $259 = HEAP32[$258>>2]|0;
  $__tmp$i$i8 = $259;
  $260 = $52;
  $30 = $256;
  $261 = $30;
  $29 = $261;
  $262 = $29;
  HEAP32[$262>>2] = $260;
  $263 = $__tmp$i$i8;
  $264 = ($263|0)!=(0|0);
  if ($264) {
   $28 = $256;
   $265 = $28;
   $27 = $265;
   $266 = $27;
   $267 = (($266) + 4|0);
   $268 = $__tmp$i$i8;
   $45 = $267;
   $46 = $268;
   $269 = $45;
   $270 = (($269) + 4|0);
   $271 = HEAP8[$270>>0]|0;
   $272 = $271&1;
   do {
    if ($272) {
     $273 = HEAP32[$269>>2]|0;
     $274 = $46;
     $275 = (($274) + 16|0);
     $44 = $275;
     $276 = $44;
     $34 = $273;
     $35 = $276;
     $277 = $34;
     $278 = $35;
     ;HEAP8[$33+0>>0]=HEAP8[$36+0>>0]|0;
     $31 = $277;
     $32 = $278;
     $279 = $32;
     __THREW__ = 0;
     invoke_vi(473,($279|0));
     $280 = __THREW__; __THREW__ = 0;
     $281 = $280&1;
     if ($281) {
      $282 = ___cxa_find_matching_catch()|0;
      $283 = tempRet0;
      $47 = $282;
      $48 = $283;
      $284 = $47;
      ___cxa_call_unexpected(($284|0));
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   $285 = $46;
   $286 = ($285|0)!=(0|0);
   if ($286) {
    $287 = HEAP32[$269>>2]|0;
    $288 = $46;
    $41 = $287;
    $42 = $288;
    $43 = 1;
    $289 = $41;
    $290 = $42;
    $291 = $43;
    $38 = $289;
    $39 = $290;
    $40 = $291;
    $292 = $39;
    $37 = $292;
    $293 = $37;
    __ZdlPv($293);
   }
  }
  $335 = $__r;
  $144 = $160;
  $145 = $335;
  $336 = $144;
  $337 = $145;
  HEAP32[$336>>2] = $337;
  $146 = $agg$result;
  $147 = $160;
  $148 = $__inserted;
  $338 = $146;
  $339 = $147;
  ;HEAP32[$338+0>>2]=HEAP32[$339+0>>2]|0;
  $340 = (($338) + 4|0);
  $341 = $148;
  $342 = HEAP8[$341>>0]|0;
  $343 = $342&1;
  $344 = $343&1;
  HEAP8[$340>>0] = $344;
  STACKTOP = sp;return;
 }
 $294 = ___cxa_find_matching_catch()|0;
 $295 = tempRet0;
 $158 = $294;
 $159 = $295;
 $143 = $__h;
 $296 = $143;
 $141 = $296;
 $142 = 0;
 $297 = $141;
 $140 = $297;
 $298 = $140;
 $139 = $298;
 $299 = $139;
 $300 = HEAP32[$299>>2]|0;
 $__tmp$i$i = $300;
 $301 = $142;
 $120 = $297;
 $302 = $120;
 $119 = $302;
 $303 = $119;
 HEAP32[$303>>2] = $301;
 $304 = $__tmp$i$i;
 $305 = ($304|0)!=(0|0);
 if ($305) {
  $118 = $297;
  $306 = $118;
  $117 = $306;
  $307 = $117;
  $308 = (($307) + 4|0);
  $309 = $__tmp$i$i;
  $135 = $308;
  $136 = $309;
  $310 = $135;
  $311 = (($310) + 4|0);
  $312 = HEAP8[$311>>0]|0;
  $313 = $312&1;
  do {
   if ($313) {
    $314 = HEAP32[$310>>2]|0;
    $315 = $136;
    $316 = (($315) + 16|0);
    $134 = $316;
    $317 = $134;
    $124 = $314;
    $125 = $317;
    $318 = $124;
    $319 = $125;
    ;HEAP8[$123+0>>0]=HEAP8[$126+0>>0]|0;
    $121 = $318;
    $122 = $319;
    $320 = $122;
    __THREW__ = 0;
    invoke_vi(473,($320|0));
    $321 = __THREW__; __THREW__ = 0;
    $322 = $321&1;
    if ($322) {
     $323 = ___cxa_find_matching_catch(0|0)|0;
     $324 = tempRet0;
     $137 = $323;
     $138 = $324;
     $325 = $137;
     ___cxa_call_unexpected(($325|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $326 = $136;
  $327 = ($326|0)!=(0|0);
  if ($327) {
   $328 = HEAP32[$310>>2]|0;
   $329 = $136;
   $131 = $328;
   $132 = $329;
   $133 = 1;
   $330 = $131;
   $331 = $132;
   $332 = $133;
   $128 = $330;
   $129 = $331;
   $130 = $332;
   $333 = $129;
   $127 = $333;
   $334 = $127;
   __ZdlPv($334);
  }
 }
 $345 = $158;
 $346 = $159;
 ___resumeException($345|0);
 // unreachable;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE12__find_equalIS2_EERPNS_16__tree_node_baseIPvEESD_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 12|0;
 $10 = sp + 24|0;
 $19 = sp + 80|0;
 $23 = sp + 208|0;
 $28 = sp + 116|0;
 $45 = sp + 180|0;
 $46 = sp + 88|0;
 $47 = sp + 196|0;
 $42 = $this;
 $43 = $__parent;
 $44 = $__v;
 $48 = $42;
 $40 = $48;
 $49 = $40;
 $39 = $49;
 $50 = $39;
 $51 = (($50) + 4|0);
 $38 = $51;
 $52 = $38;
 $37 = $52;
 $53 = $37;
 $36 = $53;
 $54 = $36;
 $35 = $54;
 $55 = $35;
 $56 = HEAP32[$55>>2]|0;
 $__nd = $56;
 $57 = $__nd;
 $17 = $19;
 $18 = -1;
 $58 = $17;
 HEAP32[$58>>2] = 0;
 $59 = HEAP32[$19>>2]|0;
 HEAP32[$45>>2] = $59;
 $16 = $45;
 $60 = ($57|0)!=(0|0);
 if (!($60)) {
  $34 = $48;
  $129 = $34;
  $130 = (($129) + 4|0);
  $33 = $130;
  $131 = $33;
  $32 = $131;
  $132 = $32;
  $31 = $132;
  $133 = $31;
  $30 = $133;
  $134 = $30;
  $135 = $43;
  HEAP32[$135>>2] = $134;
  $136 = $43;
  $137 = HEAP32[$136>>2]|0;
  $41 = $137;
  $138 = $41;
  STACKTOP = sp;return ($138|0);
 }
 while(1) {
  $15 = $48;
  $61 = $15;
  $62 = (($61) + 8|0);
  $14 = $62;
  $63 = $14;
  $13 = $63;
  $64 = $13;
  $65 = $44;
  $66 = $__nd;
  $67 = (($66) + 16|0);
  $7 = $64;
  $8 = $65;
  $9 = $67;
  $68 = $8;
  $69 = $9;
  __ZN3vcg18PointerToAttributeC2ERKS0_($10,$69);
  __THREW__ = 0;
  $70 = (invoke_iii(493,($68|0),($10|0))|0);
  $71 = __THREW__; __THREW__ = 0;
  $72 = $71&1;
  if ($72) {
   label = 4;
   break;
  }
  __ZN3vcg18PointerToAttributeD2Ev($10);
  if ($70) {
   $81 = $__nd;
   $82 = HEAP32[$81>>2]|0;
   $4 = $6;
   $5 = -1;
   $83 = $4;
   HEAP32[$83>>2] = 0;
   $84 = HEAP32[$6>>2]|0;
   HEAP32[$46>>2] = $84;
   $3 = $46;
   $85 = ($82|0)!=(0|0);
   if (!($85)) {
    label = 10;
    break;
   }
   $86 = $__nd;
   $87 = HEAP32[$86>>2]|0;
   $__nd = $87;
  } else {
   $2 = $48;
   $92 = $2;
   $93 = (($92) + 8|0);
   $1 = $93;
   $94 = $1;
   $0 = $94;
   $95 = $0;
   $96 = $__nd;
   $97 = (($96) + 16|0);
   $98 = $44;
   $20 = $95;
   $21 = $97;
   $22 = $98;
   $99 = $21;
   $100 = $22;
   __ZN3vcg18PointerToAttributeC2ERKS0_($23,$100);
   __THREW__ = 0;
   $101 = (invoke_iii(493,($99|0),($23|0))|0);
   $102 = __THREW__; __THREW__ = 0;
   $103 = $102&1;
   if ($103) {
    label = 13;
    break;
   }
   __ZN3vcg18PointerToAttributeD2Ev($23);
   if (!($101)) {
    label = 21;
    break;
   }
   $112 = $__nd;
   $113 = (($112) + 4|0);
   $114 = HEAP32[$113>>2]|0;
   $26 = $28;
   $27 = -1;
   $115 = $26;
   HEAP32[$115>>2] = 0;
   $116 = HEAP32[$28>>2]|0;
   HEAP32[$47>>2] = $116;
   $29 = $47;
   $117 = ($114|0)!=(0|0);
   if (!($117)) {
    label = 19;
    break;
   }
   $118 = $__nd;
   $119 = (($118) + 4|0);
   $120 = HEAP32[$119>>2]|0;
   $__nd = $120;
  }
 }
 if ((label|0) == 4) {
  $73 = ___cxa_find_matching_catch()|0;
  $74 = tempRet0;
  $11 = $73;
  $12 = $74;
  __THREW__ = 0;
  invoke_vi(473,($10|0));
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $79 = ___cxa_find_matching_catch(0|0)|0;
   $80 = tempRet0;
   ___clang_call_terminate($79);
   // unreachable;
  } else {
   $77 = $11;
   $78 = $12;
   ___resumeException($77|0);
   // unreachable;
  }
 }
 else if ((label|0) == 10) {
  $88 = $__nd;
  $89 = $43;
  HEAP32[$89>>2] = $88;
  $90 = $43;
  $91 = HEAP32[$90>>2]|0;
  $41 = $91;
  $138 = $41;
  STACKTOP = sp;return ($138|0);
 }
 else if ((label|0) == 13) {
  $104 = ___cxa_find_matching_catch()|0;
  $105 = tempRet0;
  $24 = $104;
  $25 = $105;
  __THREW__ = 0;
  invoke_vi(473,($23|0));
  $106 = __THREW__; __THREW__ = 0;
  $107 = $106&1;
  if ($107) {
   $110 = ___cxa_find_matching_catch(0|0)|0;
   $111 = tempRet0;
   ___clang_call_terminate($110);
   // unreachable;
  } else {
   $108 = $24;
   $109 = $25;
   ___resumeException($108|0);
   // unreachable;
  }
 }
 else if ((label|0) == 19) {
  $121 = $__nd;
  $122 = $43;
  HEAP32[$122>>2] = $121;
  $123 = $43;
  $124 = HEAP32[$123>>2]|0;
  $125 = (($124) + 4|0);
  $41 = $125;
  $138 = $41;
  STACKTOP = sp;return ($138|0);
 }
 else if ((label|0) == 21) {
  $126 = $__nd;
  $127 = $43;
  HEAP32[$127>>2] = $126;
  $128 = $43;
  $41 = $128;
  $138 = $41;
  STACKTOP = sp;return ($138|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__construct_nodeERKS2_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i4$i = 0, $__tmp$i$i = 0, $__tmp$i$i18 = 0, $__tmp$i$i2 = 0, $__tmp$i$i24 = 0, $__tmp$i$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 88|0;
 $9 = sp + 1240|0;
 $33 = sp + 104|0;
 $36 = sp + 1241|0;
 $68 = sp + 572|0;
 $69 = sp + 56|0;
 $72 = sp + 348|0;
 $73 = sp + 352|0;
 $74 = sp + 72|0;
 $77 = sp + 376|0;
 $78 = sp + 96|0;
 $88 = sp + 112|0;
 $91 = sp + 1242|0;
 $123 = sp + 1040|0;
 $124 = sp + 8|0;
 $127 = sp + 1196|0;
 $128 = sp + 1208|0;
 $129 = sp + 64|0;
 $132 = sp + 608|0;
 $133 = sp + 40|0;
 $151 = sp + 696|0;
 $152 = sp + 24|0;
 $155 = sp + 1164|0;
 $156 = sp + 712|0;
 $157 = sp + 80|0;
 $160 = sp + 736|0;
 $161 = sp;
 $165 = sp + 760|0;
 $166 = sp + 764|0;
 $167 = sp + 776|0;
 $180 = sp + 16|0;
 $183 = sp + 1243|0;
 $210 = sp + 956|0;
 $211 = sp + 48|0;
 $214 = sp + 968|0;
 $215 = sp + 976|0;
 $216 = sp + 120|0;
 $219 = sp + 1000|0;
 $220 = sp + 1008|0;
 $221 = sp + 32|0;
 $228 = sp + 128|0;
 $231 = sp + 1244|0;
 $__h = sp + 1184|0;
 $262 = sp + 616|0;
 $265 = sp + 436|0;
 $266 = sp + 320|0;
 $260 = $this;
 $261 = $__v;
 $268 = $260;
 $259 = $268;
 $269 = $259;
 $270 = (($269) + 4|0);
 $258 = $270;
 $271 = $258;
 $257 = $271;
 $272 = $257;
 $__na = $272;
 $273 = $__na;
 $255 = $273;
 $256 = 1;
 $274 = $255;
 $275 = $256;
 $252 = $274;
 $253 = $275;
 $254 = 0;
 $276 = $253;
 $277 = ($276*44)|0;
 $251 = $277;
 $278 = $251;
 $279 = (__Znwj($278)|0);
 $280 = $__na;
 $249 = $262;
 $250 = $280;
 $281 = $249;
 $282 = $250;
 HEAP32[$281>>2] = $282;
 $283 = (($281) + 4|0);
 HEAP8[$283>>0] = 0;
 ;HEAP8[$221+0>>0]=HEAP8[$262+0>>0]|0;HEAP8[$221+1>>0]=HEAP8[$262+1>>0]|0;HEAP8[$221+2>>0]=HEAP8[$262+2>>0]|0;HEAP8[$221+3>>0]=HEAP8[$262+3>>0]|0;HEAP8[$221+4>>0]=HEAP8[$262+4>>0]|0;HEAP8[$221+5>>0]=HEAP8[$262+5>>0]|0;HEAP8[$221+6>>0]=HEAP8[$262+6>>0]|0;HEAP8[$221+7>>0]=HEAP8[$262+7>>0]|0;
 $218 = $__h;
 HEAP32[$219>>2] = $279;
 $284 = $218;
 $217 = $219;
 $285 = $217;
 $286 = HEAP32[$285>>2]|0;
 $205 = $221;
 $287 = $205;
 ;HEAP32[$220+0>>2]=HEAP32[$287+0>>2]|0;HEAP32[$220+4>>2]=HEAP32[$287+4>>2]|0;
 ;HEAP8[$216+0>>0]=HEAP8[$220+0>>0]|0;HEAP8[$216+1>>0]=HEAP8[$220+1>>0]|0;HEAP8[$216+2>>0]=HEAP8[$220+2>>0]|0;HEAP8[$216+3>>0]=HEAP8[$220+3>>0]|0;HEAP8[$216+4>>0]=HEAP8[$220+4>>0]|0;HEAP8[$216+5>>0]=HEAP8[$220+5>>0]|0;HEAP8[$216+6>>0]=HEAP8[$220+6>>0]|0;HEAP8[$216+7>>0]=HEAP8[$220+7>>0]|0;
 $213 = $284;
 HEAP32[$214>>2] = $286;
 $288 = $213;
 $212 = $214;
 $289 = $212;
 $290 = HEAP32[$289>>2]|0;
 $206 = $216;
 $291 = $206;
 ;HEAP32[$215+0>>2]=HEAP32[$291+0>>2]|0;HEAP32[$215+4>>2]=HEAP32[$291+4>>2]|0;
 ;HEAP8[$211+0>>0]=HEAP8[$215+0>>0]|0;HEAP8[$211+1>>0]=HEAP8[$215+1>>0]|0;HEAP8[$211+2>>0]=HEAP8[$215+2>>0]|0;HEAP8[$211+3>>0]=HEAP8[$215+3>>0]|0;HEAP8[$211+4>>0]=HEAP8[$215+4>>0]|0;HEAP8[$211+5>>0]=HEAP8[$215+5>>0]|0;HEAP8[$211+6>>0]=HEAP8[$215+6>>0]|0;HEAP8[$211+7>>0]=HEAP8[$215+7>>0]|0;
 $209 = $288;
 HEAP32[$210>>2] = $290;
 $292 = $209;
 $208 = $210;
 $293 = $208;
 $294 = HEAP32[$293>>2]|0;
 HEAP32[$292>>2] = $294;
 $295 = (($292) + 4|0);
 $207 = $211;
 $296 = $207;
 ;HEAP32[$295+0>>2]=HEAP32[$296+0>>2]|0;HEAP32[$295+4>>2]=HEAP32[$296+4>>2]|0;
 $297 = $__na;
 $204 = $__h;
 $298 = $204;
 $203 = $298;
 $299 = $203;
 $202 = $299;
 $300 = $202;
 $301 = HEAP32[$300>>2]|0;
 $302 = (($301) + 16|0);
 $201 = $302;
 $303 = $201;
 $304 = $261;
 $171 = $297;
 $172 = $303;
 $173 = $304;
 $305 = $172;
 $306 = ($305|0)==(0|0);
 do {
  if (!($306)) {
   $307 = $173;
   __THREW__ = 0;
   invoke_vii(494,($305|0),($307|0));
   $308 = __THREW__; __THREW__ = 0;
   $309 = $308&1;
   if (!($309)) {
    break;
   }
   $519 = ___cxa_find_matching_catch()|0;
   $520 = tempRet0;
   $263 = $519;
   $264 = $520;
   $248 = $__h;
   $521 = $248;
   $246 = $521;
   $247 = 0;
   $522 = $246;
   $245 = $522;
   $523 = $245;
   $244 = $523;
   $524 = $244;
   $525 = HEAP32[$524>>2]|0;
   $__tmp$i$i = $525;
   $526 = $247;
   $225 = $522;
   $527 = $225;
   $224 = $527;
   $528 = $224;
   HEAP32[$528>>2] = $526;
   $529 = $__tmp$i$i;
   $530 = ($529|0)!=(0|0);
   if ($530) {
    $223 = $522;
    $531 = $223;
    $222 = $531;
    $532 = $222;
    $533 = (($532) + 4|0);
    $534 = $__tmp$i$i;
    $240 = $533;
    $241 = $534;
    $535 = $240;
    $536 = (($535) + 4|0);
    $537 = HEAP8[$536>>0]|0;
    $538 = $537&1;
    do {
     if ($538) {
      $539 = HEAP32[$535>>2]|0;
      $540 = $241;
      $541 = (($540) + 16|0);
      $239 = $541;
      $542 = $239;
      $229 = $539;
      $230 = $542;
      $543 = $229;
      $544 = $230;
      ;HEAP8[$228+0>>0]=HEAP8[$231+0>>0]|0;
      $226 = $543;
      $227 = $544;
      $545 = $227;
      __THREW__ = 0;
      invoke_vi(473,($545|0));
      $546 = __THREW__; __THREW__ = 0;
      $547 = $546&1;
      if ($547) {
       $548 = ___cxa_find_matching_catch(0|0)|0;
       $549 = tempRet0;
       $242 = $548;
       $243 = $549;
       $550 = $242;
       ___cxa_call_unexpected(($550|0));
       // unreachable;
      } else {
       break;
      }
     }
    } while(0);
    $551 = $241;
    $552 = ($551|0)!=(0|0);
    if ($552) {
     $553 = HEAP32[$535>>2]|0;
     $554 = $241;
     $236 = $553;
     $237 = $554;
     $238 = 1;
     $555 = $236;
     $556 = $237;
     $557 = $238;
     $233 = $555;
     $234 = $556;
     $235 = $557;
     $558 = $234;
     $232 = $558;
     $559 = $232;
     __ZdlPv($559);
    }
   }
   $560 = $263;
   $561 = $264;
   ___resumeException($560|0);
   // unreachable;
  }
 } while(0);
 $170 = $__h;
 $310 = $170;
 $169 = $310;
 $311 = $169;
 $168 = $311;
 $312 = $168;
 $313 = (($312) + 4|0);
 $314 = (($313) + 4|0);
 HEAP8[$314>>0] = 1;
 $164 = $__h;
 $315 = $164;
 $162 = $167;
 $163 = $315;
 $316 = $162;
 $317 = $163;
 HEAP32[$316>>2] = $317;
 ;HEAP8[$161+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$161+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$161+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$161+3>>0]=HEAP8[$167+3>>0]|0;
 $159 = $166;
 $318 = $159;
 $158 = $161;
 $319 = $158;
 $320 = HEAP32[$319>>2]|0;
 $141 = $320;
 $321 = $141;
 $140 = $321;
 $322 = $140;
 $139 = $322;
 $323 = $139;
 $324 = HEAP32[$323>>2]|0;
 $__t$i$i$i = $324;
 $138 = $321;
 $325 = $138;
 $137 = $325;
 $326 = $137;
 HEAP32[$326>>2] = 0;
 $327 = $__t$i$i$i;
 $142 = $161;
 $328 = $142;
 $329 = HEAP32[$328>>2]|0;
 $145 = $329;
 $330 = $145;
 $144 = $330;
 $331 = $144;
 $143 = $331;
 $332 = $143;
 $333 = (($332) + 4|0);
 $146 = $333;
 $334 = $146;
 ;HEAP32[$160+0>>2]=HEAP32[$334+0>>2]|0;HEAP32[$160+4>>2]=HEAP32[$334+4>>2]|0;
 ;HEAP8[$157+0>>0]=HEAP8[$160+0>>0]|0;HEAP8[$157+1>>0]=HEAP8[$160+1>>0]|0;HEAP8[$157+2>>0]=HEAP8[$160+2>>0]|0;HEAP8[$157+3>>0]=HEAP8[$160+3>>0]|0;HEAP8[$157+4>>0]=HEAP8[$160+4>>0]|0;HEAP8[$157+5>>0]=HEAP8[$160+5>>0]|0;HEAP8[$157+6>>0]=HEAP8[$160+6>>0]|0;HEAP8[$157+7>>0]=HEAP8[$160+7>>0]|0;
 $154 = $318;
 HEAP32[$155>>2] = $327;
 $335 = $154;
 $153 = $155;
 $336 = $153;
 $337 = HEAP32[$336>>2]|0;
 $147 = $157;
 $338 = $147;
 ;HEAP32[$156+0>>2]=HEAP32[$338+0>>2]|0;HEAP32[$156+4>>2]=HEAP32[$338+4>>2]|0;
 ;HEAP8[$152+0>>0]=HEAP8[$156+0>>0]|0;HEAP8[$152+1>>0]=HEAP8[$156+1>>0]|0;HEAP8[$152+2>>0]=HEAP8[$156+2>>0]|0;HEAP8[$152+3>>0]=HEAP8[$156+3>>0]|0;HEAP8[$152+4>>0]=HEAP8[$156+4>>0]|0;HEAP8[$152+5>>0]=HEAP8[$156+5>>0]|0;HEAP8[$152+6>>0]=HEAP8[$156+6>>0]|0;HEAP8[$152+7>>0]=HEAP8[$156+7>>0]|0;
 $150 = $335;
 HEAP32[$151>>2] = $337;
 $339 = $150;
 $149 = $151;
 $340 = $149;
 $341 = HEAP32[$340>>2]|0;
 HEAP32[$339>>2] = $341;
 $342 = (($339) + 4|0);
 $148 = $152;
 $343 = $148;
 ;HEAP32[$342+0>>2]=HEAP32[$343+0>>2]|0;HEAP32[$342+4>>2]=HEAP32[$343+4>>2]|0;
 $136 = $166;
 $344 = $136;
 $134 = $165;
 $135 = $344;
 $345 = $134;
 $346 = $135;
 HEAP32[$345>>2] = $346;
 ;HEAP8[$133+0>>0]=HEAP8[$165+0>>0]|0;HEAP8[$133+1>>0]=HEAP8[$165+1>>0]|0;HEAP8[$133+2>>0]=HEAP8[$165+2>>0]|0;HEAP8[$133+3>>0]=HEAP8[$165+3>>0]|0;
 $131 = $266;
 $347 = $131;
 $130 = $133;
 $348 = $130;
 $349 = HEAP32[$348>>2]|0;
 $113 = $349;
 $350 = $113;
 $112 = $350;
 $351 = $112;
 $111 = $351;
 $352 = $111;
 $353 = HEAP32[$352>>2]|0;
 $__t$i$i4$i = $353;
 $110 = $350;
 $354 = $110;
 $109 = $354;
 $355 = $109;
 HEAP32[$355>>2] = 0;
 $356 = $__t$i$i4$i;
 $114 = $133;
 $357 = $114;
 $358 = HEAP32[$357>>2]|0;
 $117 = $358;
 $359 = $117;
 $116 = $359;
 $360 = $116;
 $115 = $360;
 $361 = $115;
 $362 = (($361) + 4|0);
 $118 = $362;
 $363 = $118;
 ;HEAP32[$132+0>>2]=HEAP32[$363+0>>2]|0;HEAP32[$132+4>>2]=HEAP32[$363+4>>2]|0;
 ;HEAP8[$129+0>>0]=HEAP8[$132+0>>0]|0;HEAP8[$129+1>>0]=HEAP8[$132+1>>0]|0;HEAP8[$129+2>>0]=HEAP8[$132+2>>0]|0;HEAP8[$129+3>>0]=HEAP8[$132+3>>0]|0;HEAP8[$129+4>>0]=HEAP8[$132+4>>0]|0;HEAP8[$129+5>>0]=HEAP8[$132+5>>0]|0;HEAP8[$129+6>>0]=HEAP8[$132+6>>0]|0;HEAP8[$129+7>>0]=HEAP8[$132+7>>0]|0;
 $126 = $347;
 HEAP32[$127>>2] = $356;
 $364 = $126;
 $125 = $127;
 $365 = $125;
 $366 = HEAP32[$365>>2]|0;
 $119 = $129;
 $367 = $119;
 ;HEAP32[$128+0>>2]=HEAP32[$367+0>>2]|0;HEAP32[$128+4>>2]=HEAP32[$367+4>>2]|0;
 ;HEAP8[$124+0>>0]=HEAP8[$128+0>>0]|0;HEAP8[$124+1>>0]=HEAP8[$128+1>>0]|0;HEAP8[$124+2>>0]=HEAP8[$128+2>>0]|0;HEAP8[$124+3>>0]=HEAP8[$128+3>>0]|0;HEAP8[$124+4>>0]=HEAP8[$128+4>>0]|0;HEAP8[$124+5>>0]=HEAP8[$128+5>>0]|0;HEAP8[$124+6>>0]=HEAP8[$128+6>>0]|0;HEAP8[$124+7>>0]=HEAP8[$128+7>>0]|0;
 $122 = $364;
 HEAP32[$123>>2] = $366;
 $368 = $122;
 $121 = $123;
 $369 = $121;
 $370 = HEAP32[$369>>2]|0;
 HEAP32[$368>>2] = $370;
 $371 = (($368) + 4|0);
 $120 = $124;
 $372 = $120;
 ;HEAP32[$371+0>>2]=HEAP32[$372+0>>2]|0;HEAP32[$371+4>>2]=HEAP32[$372+4>>2]|0;
 $108 = $166;
 $373 = $108;
 $106 = $373;
 $107 = 0;
 $374 = $106;
 $105 = $374;
 $375 = $105;
 $104 = $375;
 $376 = $104;
 $377 = HEAP32[$376>>2]|0;
 $__tmp$i$i9$i = $377;
 $378 = $107;
 $85 = $374;
 $379 = $85;
 $84 = $379;
 $380 = $84;
 HEAP32[$380>>2] = $378;
 $381 = $__tmp$i$i9$i;
 $382 = ($381|0)!=(0|0);
 if ($382) {
  $83 = $374;
  $383 = $83;
  $82 = $383;
  $384 = $82;
  $385 = (($384) + 4|0);
  $386 = $__tmp$i$i9$i;
  $100 = $385;
  $101 = $386;
  $387 = $100;
  $388 = (($387) + 4|0);
  $389 = HEAP8[$388>>0]|0;
  $390 = $389&1;
  do {
   if ($390) {
    $391 = HEAP32[$387>>2]|0;
    $392 = $101;
    $393 = (($392) + 16|0);
    $99 = $393;
    $394 = $99;
    $89 = $391;
    $90 = $394;
    $395 = $89;
    $396 = $90;
    ;HEAP8[$88+0>>0]=HEAP8[$91+0>>0]|0;
    $86 = $395;
    $87 = $396;
    $397 = $87;
    __THREW__ = 0;
    invoke_vi(473,($397|0));
    $398 = __THREW__; __THREW__ = 0;
    $399 = $398&1;
    if ($399) {
     $400 = ___cxa_find_matching_catch()|0;
     $401 = tempRet0;
     $102 = $400;
     $103 = $401;
     $402 = $102;
     ___cxa_call_unexpected(($402|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $403 = $101;
  $404 = ($403|0)!=(0|0);
  if ($404) {
   $405 = HEAP32[$387>>2]|0;
   $406 = $101;
   $96 = $405;
   $97 = $406;
   $98 = 1;
   $407 = $96;
   $408 = $97;
   $409 = $98;
   $93 = $407;
   $94 = $408;
   $95 = $409;
   $410 = $94;
   $92 = $410;
   $411 = $92;
   __ZdlPv($411);
  }
 }
 $81 = $266;
 $412 = $81;
 $79 = $265;
 $80 = $412;
 $413 = $79;
 $414 = $80;
 HEAP32[$413>>2] = $414;
 ;HEAP8[$78+0>>0]=HEAP8[$265+0>>0]|0;HEAP8[$78+1>>0]=HEAP8[$265+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$265+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$265+3>>0]|0;
 $76 = $agg$result;
 $415 = $76;
 $75 = $78;
 $416 = $75;
 $417 = HEAP32[$416>>2]|0;
 $58 = $417;
 $418 = $58;
 $57 = $418;
 $419 = $57;
 $56 = $419;
 $420 = $56;
 $421 = HEAP32[$420>>2]|0;
 $__t$i$i = $421;
 $55 = $418;
 $422 = $55;
 $54 = $422;
 $423 = $54;
 HEAP32[$423>>2] = 0;
 $424 = $__t$i$i;
 $59 = $78;
 $425 = $59;
 $426 = HEAP32[$425>>2]|0;
 $62 = $426;
 $427 = $62;
 $61 = $427;
 $428 = $61;
 $60 = $428;
 $429 = $60;
 $430 = (($429) + 4|0);
 $63 = $430;
 $431 = $63;
 ;HEAP32[$77+0>>2]=HEAP32[$431+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$431+4>>2]|0;
 ;HEAP8[$74+0>>0]=HEAP8[$77+0>>0]|0;HEAP8[$74+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$74+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$74+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$74+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$74+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $415;
 HEAP32[$72>>2] = $424;
 $432 = $71;
 $70 = $72;
 $433 = $70;
 $434 = HEAP32[$433>>2]|0;
 $64 = $74;
 $435 = $64;
 ;HEAP32[$73+0>>2]=HEAP32[$435+0>>2]|0;HEAP32[$73+4>>2]=HEAP32[$435+4>>2]|0;
 ;HEAP8[$69+0>>0]=HEAP8[$73+0>>0]|0;HEAP8[$69+1>>0]=HEAP8[$73+1>>0]|0;HEAP8[$69+2>>0]=HEAP8[$73+2>>0]|0;HEAP8[$69+3>>0]=HEAP8[$73+3>>0]|0;HEAP8[$69+4>>0]=HEAP8[$73+4>>0]|0;HEAP8[$69+5>>0]=HEAP8[$73+5>>0]|0;HEAP8[$69+6>>0]=HEAP8[$73+6>>0]|0;HEAP8[$69+7>>0]=HEAP8[$73+7>>0]|0;
 $67 = $432;
 HEAP32[$68>>2] = $434;
 $436 = $67;
 $66 = $68;
 $437 = $66;
 $438 = HEAP32[$437>>2]|0;
 HEAP32[$436>>2] = $438;
 $439 = (($436) + 4|0);
 $65 = $69;
 $440 = $65;
 ;HEAP32[$439+0>>2]=HEAP32[$440+0>>2]|0;HEAP32[$439+4>>2]=HEAP32[$440+4>>2]|0;
 $53 = $266;
 $441 = $53;
 $51 = $441;
 $52 = 0;
 $442 = $51;
 $50 = $442;
 $443 = $50;
 $49 = $443;
 $444 = $49;
 $445 = HEAP32[$444>>2]|0;
 $__tmp$i$i18 = $445;
 $446 = $52;
 $30 = $442;
 $447 = $30;
 $29 = $447;
 $448 = $29;
 HEAP32[$448>>2] = $446;
 $449 = $__tmp$i$i18;
 $450 = ($449|0)!=(0|0);
 if ($450) {
  $28 = $442;
  $451 = $28;
  $27 = $451;
  $452 = $27;
  $453 = (($452) + 4|0);
  $454 = $__tmp$i$i18;
  $45 = $453;
  $46 = $454;
  $455 = $45;
  $456 = (($455) + 4|0);
  $457 = HEAP8[$456>>0]|0;
  $458 = $457&1;
  do {
   if ($458) {
    $459 = HEAP32[$455>>2]|0;
    $460 = $46;
    $461 = (($460) + 16|0);
    $44 = $461;
    $462 = $44;
    $34 = $459;
    $35 = $462;
    $463 = $34;
    $464 = $35;
    ;HEAP8[$33+0>>0]=HEAP8[$36+0>>0]|0;
    $31 = $463;
    $32 = $464;
    $465 = $32;
    __THREW__ = 0;
    invoke_vi(473,($465|0));
    $466 = __THREW__; __THREW__ = 0;
    $467 = $466&1;
    if ($467) {
     $468 = ___cxa_find_matching_catch()|0;
     $469 = tempRet0;
     $47 = $468;
     $48 = $469;
     $470 = $47;
     ___cxa_call_unexpected(($470|0));
     // unreachable;
    } else {
     break;
    }
   }
  } while(0);
  $471 = $46;
  $472 = ($471|0)!=(0|0);
  if ($472) {
   $473 = HEAP32[$455>>2]|0;
   $474 = $46;
   $41 = $473;
   $42 = $474;
   $43 = 1;
   $475 = $41;
   $476 = $42;
   $477 = $43;
   $38 = $475;
   $39 = $476;
   $40 = $477;
   $478 = $39;
   $37 = $478;
   $479 = $37;
   __ZdlPv($479);
  }
 }
 $267 = 1;
 $26 = $__h;
 $480 = $26;
 $24 = $480;
 $25 = 0;
 $481 = $24;
 $23 = $481;
 $482 = $23;
 $22 = $482;
 $483 = $22;
 $484 = HEAP32[$483>>2]|0;
 $__tmp$i$i24 = $484;
 $485 = $25;
 $3 = $481;
 $486 = $3;
 $2 = $486;
 $487 = $2;
 HEAP32[$487>>2] = $485;
 $488 = $__tmp$i$i24;
 $489 = ($488|0)!=(0|0);
 if (!($489)) {
  STACKTOP = sp;return;
 }
 $1 = $481;
 $490 = $1;
 $0 = $490;
 $491 = $0;
 $492 = (($491) + 4|0);
 $493 = $__tmp$i$i24;
 $18 = $492;
 $19 = $493;
 $494 = $18;
 $495 = (($494) + 4|0);
 $496 = HEAP8[$495>>0]|0;
 $497 = $496&1;
 do {
  if ($497) {
   $498 = HEAP32[$494>>2]|0;
   $499 = $19;
   $500 = (($499) + 16|0);
   $17 = $500;
   $501 = $17;
   $7 = $498;
   $8 = $501;
   $502 = $7;
   $503 = $8;
   ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
   $4 = $502;
   $5 = $503;
   $504 = $5;
   __THREW__ = 0;
   invoke_vi(473,($504|0));
   $505 = __THREW__; __THREW__ = 0;
   $506 = $505&1;
   if ($506) {
    $507 = ___cxa_find_matching_catch()|0;
    $508 = tempRet0;
    $20 = $507;
    $21 = $508;
    $509 = $20;
    ___cxa_call_unexpected(($509|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 $510 = $19;
 $511 = ($510|0)!=(0|0);
 if ($511) {
  $512 = HEAP32[$494>>2]|0;
  $513 = $19;
  $14 = $512;
  $15 = $513;
  $16 = 1;
  $514 = $14;
  $515 = $15;
  $516 = $16;
  $11 = $514;
  $12 = $515;
  $13 = $516;
  $517 = $12;
  $10 = $517;
  $518 = $10;
  __ZdlPv($518);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $7 = sp + 72|0;
 $22 = sp + 4|0;
 $27 = sp + 28|0;
 $28 = sp + 92|0;
 $29 = sp + 36|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($__root,$__x) {
 $__root = $__root|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__y = 0, $__y1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 20|0;
 $9 = sp + 72|0;
 $15 = sp + 52|0;
 $16 = sp + 60|0;
 $11 = $__root;
 $12 = $__x;
 $17 = $12;
 $18 = $11;
 $19 = ($17|0)==($18|0);
 $20 = $12;
 $21 = (($20) + 12|0);
 $22 = $19&1;
 HEAP8[$21>>0] = $22;
 while(1) {
  $23 = $12;
  $24 = $11;
  $25 = ($23|0)!=($24|0);
  if ($25) {
   $26 = $12;
   $27 = (($26) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = (($28) + 12|0);
   $30 = HEAP8[$29>>0]|0;
   $31 = $30&1;
   $32 = $31 ^ 1;
   $147 = $32;
  } else {
   $147 = 0;
  }
  if (!($147)) {
   label = 25;
   break;
  }
  $33 = $12;
  $34 = (($33) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $10 = $35;
  $36 = $10;
  $37 = $10;
  $38 = (($37) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = HEAP32[$39>>2]|0;
  $41 = ($36|0)==($40|0);
  if ($41) {
   $42 = $12;
   $43 = (($42) + 8|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = (($44) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (($46) + 4|0);
   $48 = HEAP32[$47>>2]|0;
   $__y = $48;
   $49 = $__y;
   $7 = $9;
   $8 = -1;
   $50 = $7;
   HEAP32[$50>>2] = 0;
   $51 = HEAP32[$9>>2]|0;
   HEAP32[$15>>2] = $51;
   $6 = $15;
   $52 = ($49|0)!=(0|0);
   if (!($52)) {
    label = 11;
    break;
   }
   $53 = $__y;
   $54 = (($53) + 12|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&1;
   if ($56) {
    label = 11;
    break;
   }
   $57 = $12;
   $58 = (($57) + 8|0);
   $59 = HEAP32[$58>>2]|0;
   $12 = $59;
   $60 = $12;
   $61 = (($60) + 12|0);
   HEAP8[$61>>0] = 1;
   $62 = $12;
   $63 = (($62) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $12 = $64;
   $65 = $12;
   $66 = $11;
   $67 = ($65|0)==($66|0);
   $68 = $12;
   $69 = (($68) + 12|0);
   $70 = $67&1;
   HEAP8[$69>>0] = $70;
   $71 = $__y;
   $72 = (($71) + 12|0);
   HEAP8[$72>>0] = 1;
  } else {
   $95 = $12;
   $96 = (($95) + 8|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (($97) + 8|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = HEAP32[$99>>2]|0;
   $__y1 = $100;
   $101 = $__y1;
   $1 = $3;
   $2 = -1;
   $102 = $1;
   HEAP32[$102>>2] = 0;
   $103 = HEAP32[$3>>2]|0;
   HEAP32[$16>>2] = $103;
   $4 = $16;
   $104 = ($101|0)!=(0|0);
   if (!($104)) {
    label = 20;
    break;
   }
   $105 = $__y1;
   $106 = (($105) + 12|0);
   $107 = HEAP8[$106>>0]|0;
   $108 = $107&1;
   if ($108) {
    label = 20;
    break;
   }
   $109 = $12;
   $110 = (($109) + 8|0);
   $111 = HEAP32[$110>>2]|0;
   $12 = $111;
   $112 = $12;
   $113 = (($112) + 12|0);
   HEAP8[$113>>0] = 1;
   $114 = $12;
   $115 = (($114) + 8|0);
   $116 = HEAP32[$115>>2]|0;
   $12 = $116;
   $117 = $12;
   $118 = $11;
   $119 = ($117|0)==($118|0);
   $120 = $12;
   $121 = (($120) + 12|0);
   $122 = $119&1;
   HEAP8[$121>>0] = $122;
   $123 = $__y1;
   $124 = (($123) + 12|0);
   HEAP8[$124>>0] = 1;
  }
 }
 if ((label|0) == 11) {
  $73 = $12;
  $0 = $73;
  $74 = $0;
  $75 = $0;
  $76 = (($75) + 8|0);
  $77 = HEAP32[$76>>2]|0;
  $78 = HEAP32[$77>>2]|0;
  $79 = ($74|0)==($78|0);
  if (!($79)) {
   $80 = $12;
   $81 = (($80) + 8|0);
   $82 = HEAP32[$81>>2]|0;
   $12 = $82;
   $83 = $12;
   __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($83);
  }
  $84 = $12;
  $85 = (($84) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $12 = $86;
  $87 = $12;
  $88 = (($87) + 12|0);
  HEAP8[$88>>0] = 1;
  $89 = $12;
  $90 = (($89) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  $12 = $91;
  $92 = $12;
  $93 = (($92) + 12|0);
  HEAP8[$93>>0] = 0;
  $94 = $12;
  __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($94);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 20) {
  $125 = $12;
  $5 = $125;
  $126 = $5;
  $127 = $5;
  $128 = (($127) + 8|0);
  $129 = HEAP32[$128>>2]|0;
  $130 = HEAP32[$129>>2]|0;
  $131 = ($126|0)==($130|0);
  if ($131) {
   $132 = $12;
   $133 = (($132) + 8|0);
   $134 = HEAP32[$133>>2]|0;
   $12 = $134;
   $135 = $12;
   __ZNSt3__119__tree_right_rotateIPNS_16__tree_node_baseIPvEEEEvT_($135);
  }
  $136 = $12;
  $137 = (($136) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $12 = $138;
  $139 = $12;
  $140 = (($139) + 12|0);
  HEAP8[$140>>0] = 1;
  $141 = $12;
  $142 = (($141) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  $12 = $143;
  $144 = $12;
  $145 = (($144) + 12|0);
  HEAP8[$145>>0] = 0;
  $146 = $12;
  __ZNSt3__118__tree_left_rotateIPNS_16__tree_node_baseIPvEEEEvT_($146);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 25) {
  STACKTOP = sp;return;
 }
}
function __ZNK3vcg18PointerToAttributeltES0_($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__lhs_sz$i$i = 0;
 var $__result$i$i = 0, $__rhs_sz$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 368|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $44 = sp;
 $47 = sp + 356|0;
 $__lhs_sz$i$i = sp + 256|0;
 $__rhs_sz$i$i = sp + 260|0;
 $86 = $this;
 $87 = $86;
 $88 = (($87) + 4|0);
 $85 = $88;
 $89 = $85;
 $84 = $89;
 $90 = $84;
 $83 = $90;
 $91 = $83;
 $82 = $91;
 $92 = $82;
 $81 = $92;
 $93 = $81;
 $94 = HEAP8[$93>>0]|0;
 $95 = $94&255;
 $96 = $95 & 1;
 $97 = ($96|0)!=(0);
 if ($97) {
  $77 = $90;
  $98 = $77;
  $76 = $98;
  $99 = $76;
  $75 = $99;
  $100 = $75;
  $101 = (($100) + 4|0);
  $102 = HEAP32[$101>>2]|0;
  $110 = $102;
 } else {
  $80 = $90;
  $103 = $80;
  $79 = $103;
  $104 = $79;
  $78 = $104;
  $105 = $78;
  $106 = HEAP8[$105>>0]|0;
  $107 = $106&255;
  $108 = $107 >> 1;
  $110 = $108;
 }
 $109 = ($110|0)==(0);
 if ($109) {
  $111 = (($b) + 4|0);
  $10 = $111;
  $112 = $10;
  $9 = $112;
  $113 = $9;
  $8 = $113;
  $114 = $8;
  $7 = $114;
  $115 = $7;
  $6 = $115;
  $116 = $6;
  $117 = HEAP8[$116>>0]|0;
  $118 = $117&255;
  $119 = $118 & 1;
  $120 = ($119|0)!=(0);
  if ($120) {
   $2 = $113;
   $121 = $2;
   $1 = $121;
   $122 = $1;
   $0 = $122;
   $123 = $0;
   $124 = (($123) + 4|0);
   $125 = HEAP32[$124>>2]|0;
   $133 = $125;
  } else {
   $5 = $113;
   $126 = $5;
   $4 = $126;
   $127 = $4;
   $3 = $127;
   $128 = $3;
   $129 = HEAP8[$128>>0]|0;
   $130 = $129&255;
   $131 = $130 >> 1;
   $133 = $131;
  }
  $132 = ($133|0)==(0);
  if ($132) {
   $134 = HEAP32[$87>>2]|0;
   $135 = HEAP32[$b>>2]|0;
   $136 = ($134>>>0)<($135>>>0);
   $258 = $136;
   STACKTOP = sp;return ($258|0);
  }
 }
 $137 = (($87) + 4|0);
 $138 = (($b) + 4|0);
 $73 = $137;
 $74 = $138;
 $139 = $73;
 $140 = $74;
 $69 = $139;
 $70 = $140;
 $141 = $69;
 $67 = $141;
 $142 = $67;
 $66 = $142;
 $143 = $66;
 $65 = $143;
 $144 = $65;
 $64 = $144;
 $145 = $64;
 $146 = HEAP8[$145>>0]|0;
 $147 = $146&255;
 $148 = $147 & 1;
 $149 = ($148|0)!=(0);
 if ($149) {
  $60 = $142;
  $150 = $60;
  $59 = $150;
  $151 = $59;
  $58 = $151;
  $152 = $58;
  $153 = (($152) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  $161 = $154;
 } else {
  $63 = $142;
  $155 = $63;
  $62 = $155;
  $156 = $62;
  $61 = $156;
  $157 = $61;
  $158 = HEAP8[$157>>0]|0;
  $159 = $158&255;
  $160 = $159 >> 1;
  $161 = $160;
 }
 HEAP32[$__lhs_sz$i$i>>2] = $161;
 $162 = $70;
 $57 = $162;
 $163 = $57;
 $56 = $163;
 $164 = $56;
 $55 = $164;
 $165 = $55;
 $54 = $165;
 $166 = $54;
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = $168 & 1;
 $170 = ($169|0)!=(0);
 if ($170) {
  $50 = $163;
  $171 = $50;
  $49 = $171;
  $172 = $49;
  $48 = $172;
  $173 = $48;
  $174 = (($173) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $182 = $175;
 } else {
  $53 = $163;
  $176 = $53;
  $52 = $176;
  $177 = $52;
  $51 = $177;
  $178 = $51;
  $179 = HEAP8[$178>>0]|0;
  $180 = $179&255;
  $181 = $180 >> 1;
  $182 = $181;
 }
 HEAP32[$__rhs_sz$i$i>>2] = $182;
 $24 = $141;
 $183 = $24;
 $23 = $183;
 $184 = $23;
 $22 = $184;
 $185 = $22;
 $21 = $185;
 $186 = $21;
 $20 = $186;
 $187 = $20;
 $188 = HEAP8[$187>>0]|0;
 $189 = $188&255;
 $190 = $189 & 1;
 $191 = ($190|0)!=(0);
 if ($191) {
  $14 = $184;
  $192 = $14;
  $13 = $192;
  $193 = $13;
  $12 = $193;
  $194 = $12;
  $195 = (($194) + 8|0);
  $196 = HEAP32[$195>>2]|0;
  $203 = $196;
 } else {
  $19 = $184;
  $197 = $19;
  $18 = $197;
  $198 = $18;
  $17 = $198;
  $199 = $17;
  $200 = (($199) + 1|0);
  $16 = $200;
  $201 = $16;
  $15 = $201;
  $202 = $15;
  $203 = $202;
 }
 $11 = $203;
 $204 = $11;
 $205 = $70;
 $38 = $205;
 $206 = $38;
 $37 = $206;
 $207 = $37;
 $36 = $207;
 $208 = $36;
 $35 = $208;
 $209 = $35;
 $34 = $209;
 $210 = $34;
 $211 = HEAP8[$210>>0]|0;
 $212 = $211&255;
 $213 = $212 & 1;
 $214 = ($213|0)!=(0);
 if ($214) {
  $28 = $207;
  $215 = $28;
  $27 = $215;
  $216 = $27;
  $26 = $216;
  $217 = $26;
  $218 = (($217) + 8|0);
  $219 = HEAP32[$218>>2]|0;
  $226 = $219;
 } else {
  $33 = $207;
  $220 = $33;
  $32 = $220;
  $221 = $32;
  $31 = $221;
  $222 = $31;
  $223 = (($222) + 1|0);
  $30 = $223;
  $224 = $30;
  $29 = $224;
  $225 = $29;
  $226 = $225;
 }
 $25 = $226;
 $227 = $25;
 $45 = $__lhs_sz$i$i;
 $46 = $__rhs_sz$i$i;
 $228 = $45;
 $229 = $46;
 ;HEAP8[$44+0>>0]=HEAP8[$47+0>>0]|0;
 $42 = $228;
 $43 = $229;
 $230 = $43;
 $231 = $42;
 $39 = $44;
 $40 = $230;
 $41 = $231;
 $232 = $40;
 $233 = HEAP32[$232>>2]|0;
 $234 = $41;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($233>>>0)<($235>>>0);
 if ($236) {
  $237 = $43;
  $240 = $237;
 } else {
  $238 = $42;
  $240 = $238;
 }
 $239 = HEAP32[$240>>2]|0;
 __THREW__ = 0;
 $241 = (invoke_iiii(495,($204|0),($227|0),($239|0))|0);
 $242 = __THREW__; __THREW__ = 0;
 $243 = $242&1;
 if ($243) {
  $247 = ___cxa_find_matching_catch()|0;
  $248 = tempRet0;
  $71 = $247;
  $72 = $248;
  $249 = $71;
  ___cxa_call_unexpected(($249|0));
  // unreachable;
 }
 $__result$i$i = $241;
 $244 = $__result$i$i;
 $245 = ($244|0)!=(0);
 do {
  if ($245) {
   $246 = $__result$i$i;
   $68 = $246;
  } else {
   $250 = HEAP32[$__lhs_sz$i$i>>2]|0;
   $251 = HEAP32[$__rhs_sz$i$i>>2]|0;
   $252 = ($250>>>0)<($251>>>0);
   if ($252) {
    $68 = -1;
    break;
   }
   $253 = HEAP32[$__lhs_sz$i$i>>2]|0;
   $254 = HEAP32[$__rhs_sz$i$i>>2]|0;
   $255 = ($253>>>0)>($254>>>0);
   if ($255) {
    $68 = 1;
    break;
   } else {
    $68 = 0;
    break;
   }
  }
 } while(0);
 $256 = $68;
 $257 = ($256|0)<(0);
 $258 = $257;
 STACKTOP = sp;return ($258|0);
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZN3vcg18SimpleTempDataBaseC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (4312 + 8|0);
 HEAP32[$1>>2] = $2;
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 84|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 52|0;
 $18 = sp + 60|0;
 $21 = sp + 20|0;
 $22 = sp + 24|0;
 $23 = sp + 76|0;
 $25 = $this;
 $26 = $25;
 $24 = $26;
 $27 = $24;
 $20 = $27;
 $28 = $20;
 $19 = $28;
 $0 = $2;
 $1 = -1;
 $29 = $0;
 HEAP32[$29>>2] = 0;
 $30 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $30;
 $3 = $21;
 HEAP32[$28>>2] = 0;
 $31 = (($28) + 4|0);
 $4 = $6;
 $5 = -1;
 $32 = $4;
 HEAP32[$32>>2] = 0;
 $33 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $33;
 $7 = $22;
 HEAP32[$31>>2] = 0;
 $34 = (($28) + 8|0);
 $8 = $10;
 $9 = -1;
 $35 = $8;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $36;
 $11 = $23;
 $17 = $34;
 HEAP32[$18>>2] = 0;
 $37 = $17;
 $16 = $18;
 $38 = $16;
 $39 = HEAP32[$38>>2]|0;
 $14 = $37;
 HEAP32[$15>>2] = $39;
 $40 = $14;
 $13 = $40;
 $12 = $15;
 $41 = $12;
 $42 = HEAP32[$41>>2]|0;
 HEAP32[$40>>2] = $42;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 28|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 16)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC2EjjS9_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(496,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(497,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 }
 $48 = $11;
 $49 = $12;
 ___resumeException($48|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = (($21) + 4|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$21>>2]|0;
 $25 = $23;
 $26 = $24;
 $27 = (($25) - ($26))|0;
 $28 = (($27|0) / 16)&-1;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8__appendEj($20,$34);
  STACKTOP = sp;return;
 }
 $35 = $__cs;
 $36 = $19;
 $37 = ($35>>>0)>($36>>>0);
 do {
  if ($37) {
   $38 = HEAP32[$20>>2]|0;
   $39 = $19;
   $40 = (($38) + ($39<<4)|0);
   $13 = $20;
   $14 = $40;
   $41 = $13;
   $12 = $41;
   $42 = $12;
   $43 = (($42) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = HEAP32[$42>>2]|0;
   $46 = $44;
   $47 = $45;
   $48 = (($46) - ($47))|0;
   $49 = (($48|0) / 16)&-1;
   $__old_size$i = $49;
   $50 = $14;
   $10 = $41;
   $11 = $50;
   $51 = $10;
   while(1) {
    $52 = $11;
    $53 = (($51) + 4|0);
    $54 = HEAP32[$53>>2]|0;
    $55 = ($52|0)!=($54|0);
    if (!($55)) {
     break;
    }
    $9 = $51;
    $56 = $9;
    $57 = (($56) + 8|0);
    $8 = $57;
    $58 = $8;
    $7 = $58;
    $59 = $7;
    $60 = (($51) + 4|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = (($61) + -16|0);
    HEAP32[$60>>2] = $62;
    $0 = $62;
    $63 = $0;
    $4 = $59;
    $5 = $63;
    $64 = $4;
    $65 = $5;
    ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
    $1 = $64;
    $2 = $65;
   }
   $66 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(498,($41|0),($66|0));
   $67 = __THREW__; __THREW__ = 0;
   $68 = $67&1;
   if ($68) {
    $69 = ___cxa_find_matching_catch()|0;
    $70 = tempRet0;
    $15 = $69;
    $16 = $70;
    $71 = $15;
    ___cxa_call_unexpected(($71|0));
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 84|0;
 $18 = $this;
 $21 = $18;
 $22 = (4104 + 8|0);
 HEAP32[$21>>2] = $22;
 $23 = (($21) + 8|0);
 $15 = $23;
 $24 = $15;
 $14 = $24;
 $25 = $14;
 $26 = (($25) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = HEAP32[$25>>2]|0;
 $29 = $27;
 $30 = $28;
 $31 = (($29) - ($30))|0;
 $32 = (($31|0) / 16)&-1;
 $__old_size$i = $32;
 $12 = $24;
 $33 = $12;
 $34 = HEAP32[$33>>2]|0;
 $10 = $33;
 $11 = $34;
 $35 = $10;
 while(1) {
  $36 = $11;
  $37 = (($35) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $9 = $35;
  $40 = $9;
  $41 = (($40) + 8|0);
  $8 = $41;
  $42 = $8;
  $7 = $42;
  $43 = $7;
  $44 = (($35) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + -16|0);
  HEAP32[$44>>2] = $46;
  $0 = $46;
  $47 = $0;
  $4 = $43;
  $5 = $47;
  $48 = $4;
  $49 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $48;
  $2 = $49;
 }
 $50 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(498,($24|0),($50|0));
 $51 = __THREW__; __THREW__ = 0;
 $52 = $51&1;
 if ($52) {
  $53 = ___cxa_find_matching_catch()|0;
  $54 = tempRet0;
  $16 = $53;
  $17 = $54;
  $55 = $16;
  ___cxa_call_unexpected(($55|0));
  // unreachable;
 }
 $13 = $24;
 $56 = (($21) + 8|0);
 __THREW__ = 0;
 invoke_vi(491,($56|0));
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if (!($58)) {
  __ZN3vcg18SimpleTempDataBaseD2Ev($21);
  STACKTOP = sp;return;
 }
 $59 = ___cxa_find_matching_catch()|0;
 $60 = tempRet0;
 $19 = $59;
 $20 = $60;
 __THREW__ = 0;
 invoke_vi(11,($21|0));
 $61 = __THREW__; __THREW__ = 0;
 $62 = $61&1;
 if ($62) {
  $65 = ___cxa_find_matching_catch(0|0)|0;
  $66 = tempRet0;
  ___clang_call_terminate($65);
  // unreachable;
 }
 $63 = $19;
 $64 = $20;
 ___resumeException($63|0);
 // unreachable;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(4,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6ResizeEj($this,$sz) {
 $this = $this|0;
 $sz = $sz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $sz;
 $2 = $0;
 $3 = (($2) + 8|0);
 $4 = $1;
 __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj($3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE7ReorderERNS2_IjNS4_IjEEEE($this,$newVertIndex) {
 $this = $this|0;
 $newVertIndex = $newVertIndex|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $this;
 $10 = $newVertIndex;
 $11 = $9;
 $i = 0;
 while(1) {
  $12 = $i;
  $13 = (($11) + 8|0);
  $8 = $13;
  $14 = $8;
  $15 = (($14) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$14>>2]|0;
  $18 = $16;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $21 = (($20|0) / 16)&-1;
  $22 = ($12>>>0)<($21>>>0);
  if (!($22)) {
   break;
  }
  $23 = $10;
  $24 = $i;
  $0 = $23;
  $1 = $24;
  $25 = $0;
  $26 = $1;
  $27 = HEAP32[$25>>2]|0;
  $28 = (($27) + ($26<<2)|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($29|0)!=(-1);
  if ($30) {
   $31 = (($11) + 8|0);
   $32 = $10;
   $33 = $i;
   $2 = $32;
   $3 = $33;
   $34 = $2;
   $35 = $3;
   $36 = HEAP32[$34>>2]|0;
   $37 = (($36) + ($35<<2)|0);
   $38 = HEAP32[$37>>2]|0;
   $4 = $31;
   $5 = $38;
   $39 = $4;
   $40 = $5;
   $41 = HEAP32[$39>>2]|0;
   $42 = (($41) + ($40<<4)|0);
   $43 = (($11) + 8|0);
   $44 = $i;
   $6 = $43;
   $7 = $44;
   $45 = $6;
   $46 = $7;
   $47 = HEAP32[$45>>2]|0;
   $48 = (($47) + ($46<<4)|0);
   ;HEAP32[$42+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$42+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$42+12>>2]=HEAP32[$48+12>>2]|0;
  }
  $49 = $i;
  $50 = (($49) + 1)|0;
  $i = $50;
 }
 STACKTOP = sp;return;
}
function __ZNK3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6SizeOfEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return 16;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE9DataBeginEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp + 20|0;
 $7 = $this;
 $9 = $7;
 $10 = (($9) + 8|0);
 $6 = $10;
 $11 = $6;
 $12 = HEAP32[$11>>2]|0;
 $13 = (($11) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($12|0)==($14|0);
 if ($15) {
  $24 = 0;
  STACKTOP = sp;return ($24|0);
 } else {
  $16 = (($9) + 8|0);
  $4 = $16;
  $17 = $4;
  $18 = HEAP32[$17>>2]|0;
  $2 = $17;
  $3 = $18;
  $19 = $3;
  $0 = $8;
  $1 = $19;
  $20 = $0;
  $21 = $1;
  HEAP32[$20>>2] = $21;
  $5 = $8;
  $22 = $5;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE2AtEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = (__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEj($2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function __ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEixEj($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = $this;
 $3 = $i;
 $4 = $2;
 $5 = (($4) + 8|0);
 $6 = $3;
 $0 = $5;
 $1 = $6;
 $7 = $0;
 $8 = $1;
 $9 = HEAP32[$7>>2]|0;
 $10 = (($9) + ($8<<4)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 16)&-1;
 $35 = (($22) + ($34<<4)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<4)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 16)&-1;
 $52 = (($43) + ($51<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 16)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0;
 var $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 76|0;
 $__v = sp + 40|0;
 $26 = $this;
 $27 = $__n;
 $30 = $26;
 $25 = $30;
 $31 = $25;
 $32 = (($31) + 8|0);
 $24 = $32;
 $33 = $24;
 $23 = $33;
 $34 = $23;
 $35 = HEAP32[$34>>2]|0;
 $36 = (($30) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $35;
 $39 = $37;
 $40 = (($38) - ($39))|0;
 $41 = (($40|0) / 16)&-1;
 $42 = $27;
 $43 = ($41>>>0)>=($42>>>0);
 if ($43) {
  $44 = $27;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE18__construct_at_endEj($30,$44);
  STACKTOP = sp;return;
 }
 $22 = $30;
 $45 = $22;
 $46 = (($45) + 8|0);
 $21 = $46;
 $47 = $21;
 $20 = $47;
 $48 = $20;
 $__a = $48;
 $19 = $30;
 $49 = $19;
 $50 = (($49) + 4|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = HEAP32[$49>>2]|0;
 $53 = $51;
 $54 = $52;
 $55 = (($53) - ($54))|0;
 $56 = (($55|0) / 16)&-1;
 $57 = $27;
 $58 = (($56) + ($57))|0;
 $16 = $30;
 HEAP32[$17>>2] = $58;
 $59 = $16;
 $60 = (__ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8max_sizeEv($59)|0);
 $__ms$i = $60;
 $61 = HEAP32[$17>>2]|0;
 $62 = $__ms$i;
 $63 = ($61>>>0)>($62>>>0);
 if ($63) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($59);
  // unreachable;
 }
 $14 = $59;
 $64 = $14;
 $13 = $64;
 $65 = $13;
 $12 = $65;
 $66 = $12;
 $67 = (($66) + 8|0);
 $11 = $67;
 $68 = $11;
 $10 = $68;
 $69 = $10;
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$65>>2]|0;
 $72 = $70;
 $73 = $71;
 $74 = (($72) - ($73))|0;
 $75 = (($74|0) / 16)&-1;
 $__cap$i = $75;
 $76 = $__cap$i;
 $77 = $__ms$i;
 $78 = (($77>>>0) / 2)&-1;
 $79 = ($76>>>0)>=($78>>>0);
 if ($79) {
  $80 = $__ms$i;
  $15 = $80;
 } else {
  $81 = $__cap$i;
  $82 = $81<<1;
  HEAP32[$18>>2] = $82;
  $7 = $18;
  $8 = $17;
  $83 = $7;
  $84 = $8;
  ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
  $4 = $83;
  $5 = $84;
  $85 = $4;
  $86 = $5;
  $1 = $6;
  $2 = $85;
  $3 = $86;
  $87 = $2;
  $88 = HEAP32[$87>>2]|0;
  $89 = $3;
  $90 = HEAP32[$89>>2]|0;
  $91 = ($88>>>0)<($90>>>0);
  if ($91) {
   $92 = $5;
   $95 = $92;
  } else {
   $93 = $4;
   $95 = $93;
  }
  $94 = HEAP32[$95>>2]|0;
  $15 = $94;
 }
 $96 = $15;
 $0 = $30;
 $97 = $0;
 $98 = (($97) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = HEAP32[$97>>2]|0;
 $101 = $99;
 $102 = $100;
 $103 = (($101) - ($102))|0;
 $104 = (($103|0) / 16)&-1;
 $105 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC2EjjS9_($__v,$96,$104,$105);
 $106 = $27;
 __THREW__ = 0;
 invoke_vii(499,($__v|0),($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if (!($108)) {
  __THREW__ = 0;
  invoke_vii(496,($30|0),($__v|0));
  $109 = __THREW__; __THREW__ = 0;
  $110 = $109&1;
  if (!($110)) {
   __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $111 = ___cxa_find_matching_catch()|0;
 $112 = tempRet0;
 $28 = $111;
 $29 = $112;
 __THREW__ = 0;
 invoke_vi(497,($__v|0));
 $113 = __THREW__; __THREW__ = 0;
 $114 = $113&1;
 if ($114) {
  $117 = ___cxa_find_matching_catch(0|0)|0;
  $118 = tempRet0;
  ___clang_call_terminate($117);
  // unreachable;
 }
 $115 = $28;
 $116 = $29;
 ___resumeException($115|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC2Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 16|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<4;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<4)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<4)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 12|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $13 = (($12) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $__a = $14;
 while(1) {
  $15 = $__a;
  $16 = (($8) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $0 = $17;
  $18 = $0;
  $1 = $15;
  $2 = $18;
  $19 = $2;
  $20 = ($19|0)==(0|0);
  if (!($20)) {
   __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC2Ev($19);
  }
  $21 = (($8) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 16|0);
  HEAP32[$21>>2] = $23;
  $24 = $7;
  $25 = (($24) + -1)|0;
  $7 = $25;
  $26 = $7;
  $27 = ($26>>>0)>(0);
  if (!($27)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 48|0;
 $__t$i1 = sp + 28|0;
 $__t$i = sp + 72|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri15RefinedFaceDataIP8MyVertexEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAP8[$1>>0] = 0;
 $2 = (($1) + 1|0);
 HEAP8[$2>>0] = 0;
 $3 = (($1) + 2|0);
 HEAP8[$3>>0] = 0;
 $4 = (($1) + 4|0);
 HEAP32[$4>>2] = 0;
 $5 = (($1) + 4|0);
 $6 = (($5) + 4|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 4|0);
 $8 = (($7) + 8|0);
 HEAP32[$8>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 268435455;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg18SimpleTempDataBaseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg18SimpleTempDataBaseD0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(11,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp + 76|0;
 $__p = sp + 172|0;
 $43 = sp;
 $41 = $this;
 $42 = $__v;
 $44 = $41;
 $45 = $42;
 $40 = $44;
 $46 = $40;
 $39 = $46;
 $47 = $39;
 $48 = (($47) + 4|0);
 $38 = $48;
 $49 = $38;
 $37 = $49;
 $50 = $37;
 $36 = $50;
 $51 = $36;
 $35 = $51;
 $52 = $35;
 $53 = HEAP32[$52>>2]|0;
 $20 = $44;
 $54 = $20;
 $55 = (($54) + 4|0);
 $19 = $55;
 $56 = $19;
 $18 = $56;
 $57 = $18;
 $17 = $57;
 $58 = $17;
 $16 = $58;
 $59 = $16;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_SD_SD_($__p,$44,$45,$53,$59);
 $15 = $44;
 $60 = $15;
 $14 = $60;
 $61 = $14;
 $62 = (($61) + 4|0);
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $10 = $65;
 $66 = $10;
 $8 = $43;
 $9 = $66;
 $67 = $8;
 $68 = $9;
 HEAP32[$67>>2] = $68;
 $6 = $__p;
 $7 = $43;
 $69 = $6;
 $70 = $7;
 $4 = $69;
 $5 = $70;
 $71 = $4;
 $72 = HEAP32[$71>>2]|0;
 $73 = $5;
 $74 = HEAP32[$73>>2]|0;
 $75 = ($72|0)==($74|0);
 $76 = $75 ^ 1;
 do {
  if ($76) {
   $3 = $44;
   $77 = $3;
   $78 = (($77) + 8|0);
   $2 = $78;
   $79 = $2;
   $1 = $79;
   $80 = $1;
   $81 = $42;
   $0 = $__p;
   $82 = $0;
   $83 = HEAP32[$82>>2]|0;
   $84 = (($83) + 16|0);
   $21 = $80;
   $22 = $81;
   $23 = $84;
   $85 = $22;
   $86 = $23;
   __ZN3vcg18PointerToAttributeC2ERKS0_($24,$86);
   __THREW__ = 0;
   $87 = (invoke_iii(493,($85|0),($24|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    $90 = ___cxa_find_matching_catch()|0;
    $91 = tempRet0;
    $25 = $90;
    $26 = $91;
    __THREW__ = 0;
    invoke_vi(473,($24|0));
    $92 = __THREW__; __THREW__ = 0;
    $93 = $92&1;
    if ($93) {
     $96 = ___cxa_find_matching_catch(0|0)|0;
     $97 = tempRet0;
     ___clang_call_terminate($96);
     // unreachable;
    } else {
     $94 = $25;
     $95 = $26;
     ___resumeException($94|0);
     // unreachable;
    }
   } else {
    __ZN3vcg18PointerToAttributeD2Ev($24);
    if ($87) {
     break;
    }
    ;HEAP32[$agg$result+0>>2]=HEAP32[$__p+0>>2]|0;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $34 = $44;
 $98 = $34;
 $33 = $98;
 $99 = $33;
 $100 = (($99) + 4|0);
 $32 = $100;
 $101 = $32;
 $31 = $101;
 $102 = $31;
 $30 = $102;
 $103 = $30;
 $29 = $103;
 $104 = $29;
 $27 = $agg$result;
 $28 = $104;
 $105 = $27;
 $106 = $28;
 HEAP32[$105>>2] = $106;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE13__lower_boundIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_SD_SD_($agg$result,$this,$__v,$__root,$__result) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 $__root = $__root|0;
 $__result = $__result|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $7 = sp + 56|0;
 $14 = sp;
 $19 = sp + 4|0;
 $15 = $this;
 $16 = $__v;
 $17 = $__root;
 $18 = $__result;
 $20 = $15;
 while(1) {
  $21 = $17;
  $12 = $14;
  $13 = -1;
  $22 = $12;
  HEAP32[$22>>2] = 0;
  $23 = HEAP32[$14>>2]|0;
  HEAP32[$19>>2] = $23;
  $3 = $19;
  $24 = ($21|0)!=(0|0);
  if (!($24)) {
   label = 11;
   break;
  }
  $2 = $20;
  $25 = $2;
  $26 = (($25) + 8|0);
  $1 = $26;
  $27 = $1;
  $0 = $27;
  $28 = $0;
  $29 = $17;
  $30 = (($29) + 16|0);
  $31 = $16;
  $4 = $28;
  $5 = $30;
  $6 = $31;
  $32 = $5;
  $33 = $6;
  __ZN3vcg18PointerToAttributeC2ERKS0_($7,$33);
  __THREW__ = 0;
  $34 = (invoke_iii(493,($32|0),($7|0))|0);
  $35 = __THREW__; __THREW__ = 0;
  $36 = $35&1;
  if ($36) {
   break;
  }
  __ZN3vcg18PointerToAttributeD2Ev($7);
  if ($34) {
   $48 = $17;
   $49 = (($48) + 4|0);
   $50 = HEAP32[$49>>2]|0;
   $17 = $50;
  } else {
   $45 = $17;
   $18 = $45;
   $46 = $17;
   $47 = HEAP32[$46>>2]|0;
   $17 = $47;
  }
 }
 if ((label|0) == 11) {
  $51 = $18;
  $10 = $agg$result;
  $11 = $51;
  $52 = $10;
  $53 = $11;
  HEAP32[$52>>2] = $53;
  STACKTOP = sp;return;
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 $8 = $37;
 $9 = $38;
 __THREW__ = 0;
 invoke_vi(473,($7|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if ($40) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  $41 = $8;
  $42 = $9;
  ___resumeException($41|0);
  // unreachable;
 }
}
function __ZN3vcg3tri7EdgeLenI6MyMeshfE6setThrEf($this,$threshold) {
 $this = $this|0;
 $threshold = +$threshold;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $threshold;
 $2 = $0;
 $3 = $1;
 $4 = $1;
 $5 = $3 * $4;
 HEAPF32[$2>>2] = $5;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE14FillEdgeVectorERS2_RNSt3__16vectorINS3_5PEdgeENS5_9allocatorIS7_EEEEb($m,$edgeVec,$includeFauxEdge) {
 $m = $m|0;
 $edgeVec = $edgeVec|0;
 $includeFauxEdge = $includeFauxEdge|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $fi = 0, $j = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i = sp + 168|0;
 $fi = sp + 144|0;
 $36 = sp + 56|0;
 $37 = sp + 88|0;
 $33 = $m;
 $34 = $edgeVec;
 $38 = $includeFauxEdge&1;
 $35 = $38;
 $39 = $34;
 $40 = $33;
 $41 = (($40) + 44|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42*3)|0;
 __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE7reserveEj($39,$43);
 $44 = $33;
 $45 = (($44) + 32|0);
 $32 = $45;
 $46 = $32;
 $47 = HEAP32[$46>>2]|0;
 $30 = $46;
 $31 = $47;
 $48 = $31;
 $28 = $fi;
 $29 = $48;
 $49 = $28;
 $50 = $29;
 HEAP32[$49>>2] = $50;
 while(1) {
  $51 = $33;
  $52 = (($51) + 32|0);
  $14 = $52;
  $53 = $14;
  $54 = (($53) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $12 = $53;
  $13 = $55;
  $56 = $13;
  $10 = $36;
  $11 = $56;
  $57 = $10;
  $58 = $11;
  HEAP32[$57>>2] = $58;
  $8 = $fi;
  $9 = $36;
  $59 = $8;
  $60 = $9;
  $6 = $59;
  $7 = $60;
  $61 = $6;
  $5 = $61;
  $62 = $5;
  $63 = HEAP32[$62>>2]|0;
  $64 = $7;
  $4 = $64;
  $65 = $4;
  $66 = HEAP32[$65>>2]|0;
  $67 = ($63|0)==($66|0);
  $68 = $67 ^ 1;
  if (!($68)) {
   break;
  }
  $3 = $fi;
  $69 = $3;
  $70 = HEAP32[$69>>2]|0;
  $71 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv($70)|0);
  if (!($71)) {
   $j = 0;
   while(1) {
    $72 = $j;
    $2 = $fi;
    $73 = $2;
    $74 = HEAP32[$73>>2]|0;
    $75 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($74)|0);
    $76 = ($72|0)<($75|0);
    if (!($76)) {
     break;
    }
    $77 = $35;
    $78 = $77&1;
    if ($78) {
     label = 8;
    } else {
     $0 = $fi;
     $79 = $0;
     $80 = HEAP32[$79>>2]|0;
     $81 = $j;
     $82 = (__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsFEi($80,$81)|0);
     if (!($82)) {
      label = 8;
     }
    }
    if ((label|0) == 8) {
     label = 0;
     $83 = $34;
     $1 = $fi;
     $84 = $1;
     $85 = HEAP32[$84>>2]|0;
     $86 = $j;
     __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC2EP6MyFacei($37,$85,$86);
     $25 = $83;
     $26 = $37;
     $87 = $25;
     $88 = (($87) + 4|0);
     $89 = HEAP32[$88>>2]|0;
     $24 = $87;
     $90 = $24;
     $91 = (($90) + 8|0);
     $23 = $91;
     $92 = $23;
     $22 = $92;
     $93 = $22;
     $94 = HEAP32[$93>>2]|0;
     $95 = ($89|0)!=($94|0);
     if ($95) {
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($__annotator$i,$87,1);
      $21 = $87;
      $96 = $21;
      $97 = (($96) + 8|0);
      $20 = $97;
      $98 = $20;
      $19 = $98;
      $99 = $19;
      $100 = (($87) + 4|0);
      $101 = HEAP32[$100>>2]|0;
      $18 = $101;
      $102 = $18;
      $103 = $26;
      $15 = $99;
      $16 = $102;
      $17 = $103;
      $104 = $16;
      $105 = ($104|0)==(0|0);
      if (!($105)) {
       $106 = $17;
       ;HEAP32[$104+0>>2]=HEAP32[$106+0>>2]|0;HEAP32[$104+4>>2]=HEAP32[$106+4>>2]|0;HEAP32[$104+8>>2]=HEAP32[$106+8>>2]|0;HEAP32[$104+12>>2]=HEAP32[$106+12>>2]|0;
      }
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
      $107 = (($87) + 4|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = (($108) + 16|0);
      HEAP32[$107>>2] = $109;
     } else {
      $110 = $26;
      __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE21__push_back_slow_pathIKS6_EEvRT_($87,$110);
     }
    }
    $111 = $j;
    $112 = (($111) + 1)|0;
    $j = $112;
   }
  }
  $27 = $fi;
  $113 = $27;
  $114 = HEAP32[$113>>2]|0;
  $115 = (($114) + 44|0);
  HEAP32[$113>>2] = $115;
 }
 STACKTOP = sp;return;
}
function __ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeeqERKS4_($this,$pe) {
 $this = $this|0;
 $pe = $pe|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pe;
 $2 = $0;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3|0)==($5|0);
 if (!($6)) {
  $13 = 0;
  STACKTOP = sp;return ($13|0);
 }
 $7 = (($2) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($8|0)==($11|0);
 $13 = $12;
 STACKTOP = sp;return ($13|0);
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 16)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__delta = 0, $__fs = 0, $__i = 0, $__j = 0, $__len = 0, $__limit = 0, $__lm1 = 0, $__m = 0, $__n_swaps = 0;
 var $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, $__t$i5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i5 = sp + 16|0;
 $__t$i4 = sp + 56|0;
 $__t$i3 = sp + 112|0;
 $__t$i2 = sp + 352|0;
 $__t$i1 = sp + 208|0;
 $__t$i = sp + 280|0;
 $60 = $__first;
 $61 = $__last;
 $62 = $__comp;
 $__limit = 30;
 L1: while(1) {
  L3: while(1) {
   $63 = $61;
   $64 = $60;
   $65 = $63;
   $66 = $64;
   $67 = (($65) - ($66))|0;
   $68 = (($67|0) / 16)&-1;
   $__len = $68;
   $69 = $__len;
   switch ($69|0) {
   case 1: case 0:  {
    label = 4;
    break L1;
    break;
   }
   case 4:  {
    label = 9;
    break L1;
    break;
   }
   case 5:  {
    label = 10;
    break L1;
    break;
   }
   case 2:  {
    label = 5;
    break L1;
    break;
   }
   case 3:  {
    label = 8;
    break L1;
    break;
   }
   default: {
   }
   }
   $110 = $__len;
   $111 = ($110|0)<=(30);
   if ($111) {
    label = 12;
    break L1;
   }
   $115 = $60;
   $__m = $115;
   $116 = $61;
   $__lm1 = $116;
   $117 = $__lm1;
   $118 = (($117) + -16|0);
   $__lm1 = $118;
   $119 = $__len;
   $120 = ($119|0)>=(1000);
   if ($120) {
    $121 = $__len;
    $122 = (($121|0) / 2)&-1;
    $__delta = $122;
    $123 = $__delta;
    $124 = $__m;
    $125 = (($124) + ($123<<4)|0);
    $__m = $125;
    $126 = $__delta;
    $127 = (($126|0) / 2)&-1;
    $__delta = $127;
    $128 = $60;
    $129 = $60;
    $130 = $__delta;
    $131 = (($129) + ($130<<4)|0);
    $132 = $__m;
    $133 = $__m;
    $134 = $__delta;
    $135 = (($133) + ($134<<4)|0);
    $136 = $__lm1;
    $137 = $62;
    $138 = (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($128,$131,$132,$135,$136,$137)|0);
    $__n_swaps = $138;
   } else {
    $139 = $__len;
    $140 = (($139|0) / 2)&-1;
    $__delta = $140;
    $141 = $__delta;
    $142 = $__m;
    $143 = (($142) + ($141<<4)|0);
    $__m = $143;
    $144 = $60;
    $145 = $__m;
    $146 = $__lm1;
    $147 = $62;
    $148 = (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($144,$145,$146,$147)|0);
    $__n_swaps = $148;
   }
   $149 = $60;
   $__i = $149;
   $150 = $__lm1;
   $__j = $150;
   $151 = $62;
   $152 = $__i;
   $153 = $__m;
   $49 = $151;
   $50 = $152;
   $51 = $153;
   $154 = $50;
   $155 = $51;
   $156 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($154,$155)|0);
   if ($156) {
    break;
   }
   while(1) {
    $157 = $__i;
    $158 = $__j;
    $159 = (($158) + -16|0);
    $__j = $159;
    $160 = ($157|0)==($159|0);
    if ($160) {
     break;
    }
    $231 = $62;
    $232 = $__j;
    $233 = $__m;
    $24 = $231;
    $25 = $232;
    $26 = $233;
    $234 = $25;
    $235 = $26;
    $236 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($234,$235)|0);
    if ($236) {
     label = 41;
     break L3;
    }
   }
   $161 = $__i;
   $162 = (($161) + 16|0);
   $__i = $162;
   $163 = $61;
   $__j = $163;
   $164 = $62;
   $165 = $60;
   $166 = $__j;
   $167 = (($166) + -16|0);
   $__j = $167;
   $46 = $164;
   $47 = $165;
   $48 = $167;
   $168 = $47;
   $169 = $48;
   $170 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($168,$169)|0);
   if (!($170)) {
    while(1) {
     $171 = $__i;
     $172 = $__j;
     $173 = ($171|0)==($172|0);
     if ($173) {
      label = 22;
      break L1;
     }
     $174 = $62;
     $175 = $60;
     $176 = $__i;
     $43 = $174;
     $44 = $175;
     $45 = $176;
     $177 = $44;
     $178 = $45;
     $179 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($177,$178)|0);
     if ($179) {
      break;
     }
     $193 = $__i;
     $194 = (($193) + 16|0);
     $__i = $194;
    }
    $180 = $__i;
    $181 = $__j;
    $41 = $180;
    $42 = $181;
    $182 = $41;
    $40 = $182;
    $183 = $40;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$183+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$183+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$183+12>>2]|0;
    $184 = $41;
    $185 = $42;
    $38 = $185;
    $186 = $38;
    ;HEAP32[$184+0>>2]=HEAP32[$186+0>>2]|0;HEAP32[$184+4>>2]=HEAP32[$186+4>>2]|0;HEAP32[$184+8>>2]=HEAP32[$186+8>>2]|0;HEAP32[$184+12>>2]=HEAP32[$186+12>>2]|0;
    $187 = $42;
    $39 = $__t$i1;
    $188 = $39;
    ;HEAP32[$187+0>>2]=HEAP32[$188+0>>2]|0;HEAP32[$187+4>>2]=HEAP32[$188+4>>2]|0;HEAP32[$187+8>>2]=HEAP32[$188+8>>2]|0;HEAP32[$187+12>>2]=HEAP32[$188+12>>2]|0;
    $189 = $__n_swaps;
    $190 = (($189) + 1)|0;
    $__n_swaps = $190;
    $191 = $__i;
    $192 = (($191) + 16|0);
    $__i = $192;
   }
   $195 = $__i;
   $196 = $__j;
   $197 = ($195|0)==($196|0);
   if ($197) {
    label = 28;
    break L1;
   }
   while(1) {
    while(1) {
     $198 = $62;
     $199 = $60;
     $200 = $__i;
     $35 = $198;
     $36 = $199;
     $37 = $200;
     $201 = $36;
     $202 = $37;
     $203 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($201,$202)|0);
     $204 = $203 ^ 1;
     if (!($204)) {
      break;
     }
     $205 = $__i;
     $206 = (($205) + 16|0);
     $__i = $206;
    }
    while(1) {
     $207 = $62;
     $208 = $60;
     $209 = $__j;
     $210 = (($209) + -16|0);
     $__j = $210;
     $32 = $207;
     $33 = $208;
     $34 = $210;
     $211 = $33;
     $212 = $34;
     $213 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($211,$212)|0);
     if (!($213)) {
      break;
     }
    }
    $214 = $__i;
    $215 = $__j;
    $216 = ($214>>>0)>=($215>>>0);
    if ($216) {
     break;
    }
    $217 = $__i;
    $218 = $__j;
    $30 = $217;
    $31 = $218;
    $219 = $30;
    $29 = $219;
    $220 = $29;
    ;HEAP32[$__t$i2+0>>2]=HEAP32[$220+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$220+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$220+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$220+12>>2]|0;
    $221 = $30;
    $222 = $31;
    $27 = $222;
    $223 = $27;
    ;HEAP32[$221+0>>2]=HEAP32[$223+0>>2]|0;HEAP32[$221+4>>2]=HEAP32[$223+4>>2]|0;HEAP32[$221+8>>2]=HEAP32[$223+8>>2]|0;HEAP32[$221+12>>2]=HEAP32[$223+12>>2]|0;
    $224 = $31;
    $28 = $__t$i2;
    $225 = $28;
    ;HEAP32[$224+0>>2]=HEAP32[$225+0>>2]|0;HEAP32[$224+4>>2]=HEAP32[$225+4>>2]|0;HEAP32[$224+8>>2]=HEAP32[$225+8>>2]|0;HEAP32[$224+12>>2]=HEAP32[$225+12>>2]|0;
    $226 = $__n_swaps;
    $227 = (($226) + 1)|0;
    $__n_swaps = $227;
    $228 = $__i;
    $229 = (($228) + 16|0);
    $__i = $229;
   }
   $230 = $__i;
   $60 = $230;
  }
  if ((label|0) == 41) {
   label = 0;
   $237 = $__i;
   $238 = $__j;
   $22 = $237;
   $23 = $238;
   $239 = $22;
   $21 = $239;
   $240 = $21;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$240+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$240+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$240+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$240+12>>2]|0;
   $241 = $22;
   $242 = $23;
   $19 = $242;
   $243 = $19;
   ;HEAP32[$241+0>>2]=HEAP32[$243+0>>2]|0;HEAP32[$241+4>>2]=HEAP32[$243+4>>2]|0;HEAP32[$241+8>>2]=HEAP32[$243+8>>2]|0;HEAP32[$241+12>>2]=HEAP32[$243+12>>2]|0;
   $244 = $23;
   $20 = $__t$i3;
   $245 = $20;
   ;HEAP32[$244+0>>2]=HEAP32[$245+0>>2]|0;HEAP32[$244+4>>2]=HEAP32[$245+4>>2]|0;HEAP32[$244+8>>2]=HEAP32[$245+8>>2]|0;HEAP32[$244+12>>2]=HEAP32[$245+12>>2]|0;
   $246 = $__n_swaps;
   $247 = (($246) + 1)|0;
   $__n_swaps = $247;
  }
  $248 = $__i;
  $249 = (($248) + 16|0);
  $__i = $249;
  $250 = $__i;
  $251 = $__j;
  $252 = ($250>>>0)<($251>>>0);
  if ($252) {
   while(1) {
    while(1) {
     $253 = $62;
     $254 = $__i;
     $255 = $__m;
     $16 = $253;
     $17 = $254;
     $18 = $255;
     $256 = $17;
     $257 = $18;
     $258 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($256,$257)|0);
     if (!($258)) {
      break;
     }
     $259 = $__i;
     $260 = (($259) + 16|0);
     $__i = $260;
    }
    while(1) {
     $261 = $62;
     $262 = $__j;
     $263 = (($262) + -16|0);
     $__j = $263;
     $264 = $__m;
     $13 = $261;
     $14 = $263;
     $15 = $264;
     $265 = $14;
     $266 = $15;
     $267 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($265,$266)|0);
     $268 = $267 ^ 1;
     if (!($268)) {
      break;
     }
    }
    $269 = $__i;
    $270 = $__j;
    $271 = ($269>>>0)>($270>>>0);
    if ($271) {
     break;
    }
    $272 = $__i;
    $273 = $__j;
    $11 = $272;
    $12 = $273;
    $274 = $11;
    $10 = $274;
    $275 = $10;
    ;HEAP32[$__t$i4+0>>2]=HEAP32[$275+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$275+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$275+8>>2]|0;HEAP32[$__t$i4+12>>2]=HEAP32[$275+12>>2]|0;
    $276 = $11;
    $277 = $12;
    $8 = $277;
    $278 = $8;
    ;HEAP32[$276+0>>2]=HEAP32[$278+0>>2]|0;HEAP32[$276+4>>2]=HEAP32[$278+4>>2]|0;HEAP32[$276+8>>2]=HEAP32[$278+8>>2]|0;HEAP32[$276+12>>2]=HEAP32[$278+12>>2]|0;
    $279 = $12;
    $9 = $__t$i4;
    $280 = $9;
    ;HEAP32[$279+0>>2]=HEAP32[$280+0>>2]|0;HEAP32[$279+4>>2]=HEAP32[$280+4>>2]|0;HEAP32[$279+8>>2]=HEAP32[$280+8>>2]|0;HEAP32[$279+12>>2]=HEAP32[$280+12>>2]|0;
    $281 = $__n_swaps;
    $282 = (($281) + 1)|0;
    $__n_swaps = $282;
    $283 = $__m;
    $284 = $__i;
    $285 = ($283|0)==($284|0);
    if ($285) {
     $286 = $__j;
     $__m = $286;
    }
    $287 = $__i;
    $288 = (($287) + 16|0);
    $__i = $288;
   }
  }
  $289 = $__i;
  $290 = $__m;
  $291 = ($289|0)!=($290|0);
  if ($291) {
   $292 = $62;
   $293 = $__m;
   $294 = $__i;
   $0 = $292;
   $1 = $293;
   $2 = $294;
   $295 = $1;
   $296 = $2;
   $297 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($295,$296)|0);
   if ($297) {
    $298 = $__i;
    $299 = $__m;
    $6 = $298;
    $7 = $299;
    $300 = $6;
    $5 = $300;
    $301 = $5;
    ;HEAP32[$__t$i5+0>>2]=HEAP32[$301+0>>2]|0;HEAP32[$__t$i5+4>>2]=HEAP32[$301+4>>2]|0;HEAP32[$__t$i5+8>>2]=HEAP32[$301+8>>2]|0;HEAP32[$__t$i5+12>>2]=HEAP32[$301+12>>2]|0;
    $302 = $6;
    $303 = $7;
    $3 = $303;
    $304 = $3;
    ;HEAP32[$302+0>>2]=HEAP32[$304+0>>2]|0;HEAP32[$302+4>>2]=HEAP32[$304+4>>2]|0;HEAP32[$302+8>>2]=HEAP32[$304+8>>2]|0;HEAP32[$302+12>>2]=HEAP32[$304+12>>2]|0;
    $305 = $7;
    $4 = $__t$i5;
    $306 = $4;
    ;HEAP32[$305+0>>2]=HEAP32[$306+0>>2]|0;HEAP32[$305+4>>2]=HEAP32[$306+4>>2]|0;HEAP32[$305+8>>2]=HEAP32[$306+8>>2]|0;HEAP32[$305+12>>2]=HEAP32[$306+12>>2]|0;
    $307 = $__n_swaps;
    $308 = (($307) + 1)|0;
    $__n_swaps = $308;
   }
  }
  $309 = $__n_swaps;
  $310 = ($309|0)==(0);
  if ($310) {
   $311 = $60;
   $312 = $__i;
   $313 = $62;
   $314 = (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($311,$312,$313)|0);
   $315 = $314&1;
   $__fs = $315;
   $316 = $__i;
   $317 = (($316) + 16|0);
   $318 = $61;
   $319 = $62;
   $320 = (__ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($317,$318,$319)|0);
   if ($320) {
    $321 = $__fs;
    $322 = $321&1;
    if ($322) {
     label = 64;
     break;
    }
    $323 = $__i;
    $61 = $323;
    continue;
   }
   $324 = $__fs;
   $325 = $324&1;
   if ($325) {
    $326 = $__i;
    $327 = (($326) + 16|0);
    $__i = $327;
    $60 = $327;
    continue;
   }
  }
  $328 = $__i;
  $329 = $60;
  $330 = $328;
  $331 = $329;
  $332 = (($330) - ($331))|0;
  $333 = (($332|0) / 16)&-1;
  $334 = $61;
  $335 = $__i;
  $336 = $334;
  $337 = $335;
  $338 = (($336) - ($337))|0;
  $339 = (($338|0) / 16)&-1;
  $340 = ($333|0)<($339|0);
  if ($340) {
   $341 = $60;
   $342 = $__i;
   $343 = $62;
   __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($341,$342,$343);
   $344 = $__i;
   $345 = (($344) + 16|0);
   $__i = $345;
   $60 = $345;
  } else {
   $346 = $__i;
   $347 = (($346) + 16|0);
   $348 = $61;
   $349 = $62;
   __ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($347,$348,$349);
   $350 = $__i;
   $61 = $350;
  }
 }
 if ((label|0) == 4) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 5) {
  $70 = $62;
  $71 = $61;
  $72 = (($71) + -16|0);
  $61 = $72;
  $73 = $60;
  $57 = $70;
  $58 = $72;
  $59 = $73;
  $74 = $58;
  $75 = $59;
  $76 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($74,$75)|0);
  if ($76) {
   $77 = $60;
   $78 = $61;
   $55 = $77;
   $56 = $78;
   $79 = $55;
   $54 = $79;
   $80 = $54;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$80+12>>2]|0;
   $81 = $55;
   $82 = $56;
   $52 = $82;
   $83 = $52;
   ;HEAP32[$81+0>>2]=HEAP32[$83+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$83+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$83+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$83+12>>2]|0;
   $84 = $56;
   $53 = $__t$i;
   $85 = $53;
   ;HEAP32[$84+0>>2]=HEAP32[$85+0>>2]|0;HEAP32[$84+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$84+8>>2]=HEAP32[$85+8>>2]|0;HEAP32[$84+12>>2]=HEAP32[$85+12>>2]|0;
  }
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $86 = $60;
  $87 = $60;
  $88 = (($87) + 16|0);
  $89 = $61;
  $90 = (($89) + -16|0);
  $61 = $90;
  $91 = $62;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($86,$88,$90,$91)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 9) {
  $92 = $60;
  $93 = $60;
  $94 = (($93) + 16|0);
  $95 = $60;
  $96 = (($95) + 32|0);
  $97 = $61;
  $98 = (($97) + -16|0);
  $61 = $98;
  $99 = $62;
  (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($92,$94,$96,$98,$99)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 10) {
  $100 = $60;
  $101 = $60;
  $102 = (($101) + 16|0);
  $103 = $60;
  $104 = (($103) + 32|0);
  $105 = $60;
  $106 = (($105) + 48|0);
  $107 = $61;
  $108 = (($107) + -16|0);
  $61 = $108;
  $109 = $62;
  (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($100,$102,$104,$106,$108,$109)|0);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 12) {
  $112 = $60;
  $113 = $61;
  $114 = $62;
  __ZNSt3__118__insertion_sort_3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($112,$113,$114);
  STACKTOP = sp;return;
 }
 else if ((label|0) == 22) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 28) {
  STACKTOP = sp;return;
 }
 else if ((label|0) == 64) {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($__x,$__y,$__z,$__c) {
 $__x = $__x|0;
 $__y = $__y|0;
 $__z = $__z|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, $__t$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i4 = sp + 16|0;
 $__t$i3 = sp + 56|0;
 $__t$i2 = sp + 88|0;
 $__t$i1 = sp + 144|0;
 $__t$i = sp + 184|0;
 $41 = $__x;
 $42 = $__y;
 $43 = $__z;
 $44 = $__c;
 $__r = 0;
 $45 = $44;
 $46 = $42;
 $47 = $41;
 $37 = $45;
 $38 = $46;
 $39 = $47;
 $48 = $38;
 $49 = $39;
 $50 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($48,$49)|0);
 if ($50) {
  $83 = $44;
  $84 = $43;
  $85 = $42;
  $0 = $83;
  $1 = $84;
  $2 = $85;
  $86 = $1;
  $87 = $2;
  $88 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($86,$87)|0);
  if ($88) {
   $89 = $41;
   $90 = $43;
   $6 = $89;
   $7 = $90;
   $91 = $6;
   $5 = $91;
   $92 = $5;
   ;HEAP32[$__t$i4+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$__t$i4+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$__t$i4+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$__t$i4+12>>2]=HEAP32[$92+12>>2]|0;
   $93 = $6;
   $94 = $7;
   $3 = $94;
   $95 = $3;
   ;HEAP32[$93+0>>2]=HEAP32[$95+0>>2]|0;HEAP32[$93+4>>2]=HEAP32[$95+4>>2]|0;HEAP32[$93+8>>2]=HEAP32[$95+8>>2]|0;HEAP32[$93+12>>2]=HEAP32[$95+12>>2]|0;
   $96 = $7;
   $4 = $__t$i4;
   $97 = $4;
   ;HEAP32[$96+0>>2]=HEAP32[$97+0>>2]|0;HEAP32[$96+4>>2]=HEAP32[$97+4>>2]|0;HEAP32[$96+8>>2]=HEAP32[$97+8>>2]|0;HEAP32[$96+12>>2]=HEAP32[$97+12>>2]|0;
   $__r = 1;
   $98 = $__r;
   $40 = $98;
   $124 = $40;
   STACKTOP = sp;return ($124|0);
  }
  $99 = $41;
  $100 = $42;
  $11 = $99;
  $12 = $100;
  $101 = $11;
  $10 = $101;
  $102 = $10;
  ;HEAP32[$__t$i3+0>>2]=HEAP32[$102+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$102+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$102+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$102+12>>2]|0;
  $103 = $11;
  $104 = $12;
  $8 = $104;
  $105 = $8;
  ;HEAP32[$103+0>>2]=HEAP32[$105+0>>2]|0;HEAP32[$103+4>>2]=HEAP32[$105+4>>2]|0;HEAP32[$103+8>>2]=HEAP32[$105+8>>2]|0;HEAP32[$103+12>>2]=HEAP32[$105+12>>2]|0;
  $106 = $12;
  $9 = $__t$i3;
  $107 = $9;
  ;HEAP32[$106+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$106+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$106+8>>2]=HEAP32[$107+8>>2]|0;HEAP32[$106+12>>2]=HEAP32[$107+12>>2]|0;
  $__r = 1;
  $108 = $44;
  $109 = $43;
  $110 = $42;
  $21 = $108;
  $22 = $109;
  $23 = $110;
  $111 = $22;
  $112 = $23;
  $113 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($111,$112)|0);
  if ($113) {
   $114 = $42;
   $115 = $43;
   $27 = $114;
   $28 = $115;
   $116 = $27;
   $26 = $116;
   $117 = $26;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$117+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$117+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$117+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$117+12>>2]|0;
   $118 = $27;
   $119 = $28;
   $24 = $119;
   $120 = $24;
   ;HEAP32[$118+0>>2]=HEAP32[$120+0>>2]|0;HEAP32[$118+4>>2]=HEAP32[$120+4>>2]|0;HEAP32[$118+8>>2]=HEAP32[$120+8>>2]|0;HEAP32[$118+12>>2]=HEAP32[$120+12>>2]|0;
   $121 = $28;
   $25 = $__t$i1;
   $122 = $25;
   ;HEAP32[$121+0>>2]=HEAP32[$122+0>>2]|0;HEAP32[$121+4>>2]=HEAP32[$122+4>>2]|0;HEAP32[$121+8>>2]=HEAP32[$122+8>>2]|0;HEAP32[$121+12>>2]=HEAP32[$122+12>>2]|0;
   $__r = 2;
  }
  $123 = $__r;
  $40 = $123;
  $124 = $40;
  STACKTOP = sp;return ($124|0);
 } else {
  $51 = $44;
  $52 = $43;
  $53 = $42;
  $34 = $51;
  $35 = $52;
  $36 = $53;
  $54 = $35;
  $55 = $36;
  $56 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($54,$55)|0);
  if (!($56)) {
   $57 = $__r;
   $40 = $57;
   $124 = $40;
   STACKTOP = sp;return ($124|0);
  }
  $58 = $42;
  $59 = $43;
  $32 = $58;
  $33 = $59;
  $60 = $32;
  $31 = $60;
  $61 = $31;
  ;HEAP32[$__t$i+0>>2]=HEAP32[$61+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$61+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$61+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$61+12>>2]|0;
  $62 = $32;
  $63 = $33;
  $29 = $63;
  $64 = $29;
  ;HEAP32[$62+0>>2]=HEAP32[$64+0>>2]|0;HEAP32[$62+4>>2]=HEAP32[$64+4>>2]|0;HEAP32[$62+8>>2]=HEAP32[$64+8>>2]|0;HEAP32[$62+12>>2]=HEAP32[$64+12>>2]|0;
  $65 = $33;
  $30 = $__t$i;
  $66 = $30;
  ;HEAP32[$65+0>>2]=HEAP32[$66+0>>2]|0;HEAP32[$65+4>>2]=HEAP32[$66+4>>2]|0;HEAP32[$65+8>>2]=HEAP32[$66+8>>2]|0;HEAP32[$65+12>>2]=HEAP32[$66+12>>2]|0;
  $__r = 1;
  $67 = $44;
  $68 = $42;
  $69 = $41;
  $18 = $67;
  $19 = $68;
  $20 = $69;
  $70 = $19;
  $71 = $20;
  $72 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($70,$71)|0);
  if ($72) {
   $73 = $41;
   $74 = $42;
   $16 = $73;
   $17 = $74;
   $75 = $16;
   $15 = $75;
   $76 = $15;
   ;HEAP32[$__t$i2+0>>2]=HEAP32[$76+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$76+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$76+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$76+12>>2]|0;
   $77 = $16;
   $78 = $17;
   $13 = $78;
   $79 = $13;
   ;HEAP32[$77+0>>2]=HEAP32[$79+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$79+4>>2]|0;HEAP32[$77+8>>2]=HEAP32[$79+8>>2]|0;HEAP32[$77+12>>2]=HEAP32[$79+12>>2]|0;
   $80 = $17;
   $14 = $__t$i2;
   $81 = $14;
   ;HEAP32[$80+0>>2]=HEAP32[$81+0>>2]|0;HEAP32[$80+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$80+8>>2]=HEAP32[$81+8>>2]|0;HEAP32[$80+12>>2]=HEAP32[$81+12>>2]|0;
   $__r = 2;
  }
  $82 = $__r;
  $40 = $82;
  $124 = $40;
  STACKTOP = sp;return ($124|0);
 }
 return (0)|0;
}
function __ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 24|0;
 $__t$i1 = sp + 80|0;
 $__t$i = sp + 8|0;
 $24 = $__x1;
 $25 = $__x2;
 $26 = $__x3;
 $27 = $__x4;
 $28 = $__c;
 $29 = $24;
 $30 = $25;
 $31 = $26;
 $32 = $28;
 $33 = (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($29,$30,$31,$32)|0);
 $__r = $33;
 $34 = $28;
 $35 = $27;
 $36 = $26;
 $21 = $34;
 $22 = $35;
 $23 = $36;
 $37 = $22;
 $38 = $23;
 $39 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($37,$38)|0);
 if (!($39)) {
  $85 = $__r;
  STACKTOP = sp;return ($85|0);
 }
 $40 = $26;
 $41 = $27;
 $19 = $40;
 $20 = $41;
 $42 = $19;
 $18 = $42;
 $43 = $18;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$43+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$43+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$43+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$43+12>>2]|0;
 $44 = $19;
 $45 = $20;
 $16 = $45;
 $46 = $16;
 ;HEAP32[$44+0>>2]=HEAP32[$46+0>>2]|0;HEAP32[$44+4>>2]=HEAP32[$46+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$46+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$46+12>>2]|0;
 $47 = $20;
 $17 = $__t$i;
 $48 = $17;
 ;HEAP32[$47+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$48+12>>2]|0;
 $49 = $__r;
 $50 = (($49) + 1)|0;
 $__r = $50;
 $51 = $28;
 $52 = $26;
 $53 = $25;
 $5 = $51;
 $6 = $52;
 $7 = $53;
 $54 = $6;
 $55 = $7;
 $56 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($54,$55)|0);
 if ($56) {
  $57 = $25;
  $58 = $26;
  $3 = $57;
  $4 = $58;
  $59 = $3;
  $2 = $59;
  $60 = $2;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$60+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$60+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$60+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$60+12>>2]|0;
  $61 = $3;
  $62 = $4;
  $0 = $62;
  $63 = $0;
  ;HEAP32[$61+0>>2]=HEAP32[$63+0>>2]|0;HEAP32[$61+4>>2]=HEAP32[$63+4>>2]|0;HEAP32[$61+8>>2]=HEAP32[$63+8>>2]|0;HEAP32[$61+12>>2]=HEAP32[$63+12>>2]|0;
  $64 = $4;
  $1 = $__t$i2;
  $65 = $1;
  ;HEAP32[$64+0>>2]=HEAP32[$65+0>>2]|0;HEAP32[$64+4>>2]=HEAP32[$65+4>>2]|0;HEAP32[$64+8>>2]=HEAP32[$65+8>>2]|0;HEAP32[$64+12>>2]=HEAP32[$65+12>>2]|0;
  $66 = $__r;
  $67 = (($66) + 1)|0;
  $__r = $67;
  $68 = $28;
  $69 = $25;
  $70 = $24;
  $8 = $68;
  $9 = $69;
  $10 = $70;
  $71 = $9;
  $72 = $10;
  $73 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($71,$72)|0);
  if ($73) {
   $74 = $24;
   $75 = $25;
   $14 = $74;
   $15 = $75;
   $76 = $14;
   $13 = $76;
   $77 = $13;
   ;HEAP32[$__t$i1+0>>2]=HEAP32[$77+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$77+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$77+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$77+12>>2]|0;
   $78 = $14;
   $79 = $15;
   $11 = $79;
   $80 = $11;
   ;HEAP32[$78+0>>2]=HEAP32[$80+0>>2]|0;HEAP32[$78+4>>2]=HEAP32[$80+4>>2]|0;HEAP32[$78+8>>2]=HEAP32[$80+8>>2]|0;HEAP32[$78+12>>2]=HEAP32[$80+12>>2]|0;
   $81 = $15;
   $12 = $__t$i1;
   $82 = $12;
   ;HEAP32[$81+0>>2]=HEAP32[$82+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$82+4>>2]|0;HEAP32[$81+8>>2]=HEAP32[$82+8>>2]|0;HEAP32[$81+12>>2]=HEAP32[$82+12>>2]|0;
   $83 = $__r;
   $84 = (($83) + 1)|0;
   $__r = $84;
  }
 }
 $85 = $__r;
 STACKTOP = sp;return ($85|0);
}
function __ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($__x1,$__x2,$__x3,$__x4,$__x5,$__c) {
 $__x1 = $__x1|0;
 $__x2 = $__x2|0;
 $__x3 = $__x3|0;
 $__x4 = $__x4|0;
 $__x5 = $__x5|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, $__t$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i3 = sp + 16|0;
 $__t$i2 = sp + 56|0;
 $__t$i1 = sp + 112|0;
 $__t$i = sp + 144|0;
 $32 = $__x1;
 $33 = $__x2;
 $34 = $__x3;
 $35 = $__x4;
 $36 = $__x5;
 $37 = $__c;
 $38 = $32;
 $39 = $33;
 $40 = $34;
 $41 = $35;
 $42 = $37;
 $43 = (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($38,$39,$40,$41,$42)|0);
 $__r = $43;
 $44 = $37;
 $45 = $36;
 $46 = $35;
 $29 = $44;
 $30 = $45;
 $31 = $46;
 $47 = $30;
 $48 = $31;
 $49 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($47,$48)|0);
 if (!($49)) {
  $112 = $__r;
  STACKTOP = sp;return ($112|0);
 }
 $50 = $35;
 $51 = $36;
 $27 = $50;
 $28 = $51;
 $52 = $27;
 $26 = $52;
 $53 = $26;
 ;HEAP32[$__t$i+0>>2]=HEAP32[$53+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$53+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$53+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$53+12>>2]|0;
 $54 = $27;
 $55 = $28;
 $24 = $55;
 $56 = $24;
 ;HEAP32[$54+0>>2]=HEAP32[$56+0>>2]|0;HEAP32[$54+4>>2]=HEAP32[$56+4>>2]|0;HEAP32[$54+8>>2]=HEAP32[$56+8>>2]|0;HEAP32[$54+12>>2]=HEAP32[$56+12>>2]|0;
 $57 = $28;
 $25 = $__t$i;
 $58 = $25;
 ;HEAP32[$57+0>>2]=HEAP32[$58+0>>2]|0;HEAP32[$57+4>>2]=HEAP32[$58+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$58+8>>2]|0;HEAP32[$57+12>>2]=HEAP32[$58+12>>2]|0;
 $59 = $__r;
 $60 = (($59) + 1)|0;
 $__r = $60;
 $61 = $37;
 $62 = $35;
 $63 = $34;
 $13 = $61;
 $14 = $62;
 $15 = $63;
 $64 = $14;
 $65 = $15;
 $66 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($64,$65)|0);
 if ($66) {
  $67 = $34;
  $68 = $35;
  $11 = $67;
  $12 = $68;
  $69 = $11;
  $10 = $69;
  $70 = $10;
  ;HEAP32[$__t$i2+0>>2]=HEAP32[$70+0>>2]|0;HEAP32[$__t$i2+4>>2]=HEAP32[$70+4>>2]|0;HEAP32[$__t$i2+8>>2]=HEAP32[$70+8>>2]|0;HEAP32[$__t$i2+12>>2]=HEAP32[$70+12>>2]|0;
  $71 = $11;
  $72 = $12;
  $8 = $72;
  $73 = $8;
  ;HEAP32[$71+0>>2]=HEAP32[$73+0>>2]|0;HEAP32[$71+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$71+8>>2]=HEAP32[$73+8>>2]|0;HEAP32[$71+12>>2]=HEAP32[$73+12>>2]|0;
  $74 = $12;
  $9 = $__t$i2;
  $75 = $9;
  ;HEAP32[$74+0>>2]=HEAP32[$75+0>>2]|0;HEAP32[$74+4>>2]=HEAP32[$75+4>>2]|0;HEAP32[$74+8>>2]=HEAP32[$75+8>>2]|0;HEAP32[$74+12>>2]=HEAP32[$75+12>>2]|0;
  $76 = $__r;
  $77 = (($76) + 1)|0;
  $__r = $77;
  $78 = $37;
  $79 = $34;
  $80 = $33;
  $0 = $78;
  $1 = $79;
  $2 = $80;
  $81 = $1;
  $82 = $2;
  $83 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($81,$82)|0);
  if ($83) {
   $84 = $33;
   $85 = $34;
   $6 = $84;
   $7 = $85;
   $86 = $6;
   $5 = $86;
   $87 = $5;
   ;HEAP32[$__t$i3+0>>2]=HEAP32[$87+0>>2]|0;HEAP32[$__t$i3+4>>2]=HEAP32[$87+4>>2]|0;HEAP32[$__t$i3+8>>2]=HEAP32[$87+8>>2]|0;HEAP32[$__t$i3+12>>2]=HEAP32[$87+12>>2]|0;
   $88 = $6;
   $89 = $7;
   $3 = $89;
   $90 = $3;
   ;HEAP32[$88+0>>2]=HEAP32[$90+0>>2]|0;HEAP32[$88+4>>2]=HEAP32[$90+4>>2]|0;HEAP32[$88+8>>2]=HEAP32[$90+8>>2]|0;HEAP32[$88+12>>2]=HEAP32[$90+12>>2]|0;
   $91 = $7;
   $4 = $__t$i3;
   $92 = $4;
   ;HEAP32[$91+0>>2]=HEAP32[$92+0>>2]|0;HEAP32[$91+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$91+8>>2]=HEAP32[$92+8>>2]|0;HEAP32[$91+12>>2]=HEAP32[$92+12>>2]|0;
   $93 = $__r;
   $94 = (($93) + 1)|0;
   $__r = $94;
   $95 = $37;
   $96 = $33;
   $97 = $32;
   $16 = $95;
   $17 = $96;
   $18 = $97;
   $98 = $17;
   $99 = $18;
   $100 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($98,$99)|0);
   if ($100) {
    $101 = $32;
    $102 = $33;
    $22 = $101;
    $23 = $102;
    $103 = $22;
    $21 = $103;
    $104 = $21;
    ;HEAP32[$__t$i1+0>>2]=HEAP32[$104+0>>2]|0;HEAP32[$__t$i1+4>>2]=HEAP32[$104+4>>2]|0;HEAP32[$__t$i1+8>>2]=HEAP32[$104+8>>2]|0;HEAP32[$__t$i1+12>>2]=HEAP32[$104+12>>2]|0;
    $105 = $22;
    $106 = $23;
    $19 = $106;
    $107 = $19;
    ;HEAP32[$105+0>>2]=HEAP32[$107+0>>2]|0;HEAP32[$105+4>>2]=HEAP32[$107+4>>2]|0;HEAP32[$105+8>>2]=HEAP32[$107+8>>2]|0;HEAP32[$105+12>>2]=HEAP32[$107+12>>2]|0;
    $108 = $23;
    $20 = $__t$i1;
    $109 = $20;
    ;HEAP32[$108+0>>2]=HEAP32[$109+0>>2]|0;HEAP32[$108+4>>2]=HEAP32[$109+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$109+8>>2]|0;HEAP32[$108+12>>2]=HEAP32[$109+12>>2]|0;
    $110 = $__r;
    $111 = (($110) + 1)|0;
    $__r = $111;
   }
  }
 }
 $112 = $__r;
 STACKTOP = sp;return ($112|0);
}
function __ZNSt3__118__insertion_sort_3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i = 0, $__j = 0, $__k = 0, $__t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t = sp + 40|0;
 $9 = $__first;
 $10 = $__last;
 $11 = $__comp;
 $12 = $9;
 $13 = (($12) + 32|0);
 $__j = $13;
 $14 = $9;
 $15 = $9;
 $16 = (($15) + 16|0);
 $17 = $__j;
 $18 = $11;
 (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($14,$16,$17,$18)|0);
 $19 = $__j;
 $20 = (($19) + 16|0);
 $__i = $20;
 while(1) {
  $21 = $__i;
  $22 = $10;
  $23 = ($21|0)!=($22|0);
  if (!($23)) {
   break;
  }
  $24 = $11;
  $25 = $__i;
  $26 = $__j;
  $6 = $24;
  $7 = $25;
  $8 = $26;
  $27 = $7;
  $28 = $8;
  $29 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($27,$28)|0);
  if ($29) {
   $30 = $__i;
   $5 = $30;
   $31 = $5;
   ;HEAP32[$__t+0>>2]=HEAP32[$31+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$31+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$31+8>>2]|0;HEAP32[$__t+12>>2]=HEAP32[$31+12>>2]|0;
   $32 = $__j;
   $__k = $32;
   $33 = $__i;
   $__j = $33;
   while(1) {
    $34 = $__j;
    $35 = $__k;
    $0 = $35;
    $36 = $0;
    ;HEAP32[$34+0>>2]=HEAP32[$36+0>>2]|0;HEAP32[$34+4>>2]=HEAP32[$36+4>>2]|0;HEAP32[$34+8>>2]=HEAP32[$36+8>>2]|0;HEAP32[$34+12>>2]=HEAP32[$36+12>>2]|0;
    $37 = $__k;
    $__j = $37;
    $38 = $__j;
    $39 = $9;
    $40 = ($38|0)!=($39|0);
    if ($40) {
     $41 = $11;
     $42 = $__k;
     $43 = (($42) + -16|0);
     $__k = $43;
     $1 = $41;
     $2 = $__t;
     $3 = $43;
     $44 = $2;
     $45 = $3;
     $46 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($44,$45)|0);
     $52 = $46;
    } else {
     $52 = 0;
    }
    if (!($52)) {
     break;
    }
   }
   $47 = $__j;
   $4 = $__t;
   $48 = $4;
   ;HEAP32[$47+0>>2]=HEAP32[$48+0>>2]|0;HEAP32[$47+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$47+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$47+12>>2]=HEAP32[$48+12>>2]|0;
  }
  $49 = $__i;
  $__j = $49;
  $50 = $__i;
  $51 = (($50) + 16|0);
  $__i = $51;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__127__insertion_sort_incompleteIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEbT0_SB_T_($__first,$__last,$__comp) {
 $__first = $__first|0;
 $__last = $__last|0;
 $__comp = $__comp|0;
 var $$expand_i1_val = 0, $$expand_i1_val10 = 0, $$expand_i1_val12 = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$expand_i1_val8 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__count = 0, $__i = 0, $__j = 0, $__k = 0, $__limit = 0, $__t = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp + 120|0;
 $__t = sp + 40|0;
 $18 = $__first;
 $19 = $__last;
 $20 = $__comp;
 $21 = $19;
 $22 = $18;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 switch ($26|0) {
 case 2:  {
  $27 = $20;
  $28 = $19;
  $29 = (($28) + -16|0);
  $19 = $29;
  $30 = $18;
  $14 = $27;
  $15 = $29;
  $16 = $30;
  $31 = $15;
  $32 = $16;
  $33 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($31,$32)|0);
  if ($33) {
   $34 = $18;
   $35 = $19;
   $12 = $34;
   $13 = $35;
   $36 = $12;
   $11 = $36;
   $37 = $11;
   ;HEAP32[$__t$i+0>>2]=HEAP32[$37+0>>2]|0;HEAP32[$__t$i+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$__t$i+8>>2]=HEAP32[$37+8>>2]|0;HEAP32[$__t$i+12>>2]=HEAP32[$37+12>>2]|0;
   $38 = $12;
   $39 = $13;
   $9 = $39;
   $40 = $9;
   ;HEAP32[$38+0>>2]=HEAP32[$40+0>>2]|0;HEAP32[$38+4>>2]=HEAP32[$40+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[$40+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[$40+12>>2]|0;
   $41 = $13;
   $10 = $__t$i;
   $42 = $10;
   ;HEAP32[$41+0>>2]=HEAP32[$42+0>>2]|0;HEAP32[$41+4>>2]=HEAP32[$42+4>>2]|0;HEAP32[$41+8>>2]=HEAP32[$42+8>>2]|0;HEAP32[$41+12>>2]=HEAP32[$42+12>>2]|0;
  }
  $$expand_i1_val2 = 1;
  $17 = $$expand_i1_val2;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 5:  {
  $57 = $18;
  $58 = $18;
  $59 = (($58) + 16|0);
  $60 = $18;
  $61 = (($60) + 32|0);
  $62 = $18;
  $63 = (($62) + 48|0);
  $64 = $19;
  $65 = (($64) + -16|0);
  $19 = $65;
  $66 = $20;
  (__ZNSt3__17__sort5IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_SB_T_($57,$59,$61,$63,$65,$66)|0);
  $$expand_i1_val8 = 1;
  $17 = $$expand_i1_val8;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 3:  {
  $43 = $18;
  $44 = $18;
  $45 = (($44) + 16|0);
  $46 = $19;
  $47 = (($46) + -16|0);
  $19 = $47;
  $48 = $20;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($43,$45,$47,$48)|0);
  $$expand_i1_val4 = 1;
  $17 = $$expand_i1_val4;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 1: case 0:  {
  $$expand_i1_val = 1;
  $17 = $$expand_i1_val;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 case 4:  {
  $49 = $18;
  $50 = $18;
  $51 = (($50) + 16|0);
  $52 = $18;
  $53 = (($52) + 32|0);
  $54 = $19;
  $55 = (($54) + -16|0);
  $19 = $55;
  $56 = $20;
  (__ZNSt3__17__sort4IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_SB_T_($49,$51,$53,$55,$56)|0);
  $$expand_i1_val6 = 1;
  $17 = $$expand_i1_val6;
  $$pre_trunc = $17;
  $114 = $$pre_trunc&1;
  STACKTOP = sp;return ($114|0);
  break;
 }
 default: {
  $67 = $18;
  $68 = (($67) + 32|0);
  $__j = $68;
  $69 = $18;
  $70 = $18;
  $71 = (($70) + 16|0);
  $72 = $__j;
  $73 = $20;
  (__ZNSt3__17__sort3IRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEjT0_SB_SB_T_($69,$71,$72,$73)|0);
  $__limit = 8;
  $__count = 0;
  $74 = $__j;
  $75 = (($74) + 16|0);
  $__i = $75;
  while(1) {
   $76 = $__i;
   $77 = $19;
   $78 = ($76|0)!=($77|0);
   if (!($78)) {
    label = 22;
    break;
   }
   $79 = $20;
   $80 = $__i;
   $81 = $__j;
   $2 = $79;
   $3 = $80;
   $4 = $81;
   $82 = $3;
   $83 = $4;
   $84 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($82,$83)|0);
   if ($84) {
    $85 = $__i;
    $1 = $85;
    $86 = $1;
    ;HEAP32[$__t+0>>2]=HEAP32[$86+0>>2]|0;HEAP32[$__t+4>>2]=HEAP32[$86+4>>2]|0;HEAP32[$__t+8>>2]=HEAP32[$86+8>>2]|0;HEAP32[$__t+12>>2]=HEAP32[$86+12>>2]|0;
    $87 = $__j;
    $__k = $87;
    $88 = $__i;
    $__j = $88;
    while(1) {
     $89 = $__j;
     $90 = $__k;
     $0 = $90;
     $91 = $0;
     ;HEAP32[$89+0>>2]=HEAP32[$91+0>>2]|0;HEAP32[$89+4>>2]=HEAP32[$91+4>>2]|0;HEAP32[$89+8>>2]=HEAP32[$91+8>>2]|0;HEAP32[$89+12>>2]=HEAP32[$91+12>>2]|0;
     $92 = $__k;
     $__j = $92;
     $93 = $__j;
     $94 = $18;
     $95 = ($93|0)!=($94|0);
     if ($95) {
      $96 = $20;
      $97 = $__k;
      $98 = (($97) + -16|0);
      $__k = $98;
      $5 = $96;
      $6 = $__t;
      $7 = $98;
      $99 = $6;
      $100 = $7;
      $101 = (__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($99,$100)|0);
      $115 = $101;
     } else {
      $115 = 0;
     }
     if (!($115)) {
      break;
     }
    }
    $102 = $__j;
    $8 = $__t;
    $103 = $8;
    ;HEAP32[$102+0>>2]=HEAP32[$103+0>>2]|0;HEAP32[$102+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$102+8>>2]=HEAP32[$103+8>>2]|0;HEAP32[$102+12>>2]=HEAP32[$103+12>>2]|0;
    $104 = $__count;
    $105 = (($104) + 1)|0;
    $__count = $105;
    $106 = ($105|0)==(8);
    if ($106) {
     label = 18;
     break;
    }
   }
   $111 = $__i;
   $__j = $111;
   $112 = $__i;
   $113 = (($112) + 16|0);
   $__i = $113;
  }
  if ((label|0) == 18) {
   $107 = $__i;
   $108 = (($107) + 16|0);
   $__i = $108;
   $109 = $19;
   $110 = ($108|0)==($109|0);
   $$expand_i1_val10 = $110&1;
   $17 = $$expand_i1_val10;
   $$pre_trunc = $17;
   $114 = $$pre_trunc&1;
   STACKTOP = sp;return ($114|0);
  }
  else if ((label|0) == 22) {
   $$expand_i1_val12 = 1;
   $17 = $$expand_i1_val12;
   $$pre_trunc = $17;
   $114 = $$pre_trunc&1;
   STACKTOP = sp;return ($114|0);
  }
 }
 }
 return (0)|0;
}
function __ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeltERKS4_($this,$pe) {
 $this = $this|0;
 $pe = $pe|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $pe;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = HEAP32[$5>>2]|0;
 $7 = ($4>>>0)<($6>>>0);
 do {
  if ($7) {
   $$expand_i1_val = 1;
   $0 = $$expand_i1_val;
  } else {
   $8 = HEAP32[$3>>2]|0;
   $9 = $2;
   $10 = HEAP32[$9>>2]|0;
   $11 = ($8>>>0)>($10>>>0);
   if ($11) {
    $$expand_i1_val2 = 0;
    $0 = $$expand_i1_val2;
    break;
   } else {
    $12 = (($3) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $2;
    $15 = (($14) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($13>>>0)<($16>>>0);
    $$expand_i1_val4 = $17&1;
    $0 = $$expand_i1_val4;
    break;
   }
  }
 } while(0);
 $$pre_trunc = $0;
 $18 = $$pre_trunc&1;
 STACKTOP = sp;return ($18|0);
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE7reserveEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp + 28|0;
 $9 = $this;
 $10 = $__n;
 $13 = $9;
 $14 = $10;
 $8 = $13;
 $15 = $8;
 $7 = $15;
 $16 = $7;
 $6 = $16;
 $17 = $6;
 $18 = (($17) + 8|0);
 $5 = $18;
 $19 = $5;
 $4 = $19;
 $20 = $4;
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$16>>2]|0;
 $23 = $21;
 $24 = $22;
 $25 = (($23) - ($24))|0;
 $26 = (($25|0) / 16)&-1;
 $27 = ($14>>>0)>($26>>>0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $3 = $13;
 $28 = $3;
 $29 = (($28) + 8|0);
 $2 = $29;
 $30 = $2;
 $1 = $30;
 $31 = $1;
 $__a = $31;
 $32 = $10;
 $0 = $13;
 $33 = $0;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = HEAP32[$33>>2]|0;
 $37 = $35;
 $38 = $36;
 $39 = (($37) - ($38))|0;
 $40 = (($39|0) / 16)&-1;
 $41 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC2EjjS9_($__v,$32,$40,$41);
 __THREW__ = 0;
 invoke_vii(500,($13|0),($__v|0));
 $42 = __THREW__; __THREW__ = 0;
 $43 = $42&1;
 if (!($43)) {
  __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $44 = ___cxa_find_matching_catch()|0;
 $45 = tempRet0;
 $11 = $44;
 $12 = $45;
 __THREW__ = 0;
 invoke_vi(501,($__v|0));
 $46 = __THREW__; __THREW__ = 0;
 $47 = $46&1;
 if ($47) {
  $50 = ___cxa_find_matching_catch(0|0)|0;
  $51 = tempRet0;
  ___clang_call_terminate($50);
  // unreachable;
 }
 $48 = $11;
 $49 = $12;
 ___resumeException($48|0);
 // unreachable;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeC2EP6MyFacei($this,$pf,$nz) {
 $this = $this|0;
 $pf = $pf|0;
 $nz = $nz|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $pf;
 $2 = $nz;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdge3SetEP6MyFacei($3,$4,$5);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri14UpdateTopologyI6MyMeshE5PEdge3SetEP6MyFacei($this,$pf,$nz) {
 $this = $this|0;
 $pf = $pf|0;
 $nz = $nz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i = sp;
 $7 = sp + 20|0;
 $5 = $this;
 $6 = $pf;
 HEAP32[$7>>2] = $nz;
 $8 = $5;
 $9 = $6;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  ___assert_fail((4552|0),(4368|0),75,(4560|0));
  // unreachable;
 }
 $11 = HEAP32[$7>>2]|0;
 $12 = ($11|0)>=(0);
 if (!($12)) {
  ___assert_fail((4568|0),(4368|0),76,(4560|0));
  // unreachable;
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = $6;
 $15 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv($14)|0);
 $16 = ($13|0)<($15|0);
 if (!($16)) {
  ___assert_fail((4576|0),(4368|0),77,(4560|0));
  // unreachable;
 }
 $17 = $6;
 $18 = HEAP32[$7>>2]|0;
 $19 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($17,$18)|0);
 $20 = HEAP32[$19>>2]|0;
 HEAP32[$8>>2] = $20;
 $21 = $6;
 $22 = $6;
 $23 = (__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE4NextERKi($22,$7)|0);
 $24 = (__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi($21,$23)|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = (($8) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = HEAP32[$8>>2]|0;
 $28 = (($8) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($27|0)!=($29|0);
 if (!($30)) {
  ___assert_fail((4592|0),(4368|0),81,(4560|0));
  // unreachable;
 }
 $31 = HEAP32[$8>>2]|0;
 $32 = (($8) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($31>>>0)>($33>>>0);
 if (!($34)) {
  $46 = $6;
  $47 = (($8) + 8|0);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[$7>>2]|0;
  $49 = (($8) + 12|0);
  HEAP32[$49>>2] = $48;
  STACKTOP = sp;return;
 }
 $35 = (($8) + 4|0);
 $3 = $8;
 $4 = $35;
 $36 = $3;
 $2 = $36;
 $37 = $2;
 $38 = HEAP32[$37>>2]|0;
 HEAP32[$__t$i>>2] = $38;
 $39 = $4;
 $0 = $39;
 $40 = $0;
 $41 = HEAP32[$40>>2]|0;
 $42 = $3;
 HEAP32[$42>>2] = $41;
 $1 = $__t$i;
 $43 = $1;
 $44 = HEAP32[$43>>2]|0;
 $45 = $4;
 HEAP32[$45>>2] = $44;
 $46 = $6;
 $47 = (($8) + 8|0);
 HEAP32[$47>>2] = $46;
 $48 = HEAP32[$7>>2]|0;
 $49 = (($8) + 12|0);
 HEAP32[$49>>2] = $48;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotatorC2ERKS9_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 68|0;
 $23 = sp + 16|0;
 $__v = sp + 72|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 16)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 16)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 16)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC2EjjS9_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if (!($100)) {
  $101 = $2;
  ;HEAP32[$99+0>>2]=HEAP32[$101+0>>2]|0;HEAP32[$99+4>>2]=HEAP32[$101+4>>2]|0;HEAP32[$99+8>>2]=HEAP32[$101+8>>2]|0;HEAP32[$99+12>>2]=HEAP32[$101+12>>2]|0;
 }
 $102 = (($__v) + 8|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = (($103) + 16|0);
 HEAP32[$102>>2] = $104;
 __THREW__ = 0;
 invoke_vii(500,($32|0),($__v|0));
 $105 = __THREW__; __THREW__ = 0;
 $106 = $105&1;
 if (!($106)) {
  __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev($__v);
  STACKTOP = sp;return;
 }
 $107 = ___cxa_find_matching_catch()|0;
 $108 = tempRet0;
 $30 = $107;
 $31 = $108;
 __THREW__ = 0;
 invoke_vi(501,($__v|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $113 = ___cxa_find_matching_catch(0|0)|0;
  $114 = tempRet0;
  ___clang_call_terminate($113);
  // unreachable;
 }
 $111 = $30;
 $112 = $31;
 ___resumeException($111|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = $63<<4;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + ($71<<4)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + ($76<<4)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 48|0;
 $__t$i1 = sp + 28|0;
 $__t$i = sp + 72|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = (($33) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = (($32) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = (($40) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $47 = (($46|0) / 16)&-1;
 $_Np$i = $47;
 $48 = $_Np$i;
 $49 = $25;
 $50 = HEAP32[$49>>2]|0;
 $51 = (0 - ($48))|0;
 $52 = (($50) + ($51<<4)|0);
 HEAP32[$49>>2] = $52;
 $53 = $25;
 $54 = HEAP32[$53>>2]|0;
 $55 = $23;
 $56 = $_Np$i;
 $57 = $56<<4;
 _memcpy(($54|0),($55|0),($57|0))|0;
 $58 = $31;
 $59 = (($58) + 4|0);
 $3 = $32;
 $4 = $59;
 $60 = $3;
 $2 = $60;
 $61 = $2;
 $62 = HEAP32[$61>>2]|0;
 HEAP32[$__t$i2>>2] = $62;
 $63 = $4;
 $0 = $63;
 $64 = $0;
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 HEAP32[$66>>2] = $65;
 $1 = $__t$i2;
 $67 = $1;
 $68 = HEAP32[$67>>2]|0;
 $69 = $4;
 HEAP32[$69>>2] = $68;
 $70 = (($32) + 4|0);
 $71 = $31;
 $72 = (($71) + 8|0);
 $8 = $70;
 $9 = $72;
 $73 = $8;
 $7 = $73;
 $74 = $7;
 $75 = HEAP32[$74>>2]|0;
 HEAP32[$__t$i1>>2] = $75;
 $76 = $9;
 $5 = $76;
 $77 = $5;
 $78 = HEAP32[$77>>2]|0;
 $79 = $8;
 HEAP32[$79>>2] = $78;
 $6 = $__t$i1;
 $80 = $6;
 $81 = HEAP32[$80>>2]|0;
 $82 = $9;
 HEAP32[$82>>2] = $81;
 $12 = $32;
 $83 = $12;
 $84 = (($83) + 8|0);
 $11 = $84;
 $85 = $11;
 $10 = $85;
 $86 = $10;
 $87 = $31;
 $15 = $87;
 $88 = $15;
 $89 = (($88) + 12|0);
 $14 = $89;
 $90 = $14;
 $13 = $90;
 $91 = $13;
 $19 = $86;
 $20 = $91;
 $92 = $19;
 $18 = $92;
 $93 = $18;
 $94 = HEAP32[$93>>2]|0;
 HEAP32[$__t$i>>2] = $94;
 $95 = $20;
 $16 = $95;
 $96 = $16;
 $97 = HEAP32[$96>>2]|0;
 $98 = $19;
 HEAP32[$98>>2] = $97;
 $17 = $__t$i;
 $99 = $17;
 $100 = HEAP32[$99>>2]|0;
 $101 = $20;
 HEAP32[$101>>2] = $100;
 $102 = $31;
 $103 = (($102) + 4|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $31;
 HEAP32[$105>>2] = $104;
 $21 = $32;
 $106 = $21;
 $107 = (($106) + 4|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = HEAP32[$106>>2]|0;
 $110 = $108;
 $111 = $109;
 $112 = (($110) - ($111))|0;
 $113 = (($112|0) / 16)&-1;
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE14__annotate_newEj($32,$113);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 124|0;
 $26 = sp + 8|0;
 $29 = sp + 125|0;
 $31 = $this;
 $32 = $31;
 $30 = $32;
 $33 = $30;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $27 = $33;
 $28 = $35;
 $36 = $27;
 $37 = $28;
 ;HEAP8[$26+0>>0]=HEAP8[$29+0>>0]|0;
 $24 = $36;
 $25 = $37;
 $38 = $24;
 while(1) {
  $39 = $25;
  $40 = (($38) + 8|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($39|0)!=($41|0);
  if (!($42)) {
   break;
  }
  $23 = $38;
  $43 = $23;
  $44 = (($43) + 12|0);
  $22 = $44;
  $45 = $22;
  $21 = $45;
  $46 = $21;
  $47 = (($46) + 4|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($38) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -16|0);
  HEAP32[$49>>2] = $51;
  $14 = $51;
  $52 = $14;
  $18 = $48;
  $19 = $52;
  $53 = $18;
  $54 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $53;
  $16 = $54;
 }
 $55 = HEAP32[$32>>2]|0;
 $56 = ($55|0)!=(0|0);
 if (!($56)) {
  STACKTOP = sp;return;
 }
 $6 = $32;
 $57 = $6;
 $58 = (($57) + 12|0);
 $5 = $58;
 $59 = $5;
 $4 = $59;
 $60 = $4;
 $61 = (($60) + 4|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$32>>2]|0;
 $3 = $32;
 $64 = $3;
 $2 = $64;
 $65 = $2;
 $66 = (($65) + 12|0);
 $1 = $66;
 $67 = $1;
 $0 = $67;
 $68 = $0;
 $69 = HEAP32[$68>>2]|0;
 $70 = HEAP32[$64>>2]|0;
 $71 = $69;
 $72 = $70;
 $73 = (($71) - ($72))|0;
 $74 = (($73|0) / 16)&-1;
 $11 = $62;
 $12 = $63;
 $13 = $74;
 $75 = $11;
 $76 = $12;
 $77 = $13;
 $8 = $75;
 $9 = $76;
 $10 = $77;
 $78 = $9;
 $7 = $78;
 $79 = $7;
 __ZdlPv($79);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 16)&-1;
 $51 = (($42) + ($50<<4)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 16)&-1;
 $67 = (($54) + ($66<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 16)&-1;
 $39 = (($26) + ($38<<4)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 16)&-1;
 $55 = (($42) + ($54<<4)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + ($59<<4)|0);
 __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE31__annotate_contiguous_containerEPKvSB_SB_SB_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 268435455;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE10OpenStreamERS3_RNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERiPFbiPKcE($mesh,$stream,$loadmask,$cb) {
 $mesh = $mesh|0;
 $stream = $stream|0;
 $loadmask = $loadmask|0;
 $cb = $cb|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0;
 var $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0;
 var $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0;
 var $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0;
 var $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0;
 var $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0;
 var $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0;
 var $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0;
 var $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0;
 var $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0;
 var $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0, $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0;
 var $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0, $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0;
 var $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0, $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0;
 var $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0, $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0;
 var $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0, $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0;
 var $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0, $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0;
 var $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0, $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0;
 var $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0, $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0;
 var $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0, $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0;
 var $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0, $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0;
 var $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0, $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0;
 var $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0, $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0;
 var $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0, $14 = 0, $140 = 0, $1400 = 0, $1401 = 0;
 var $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0, $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0;
 var $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0, $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0;
 var $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0, $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0;
 var $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0, $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0;
 var $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0, $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0;
 var $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0, $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0;
 var $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0, $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0;
 var $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0, $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0;
 var $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0, $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0;
 var $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0, $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0;
 var $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0, $1598 = 0, $1599 = 0, $16 = 0, $160 = 0;
 var $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0, $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0;
 var $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0, $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0;
 var $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0, $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0;
 var $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0, $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0;
 var $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0, $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0;
 var $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0, $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0;
 var $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0, $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0;
 var $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0, $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0;
 var $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0, $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0;
 var $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0, $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0;
 var $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0, $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0;
 var $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0, $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0;
 var $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0, $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0;
 var $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0, $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0;
 var $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0, $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0;
 var $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0, $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0;
 var $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0.0, $1903 = 0, $1904 = 0, $1905 = 0.0, $1906 = 0;
 var $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0, $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0;
 var $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0, $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0;
 var $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0, $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0;
 var $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0.0, $1974 = 0, $1975 = 0, $1976 = 0.0, $1977 = 0, $1978 = 0, $1979 = 0;
 var $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0, $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0;
 var $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0, $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0;
 var $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0, $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0;
 var $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0, $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0;
 var $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0, $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0;
 var $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0, $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0;
 var $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0, $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0;
 var $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0, $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0;
 var $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0, $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0;
 var $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0, $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0;
 var $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0, $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0;
 var $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0, $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0;
 var $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0, $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0;
 var $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0, $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0;
 var $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0, $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0;
 var $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0, $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0;
 var $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0, $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0;
 var $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0.0, $2299 = 0, $23 = 0, $230 = 0, $2300 = 0, $2301 = 0.0;
 var $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0, $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0;
 var $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0.0, $2332 = 0, $2333 = 0, $2334 = 0.0, $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0;
 var $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0, $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0;
 var $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0.0, $2365 = 0, $2366 = 0, $2367 = 0.0, $2368 = 0.0, $2369 = 0.0, $237 = 0, $2370 = 0.0, $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0;
 var $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0, $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0;
 var $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0, $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0;
 var $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0, $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0;
 var $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0, $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0;
 var $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0, $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0;
 var $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0, $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0;
 var $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0, $2498 = 0, $2499 = 0, $25 = 0, $250 = 0;
 var $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0, $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0;
 var $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0, $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0;
 var $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0, $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0;
 var $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0, $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0;
 var $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0, $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0;
 var $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0, $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0;
 var $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0, $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0;
 var $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0, $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0;
 var $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0.0, $2651 = 0, $2652 = 0, $2653 = 0.0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0, $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0;
 var $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0, $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0;
 var $2681 = 0, $2682 = 0, $2683 = 0.0, $2684 = 0, $2685 = 0, $2686 = 0.0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0, $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0;
 var $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0, $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0.0;
 var $2717 = 0, $2718 = 0, $2719 = 0.0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0, $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0;
 var $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0.0, $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0.0;
 var $2753 = 0.0, $2754 = 0.0, $2755 = 0.0, $2756 = 0.0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0, $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0;
 var $2771 = 0, $2772 = 0, $2773 = 0, $2774 = 0, $2775 = 0, $2776 = 0, $2777 = 0, $2778 = 0, $2779 = 0, $278 = 0, $2780 = 0, $2781 = 0, $2782 = 0, $2783 = 0, $2784 = 0, $2785 = 0, $2786 = 0, $2787 = 0, $2788 = 0, $2789 = 0;
 var $279 = 0, $2790 = 0, $2791 = 0, $2792 = 0, $2793 = 0, $2794 = 0, $2795 = 0, $2796 = 0, $2797 = 0, $2798 = 0, $2799 = 0, $28 = 0, $280 = 0, $2800 = 0, $2801 = 0, $2802 = 0, $2803 = 0, $2804 = 0, $2805 = 0, $2806 = 0;
 var $2807 = 0, $2808 = 0, $2809 = 0, $281 = 0, $2810 = 0, $2811 = 0, $2812 = 0, $2813 = 0, $2814 = 0, $2815 = 0, $2816 = 0, $2817 = 0, $2818 = 0, $2819 = 0, $282 = 0, $2820 = 0, $2821 = 0, $2822 = 0, $2823 = 0, $2824 = 0;
 var $2825 = 0, $2826 = 0, $2827 = 0, $2828 = 0, $2829 = 0, $283 = 0, $2830 = 0, $2831 = 0, $2832 = 0, $2833 = 0, $2834 = 0, $2835 = 0, $2836 = 0, $2837 = 0, $2838 = 0, $2839 = 0, $284 = 0, $2840 = 0, $2841 = 0, $2842 = 0;
 var $2843 = 0, $2844 = 0, $2845 = 0, $2846 = 0, $2847 = 0, $2848 = 0, $2849 = 0, $285 = 0, $2850 = 0, $2851 = 0, $2852 = 0, $2853 = 0, $2854 = 0, $2855 = 0, $2856 = 0, $2857 = 0, $2858 = 0, $2859 = 0, $286 = 0, $2860 = 0;
 var $2861 = 0, $2862 = 0, $2863 = 0, $2864 = 0, $2865 = 0, $2866 = 0, $2867 = 0, $2868 = 0, $2869 = 0, $287 = 0, $2870 = 0, $2871 = 0, $2872 = 0, $2873 = 0, $2874 = 0, $2875 = 0, $2876 = 0, $2877 = 0, $2878 = 0, $2879 = 0;
 var $288 = 0, $2880 = 0, $2881 = 0, $2882 = 0, $2883 = 0, $2884 = 0, $2885 = 0, $2886 = 0, $2887 = 0, $2888 = 0, $2889 = 0, $289 = 0, $2890 = 0, $2891 = 0, $2892 = 0, $2893 = 0, $2894 = 0, $2895 = 0, $2896 = 0, $2897 = 0;
 var $2898 = 0, $2899 = 0, $29 = 0, $290 = 0, $2900 = 0, $2901 = 0, $2902 = 0, $2903 = 0, $2904 = 0, $2905 = 0, $2906 = 0, $2907 = 0, $2908 = 0, $2909 = 0, $291 = 0, $2910 = 0, $2911 = 0, $2912 = 0, $2913 = 0, $2914 = 0;
 var $2915 = 0, $2916 = 0, $2917 = 0, $2918 = 0, $2919 = 0, $292 = 0, $2920 = 0, $2921 = 0, $2922 = 0, $2923 = 0, $2924 = 0, $2925 = 0, $2926 = 0, $2927 = 0, $2928 = 0, $2929 = 0, $293 = 0, $2930 = 0, $2931 = 0, $2932 = 0;
 var $2933 = 0, $2934 = 0, $2935 = 0, $2936 = 0, $2937 = 0, $2938 = 0, $2939 = 0, $294 = 0, $2940 = 0, $2941 = 0, $2942 = 0, $2943 = 0, $2944 = 0, $2945 = 0, $2946 = 0, $2947 = 0, $2948 = 0, $2949 = 0, $295 = 0, $2950 = 0;
 var $2951 = 0, $2952 = 0, $2953 = 0, $2954 = 0, $2955 = 0, $2956 = 0, $2957 = 0, $2958 = 0, $2959 = 0, $296 = 0, $2960 = 0, $2961 = 0, $2962 = 0, $2963 = 0, $2964 = 0, $2965 = 0, $2966 = 0, $2967 = 0, $2968 = 0, $2969 = 0;
 var $297 = 0, $2970 = 0, $2971 = 0, $2972 = 0, $2973 = 0, $2974 = 0, $2975 = 0, $2976 = 0, $2977 = 0, $2978 = 0, $2979 = 0, $298 = 0, $2980 = 0, $2981 = 0, $2982 = 0, $2983 = 0, $2984 = 0, $2985 = 0, $2986 = 0, $2987 = 0;
 var $2988 = 0, $2989 = 0, $299 = 0, $2990 = 0, $2991 = 0, $2992 = 0, $2993 = 0, $2994 = 0, $2995 = 0, $2996 = 0, $2997 = 0, $2998 = 0, $2999 = 0, $3 = 0, $30 = 0, $300 = 0, $3000 = 0, $3001 = 0, $3002 = 0, $3003 = 0;
 var $3004 = 0, $3005 = 0, $3006 = 0, $3007 = 0, $3008 = 0, $3009 = 0, $301 = 0, $3010 = 0, $3011 = 0, $3012 = 0, $3013 = 0, $3014 = 0, $3015 = 0, $3016 = 0, $3017 = 0, $3018 = 0, $3019 = 0, $302 = 0, $3020 = 0, $3021 = 0;
 var $3022 = 0, $3023 = 0, $3024 = 0, $3025 = 0, $3026 = 0, $3027 = 0, $3028 = 0, $3029 = 0, $303 = 0, $3030 = 0, $3031 = 0, $3032 = 0, $3033 = 0, $3034 = 0, $3035 = 0, $3036 = 0, $3037 = 0, $3038 = 0, $3039 = 0, $304 = 0;
 var $3040 = 0, $3041 = 0, $3042 = 0, $3043 = 0, $3044 = 0, $3045 = 0, $3046 = 0, $3047 = 0, $3048 = 0, $3049 = 0, $305 = 0, $3050 = 0, $3051 = 0, $3052 = 0, $3053 = 0, $3054 = 0, $3055 = 0, $3056 = 0, $3057 = 0, $3058 = 0;
 var $3059 = 0, $306 = 0, $3060 = 0, $3061 = 0, $3062 = 0, $3063 = 0, $3064 = 0, $3065 = 0, $3066 = 0, $3067 = 0, $3068 = 0, $3069 = 0, $307 = 0, $3070 = 0, $3071 = 0, $3072 = 0, $3073 = 0, $3074 = 0, $3075 = 0, $3076 = 0;
 var $3077 = 0, $3078 = 0, $3079 = 0, $308 = 0, $3080 = 0, $3081 = 0, $3082 = 0, $3083 = 0, $3084 = 0, $3085 = 0, $3086 = 0, $3087 = 0, $3088 = 0, $3089 = 0, $309 = 0, $3090 = 0, $3091 = 0, $3092 = 0, $3093 = 0, $3094 = 0;
 var $3095 = 0, $3096 = 0, $3097 = 0, $3098 = 0, $3099 = 0, $31 = 0, $310 = 0, $3100 = 0, $3101 = 0, $3102 = 0, $3103 = 0, $3104 = 0, $3105 = 0, $3106 = 0, $3107 = 0, $3108 = 0, $3109 = 0, $311 = 0, $3110 = 0, $3111 = 0;
 var $3112 = 0, $3113 = 0, $3114 = 0, $3115 = 0, $3116 = 0, $3117 = 0, $3118 = 0, $3119 = 0, $312 = 0, $3120 = 0, $3121 = 0, $3122 = 0, $3123 = 0, $3124 = 0, $3125 = 0, $3126 = 0, $3127 = 0, $3128 = 0, $3129 = 0, $313 = 0;
 var $3130 = 0, $3131 = 0, $3132 = 0, $3133 = 0, $3134 = 0, $3135 = 0, $3136 = 0, $3137 = 0, $3138 = 0, $3139 = 0, $314 = 0, $3140 = 0, $3141 = 0, $3142 = 0, $3143 = 0, $3144 = 0, $3145 = 0, $3146 = 0, $3147 = 0, $3148 = 0;
 var $3149 = 0, $315 = 0, $3150 = 0, $3151 = 0, $3152 = 0, $3153 = 0, $3154 = 0, $3155 = 0, $3156 = 0, $3157 = 0, $3158 = 0, $3159 = 0, $316 = 0, $3160 = 0, $3161 = 0, $3162 = 0, $3163 = 0, $3164 = 0, $3165 = 0, $3166 = 0;
 var $3167 = 0, $3168 = 0, $3169 = 0, $317 = 0, $3170 = 0, $3171 = 0, $3172 = 0, $3173 = 0, $3174 = 0, $3175 = 0, $3176 = 0, $3177 = 0, $3178 = 0, $3179 = 0, $318 = 0, $3180 = 0, $3181 = 0, $3182 = 0, $3183 = 0, $3184 = 0;
 var $3185 = 0, $3186 = 0, $3187 = 0, $3188 = 0, $3189 = 0, $319 = 0, $3190 = 0, $3191 = 0, $3192 = 0, $3193 = 0, $3194 = 0, $3195 = 0, $3196 = 0, $3197 = 0, $3198 = 0, $3199 = 0, $32 = 0, $320 = 0, $3200 = 0, $3201 = 0;
 var $3202 = 0, $3203 = 0, $3204 = 0, $3205 = 0, $3206 = 0, $3207 = 0, $3208 = 0, $3209 = 0, $321 = 0, $3210 = 0, $3211 = 0, $3212 = 0, $3213 = 0, $3214 = 0, $3215 = 0, $3216 = 0, $3217 = 0, $3218 = 0, $3219 = 0, $322 = 0;
 var $3220 = 0, $3221 = 0, $3222 = 0, $3223 = 0, $3224 = 0, $3225 = 0, $3226 = 0, $3227 = 0, $3228 = 0, $3229 = 0, $323 = 0, $3230 = 0, $3231 = 0, $3232 = 0, $3233 = 0, $3234 = 0, $3235 = 0, $3236 = 0, $3237 = 0, $3238 = 0;
 var $3239 = 0, $324 = 0, $3240 = 0, $3241 = 0, $3242 = 0, $3243 = 0, $3244 = 0, $3245 = 0, $3246 = 0, $3247 = 0, $3248 = 0, $3249 = 0, $325 = 0, $3250 = 0, $3251 = 0, $3252 = 0, $3253 = 0, $3254 = 0, $3255 = 0, $3256 = 0;
 var $3257 = 0, $3258 = 0, $3259 = 0, $326 = 0, $3260 = 0, $3261 = 0, $3262 = 0, $3263 = 0, $3264 = 0, $3265 = 0, $3266 = 0, $3267 = 0, $3268 = 0, $3269 = 0, $327 = 0, $3270 = 0, $3271 = 0, $3272 = 0, $3273 = 0, $3274 = 0;
 var $3275 = 0, $3276 = 0, $3277 = 0, $3278 = 0, $3279 = 0, $328 = 0, $3280 = 0, $3281 = 0, $3282 = 0, $3283 = 0, $3284 = 0, $3285 = 0, $3286 = 0, $3287 = 0, $3288 = 0, $3289 = 0, $329 = 0, $3290 = 0, $3291 = 0, $3292 = 0;
 var $3293 = 0, $3294 = 0, $3295 = 0, $3296 = 0, $3297 = 0, $3298 = 0, $3299 = 0, $33 = 0, $330 = 0, $3300 = 0, $3301 = 0, $3302 = 0, $3303 = 0, $3304 = 0, $3305 = 0, $3306 = 0, $3307 = 0, $3308 = 0, $3309 = 0, $331 = 0;
 var $3310 = 0, $3311 = 0, $3312 = 0, $3313 = 0, $3314 = 0, $3315 = 0, $3316 = 0, $3317 = 0, $3318 = 0, $3319 = 0, $332 = 0, $3320 = 0, $3321 = 0, $3322 = 0, $3323 = 0, $3324 = 0, $3325 = 0, $3326 = 0, $3327 = 0, $3328 = 0;
 var $3329 = 0, $333 = 0, $3330 = 0, $3331 = 0, $3332 = 0, $3333 = 0, $3334 = 0, $3335 = 0, $3336 = 0, $3337 = 0, $3338 = 0, $3339 = 0, $334 = 0, $3340 = 0, $3341 = 0, $3342 = 0, $3343 = 0, $3344 = 0, $3345 = 0, $3346 = 0;
 var $3347 = 0, $3348 = 0, $3349 = 0, $335 = 0, $3350 = 0, $3351 = 0, $3352 = 0, $3353 = 0, $3354 = 0, $3355 = 0, $3356 = 0, $3357 = 0, $3358 = 0, $3359 = 0, $336 = 0, $3360 = 0, $3361 = 0, $3362 = 0, $3363 = 0, $3364 = 0;
 var $3365 = 0, $3366 = 0, $3367 = 0, $3368 = 0, $3369 = 0, $337 = 0, $3370 = 0, $3371 = 0, $3372 = 0, $3373 = 0, $3374 = 0, $3375 = 0, $3376 = 0, $3377 = 0, $3378 = 0, $3379 = 0, $338 = 0, $3380 = 0, $3381 = 0, $3382 = 0;
 var $3383 = 0, $3384 = 0, $3385 = 0, $3386 = 0, $3387 = 0, $3388 = 0, $3389 = 0, $339 = 0, $3390 = 0, $3391 = 0, $3392 = 0, $3393 = 0, $3394 = 0, $3395 = 0, $3396 = 0, $3397 = 0, $3398 = 0, $3399 = 0, $34 = 0, $340 = 0;
 var $3400 = 0, $3401 = 0, $3402 = 0, $3403 = 0, $3404 = 0, $3405 = 0, $3406 = 0, $3407 = 0, $3408 = 0, $3409 = 0, $341 = 0, $3410 = 0, $3411 = 0, $3412 = 0, $3413 = 0, $3414 = 0, $3415 = 0, $3416 = 0, $3417 = 0, $3418 = 0;
 var $3419 = 0, $342 = 0, $3420 = 0, $3421 = 0, $3422 = 0, $3423 = 0, $3424 = 0, $3425 = 0, $3426 = 0, $3427 = 0, $3428 = 0, $3429 = 0, $343 = 0, $3430 = 0, $3431 = 0, $3432 = 0, $3433 = 0, $3434 = 0, $3435 = 0, $3436 = 0;
 var $3437 = 0, $3438 = 0, $3439 = 0, $344 = 0, $3440 = 0, $3441 = 0, $3442 = 0, $3443 = 0, $3444 = 0, $3445 = 0, $3446 = 0, $3447 = 0, $3448 = 0, $3449 = 0, $345 = 0, $3450 = 0, $3451 = 0, $3452 = 0, $3453 = 0, $3454 = 0;
 var $3455 = 0, $3456 = 0, $3457 = 0, $3458 = 0, $3459 = 0, $346 = 0, $3460 = 0, $3461 = 0, $3462 = 0, $3463 = 0, $3464 = 0, $3465 = 0, $3466 = 0, $3467 = 0, $3468 = 0, $3469 = 0, $347 = 0, $3470 = 0, $3471 = 0, $3472 = 0;
 var $3473 = 0, $3474 = 0, $3475 = 0, $3476 = 0, $3477 = 0, $3478 = 0, $3479 = 0, $348 = 0, $3480 = 0, $3481 = 0, $3482 = 0, $3483 = 0, $3484 = 0, $3485 = 0, $3486 = 0, $3487 = 0, $3488 = 0, $3489 = 0, $349 = 0, $3490 = 0;
 var $3491 = 0, $3492 = 0, $3493 = 0, $3494 = 0, $3495 = 0, $3496 = 0, $3497 = 0, $3498 = 0, $3499 = 0, $35 = 0, $350 = 0, $3500 = 0, $3501 = 0, $3502 = 0, $3503 = 0, $3504 = 0, $3505 = 0, $3506 = 0, $3507 = 0, $3508 = 0;
 var $3509 = 0, $351 = 0, $3510 = 0, $3511 = 0, $3512 = 0, $3513 = 0, $3514 = 0, $3515 = 0, $3516 = 0, $3517 = 0, $3518 = 0, $3519 = 0, $352 = 0, $3520 = 0, $3521 = 0, $3522 = 0, $3523 = 0, $3524 = 0, $3525 = 0, $3526 = 0;
 var $3527 = 0, $3528 = 0, $3529 = 0, $353 = 0, $3530 = 0, $3531 = 0, $3532 = 0, $3533 = 0, $3534 = 0, $3535 = 0, $3536 = 0, $3537 = 0, $3538 = 0, $3539 = 0, $354 = 0, $3540 = 0, $3541 = 0, $3542 = 0, $3543 = 0, $3544 = 0;
 var $3545 = 0, $3546 = 0, $3547 = 0, $3548 = 0, $3549 = 0, $355 = 0, $3550 = 0, $3551 = 0, $3552 = 0, $3553 = 0, $3554 = 0, $3555 = 0, $3556 = 0, $3557 = 0, $3558 = 0, $3559 = 0, $356 = 0, $3560 = 0, $3561 = 0, $3562 = 0;
 var $3563 = 0, $3564 = 0, $3565 = 0, $3566 = 0, $3567 = 0, $3568 = 0, $3569 = 0, $357 = 0, $3570 = 0, $3571 = 0, $3572 = 0, $3573 = 0, $3574 = 0, $3575 = 0, $3576 = 0, $3577 = 0, $3578 = 0, $3579 = 0, $358 = 0, $3580 = 0;
 var $3581 = 0, $3582 = 0, $3583 = 0, $3584 = 0, $3585 = 0, $3586 = 0, $3587 = 0, $3588 = 0, $3589 = 0, $359 = 0, $3590 = 0, $3591 = 0, $3592 = 0, $3593 = 0, $3594 = 0, $3595 = 0, $3596 = 0, $3597 = 0, $3598 = 0, $3599 = 0;
 var $36 = 0, $360 = 0, $3600 = 0, $3601 = 0, $3602 = 0, $3603 = 0, $3604 = 0, $3605 = 0, $3606 = 0, $3607 = 0, $3608 = 0, $3609 = 0, $361 = 0, $3610 = 0, $3611 = 0, $3612 = 0, $3613 = 0, $3614 = 0, $3615 = 0, $3616 = 0;
 var $3617 = 0, $3618 = 0, $3619 = 0, $362 = 0, $3620 = 0, $3621 = 0, $3622 = 0, $3623 = 0, $3624 = 0, $3625 = 0, $3626 = 0, $3627 = 0, $3628 = 0, $3629 = 0, $363 = 0, $3630 = 0, $3631 = 0, $3632 = 0, $3633 = 0, $3634 = 0;
 var $3635 = 0, $3636 = 0, $3637 = 0, $3638 = 0, $3639 = 0, $364 = 0, $3640 = 0, $3641 = 0, $3642 = 0, $3643 = 0, $3644 = 0, $3645 = 0, $3646 = 0, $3647 = 0, $3648 = 0, $3649 = 0, $365 = 0, $3650 = 0, $3651 = 0, $3652 = 0;
 var $3653 = 0, $3654 = 0, $3655 = 0, $3656 = 0, $3657 = 0, $3658 = 0, $3659 = 0, $366 = 0, $3660 = 0, $3661 = 0, $3662 = 0, $3663 = 0, $3664 = 0, $3665 = 0, $3666 = 0, $3667 = 0, $3668 = 0, $3669 = 0, $367 = 0, $3670 = 0;
 var $3671 = 0, $3672 = 0, $3673 = 0, $3674 = 0, $3675 = 0, $3676 = 0, $3677 = 0, $3678 = 0, $3679 = 0, $368 = 0, $3680 = 0, $3681 = 0, $3682 = 0, $3683 = 0, $3684 = 0, $3685 = 0, $3686 = 0, $3687 = 0, $3688 = 0, $3689 = 0;
 var $369 = 0, $3690 = 0, $3691 = 0, $3692 = 0, $3693 = 0, $3694 = 0, $3695 = 0, $3696 = 0, $3697 = 0, $3698 = 0, $3699 = 0, $37 = 0, $370 = 0, $3700 = 0, $3701 = 0, $3702 = 0, $3703 = 0, $3704 = 0, $3705 = 0, $3706 = 0;
 var $3707 = 0, $3708 = 0, $3709 = 0, $371 = 0, $3710 = 0, $3711 = 0, $3712 = 0, $3713 = 0, $3714 = 0, $3715 = 0, $3716 = 0, $3717 = 0, $3718 = 0, $3719 = 0, $372 = 0, $3720 = 0, $3721 = 0, $3722 = 0, $3723 = 0, $3724 = 0;
 var $3725 = 0, $3726 = 0, $3727 = 0, $3728 = 0, $3729 = 0, $373 = 0, $3730 = 0, $3731 = 0, $3732 = 0, $3733 = 0, $3734 = 0, $3735 = 0, $3736 = 0, $3737 = 0, $3738 = 0, $3739 = 0, $374 = 0, $3740 = 0, $3741 = 0, $3742 = 0;
 var $3743 = 0, $3744 = 0, $3745 = 0, $3746 = 0, $3747 = 0, $3748 = 0, $3749 = 0, $375 = 0, $3750 = 0, $3751 = 0, $3752 = 0, $3753 = 0, $3754 = 0, $3755 = 0, $3756 = 0, $3757 = 0, $3758 = 0, $3759 = 0, $376 = 0, $3760 = 0;
 var $3761 = 0, $3762 = 0, $3763 = 0, $3764 = 0, $3765 = 0, $3766 = 0, $3767 = 0, $3768 = 0, $3769 = 0, $377 = 0, $3770 = 0, $3771 = 0, $3772 = 0, $3773 = 0, $3774 = 0, $3775 = 0, $3776 = 0, $3777 = 0, $3778 = 0, $3779 = 0;
 var $378 = 0, $3780 = 0, $3781 = 0, $3782 = 0, $3783 = 0, $3784 = 0, $3785 = 0, $3786 = 0, $3787 = 0, $3788 = 0, $3789 = 0, $379 = 0, $3790 = 0, $3791 = 0, $3792 = 0, $3793 = 0, $3794 = 0, $3795 = 0, $3796 = 0, $3797 = 0;
 var $3798 = 0, $3799 = 0, $38 = 0, $380 = 0, $3800 = 0, $3801 = 0, $3802 = 0, $3803 = 0, $3804 = 0, $3805 = 0, $3806 = 0, $3807 = 0, $3808 = 0, $3809 = 0, $381 = 0, $3810 = 0, $3811 = 0, $3812 = 0, $3813 = 0, $3814 = 0;
 var $3815 = 0, $3816 = 0, $3817 = 0, $3818 = 0, $3819 = 0, $382 = 0, $3820 = 0, $3821 = 0, $3822 = 0, $3823 = 0, $3824 = 0, $3825 = 0, $3826 = 0, $3827 = 0, $3828 = 0, $3829 = 0, $383 = 0, $3830 = 0, $3831 = 0, $3832 = 0;
 var $3833 = 0, $3834 = 0, $3835 = 0, $3836 = 0, $3837 = 0, $3838 = 0, $3839 = 0, $384 = 0, $3840 = 0, $3841 = 0, $3842 = 0, $3843 = 0, $3844 = 0, $3845 = 0, $3846 = 0, $3847 = 0, $3848 = 0, $3849 = 0, $385 = 0, $3850 = 0;
 var $3851 = 0, $3852 = 0, $3853 = 0, $3854 = 0, $3855 = 0, $3856 = 0, $3857 = 0, $3858 = 0, $3859 = 0, $386 = 0, $3860 = 0, $3861 = 0, $3862 = 0, $3863 = 0, $3864 = 0, $3865 = 0, $3866 = 0, $3867 = 0, $3868 = 0, $3869 = 0;
 var $387 = 0, $3870 = 0, $3871 = 0, $3872 = 0, $3873 = 0, $3874 = 0, $3875 = 0, $3876 = 0, $3877 = 0, $3878 = 0, $3879 = 0, $388 = 0, $3880 = 0, $3881 = 0, $3882 = 0, $3883 = 0, $3884 = 0, $3885 = 0, $3886 = 0, $3887 = 0;
 var $3888 = 0, $3889 = 0, $389 = 0, $3890 = 0, $3891 = 0, $3892 = 0, $3893 = 0, $3894 = 0, $3895 = 0, $3896 = 0, $3897 = 0, $3898 = 0, $3899 = 0, $39 = 0, $390 = 0, $3900 = 0, $3901 = 0, $3902 = 0, $3903 = 0, $3904 = 0;
 var $3905 = 0, $3906 = 0, $3907 = 0, $3908 = 0, $3909 = 0, $391 = 0, $3910 = 0, $3911 = 0, $3912 = 0, $3913 = 0, $3914 = 0, $3915 = 0, $3916 = 0, $3917 = 0, $3918 = 0, $3919 = 0, $392 = 0, $3920 = 0, $3921 = 0, $3922 = 0;
 var $3923 = 0, $3924 = 0, $3925 = 0, $3926 = 0, $3927 = 0, $3928 = 0, $3929 = 0, $393 = 0, $3930 = 0, $3931 = 0, $3932 = 0, $3933 = 0, $3934 = 0, $3935 = 0, $3936 = 0, $3937 = 0, $3938 = 0, $3939 = 0, $394 = 0, $3940 = 0;
 var $3941 = 0, $3942 = 0, $3943 = 0, $3944 = 0, $3945 = 0, $3946 = 0, $3947 = 0, $3948 = 0, $3949 = 0, $395 = 0, $3950 = 0, $3951 = 0, $3952 = 0, $3953 = 0, $3954 = 0, $3955 = 0, $3956 = 0, $3957 = 0, $3958 = 0, $3959 = 0;
 var $396 = 0, $3960 = 0, $3961 = 0, $3962 = 0, $3963 = 0, $3964 = 0, $3965 = 0, $3966 = 0, $3967 = 0, $3968 = 0, $3969 = 0, $397 = 0, $3970 = 0, $3971 = 0, $3972 = 0.0, $3973 = 0, $3974 = 0, $3975 = 0.0, $3976 = 0, $3977 = 0;
 var $3978 = 0, $3979 = 0, $398 = 0, $3980 = 0, $3981 = 0, $3982 = 0, $3983 = 0, $3984 = 0, $3985 = 0, $3986 = 0, $3987 = 0, $3988 = 0, $3989 = 0, $399 = 0, $3990 = 0, $3991 = 0, $3992 = 0, $3993 = 0, $3994 = 0, $3995 = 0;
 var $3996 = 0, $3997 = 0, $3998 = 0, $3999 = 0, $4 = 0, $40 = 0, $400 = 0, $4000 = 0, $4001 = 0, $4002 = 0, $4003 = 0, $4004 = 0, $4005 = 0.0, $4006 = 0, $4007 = 0, $4008 = 0.0, $4009 = 0, $401 = 0, $4010 = 0, $4011 = 0;
 var $4012 = 0, $4013 = 0, $4014 = 0, $4015 = 0, $4016 = 0, $4017 = 0, $4018 = 0, $4019 = 0, $402 = 0, $4020 = 0, $4021 = 0, $4022 = 0, $4023 = 0, $4024 = 0, $4025 = 0, $4026 = 0, $4027 = 0, $4028 = 0, $4029 = 0, $403 = 0;
 var $4030 = 0, $4031 = 0, $4032 = 0, $4033 = 0, $4034 = 0, $4035 = 0, $4036 = 0, $4037 = 0, $4038 = 0, $4039 = 0.0, $404 = 0, $4040 = 0, $4041 = 0, $4042 = 0.0, $4043 = 0, $4044 = 0, $4045 = 0, $4046 = 0, $4047 = 0, $4048 = 0;
 var $4049 = 0, $405 = 0, $4050 = 0, $4051 = 0, $4052 = 0, $4053 = 0, $4054 = 0, $4055 = 0, $4056 = 0, $4057 = 0.0, $4058 = 0, $4059 = 0.0, $406 = 0, $4060 = 0, $4061 = 0.0, $4062 = 0, $4063 = 0, $4064 = 0, $4065 = 0, $4066 = 0;
 var $4067 = 0, $4068 = 0, $4069 = 0, $407 = 0, $4070 = 0, $4071 = 0, $4072 = 0, $4073 = 0, $4074 = 0, $4075 = 0, $4076 = 0, $4077 = 0, $4078 = 0, $4079 = 0, $408 = 0, $4080 = 0, $4081 = 0, $4082 = 0, $4083 = 0, $4084 = 0;
 var $4085 = 0, $4086 = 0, $4087 = 0, $4088 = 0, $4089 = 0, $409 = 0, $4090 = 0, $4091 = 0, $4092 = 0, $4093 = 0, $4094 = 0, $4095 = 0, $4096 = 0, $4097 = 0, $4098 = 0, $4099 = 0, $41 = 0, $410 = 0, $4100 = 0, $4101 = 0;
 var $4102 = 0, $4103 = 0, $4104 = 0, $4105 = 0, $4106 = 0, $4107 = 0, $4108 = 0, $4109 = 0, $411 = 0, $4110 = 0, $4111 = 0, $4112 = 0, $4113 = 0, $4114 = 0, $4115 = 0, $4116 = 0, $4117 = 0, $4118 = 0, $4119 = 0, $412 = 0;
 var $4120 = 0, $4121 = 0, $4122 = 0, $4123 = 0, $4124 = 0, $4125 = 0, $4126 = 0, $4127 = 0, $4128 = 0, $4129 = 0, $413 = 0, $4130 = 0, $4131 = 0, $4132 = 0, $4133 = 0, $4134 = 0, $4135 = 0, $4136 = 0, $4137 = 0, $4138 = 0;
 var $4139 = 0, $414 = 0, $4140 = 0, $4141 = 0, $4142 = 0, $4143 = 0, $4144 = 0, $4145 = 0, $4146 = 0, $4147 = 0, $4148 = 0, $4149 = 0, $415 = 0, $4150 = 0, $4151 = 0, $4152 = 0, $4153 = 0, $4154 = 0, $4155 = 0, $4156 = 0;
 var $4157 = 0, $4158 = 0, $4159 = 0, $416 = 0, $4160 = 0, $4161 = 0, $4162 = 0, $4163 = 0, $4164 = 0, $4165 = 0, $4166 = 0, $4167 = 0, $4168 = 0, $4169 = 0, $417 = 0, $4170 = 0, $4171 = 0, $4172 = 0, $4173 = 0, $4174 = 0;
 var $4175 = 0, $4176 = 0, $4177 = 0, $4178 = 0, $4179 = 0, $418 = 0, $4180 = 0, $4181 = 0, $4182 = 0, $4183 = 0, $4184 = 0, $4185 = 0, $4186 = 0, $4187 = 0, $4188 = 0, $4189 = 0, $419 = 0, $4190 = 0, $4191 = 0, $4192 = 0;
 var $4193 = 0, $4194 = 0, $4195 = 0, $4196 = 0, $4197 = 0, $4198 = 0, $4199 = 0, $42 = 0, $420 = 0, $4200 = 0, $4201 = 0, $4202 = 0, $4203 = 0, $4204 = 0, $4205 = 0, $4206 = 0, $4207 = 0, $4208 = 0, $4209 = 0, $421 = 0;
 var $4210 = 0, $4211 = 0, $4212 = 0, $4213 = 0, $4214 = 0, $4215 = 0, $4216 = 0, $4217 = 0, $4218 = 0, $4219 = 0, $422 = 0, $4220 = 0, $4221 = 0, $4222 = 0, $4223 = 0, $4224 = 0, $4225 = 0, $4226 = 0, $4227 = 0, $4228 = 0;
 var $4229 = 0, $423 = 0, $4230 = 0, $4231 = 0, $4232 = 0, $4233 = 0, $4234 = 0, $4235 = 0, $4236 = 0, $4237 = 0, $4238 = 0, $4239 = 0, $424 = 0, $4240 = 0, $4241 = 0, $4242 = 0, $4243 = 0, $4244 = 0, $4245 = 0, $4246 = 0;
 var $4247 = 0, $4248 = 0, $4249 = 0, $425 = 0, $4250 = 0, $4251 = 0, $4252 = 0, $4253 = 0, $4254 = 0, $4255 = 0, $4256 = 0, $4257 = 0, $4258 = 0, $4259 = 0, $426 = 0, $4260 = 0, $4261 = 0, $4262 = 0, $4263 = 0, $4264 = 0;
 var $4265 = 0, $4266 = 0.0, $4267 = 0, $4268 = 0, $4269 = 0.0, $427 = 0, $4270 = 0, $4271 = 0, $4272 = 0, $4273 = 0, $4274 = 0, $4275 = 0, $4276 = 0, $4277 = 0, $4278 = 0, $4279 = 0, $428 = 0, $4280 = 0, $4281 = 0, $4282 = 0;
 var $4283 = 0, $4284 = 0, $4285 = 0, $4286 = 0, $4287 = 0, $4288 = 0, $4289 = 0, $429 = 0, $4290 = 0, $4291 = 0, $4292 = 0, $4293 = 0, $4294 = 0, $4295 = 0, $4296 = 0, $4297 = 0, $4298 = 0, $4299 = 0.0, $43 = 0, $430 = 0;
 var $4300 = 0, $4301 = 0, $4302 = 0.0, $4303 = 0, $4304 = 0, $4305 = 0, $4306 = 0, $4307 = 0, $4308 = 0, $4309 = 0, $431 = 0, $4310 = 0, $4311 = 0, $4312 = 0, $4313 = 0, $4314 = 0, $4315 = 0, $4316 = 0, $4317 = 0, $4318 = 0;
 var $4319 = 0, $432 = 0, $4320 = 0, $4321 = 0, $4322 = 0, $4323 = 0, $4324 = 0, $4325 = 0, $4326 = 0, $4327 = 0, $4328 = 0, $4329 = 0, $433 = 0, $4330 = 0, $4331 = 0, $4332 = 0, $4333 = 0.0, $4334 = 0, $4335 = 0, $4336 = 0.0;
 var $4337 = 0, $4338 = 0, $4339 = 0, $434 = 0, $4340 = 0, $4341 = 0, $4342 = 0, $4343 = 0, $4344 = 0, $4345 = 0, $4346 = 0, $4347 = 0, $4348 = 0, $4349 = 0, $435 = 0, $4350 = 0, $4351 = 0, $4352 = 0, $4353 = 0, $4354 = 0;
 var $4355 = 0, $4356 = 0, $4357 = 0, $4358 = 0, $4359 = 0, $436 = 0, $4360 = 0, $4361 = 0, $4362 = 0, $4363 = 0, $4364 = 0, $4365 = 0, $4366 = 0, $4367 = 0.0, $4368 = 0, $4369 = 0, $437 = 0, $4370 = 0.0, $4371 = 0, $4372 = 0;
 var $4373 = 0, $4374 = 0, $4375 = 0, $4376 = 0, $4377 = 0, $4378 = 0, $4379 = 0, $438 = 0, $4380 = 0, $4381 = 0, $4382 = 0, $4383 = 0, $4384 = 0, $4385 = 0.0, $4386 = 0, $4387 = 0.0, $4388 = 0, $4389 = 0.0, $439 = 0, $4390 = 0;
 var $4391 = 0.0, $4392 = 0, $4393 = 0, $4394 = 0, $4395 = 0, $4396 = 0, $4397 = 0, $4398 = 0, $4399 = 0, $44 = 0, $440 = 0, $4400 = 0, $4401 = 0, $4402 = 0, $4403 = 0, $4404 = 0, $4405 = 0, $4406 = 0, $4407 = 0, $4408 = 0;
 var $4409 = 0, $441 = 0, $4410 = 0, $4411 = 0, $4412 = 0, $4413 = 0, $4414 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0;
 var $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0;
 var $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0;
 var $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0;
 var $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0;
 var $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0;
 var $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $__annotator$i = 0, $__r$i$i = 0, $__r$i$i29 = 0, $__r$i$i82 = 0, $__r$i$i97 = 0, $a = 0, $a13 = 0.0, $b = 0, $b12 = 0.0, $b4 = 0.0, $b8 = 0, $cc = 0, $cc26 = 0, $cleanup$dest = 0, $cleanup$dest24 = 0;
 var $cleanup$dest28 = 0, $color = 0, $color14 = 0, $color25 = 0, $color27 = 0, $color5 = 0, $color9 = 0, $color_elements = 0, $cond = 0, $cond1 = 0, $cond2 = 0, $dimension = 0, $f = 0, $f0 = 0, $f17 = 0, $g = 0, $g11 = 0.0, $g3 = 0.0, $g7 = 0, $header = 0;
 var $homogeneousComponents = 0, $i = 0, $indexTriangulatedVect = 0, $isColorDefined = 0, $isNormalDefined = 0, $isTexCoordDefined = 0, $j = 0, $j1 = 0, $j15 = 0, $j16 = 0, $j19 = 0, $j20 = 0, $j22 = 0, $j23 = 0, $k = 0, $loopVect = 0, $nEdges = 0, $nFaces = 0, $nVertices = 0, $nb_color_components = 0;
 var $polygonVect = 0, $q = 0, $qq = 0, $qqi = 0, $qqi21 = 0, $qtmp = 0, $r = 0, $r10 = 0.0, $r2 = 0.0, $r6 = 0, $str = 0, $tokens = 0, $trigs = 0, $u = 0, $vInd = 0, $v_iter = 0, $vertIndices = 0, $vert_per_face = 0, $vert_per_face18 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5472|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy9 = sp + 5417|0;
 $$byval_copy8 = sp + 5447|0;
 $$byval_copy7 = sp + 5465|0;
 $$byval_copy6 = sp + 5461|0;
 $$byval_copy5 = sp + 104|0;
 $$byval_copy4 = sp + 100|0;
 $$byval_copy3 = sp + 5436|0;
 $$byval_copy2 = sp + 5454|0;
 $$byval_copy1 = sp + 5434|0;
 $$byval_copy = sp + 5446|0;
 $30 = sp + 192|0;
 $34 = sp + 208|0;
 $38 = sp + 224|0;
 $43 = sp + 244|0;
 $46 = sp + 256|0;
 $49 = sp + 268|0;
 $50 = sp + 272|0;
 $51 = sp + 276|0;
 $273 = sp + 1152|0;
 $277 = sp + 1168|0;
 $281 = sp + 1184|0;
 $286 = sp + 1204|0;
 $289 = sp + 1216|0;
 $292 = sp + 1228|0;
 $293 = sp + 1232|0;
 $294 = sp + 1236|0;
 $298 = sp + 1252|0;
 $302 = sp + 1268|0;
 $306 = sp + 1284|0;
 $311 = sp + 1304|0;
 $314 = sp + 1316|0;
 $317 = sp + 1328|0;
 $318 = sp + 1332|0;
 $319 = sp + 1336|0;
 $__annotator$i = sp + 5416|0;
 $417 = sp + 5452|0;
 $418 = sp + 5433|0;
 $595 = sp + 5450|0;
 $596 = sp + 5432|0;
 $1125 = sp;
 $1128 = sp + 5448|0;
 $1131 = sp + 4644|0;
 $1133 = sp + 4652|0;
 $1137 = sp + 5469|0;
 $1138 = sp + 5468|0;
 $1173 = sp + 8|0;
 $1176 = sp + 5466|0;
 $1179 = sp + 4856|0;
 $1181 = sp + 4864|0;
 $1185 = sp + 5464|0;
 $1186 = sp + 5462|0;
 $1211 = sp + 4996|0;
 $1215 = sp + 5012|0;
 $1219 = sp + 5028|0;
 $1224 = sp + 5048|0;
 $1227 = sp + 5060|0;
 $1230 = sp + 5072|0;
 $1231 = sp + 5076|0;
 $1232 = sp + 5080|0;
 $tokens = sp + 5108|0;
 $header = sp + 5152|0;
 $1242 = sp + 5168|0;
 $1243 = sp + 5172|0;
 $1244 = sp + 5176|0;
 $1245 = sp + 5180|0;
 $1246 = sp + 5184|0;
 $1247 = sp + 5188|0;
 $v_iter = sp + 5204|0;
 $1248 = sp + 5232|0;
 $color = sp + 5420|0;
 $color5 = sp + 5312|0;
 $color9 = sp + 5428|0;
 $color14 = sp + 2656|0;
 $str = sp + 2636|0;
 $1249 = sp + 5404|0;
 $vInd = sp + 2624|0;
 $1250 = sp + 2620|0;
 $1251 = sp + 128|0;
 $1252 = sp + 5292|0;
 $qtmp = sp + 5248|0;
 $1253 = sp + 4896|0;
 $vertIndices = sp + 4884|0;
 $polygonVect = sp + 4836|0;
 $q = sp + 4672|0;
 $indexTriangulatedVect = sp + 2456|0;
 $loopVect = sp + 1740|0;
 $1254 = sp + 56|0;
 $1255 = sp + 72|0;
 $cc = sp + 5456|0;
 $color25 = sp + 88|0;
 $1256 = sp + 112|0;
 $cc26 = sp + 5440|0;
 $color27 = sp + 2600|0;
 $1257 = sp + 5384|0;
 $1235 = $mesh;
 $1236 = $stream;
 $1237 = $loadmask;
 $1238 = $cb;
 $1233 = $tokens;
 $1258 = $1233;
 $1229 = $1258;
 $1259 = $1229;
 $1228 = $1259;
 $1209 = $1211;
 $1210 = -1;
 $1260 = $1209;
 HEAP32[$1260>>2] = 0;
 $1261 = HEAP32[$1211>>2]|0;
 HEAP32[$1230>>2] = $1261;
 $1212 = $1230;
 HEAP32[$1259>>2] = 0;
 $1262 = (($1259) + 4|0);
 $1213 = $1215;
 $1214 = -1;
 $1263 = $1213;
 HEAP32[$1263>>2] = 0;
 $1264 = HEAP32[$1215>>2]|0;
 HEAP32[$1231>>2] = $1264;
 $1216 = $1231;
 HEAP32[$1262>>2] = 0;
 $1265 = (($1259) + 8|0);
 $1217 = $1219;
 $1218 = -1;
 $1266 = $1217;
 HEAP32[$1266>>2] = 0;
 $1267 = HEAP32[$1219>>2]|0;
 HEAP32[$1232>>2] = $1267;
 $1220 = $1232;
 $1226 = $1265;
 HEAP32[$1227>>2] = 0;
 $1268 = $1226;
 $1225 = $1227;
 $1269 = $1225;
 $1270 = HEAP32[$1269>>2]|0;
 $1223 = $1268;
 HEAP32[$1224>>2] = $1270;
 $1271 = $1223;
 $1222 = $1271;
 $1221 = $1224;
 $1272 = $1221;
 $1273 = HEAP32[$1272>>2]|0;
 HEAP32[$1271>>2] = $1273;
 $1274 = $1236;
 __THREW__ = 0;
 invoke_vii(502,($1274|0),($tokens|0));
 $1275 = __THREW__; __THREW__ = 0;
 $1276 = $1275&1;
 L1: do {
  if ($1276) {
   label = 4;
  } else {
   $1208 = $tokens;
   $1277 = $1208;
   $1278 = HEAP32[$1277>>2]|0;
   $1279 = (($1277) + 4|0);
   $1280 = HEAP32[$1279>>2]|0;
   $1281 = ($1278|0)==($1280|0);
   if ($1281) {
    $1234 = 3;
    $1241 = 1;
    __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($tokens);
    $4408 = $1234;
    STACKTOP = sp;return ($4408|0);
   }
   $isNormalDefined = 0;
   $isColorDefined = 0;
   $isTexCoordDefined = 0;
   $dimension = 3;
   $homogeneousComponents = 0;
   $1206 = $tokens;
   $1207 = 0;
   $1284 = $1206;
   $1285 = $1207;
   $1286 = HEAP32[$1284>>2]|0;
   $1287 = (($1286) + (($1285*12)|0)|0);
   __THREW__ = 0;
   invoke_vii(503,($header|0),($1287|0));
   $1288 = __THREW__; __THREW__ = 0;
   $1289 = $1288&1;
   if ($1289) {
    label = 4;
   } else {
    $1201 = $header;
    $1202 = 4944;
    $1203 = -1;
    $1290 = $1201;
    $1200 = $1290;
    $1291 = $1200;
    $1199 = $1291;
    $1292 = $1199;
    $1198 = $1292;
    $1293 = $1198;
    $1197 = $1293;
    $1294 = $1197;
    $1196 = $1294;
    $1295 = $1196;
    $1296 = HEAP8[$1295>>0]|0;
    $1297 = $1296&255;
    $1298 = $1297 & 1;
    $1299 = ($1298|0)!=(0);
    if ($1299) {
     $1190 = $1292;
     $1300 = $1190;
     $1189 = $1300;
     $1301 = $1189;
     $1188 = $1301;
     $1302 = $1188;
     $1303 = (($1302) + 8|0);
     $1304 = HEAP32[$1303>>2]|0;
     $1311 = $1304;
    } else {
     $1195 = $1292;
     $1305 = $1195;
     $1194 = $1305;
     $1306 = $1194;
     $1193 = $1306;
     $1307 = $1193;
     $1308 = (($1307) + 1|0);
     $1192 = $1308;
     $1309 = $1192;
     $1191 = $1309;
     $1310 = $1191;
     $1311 = $1310;
    }
    $1187 = $1311;
    $1312 = $1187;
    $1167 = $1290;
    $1313 = $1167;
    $1166 = $1313;
    $1314 = $1166;
    $1165 = $1314;
    $1315 = $1165;
    $1164 = $1315;
    $1316 = $1164;
    $1317 = HEAP8[$1316>>0]|0;
    $1318 = $1317&255;
    $1319 = $1318 & 1;
    $1320 = ($1319|0)!=(0);
    if ($1320) {
     $1160 = $1313;
     $1321 = $1160;
     $1159 = $1321;
     $1322 = $1159;
     $1158 = $1322;
     $1323 = $1158;
     $1324 = (($1323) + 4|0);
     $1325 = HEAP32[$1324>>2]|0;
     $1338 = $1325;
    } else {
     $1163 = $1313;
     $1326 = $1163;
     $1162 = $1326;
     $1327 = $1162;
     $1161 = $1327;
     $1328 = $1161;
     $1329 = HEAP8[$1328>>0]|0;
     $1330 = $1329&255;
     $1331 = $1330 >> 1;
     $1338 = $1331;
    }
    $1332 = $1202;
    $1333 = $1203;
    $1334 = $1202;
    __THREW__ = 0;
    $1335 = (invoke_ii(441,($1334|0))|0);
    $1336 = __THREW__; __THREW__ = 0;
    $1337 = $1336&1;
    if ($1337) {
     $1387 = ___cxa_find_matching_catch()|0;
     $1388 = tempRet0;
     $1204 = $1387;
     $1205 = $1388;
     $1389 = $1204;
     ___cxa_call_unexpected(($1389|0));
     // unreachable;
    }
    $1178 = $1312;
    HEAP32[$1179>>2] = $1338;
    $1180 = $1332;
    HEAP32[$1181>>2] = $1333;
    $1182 = $1335;
    $1174 = $1181;
    $1175 = $1179;
    $1339 = $1174;
    $1340 = $1175;
    ;HEAP8[$1173+0>>0]=HEAP8[$1176+0>>0]|0;
    $1171 = $1339;
    $1172 = $1340;
    $1341 = $1172;
    $1342 = $1171;
    $1168 = $1173;
    $1169 = $1341;
    $1170 = $1342;
    $1343 = $1169;
    $1344 = HEAP32[$1343>>2]|0;
    $1345 = $1170;
    $1346 = HEAP32[$1345>>2]|0;
    $1347 = ($1344>>>0)<($1346>>>0);
    if ($1347) {
     $1348 = $1172;
     $1351 = $1348;
    } else {
     $1349 = $1171;
     $1351 = $1349;
    }
    $1350 = HEAP32[$1351>>2]|0;
    HEAP32[$1181>>2] = $1350;
    $1352 = $1182;
    $1353 = HEAP32[$1179>>2]|0;
    $1354 = HEAP32[$1181>>2]|0;
    $1355 = (($1353) - ($1354))|0;
    $1356 = ($1352>>>0)<($1355>>>0);
    if ($1356) {
     $1357 = $1182;
     $1358 = HEAP32[$1181>>2]|0;
     $1359 = (($1358) + ($1357))|0;
     HEAP32[$1181>>2] = $1359;
    } else {
     $1363 = HEAP32[$1179>>2]|0;
     HEAP32[$1181>>2] = $1363;
    }
    $1364 = $1178;
    $1365 = $1178;
    $1366 = HEAP32[$1181>>2]|0;
    $1367 = (($1365) + ($1366)|0);
    $1368 = $1180;
    $1369 = $1180;
    $1370 = $1182;
    $1371 = (($1369) + ($1370)|0);
    __THREW__ = 0;
    ;HEAP8[$$byval_copy+0>>0]=HEAP8[$1185+0>>0]|0;
    ;HEAP8[$$byval_copy1+0>>0]=HEAP8[$1186+0>>0]|0;
    $1372 = (invoke_iiiiiiii(504,($1364|0),($1367|0),($1368|0),($1371|0),(505|0),($$byval_copy|0),($$byval_copy1|0))|0);
    $1373 = __THREW__; __THREW__ = 0;
    $1374 = $1373&1;
    if ($1374) {
     $1360 = ___cxa_find_matching_catch()|0;
     $1361 = tempRet0;
     $1183 = $1360;
     $1184 = $1361;
     $1362 = $1183;
     ___cxa_call_unexpected(($1362|0));
     // unreachable;
    }
    $__r$i$i = $1372;
    $1375 = $1182;
    $1376 = ($1375>>>0)>(0);
    if ($1376) {
     $1377 = $__r$i$i;
     $1378 = $1178;
     $1379 = HEAP32[$1181>>2]|0;
     $1380 = (($1378) + ($1379)|0);
     $1381 = ($1377|0)==($1380|0);
     if ($1381) {
      $1177 = -1;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
    if ((label|0) == 25) {
     $1382 = $__r$i$i;
     $1383 = $1178;
     $1384 = $1382;
     $1385 = $1383;
     $1386 = (($1384) - ($1385))|0;
     $1177 = $1386;
    }
    $1390 = $1177;
    $1391 = ($1390|0)!=(-1);
    L37: do {
     if ($1391) {
      $1153 = $header;
      $1154 = 4944;
      $1155 = -1;
      $1392 = $1153;
      $1152 = $1392;
      $1393 = $1152;
      $1151 = $1393;
      $1394 = $1151;
      $1150 = $1394;
      $1395 = $1150;
      $1149 = $1395;
      $1396 = $1149;
      $1148 = $1396;
      $1397 = $1148;
      $1398 = HEAP8[$1397>>0]|0;
      $1399 = $1398&255;
      $1400 = $1399 & 1;
      $1401 = ($1400|0)!=(0);
      if ($1401) {
       $1142 = $1394;
       $1402 = $1142;
       $1141 = $1402;
       $1403 = $1141;
       $1140 = $1403;
       $1404 = $1140;
       $1405 = (($1404) + 8|0);
       $1406 = HEAP32[$1405>>2]|0;
       $1413 = $1406;
      } else {
       $1147 = $1394;
       $1407 = $1147;
       $1146 = $1407;
       $1408 = $1146;
       $1145 = $1408;
       $1409 = $1145;
       $1410 = (($1409) + 1|0);
       $1144 = $1410;
       $1411 = $1144;
       $1143 = $1411;
       $1412 = $1143;
       $1413 = $1412;
      }
      $1139 = $1413;
      $1414 = $1139;
      $1119 = $1392;
      $1415 = $1119;
      $1118 = $1415;
      $1416 = $1118;
      $1117 = $1416;
      $1417 = $1117;
      $1116 = $1417;
      $1418 = $1116;
      $1419 = HEAP8[$1418>>0]|0;
      $1420 = $1419&255;
      $1421 = $1420 & 1;
      $1422 = ($1421|0)!=(0);
      if ($1422) {
       $1112 = $1415;
       $1423 = $1112;
       $1111 = $1423;
       $1424 = $1111;
       $1110 = $1424;
       $1425 = $1110;
       $1426 = (($1425) + 4|0);
       $1427 = HEAP32[$1426>>2]|0;
       $1440 = $1427;
      } else {
       $1115 = $1415;
       $1428 = $1115;
       $1114 = $1428;
       $1429 = $1114;
       $1113 = $1429;
       $1430 = $1113;
       $1431 = HEAP8[$1430>>0]|0;
       $1432 = $1431&255;
       $1433 = $1432 >> 1;
       $1440 = $1433;
      }
      $1434 = $1154;
      $1435 = $1155;
      $1436 = $1154;
      __THREW__ = 0;
      $1437 = (invoke_ii(441,($1436|0))|0);
      $1438 = __THREW__; __THREW__ = 0;
      $1439 = $1438&1;
      if ($1439) {
       $1489 = ___cxa_find_matching_catch()|0;
       $1490 = tempRet0;
       $1156 = $1489;
       $1157 = $1490;
       $1491 = $1156;
       ___cxa_call_unexpected(($1491|0));
       // unreachable;
      }
      $1130 = $1414;
      HEAP32[$1131>>2] = $1440;
      $1132 = $1434;
      HEAP32[$1133>>2] = $1435;
      $1134 = $1437;
      $1126 = $1133;
      $1127 = $1131;
      $1441 = $1126;
      $1442 = $1127;
      ;HEAP8[$1125+0>>0]=HEAP8[$1128+0>>0]|0;
      $1123 = $1441;
      $1124 = $1442;
      $1443 = $1124;
      $1444 = $1123;
      $1120 = $1125;
      $1121 = $1443;
      $1122 = $1444;
      $1445 = $1121;
      $1446 = HEAP32[$1445>>2]|0;
      $1447 = $1122;
      $1448 = HEAP32[$1447>>2]|0;
      $1449 = ($1446>>>0)<($1448>>>0);
      if ($1449) {
       $1450 = $1124;
       $1453 = $1450;
      } else {
       $1451 = $1123;
       $1453 = $1451;
      }
      $1452 = HEAP32[$1453>>2]|0;
      HEAP32[$1133>>2] = $1452;
      $1454 = $1134;
      $1455 = HEAP32[$1131>>2]|0;
      $1456 = HEAP32[$1133>>2]|0;
      $1457 = (($1455) - ($1456))|0;
      $1458 = ($1454>>>0)<($1457>>>0);
      if ($1458) {
       $1459 = $1134;
       $1460 = HEAP32[$1133>>2]|0;
       $1461 = (($1460) + ($1459))|0;
       HEAP32[$1133>>2] = $1461;
      } else {
       $1465 = HEAP32[$1131>>2]|0;
       HEAP32[$1133>>2] = $1465;
      }
      $1466 = $1130;
      $1467 = $1130;
      $1468 = HEAP32[$1133>>2]|0;
      $1469 = (($1467) + ($1468)|0);
      $1470 = $1132;
      $1471 = $1132;
      $1472 = $1134;
      $1473 = (($1471) + ($1472)|0);
      __THREW__ = 0;
      ;HEAP8[$$byval_copy2+0>>0]=HEAP8[$1137+0>>0]|0;
      ;HEAP8[$$byval_copy3+0>>0]=HEAP8[$1138+0>>0]|0;
      $1474 = (invoke_iiiiiiii(504,($1466|0),($1469|0),($1470|0),($1473|0),(505|0),($$byval_copy2|0),($$byval_copy3|0))|0);
      $1475 = __THREW__; __THREW__ = 0;
      $1476 = $1475&1;
      if ($1476) {
       $1462 = ___cxa_find_matching_catch()|0;
       $1463 = tempRet0;
       $1135 = $1462;
       $1136 = $1463;
       $1464 = $1135;
       ___cxa_call_unexpected(($1464|0));
       // unreachable;
      }
      $__r$i$i29 = $1474;
      $1477 = $1134;
      $1478 = ($1477>>>0)>(0);
      do {
       if ($1478) {
        $1479 = $__r$i$i29;
        $1480 = $1130;
        $1481 = HEAP32[$1133>>2]|0;
        $1482 = (($1480) + ($1481)|0);
        $1483 = ($1479|0)==($1482|0);
        if (!($1483)) {
         label = 46;
         break;
        }
        $1129 = -1;
       } else {
        label = 46;
       }
      } while(0);
      if ((label|0) == 46) {
       $1484 = $__r$i$i29;
       $1485 = $1130;
       $1486 = $1484;
       $1487 = $1485;
       $1488 = (($1486) - ($1487))|0;
       $1129 = $1488;
      }
      $1492 = $1129;
      $1493 = (($1492) - 1)|0;
      $u = $1493;
      while(1) {
       $1494 = $u;
       $1495 = ($1494|0)>=(0);
       if (!($1495)) {
        break;
       }
       $1496 = $u;
       $1108 = $header;
       $1109 = $1496;
       $1497 = $1108;
       $1107 = $1497;
       $1498 = $1107;
       $1106 = $1498;
       $1499 = $1106;
       $1105 = $1499;
       $1500 = $1105;
       $1104 = $1500;
       $1501 = $1104;
       $1502 = HEAP8[$1501>>0]|0;
       $1503 = $1502&255;
       $1504 = $1503 & 1;
       $1505 = ($1504|0)!=(0);
       if ($1505) {
        $1098 = $1498;
        $1506 = $1098;
        $1097 = $1506;
        $1507 = $1097;
        $1096 = $1507;
        $1508 = $1096;
        $1509 = (($1508) + 8|0);
        $1510 = HEAP32[$1509>>2]|0;
        $1519 = $1510;
       } else {
        $1103 = $1498;
        $1511 = $1103;
        $1102 = $1511;
        $1512 = $1102;
        $1101 = $1512;
        $1513 = $1101;
        $1514 = (($1513) + 1|0);
        $1100 = $1514;
        $1515 = $1100;
        $1099 = $1515;
        $1516 = $1099;
        $1519 = $1516;
       }
       $1517 = $1109;
       $1518 = (($1519) + ($1517)|0);
       $1520 = HEAP8[$1518>>0]|0;
       $1521 = $1520 << 24 >> 24;
       $1522 = ($1521|0)==(67);
       if ($1522) {
        $isColorDefined = 1;
       } else {
        $1525 = $u;
        $1094 = $header;
        $1095 = $1525;
        $1526 = $1094;
        $1093 = $1526;
        $1527 = $1093;
        $1092 = $1527;
        $1528 = $1092;
        $1091 = $1528;
        $1529 = $1091;
        $1090 = $1529;
        $1530 = $1090;
        $1531 = HEAP8[$1530>>0]|0;
        $1532 = $1531&255;
        $1533 = $1532 & 1;
        $1534 = ($1533|0)!=(0);
        if ($1534) {
         $1084 = $1527;
         $1535 = $1084;
         $1083 = $1535;
         $1536 = $1083;
         $1082 = $1536;
         $1537 = $1082;
         $1538 = (($1537) + 8|0);
         $1539 = HEAP32[$1538>>2]|0;
         $1548 = $1539;
        } else {
         $1089 = $1527;
         $1540 = $1089;
         $1088 = $1540;
         $1541 = $1088;
         $1087 = $1541;
         $1542 = $1087;
         $1543 = (($1542) + 1|0);
         $1086 = $1543;
         $1544 = $1086;
         $1085 = $1544;
         $1545 = $1085;
         $1548 = $1545;
        }
        $1546 = $1095;
        $1547 = (($1548) + ($1546)|0);
        $1549 = HEAP8[$1547>>0]|0;
        $1550 = $1549 << 24 >> 24;
        $1551 = ($1550|0)==(78);
        if ($1551) {
         $isNormalDefined = 1;
        } else {
         $1552 = $u;
         $1553 = ($1552|0)>(0);
         do {
          if ($1553) {
           $1554 = $u;
           $1555 = (($1554) - 1)|0;
           $1080 = $header;
           $1081 = $1555;
           $1556 = $1080;
           $1079 = $1556;
           $1557 = $1079;
           $1078 = $1557;
           $1558 = $1078;
           $1077 = $1558;
           $1559 = $1077;
           $1076 = $1559;
           $1560 = $1076;
           $1561 = HEAP8[$1560>>0]|0;
           $1562 = $1561&255;
           $1563 = $1562 & 1;
           $1564 = ($1563|0)!=(0);
           if ($1564) {
            $1070 = $1557;
            $1565 = $1070;
            $1069 = $1565;
            $1566 = $1069;
            $1068 = $1566;
            $1567 = $1068;
            $1568 = (($1567) + 8|0);
            $1569 = HEAP32[$1568>>2]|0;
            $1578 = $1569;
           } else {
            $1075 = $1557;
            $1570 = $1075;
            $1074 = $1570;
            $1571 = $1074;
            $1073 = $1571;
            $1572 = $1073;
            $1573 = (($1572) + 1|0);
            $1072 = $1573;
            $1574 = $1072;
            $1071 = $1574;
            $1575 = $1071;
            $1578 = $1575;
           }
           $1576 = $1081;
           $1577 = (($1578) + ($1576)|0);
           $1579 = HEAP8[$1577>>0]|0;
           $1580 = $1579 << 24 >> 24;
           $1581 = ($1580|0)==(83);
           if (!($1581)) {
            label = 75;
            break;
           }
           $1582 = $u;
           $1066 = $header;
           $1067 = $1582;
           $1583 = $1066;
           $1065 = $1583;
           $1584 = $1065;
           $1064 = $1584;
           $1585 = $1064;
           $1063 = $1585;
           $1586 = $1063;
           $1062 = $1586;
           $1587 = $1062;
           $1588 = HEAP8[$1587>>0]|0;
           $1589 = $1588&255;
           $1590 = $1589 & 1;
           $1591 = ($1590|0)!=(0);
           if ($1591) {
            $1056 = $1584;
            $1592 = $1056;
            $1055 = $1592;
            $1593 = $1055;
            $1054 = $1593;
            $1594 = $1054;
            $1595 = (($1594) + 8|0);
            $1596 = HEAP32[$1595>>2]|0;
            $1605 = $1596;
           } else {
            $1061 = $1584;
            $1597 = $1061;
            $1060 = $1597;
            $1598 = $1060;
            $1059 = $1598;
            $1599 = $1059;
            $1600 = (($1599) + 1|0);
            $1058 = $1600;
            $1601 = $1058;
            $1057 = $1601;
            $1602 = $1057;
            $1605 = $1602;
           }
           $1603 = $1067;
           $1604 = (($1605) + ($1603)|0);
           $1606 = HEAP8[$1604>>0]|0;
           $1607 = $1606 << 24 >> 24;
           $1608 = ($1607|0)==(84);
           if (!($1608)) {
            label = 75;
            break;
           }
           $isTexCoordDefined = 1;
          } else {
           label = 75;
          }
         } while(0);
         if ((label|0) == 75) {
          label = 0;
          $1609 = $u;
          $1052 = $header;
          $1053 = $1609;
          $1610 = $1052;
          $1051 = $1610;
          $1611 = $1051;
          $1050 = $1611;
          $1612 = $1050;
          $1049 = $1612;
          $1613 = $1049;
          $1048 = $1613;
          $1614 = $1048;
          $1615 = HEAP8[$1614>>0]|0;
          $1616 = $1615&255;
          $1617 = $1616 & 1;
          $1618 = ($1617|0)!=(0);
          if ($1618) {
           $1042 = $1611;
           $1619 = $1042;
           $1041 = $1619;
           $1620 = $1041;
           $1040 = $1620;
           $1621 = $1040;
           $1622 = (($1621) + 8|0);
           $1623 = HEAP32[$1622>>2]|0;
           $1632 = $1623;
          } else {
           $1047 = $1611;
           $1624 = $1047;
           $1046 = $1624;
           $1625 = $1046;
           $1045 = $1625;
           $1626 = $1045;
           $1627 = (($1626) + 1|0);
           $1044 = $1627;
           $1628 = $1044;
           $1043 = $1628;
           $1629 = $1043;
           $1632 = $1629;
          }
          $1630 = $1053;
          $1631 = (($1632) + ($1630)|0);
          $1633 = HEAP8[$1631>>0]|0;
          $1634 = $1633 << 24 >> 24;
          $1635 = ($1634|0)==(52);
          if ($1635) {
           $homogeneousComponents = 1;
          } else {
           $1636 = $u;
           $1038 = $header;
           $1039 = $1636;
           $1637 = $1038;
           $1037 = $1637;
           $1638 = $1037;
           $1036 = $1638;
           $1639 = $1036;
           $1035 = $1639;
           $1640 = $1035;
           $1034 = $1640;
           $1641 = $1034;
           $1642 = HEAP8[$1641>>0]|0;
           $1643 = $1642&255;
           $1644 = $1643 & 1;
           $1645 = ($1644|0)!=(0);
           if ($1645) {
            $1028 = $1638;
            $1646 = $1028;
            $1027 = $1646;
            $1647 = $1027;
            $1026 = $1647;
            $1648 = $1026;
            $1649 = (($1648) + 8|0);
            $1650 = HEAP32[$1649>>2]|0;
            $1659 = $1650;
           } else {
            $1033 = $1638;
            $1651 = $1033;
            $1032 = $1651;
            $1652 = $1032;
            $1031 = $1652;
            $1653 = $1031;
            $1654 = (($1653) + 1|0);
            $1030 = $1654;
            $1655 = $1030;
            $1029 = $1655;
            $1656 = $1029;
            $1659 = $1656;
           }
           $1657 = $1039;
           $1658 = (($1659) + ($1657)|0);
           $1660 = HEAP8[$1658>>0]|0;
           $1661 = $1660 << 24 >> 24;
           $1662 = ($1661|0)==(110);
           if ($1662) {
            label = 86;
            break;
           }
          }
         }
        }
       }
       $1663 = $u;
       $1664 = (($1663) + -1)|0;
       $u = $1664;
      }
      if ((label|0) == 86) {
       $1234 = 6;
       $1241 = 1;
       break;
      }
      $1025 = $tokens;
      $1665 = $1025;
      $1666 = (($1665) + 4|0);
      $1667 = HEAP32[$1666>>2]|0;
      $1668 = HEAP32[$1665>>2]|0;
      $1669 = $1667;
      $1670 = $1668;
      $1671 = (($1669) - ($1670))|0;
      $1672 = (($1671|0) / 12)&-1;
      $1673 = ($1672|0)==(1);
      do {
       if ($1673) {
        $1674 = $1236;
        __THREW__ = 0;
        invoke_vii(502,($1674|0),($tokens|0));
        $1675 = __THREW__; __THREW__ = 0;
        $1676 = $1675&1;
        if ($1676) {
         label = 56;
         break;
        }
        label = 100;
       } else {
        $1024 = $tokens;
        $1677 = $1024;
        $1678 = HEAP32[$1677>>2]|0;
        $1022 = $1677;
        $1023 = $1678;
        $1679 = $1023;
        $1020 = $1243;
        $1021 = $1679;
        $1680 = $1020;
        $1681 = $1021;
        HEAP32[$1680>>2] = $1681;
        $1017 = $1242;
        $1018 = $1243;
        $1019 = 0;
        $1682 = $1017;
        $1683 = $1018;
        $1016 = $1683;
        $1684 = $1016;
        $1685 = HEAP32[$1684>>2]|0;
        HEAP32[$1682>>2] = $1685;
        $1015 = $tokens;
        $1686 = $1015;
        $1687 = HEAP32[$1686>>2]|0;
        $1013 = $1686;
        $1014 = $1687;
        $1688 = $1014;
        $1011 = $1246;
        $1012 = $1688;
        $1689 = $1011;
        $1690 = $1012;
        HEAP32[$1689>>2] = $1690;
        $1009 = $1246;
        $1010 = 1;
        $1691 = $1009;
        ;HEAP32[$1245+0>>2]=HEAP32[$1691+0>>2]|0;
        $1692 = $1010;
        $1007 = $1245;
        $1008 = $1692;
        $1693 = $1007;
        $1694 = $1008;
        $1695 = HEAP32[$1693>>2]|0;
        $1696 = (($1695) + (($1694*12)|0)|0);
        HEAP32[$1693>>2] = $1696;
        $1004 = $1244;
        $1005 = $1245;
        $1006 = 0;
        $1697 = $1004;
        $1698 = $1005;
        $1003 = $1698;
        $1699 = $1003;
        $1700 = HEAP32[$1699>>2]|0;
        HEAP32[$1697>>2] = $1700;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$1242+0>>2]|0;
        ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$1244+0>>2]|0;
        invoke_viiii(506,($1247|0),($tokens|0),($$byval_copy4|0),($$byval_copy5|0));
        $1701 = __THREW__; __THREW__ = 0;
        $1702 = $1701&1;
        if ($1702) {
         label = 56;
         break;
        }
        label = 100;
       }
      } while(0);
      L130: do {
       if ((label|0) == 100) {
        $1703 = $1237;
        HEAP32[$1703>>2] = 65;
        $1704 = $isNormalDefined;
        $1705 = $1704&1;
        if ($1705) {
         $1706 = $1237;
         $1707 = HEAP32[$1706>>2]|0;
         $1708 = $1707 | 16;
         HEAP32[$1706>>2] = $1708;
        }
        $1709 = $isTexCoordDefined;
        $1710 = $1709&1;
        if ($1710) {
         $1711 = $1237;
         $1712 = HEAP32[$1711>>2]|0;
         $1713 = $1712 | 32;
         HEAP32[$1711>>2] = $1713;
        }
        $1714 = $isColorDefined;
        $1715 = $1714&1;
        if ($1715) {
         $1716 = $1237;
         $1717 = HEAP32[$1716>>2]|0;
         $1718 = $1717 | 4;
         HEAP32[$1716>>2] = $1718;
         $1719 = $1237;
         $1720 = HEAP32[$1719>>2]|0;
         $1721 = $1720 | 256;
         HEAP32[$1719>>2] = $1721;
        }
        $1722 = $1235;
        __THREW__ = 0;
        invoke_vi(507,($1722|0));
        $1723 = __THREW__; __THREW__ = 0;
        $1724 = $1723&1;
        if ($1724) {
         label = 56;
         break;
        }
        $932 = $tokens;
        $1725 = $932;
        $1726 = (($1725) + 4|0);
        $1727 = HEAP32[$1726>>2]|0;
        $1728 = HEAP32[$1725>>2]|0;
        $1729 = $1727;
        $1730 = $1728;
        $1731 = (($1729) - ($1730))|0;
        $1732 = (($1731|0) / 12)&-1;
        $1733 = ($1732>>>0)<(3);
        if ($1733) {
         $1234 = 2;
         $1241 = 1;
         break L37;
        }
        $928 = $tokens;
        $929 = 0;
        $1734 = $928;
        $1735 = $929;
        $1736 = HEAP32[$1734>>2]|0;
        $1737 = (($1736) + (($1735*12)|0)|0);
        $910 = $1737;
        $1738 = $910;
        $909 = $1738;
        $1739 = $909;
        $908 = $1739;
        $1740 = $908;
        $907 = $1740;
        $1741 = $907;
        $906 = $1741;
        $1742 = $906;
        $905 = $1742;
        $1743 = $905;
        $1744 = HEAP8[$1743>>0]|0;
        $1745 = $1744&255;
        $1746 = $1745 & 1;
        $1747 = ($1746|0)!=(0);
        if ($1747) {
         $899 = $1740;
         $1748 = $899;
         $898 = $1748;
         $1749 = $898;
         $897 = $1749;
         $1750 = $897;
         $1751 = (($1750) + 8|0);
         $1752 = HEAP32[$1751>>2]|0;
         $1759 = $1752;
        } else {
         $904 = $1740;
         $1753 = $904;
         $903 = $1753;
         $1754 = $903;
         $902 = $1754;
         $1755 = $902;
         $1756 = (($1755) + 1|0);
         $901 = $1756;
         $1757 = $901;
         $900 = $1757;
         $1758 = $900;
         $1759 = $1758;
        }
        $896 = $1759;
        $1760 = $896;
        __THREW__ = 0;
        $1761 = (invoke_ii(508,($1760|0))|0);
        $1762 = __THREW__; __THREW__ = 0;
        $1763 = $1762&1;
        if ($1763) {
         label = 56;
         break;
        }
        $nVertices = $1761;
        $877 = $tokens;
        $878 = 1;
        $1764 = $877;
        $1765 = $878;
        $1766 = HEAP32[$1764>>2]|0;
        $1767 = (($1766) + (($1765*12)|0)|0);
        $859 = $1767;
        $1768 = $859;
        $858 = $1768;
        $1769 = $858;
        $857 = $1769;
        $1770 = $857;
        $856 = $1770;
        $1771 = $856;
        $855 = $1771;
        $1772 = $855;
        $854 = $1772;
        $1773 = $854;
        $1774 = HEAP8[$1773>>0]|0;
        $1775 = $1774&255;
        $1776 = $1775 & 1;
        $1777 = ($1776|0)!=(0);
        if ($1777) {
         $848 = $1770;
         $1778 = $848;
         $847 = $1778;
         $1779 = $847;
         $846 = $1779;
         $1780 = $846;
         $1781 = (($1780) + 8|0);
         $1782 = HEAP32[$1781>>2]|0;
         $1789 = $1782;
        } else {
         $853 = $1770;
         $1783 = $853;
         $852 = $1783;
         $1784 = $852;
         $851 = $1784;
         $1785 = $851;
         $1786 = (($1785) + 1|0);
         $850 = $1786;
         $1787 = $850;
         $849 = $1787;
         $1788 = $849;
         $1789 = $1788;
        }
        $845 = $1789;
        $1790 = $845;
        __THREW__ = 0;
        $1791 = (invoke_ii(508,($1790|0))|0);
        $1792 = __THREW__; __THREW__ = 0;
        $1793 = $1792&1;
        if ($1793) {
         label = 56;
         break;
        }
        $nFaces = $1791;
        $826 = $tokens;
        $827 = 2;
        $1794 = $826;
        $1795 = $827;
        $1796 = HEAP32[$1794>>2]|0;
        $1797 = (($1796) + (($1795*12)|0)|0);
        $823 = $1797;
        $1798 = $823;
        $822 = $1798;
        $1799 = $822;
        $821 = $1799;
        $1800 = $821;
        $820 = $1800;
        $1801 = $820;
        $819 = $1801;
        $1802 = $819;
        $818 = $1802;
        $1803 = $818;
        $1804 = HEAP8[$1803>>0]|0;
        $1805 = $1804&255;
        $1806 = $1805 & 1;
        $1807 = ($1806|0)!=(0);
        if ($1807) {
         $812 = $1800;
         $1808 = $812;
         $811 = $1808;
         $1809 = $811;
         $810 = $1809;
         $1810 = $810;
         $1811 = (($1810) + 8|0);
         $1812 = HEAP32[$1811>>2]|0;
         $1819 = $1812;
        } else {
         $817 = $1800;
         $1813 = $817;
         $816 = $1813;
         $1814 = $816;
         $815 = $1814;
         $1815 = $815;
         $1816 = (($1815) + 1|0);
         $814 = $1816;
         $1817 = $814;
         $813 = $1817;
         $1818 = $813;
         $1819 = $1818;
        }
        $809 = $1819;
        $1820 = $809;
        __THREW__ = 0;
        $1821 = (invoke_ii(508,($1820|0))|0);
        $1822 = __THREW__; __THREW__ = 0;
        $1823 = $1822&1;
        if ($1823) {
         label = 56;
         break;
        }
        $nEdges = $1821;
        $1824 = $dimension;
        $1825 = ($1824|0)!=(3);
        if ($1825) {
         $1234 = 4;
         $1241 = 1;
         break L37;
        }
        $1826 = $homogeneousComponents;
        $1827 = $1826&1;
        if ($1827) {
         $1234 = 4;
         $1241 = 1;
         break L37;
        }
        $1828 = $1235;
        $1829 = $nVertices;
        __THREW__ = 0;
        invoke_viii(509,($v_iter|0),($1828|0),($1829|0));
        $1830 = __THREW__; __THREW__ = 0;
        $1831 = $1830&1;
        if ($1831) {
         label = 56;
         break;
        }
        $1832 = $1236;
        __THREW__ = 0;
        invoke_vii(502,($1832|0),($tokens|0));
        $1833 = __THREW__; __THREW__ = 0;
        $1834 = $1833&1;
        if ($1834) {
         label = 56;
         break;
        }
        $k = 0;
        $i = 0;
        L171: while(1) {
         $1835 = $i;
         $1836 = $nVertices;
         $1837 = ($1835>>>0)<($1836>>>0);
         if (!($1837)) {
          label = 343;
          break;
         }
         $1838 = $1238;
         $1839 = ($1838|0)!=(0|0);
         do {
          if ($1839) {
           $1840 = $i;
           $1841 = (($1840>>>0) % 1000)&-1;
           $1842 = ($1841|0)==(0);
           if (!($1842)) {
            break;
           }
           $1843 = $1238;
           $1844 = $i;
           $1845 = ($1844*50)|0;
           $1846 = $nVertices;
           $1847 = (($1845>>>0) / ($1846>>>0))&-1;
           __THREW__ = 0;
           (invoke_iii($1843|0,($1847|0),(4952|0))|0);
           $1848 = __THREW__; __THREW__ = 0;
           $1849 = $1848&1;
           if ($1849) {
            label = 56;
            break L130;
           }
          }
         } while(0);
         $j = 0;
         while(1) {
          $1850 = $j;
          $1851 = ($1850>>>0)<(3);
          if (!($1851)) {
           break;
          }
          $1852 = $k;
          $808 = $tokens;
          $1853 = $808;
          $1854 = (($1853) + 4|0);
          $1855 = HEAP32[$1854>>2]|0;
          $1856 = HEAP32[$1853>>2]|0;
          $1857 = $1855;
          $1858 = $1856;
          $1859 = (($1857) - ($1858))|0;
          $1860 = (($1859|0) / 12)&-1;
          $1861 = ($1852|0)==($1860|0);
          if ($1861) {
           $1862 = $1236;
           __THREW__ = 0;
           invoke_vii(502,($1862|0),($tokens|0));
           $1863 = __THREW__; __THREW__ = 0;
           $1864 = $1863&1;
           if ($1864) {
            label = 56;
            break L130;
           }
           $807 = $tokens;
           $1865 = $807;
           $1866 = (($1865) + 4|0);
           $1867 = HEAP32[$1866>>2]|0;
           $1868 = HEAP32[$1865>>2]|0;
           $1869 = $1867;
           $1870 = $1868;
           $1871 = (($1869) - ($1870))|0;
           $1872 = (($1871|0) / 12)&-1;
           $1873 = ($1872|0)==(0);
           if ($1873) {
            label = 141;
            break L171;
           }
           $k = 0;
          }
          $1874 = $k;
          $752 = $tokens;
          $753 = $1874;
          $1875 = $752;
          $1876 = $753;
          $1877 = HEAP32[$1875>>2]|0;
          $1878 = (($1877) + (($1876*12)|0)|0);
          $749 = $1878;
          $1879 = $749;
          $748 = $1879;
          $1880 = $748;
          $747 = $1880;
          $1881 = $747;
          $746 = $1881;
          $1882 = $746;
          $745 = $1882;
          $1883 = $745;
          $744 = $1883;
          $1884 = $744;
          $1885 = HEAP8[$1884>>0]|0;
          $1886 = $1885&255;
          $1887 = $1886 & 1;
          $1888 = ($1887|0)!=(0);
          if ($1888) {
           $738 = $1881;
           $1889 = $738;
           $737 = $1889;
           $1890 = $737;
           $736 = $1890;
           $1891 = $736;
           $1892 = (($1891) + 8|0);
           $1893 = HEAP32[$1892>>2]|0;
           $1900 = $1893;
          } else {
           $743 = $1881;
           $1894 = $743;
           $742 = $1894;
           $1895 = $742;
           $741 = $1895;
           $1896 = $741;
           $1897 = (($1896) + 1|0);
           $740 = $1897;
           $1898 = $740;
           $739 = $1898;
           $1899 = $739;
           $1900 = $1899;
          }
          $735 = $1900;
          $1901 = $735;
          __THREW__ = 0;
          $1902 = (+invoke_di(510,($1901|0)));
          $1903 = __THREW__; __THREW__ = 0;
          $1904 = $1903&1;
          if ($1904) {
           label = 56;
           break L130;
          }
          $1905 = $1902;
          $717 = $v_iter;
          $1906 = $717;
          $1907 = HEAP32[$1906>>2]|0;
          __THREW__ = 0;
          $1908 = (invoke_ii(417,($1907|0))|0);
          $1909 = __THREW__; __THREW__ = 0;
          $1910 = $1909&1;
          if ($1910) {
           label = 56;
           break L130;
          }
          $1911 = $j;
          __THREW__ = 0;
          $1912 = (invoke_iii(418,($1908|0),($1911|0))|0);
          $1913 = __THREW__; __THREW__ = 0;
          $1914 = $1913&1;
          if ($1914) {
           label = 56;
           break L130;
          }
          HEAPF32[$1912>>2] = $1905;
          $1915 = $k;
          $1916 = (($1915) + 1)|0;
          $k = $1916;
          $1917 = $j;
          $1918 = (($1917) + 1)|0;
          $j = $1918;
         }
         $1919 = $isNormalDefined;
         $1920 = $1919&1;
         if ($1920) {
          $j1 = 0;
          while(1) {
           $1921 = $j1;
           $1922 = ($1921>>>0)<(3);
           if (!($1922)) {
            break;
           }
           $1923 = $k;
           $699 = $tokens;
           $1924 = $699;
           $1925 = (($1924) + 4|0);
           $1926 = HEAP32[$1925>>2]|0;
           $1927 = HEAP32[$1924>>2]|0;
           $1928 = $1926;
           $1929 = $1927;
           $1930 = (($1928) - ($1929))|0;
           $1931 = (($1930|0) / 12)&-1;
           $1932 = ($1923|0)==($1931|0);
           if ($1932) {
            $1933 = $1236;
            __THREW__ = 0;
            invoke_vii(502,($1933|0),($tokens|0));
            $1934 = __THREW__; __THREW__ = 0;
            $1935 = $1934&1;
            if ($1935) {
             label = 56;
             break L130;
            }
            $681 = $tokens;
            $1936 = $681;
            $1937 = (($1936) + 4|0);
            $1938 = HEAP32[$1937>>2]|0;
            $1939 = HEAP32[$1936>>2]|0;
            $1940 = $1938;
            $1941 = $1939;
            $1942 = (($1940) - ($1941))|0;
            $1943 = (($1942|0) / 12)&-1;
            $1944 = ($1943|0)==(0);
            if ($1944) {
             label = 158;
             break L171;
            }
            $k = 0;
           }
           $1945 = $k;
           $677 = $tokens;
           $678 = $1945;
           $1946 = $677;
           $1947 = $678;
           $1948 = HEAP32[$1946>>2]|0;
           $1949 = (($1948) + (($1947*12)|0)|0);
           $676 = $1949;
           $1950 = $676;
           $675 = $1950;
           $1951 = $675;
           $674 = $1951;
           $1952 = $674;
           $673 = $1952;
           $1953 = $673;
           $672 = $1953;
           $1954 = $672;
           $671 = $1954;
           $1955 = $671;
           $1956 = HEAP8[$1955>>0]|0;
           $1957 = $1956&255;
           $1958 = $1957 & 1;
           $1959 = ($1958|0)!=(0);
           if ($1959) {
            $665 = $1952;
            $1960 = $665;
            $664 = $1960;
            $1961 = $664;
            $663 = $1961;
            $1962 = $663;
            $1963 = (($1962) + 8|0);
            $1964 = HEAP32[$1963>>2]|0;
            $1971 = $1964;
           } else {
            $670 = $1952;
            $1965 = $670;
            $669 = $1965;
            $1966 = $669;
            $668 = $1966;
            $1967 = $668;
            $1968 = (($1967) + 1|0);
            $667 = $1968;
            $1969 = $667;
            $666 = $1969;
            $1970 = $666;
            $1971 = $1970;
           }
           $662 = $1971;
           $1972 = $662;
           __THREW__ = 0;
           $1973 = (+invoke_di(510,($1972|0)));
           $1974 = __THREW__; __THREW__ = 0;
           $1975 = $1974&1;
           if ($1975) {
            label = 56;
            break L130;
           }
           $1976 = $1973;
           $644 = $v_iter;
           $1977 = $644;
           $1978 = HEAP32[$1977>>2]|0;
           __THREW__ = 0;
           $1979 = (invoke_ii(423,($1978|0))|0);
           $1980 = __THREW__; __THREW__ = 0;
           $1981 = $1980&1;
           if ($1981) {
            label = 56;
            break L130;
           }
           $1982 = $j1;
           __THREW__ = 0;
           $1983 = (invoke_iii(418,($1979|0),($1982|0))|0);
           $1984 = __THREW__; __THREW__ = 0;
           $1985 = $1984&1;
           if ($1985) {
            label = 56;
            break L130;
           }
           HEAPF32[$1983>>2] = $1976;
           $1986 = $k;
           $1987 = (($1986) + 1)|0;
           $k = $1987;
           $1988 = $j1;
           $1989 = (($1988) + 1)|0;
           $j1 = $1989;
          }
         }
         $1990 = $isColorDefined;
         $1991 = $1990&1;
         if ($1991) {
          $641 = $tokens;
          $1992 = $641;
          $1993 = (($1992) + 4|0);
          $1994 = HEAP32[$1993>>2]|0;
          $1995 = HEAP32[$1992>>2]|0;
          $1996 = $1994;
          $1997 = $1995;
          $1998 = (($1996) - ($1997))|0;
          $1999 = (($1998|0) / 12)&-1;
          $2000 = $k;
          $2001 = (($1999) - ($2000))|0;
          $2002 = $isTexCoordDefined;
          $2003 = $2002&1;
          $2004 = $2003 ? 1 : 0;
          $2005 = $2004<<1;
          $2006 = (($2001) - ($2005))|0;
          $nb_color_components = $2006;
          $2007 = $nb_color_components;
          $2008 = ($2007|0)<(0);
          if ($2008) {
           label = 173;
           break;
          }
          $2009 = $nb_color_components;
          $2010 = ($2009|0)>(4);
          if ($2010) {
           label = 173;
           break;
          }
          $2011 = $nb_color_components;
          $2012 = ($2011|0)>(0);
          if ($2012) {
           $2013 = $1237;
           $2014 = HEAP32[$2013>>2]|0;
           $2015 = $2014 | 4;
           HEAP32[$2013>>2] = $2015;
          }
          $2016 = $1235;
          __THREW__ = 0;
          $2017 = (invoke_ii(408,($2016|0))|0);
          $2018 = __THREW__; __THREW__ = 0;
          $2019 = $2018&1;
          if ($2019) {
           label = 56;
           break L130;
          }
          if ($2017) {
           $2020 = $nb_color_components;
           $2021 = ($2020|0)==(1);
           if ($2021) {
            $640 = $v_iter;
            $2022 = $640;
            $2023 = HEAP32[$2022>>2]|0;
            __THREW__ = 0;
            $2024 = (invoke_ii(420,($2023|0))|0);
            $2025 = __THREW__; __THREW__ = 0;
            $2026 = $2025&1;
            if ($2026) {
             label = 56;
             break L130;
            }
            $2027 = $k;
            $638 = $tokens;
            $639 = $2027;
            $2028 = $638;
            $2029 = $639;
            $2030 = HEAP32[$2028>>2]|0;
            $2031 = (($2030) + (($2029*12)|0)|0);
            $635 = $2031;
            $2032 = $635;
            $634 = $2032;
            $2033 = $634;
            $633 = $2033;
            $2034 = $633;
            $632 = $2034;
            $2035 = $632;
            $631 = $2035;
            $2036 = $631;
            $630 = $2036;
            $2037 = $630;
            $2038 = HEAP8[$2037>>0]|0;
            $2039 = $2038&255;
            $2040 = $2039 & 1;
            $2041 = ($2040|0)!=(0);
            if ($2041) {
             $624 = $2034;
             $2042 = $624;
             $623 = $2042;
             $2043 = $623;
             $622 = $2043;
             $2044 = $622;
             $2045 = (($2044) + 8|0);
             $2046 = HEAP32[$2045>>2]|0;
             $2053 = $2046;
            } else {
             $629 = $2034;
             $2047 = $629;
             $628 = $2047;
             $2048 = $628;
             $627 = $2048;
             $2049 = $627;
             $2050 = (($2049) + 1|0);
             $626 = $2050;
             $2051 = $626;
             $625 = $2051;
             $2052 = $625;
             $2053 = $2052;
            }
            $621 = $2053;
            $2054 = $621;
            __THREW__ = 0;
            $2055 = (invoke_ii(508,($2054|0))|0);
            $2056 = __THREW__; __THREW__ = 0;
            $2057 = $2056&1;
            if ($2057) {
             label = 56;
             break L130;
            }
            __THREW__ = 0;
            invoke_vii(511,($1248|0),($2055|0));
            $2058 = __THREW__; __THREW__ = 0;
            $2059 = $2058&1;
            if ($2059) {
             label = 56;
             break L130;
            }
            __THREW__ = 0;
            invoke_vii(512,($2024|0),($1248|0));
            $2060 = __THREW__; __THREW__ = 0;
            $2061 = $2060&1;
            if ($2061) {
             label = 56;
             break L130;
            }
           } else {
            $2062 = $nb_color_components;
            $2063 = ($2062|0)==(3);
            if ($2063) {
             $2064 = $k;
             $618 = $tokens;
             $619 = $2064;
             $2065 = $618;
             $2066 = $619;
             $2067 = HEAP32[$2065>>2]|0;
             $2068 = (($2067) + (($2066*12)|0)|0);
             $613 = $2068;
             $614 = 4968;
             $615 = 0;
             $2069 = $613;
             $612 = $2069;
             $2070 = $612;
             $611 = $2070;
             $2071 = $611;
             $610 = $2071;
             $2072 = $610;
             $609 = $2072;
             $2073 = $609;
             $608 = $2073;
             $2074 = $608;
             $2075 = HEAP8[$2074>>0]|0;
             $2076 = $2075&255;
             $2077 = $2076 & 1;
             $2078 = ($2077|0)!=(0);
             if ($2078) {
              $602 = $2071;
              $2079 = $602;
              $601 = $2079;
              $2080 = $601;
              $600 = $2080;
              $2081 = $600;
              $2082 = (($2081) + 8|0);
              $2083 = HEAP32[$2082>>2]|0;
              $2090 = $2083;
             } else {
              $607 = $2071;
              $2084 = $607;
              $606 = $2084;
              $2085 = $606;
              $605 = $2085;
              $2086 = $605;
              $2087 = (($2086) + 1|0);
              $604 = $2087;
              $2088 = $604;
              $603 = $2088;
              $2089 = $603;
              $2090 = $2089;
             }
             $599 = $2090;
             $2091 = $599;
             $588 = $2069;
             $2092 = $588;
             $587 = $2092;
             $2093 = $587;
             $586 = $2093;
             $2094 = $586;
             $585 = $2094;
             $2095 = $585;
             $2096 = HEAP8[$2095>>0]|0;
             $2097 = $2096&255;
             $2098 = $2097 & 1;
             $2099 = ($2098|0)!=(0);
             if ($2099) {
              $581 = $2092;
              $2100 = $581;
              $580 = $2100;
              $2101 = $580;
              $579 = $2101;
              $2102 = $579;
              $2103 = (($2102) + 4|0);
              $2104 = HEAP32[$2103>>2]|0;
              $2117 = $2104;
             } else {
              $584 = $2092;
              $2105 = $584;
              $583 = $2105;
              $2106 = $583;
              $582 = $2106;
              $2107 = $582;
              $2108 = HEAP8[$2107>>0]|0;
              $2109 = $2108&255;
              $2110 = $2109 >> 1;
              $2117 = $2110;
             }
             $2111 = $614;
             $2112 = $615;
             $2113 = $614;
             __THREW__ = 0;
             $2114 = (invoke_ii(441,($2113|0))|0);
             $2115 = __THREW__; __THREW__ = 0;
             $2116 = $2115&1;
             if ($2116) {
              label = 207;
              break;
             }
             $590 = $2091;
             $591 = $2117;
             $592 = $2111;
             $593 = $2112;
             $594 = $2114;
             $2118 = $593;
             $2119 = $591;
             $2120 = ($2118>>>0)>($2119>>>0);
             do {
              if ($2120) {
               label = 199;
              } else {
               $2121 = $591;
               $2122 = $593;
               $2123 = (($2121) - ($2122))|0;
               $2124 = $594;
               $2125 = ($2123>>>0)<($2124>>>0);
               if ($2125) {
                label = 199;
                break;
               }
               $2126 = $594;
               $2127 = ($2126|0)==(0);
               if ($2127) {
                $2128 = $593;
                $589 = $2128;
                break;
               }
               $2129 = $590;
               $2130 = $593;
               $2131 = (($2129) + ($2130)|0);
               $2132 = $590;
               $2133 = $591;
               $2134 = (($2132) + ($2133)|0);
               $2135 = $592;
               $2136 = $592;
               $2137 = $594;
               $2138 = (($2136) + ($2137)|0);
               __THREW__ = 0;
               ;HEAP8[$$byval_copy6+0>>0]=HEAP8[$595+0>>0]|0;
               ;HEAP8[$$byval_copy7+0>>0]=HEAP8[$596+0>>0]|0;
               $2139 = (invoke_iiiiiiii(513,($2131|0),($2134|0),($2135|0),($2138|0),(505|0),($$byval_copy6|0),($$byval_copy7|0))|0);
               $2140 = __THREW__; __THREW__ = 0;
               $2141 = $2140&1;
               if ($2141) {
                label = 205;
                break L171;
               }
               $__r$i$i82 = $2139;
               $2142 = $__r$i$i82;
               $2143 = $590;
               $2144 = $591;
               $2145 = (($2143) + ($2144)|0);
               $2146 = ($2142|0)==($2145|0);
               if ($2146) {
                $589 = -1;
                break;
               } else {
                $2150 = $__r$i$i82;
                $2151 = $590;
                $2152 = $2150;
                $2153 = $2151;
                $2154 = (($2152) - ($2153))|0;
                $589 = $2154;
                break;
               }
              }
             } while(0);
             if ((label|0) == 199) {
              label = 0;
              $589 = -1;
             }
             $2158 = $589;
             $2159 = ($2158|0)==(-1);
             if ($2159) {
              $2160 = $k;
              $577 = $tokens;
              $578 = $2160;
              $2161 = $577;
              $2162 = $578;
              $2163 = HEAP32[$2161>>2]|0;
              $2164 = (($2163) + (($2162*12)|0)|0);
              $576 = $2164;
              $2165 = $576;
              $575 = $2165;
              $2166 = $575;
              $574 = $2166;
              $2167 = $574;
              $573 = $2167;
              $2168 = $573;
              $572 = $2168;
              $2169 = $572;
              $571 = $2169;
              $2170 = $571;
              $2171 = HEAP8[$2170>>0]|0;
              $2172 = $2171&255;
              $2173 = $2172 & 1;
              $2174 = ($2173|0)!=(0);
              if ($2174) {
               $565 = $2167;
               $2175 = $565;
               $564 = $2175;
               $2176 = $564;
               $563 = $2176;
               $2177 = $563;
               $2178 = (($2177) + 8|0);
               $2179 = HEAP32[$2178>>2]|0;
               $2186 = $2179;
              } else {
               $570 = $2167;
               $2180 = $570;
               $569 = $2180;
               $2181 = $569;
               $568 = $2181;
               $2182 = $568;
               $2183 = (($2182) + 1|0);
               $567 = $2183;
               $2184 = $567;
               $566 = $2184;
               $2185 = $566;
               $2186 = $2185;
              }
              $562 = $2186;
              $2187 = $562;
              __THREW__ = 0;
              $2188 = (invoke_ii(508,($2187|0))|0);
              $2189 = __THREW__; __THREW__ = 0;
              $2190 = $2189&1;
              if ($2190) {
               label = 56;
               break L130;
              }
              $2191 = $2188&255;
              $r = $2191;
              $2192 = $k;
              $2193 = (($2192) + 1)|0;
              $560 = $tokens;
              $561 = $2193;
              $2194 = $560;
              $2195 = $561;
              $2196 = HEAP32[$2194>>2]|0;
              $2197 = (($2196) + (($2195*12)|0)|0);
              $559 = $2197;
              $2198 = $559;
              $558 = $2198;
              $2199 = $558;
              $557 = $2199;
              $2200 = $557;
              $556 = $2200;
              $2201 = $556;
              $555 = $2201;
              $2202 = $555;
              $554 = $2202;
              $2203 = $554;
              $2204 = HEAP8[$2203>>0]|0;
              $2205 = $2204&255;
              $2206 = $2205 & 1;
              $2207 = ($2206|0)!=(0);
              if ($2207) {
               $548 = $2200;
               $2208 = $548;
               $547 = $2208;
               $2209 = $547;
               $546 = $2209;
               $2210 = $546;
               $2211 = (($2210) + 8|0);
               $2212 = HEAP32[$2211>>2]|0;
               $2219 = $2212;
              } else {
               $553 = $2200;
               $2213 = $553;
               $552 = $2213;
               $2214 = $552;
               $551 = $2214;
               $2215 = $551;
               $2216 = (($2215) + 1|0);
               $550 = $2216;
               $2217 = $550;
               $549 = $2217;
               $2218 = $549;
               $2219 = $2218;
              }
              $545 = $2219;
              $2220 = $545;
              __THREW__ = 0;
              $2221 = (invoke_ii(508,($2220|0))|0);
              $2222 = __THREW__; __THREW__ = 0;
              $2223 = $2222&1;
              if ($2223) {
               label = 56;
               break L130;
              }
              $2224 = $2221&255;
              $g = $2224;
              $2225 = $k;
              $2226 = (($2225) + 2)|0;
              $543 = $tokens;
              $544 = $2226;
              $2227 = $543;
              $2228 = $544;
              $2229 = HEAP32[$2227>>2]|0;
              $2230 = (($2229) + (($2228*12)|0)|0);
              $542 = $2230;
              $2231 = $542;
              $541 = $2231;
              $2232 = $541;
              $540 = $2232;
              $2233 = $540;
              $539 = $2233;
              $2234 = $539;
              $538 = $2234;
              $2235 = $538;
              $537 = $2235;
              $2236 = $537;
              $2237 = HEAP8[$2236>>0]|0;
              $2238 = $2237&255;
              $2239 = $2238 & 1;
              $2240 = ($2239|0)!=(0);
              if ($2240) {
               $531 = $2233;
               $2241 = $531;
               $530 = $2241;
               $2242 = $530;
               $529 = $2242;
               $2243 = $529;
               $2244 = (($2243) + 8|0);
               $2245 = HEAP32[$2244>>2]|0;
               $2252 = $2245;
              } else {
               $536 = $2233;
               $2246 = $536;
               $535 = $2246;
               $2247 = $535;
               $534 = $2247;
               $2248 = $534;
               $2249 = (($2248) + 1|0);
               $533 = $2249;
               $2250 = $533;
               $532 = $2250;
               $2251 = $532;
               $2252 = $2251;
              }
              $528 = $2252;
              $2253 = $528;
              __THREW__ = 0;
              $2254 = (invoke_ii(508,($2253|0))|0);
              $2255 = __THREW__; __THREW__ = 0;
              $2256 = $2255&1;
              if ($2256) {
               label = 56;
               break L130;
              }
              $2257 = $2254&255;
              $b = $2257;
              $2258 = $r;
              $2259 = $g;
              $2260 = $b;
              __THREW__ = 0;
              invoke_viiiii(514,($color|0),($2258|0),($2259|0),($2260|0),-1);
              $2261 = __THREW__; __THREW__ = 0;
              $2262 = $2261&1;
              if ($2262) {
               label = 56;
               break L130;
              }
              $527 = $v_iter;
              $2263 = $527;
              $2264 = HEAP32[$2263>>2]|0;
              __THREW__ = 0;
              $2265 = (invoke_ii(420,($2264|0))|0);
              $2266 = __THREW__; __THREW__ = 0;
              $2267 = $2266&1;
              if ($2267) {
               label = 56;
               break L130;
              }
              __THREW__ = 0;
              invoke_vii(515,($2265|0),($color|0));
              $2268 = __THREW__; __THREW__ = 0;
              $2269 = $2268&1;
              if ($2269) {
               label = 56;
               break L130;
              }
             } else {
              $2270 = $k;
              $525 = $tokens;
              $526 = $2270;
              $2271 = $525;
              $2272 = $526;
              $2273 = HEAP32[$2271>>2]|0;
              $2274 = (($2273) + (($2272*12)|0)|0);
              $524 = $2274;
              $2275 = $524;
              $523 = $2275;
              $2276 = $523;
              $522 = $2276;
              $2277 = $522;
              $521 = $2277;
              $2278 = $521;
              $520 = $2278;
              $2279 = $520;
              $519 = $2279;
              $2280 = $519;
              $2281 = HEAP8[$2280>>0]|0;
              $2282 = $2281&255;
              $2283 = $2282 & 1;
              $2284 = ($2283|0)!=(0);
              if ($2284) {
               $513 = $2277;
               $2285 = $513;
               $512 = $2285;
               $2286 = $512;
               $511 = $2286;
               $2287 = $511;
               $2288 = (($2287) + 8|0);
               $2289 = HEAP32[$2288>>2]|0;
               $2296 = $2289;
              } else {
               $518 = $2277;
               $2290 = $518;
               $517 = $2290;
               $2291 = $517;
               $516 = $2291;
               $2292 = $516;
               $2293 = (($2292) + 1|0);
               $515 = $2293;
               $2294 = $515;
               $514 = $2294;
               $2295 = $514;
               $2296 = $2295;
              }
              $510 = $2296;
              $2297 = $510;
              __THREW__ = 0;
              $2298 = (+invoke_di(510,($2297|0)));
              $2299 = __THREW__; __THREW__ = 0;
              $2300 = $2299&1;
              if ($2300) {
               label = 56;
               break L130;
              }
              $2301 = $2298;
              $r2 = $2301;
              $2302 = $k;
              $2303 = (($2302) + 1)|0;
              $508 = $tokens;
              $509 = $2303;
              $2304 = $508;
              $2305 = $509;
              $2306 = HEAP32[$2304>>2]|0;
              $2307 = (($2306) + (($2305*12)|0)|0);
              $505 = $2307;
              $2308 = $505;
              $504 = $2308;
              $2309 = $504;
              $503 = $2309;
              $2310 = $503;
              $502 = $2310;
              $2311 = $502;
              $501 = $2311;
              $2312 = $501;
              $500 = $2312;
              $2313 = $500;
              $2314 = HEAP8[$2313>>0]|0;
              $2315 = $2314&255;
              $2316 = $2315 & 1;
              $2317 = ($2316|0)!=(0);
              if ($2317) {
               $494 = $2310;
               $2318 = $494;
               $493 = $2318;
               $2319 = $493;
               $492 = $2319;
               $2320 = $492;
               $2321 = (($2320) + 8|0);
               $2322 = HEAP32[$2321>>2]|0;
               $2329 = $2322;
              } else {
               $499 = $2310;
               $2323 = $499;
               $498 = $2323;
               $2324 = $498;
               $497 = $2324;
               $2325 = $497;
               $2326 = (($2325) + 1|0);
               $496 = $2326;
               $2327 = $496;
               $495 = $2327;
               $2328 = $495;
               $2329 = $2328;
              }
              $491 = $2329;
              $2330 = $491;
              __THREW__ = 0;
              $2331 = (+invoke_di(510,($2330|0)));
              $2332 = __THREW__; __THREW__ = 0;
              $2333 = $2332&1;
              if ($2333) {
               label = 56;
               break L130;
              }
              $2334 = $2331;
              $g3 = $2334;
              $2335 = $k;
              $2336 = (($2335) + 2)|0;
              $489 = $tokens;
              $490 = $2336;
              $2337 = $489;
              $2338 = $490;
              $2339 = HEAP32[$2337>>2]|0;
              $2340 = (($2339) + (($2338*12)|0)|0);
              $482 = $2340;
              $2341 = $482;
              $481 = $2341;
              $2342 = $481;
              $480 = $2342;
              $2343 = $480;
              $479 = $2343;
              $2344 = $479;
              $478 = $2344;
              $2345 = $478;
              $477 = $2345;
              $2346 = $477;
              $2347 = HEAP8[$2346>>0]|0;
              $2348 = $2347&255;
              $2349 = $2348 & 1;
              $2350 = ($2349|0)!=(0);
              if ($2350) {
               $471 = $2343;
               $2351 = $471;
               $470 = $2351;
               $2352 = $470;
               $469 = $2352;
               $2353 = $469;
               $2354 = (($2353) + 8|0);
               $2355 = HEAP32[$2354>>2]|0;
               $2362 = $2355;
              } else {
               $476 = $2343;
               $2356 = $476;
               $475 = $2356;
               $2357 = $475;
               $474 = $2357;
               $2358 = $474;
               $2359 = (($2358) + 1|0);
               $473 = $2359;
               $2360 = $473;
               $472 = $2360;
               $2361 = $472;
               $2362 = $2361;
              }
              $468 = $2362;
              $2363 = $468;
              __THREW__ = 0;
              $2364 = (+invoke_di(510,($2363|0)));
              $2365 = __THREW__; __THREW__ = 0;
              $2366 = $2365&1;
              if ($2366) {
               label = 56;
               break L130;
              }
              $2367 = $2364;
              $b4 = $2367;
              $2368 = $r2;
              $2369 = $g3;
              $2370 = $b4;
              __THREW__ = 0;
              invoke_vidddd(516,($color5|0),(+$2368),(+$2369),(+$2370),1.0);
              $2371 = __THREW__; __THREW__ = 0;
              $2372 = $2371&1;
              if ($2372) {
               label = 56;
               break L130;
              }
              $459 = $v_iter;
              $2373 = $459;
              $2374 = HEAP32[$2373>>2]|0;
              __THREW__ = 0;
              $2375 = (invoke_ii(420,($2374|0))|0);
              $2376 = __THREW__; __THREW__ = 0;
              $2377 = $2376&1;
              if ($2377) {
               label = 56;
               break L130;
              }
              __THREW__ = 0;
              invoke_vii(512,($2375|0),($color5|0));
              $2378 = __THREW__; __THREW__ = 0;
              $2379 = $2378&1;
              if ($2379) {
               label = 56;
               break L130;
              }
             }
            } else {
             $2380 = $nb_color_components;
             $2381 = ($2380|0)==(4);
             if ($2381) {
              $2382 = $k;
              $449 = $tokens;
              $450 = $2382;
              $2383 = $449;
              $2384 = $450;
              $2385 = HEAP32[$2383>>2]|0;
              $2386 = (($2385) + (($2384*12)|0)|0);
              $435 = $2386;
              $436 = 4968;
              $437 = 0;
              $2387 = $435;
              $434 = $2387;
              $2388 = $434;
              $433 = $2388;
              $2389 = $433;
              $432 = $2389;
              $2390 = $432;
              $431 = $2390;
              $2391 = $431;
              $430 = $2391;
              $2392 = $430;
              $2393 = HEAP8[$2392>>0]|0;
              $2394 = $2393&255;
              $2395 = $2394 & 1;
              $2396 = ($2395|0)!=(0);
              if ($2396) {
               $424 = $2389;
               $2397 = $424;
               $423 = $2397;
               $2398 = $423;
               $422 = $2398;
               $2399 = $422;
               $2400 = (($2399) + 8|0);
               $2401 = HEAP32[$2400>>2]|0;
               $2408 = $2401;
              } else {
               $429 = $2389;
               $2402 = $429;
               $428 = $2402;
               $2403 = $428;
               $427 = $2403;
               $2404 = $427;
               $2405 = (($2404) + 1|0);
               $426 = $2405;
               $2406 = $426;
               $425 = $2406;
               $2407 = $425;
               $2408 = $2407;
              }
              $421 = $2408;
              $2409 = $421;
              $410 = $2387;
              $2410 = $410;
              $409 = $2410;
              $2411 = $409;
              $408 = $2411;
              $2412 = $408;
              $407 = $2412;
              $2413 = $407;
              $2414 = HEAP8[$2413>>0]|0;
              $2415 = $2414&255;
              $2416 = $2415 & 1;
              $2417 = ($2416|0)!=(0);
              if ($2417) {
               $403 = $2410;
               $2418 = $403;
               $402 = $2418;
               $2419 = $402;
               $401 = $2419;
               $2420 = $401;
               $2421 = (($2420) + 4|0);
               $2422 = HEAP32[$2421>>2]|0;
               $2435 = $2422;
              } else {
               $406 = $2410;
               $2423 = $406;
               $405 = $2423;
               $2424 = $405;
               $404 = $2424;
               $2425 = $404;
               $2426 = HEAP8[$2425>>0]|0;
               $2427 = $2426&255;
               $2428 = $2427 >> 1;
               $2435 = $2428;
              }
              $2429 = $436;
              $2430 = $437;
              $2431 = $436;
              __THREW__ = 0;
              $2432 = (invoke_ii(441,($2431|0))|0);
              $2433 = __THREW__; __THREW__ = 0;
              $2434 = $2433&1;
              if ($2434) {
               label = 267;
               break;
              }
              $412 = $2409;
              $413 = $2435;
              $414 = $2429;
              $415 = $2430;
              $416 = $2432;
              $2436 = $415;
              $2437 = $413;
              $2438 = ($2436>>>0)>($2437>>>0);
              do {
               if ($2438) {
                label = 259;
               } else {
                $2439 = $413;
                $2440 = $415;
                $2441 = (($2439) - ($2440))|0;
                $2442 = $416;
                $2443 = ($2441>>>0)<($2442>>>0);
                if ($2443) {
                 label = 259;
                 break;
                }
                $2444 = $416;
                $2445 = ($2444|0)==(0);
                if ($2445) {
                 $2446 = $415;
                 $411 = $2446;
                 break;
                }
                $2447 = $412;
                $2448 = $415;
                $2449 = (($2447) + ($2448)|0);
                $2450 = $412;
                $2451 = $413;
                $2452 = (($2450) + ($2451)|0);
                $2453 = $414;
                $2454 = $414;
                $2455 = $416;
                $2456 = (($2454) + ($2455)|0);
                __THREW__ = 0;
                ;HEAP8[$$byval_copy8+0>>0]=HEAP8[$417+0>>0]|0;
                ;HEAP8[$$byval_copy9+0>>0]=HEAP8[$418+0>>0]|0;
                $2457 = (invoke_iiiiiiii(513,($2449|0),($2452|0),($2453|0),($2456|0),(505|0),($$byval_copy8|0),($$byval_copy9|0))|0);
                $2458 = __THREW__; __THREW__ = 0;
                $2459 = $2458&1;
                if ($2459) {
                 label = 265;
                 break L171;
                }
                $__r$i$i97 = $2457;
                $2460 = $__r$i$i97;
                $2461 = $412;
                $2462 = $413;
                $2463 = (($2461) + ($2462)|0);
                $2464 = ($2460|0)==($2463|0);
                if ($2464) {
                 $411 = -1;
                 break;
                } else {
                 $2468 = $__r$i$i97;
                 $2469 = $412;
                 $2470 = $2468;
                 $2471 = $2469;
                 $2472 = (($2470) - ($2471))|0;
                 $411 = $2472;
                 break;
                }
               }
              } while(0);
              if ((label|0) == 259) {
               label = 0;
               $411 = -1;
              }
              $2476 = $411;
              $2477 = ($2476|0)==(-1);
              if ($2477) {
               $2478 = $k;
               $399 = $tokens;
               $400 = $2478;
               $2479 = $399;
               $2480 = $400;
               $2481 = HEAP32[$2479>>2]|0;
               $2482 = (($2481) + (($2480*12)|0)|0);
               $398 = $2482;
               $2483 = $398;
               $397 = $2483;
               $2484 = $397;
               $396 = $2484;
               $2485 = $396;
               $395 = $2485;
               $2486 = $395;
               $394 = $2486;
               $2487 = $394;
               $393 = $2487;
               $2488 = $393;
               $2489 = HEAP8[$2488>>0]|0;
               $2490 = $2489&255;
               $2491 = $2490 & 1;
               $2492 = ($2491|0)!=(0);
               if ($2492) {
                $387 = $2485;
                $2493 = $387;
                $386 = $2493;
                $2494 = $386;
                $385 = $2494;
                $2495 = $385;
                $2496 = (($2495) + 8|0);
                $2497 = HEAP32[$2496>>2]|0;
                $2504 = $2497;
               } else {
                $392 = $2485;
                $2498 = $392;
                $391 = $2498;
                $2499 = $391;
                $390 = $2499;
                $2500 = $390;
                $2501 = (($2500) + 1|0);
                $389 = $2501;
                $2502 = $389;
                $388 = $2502;
                $2503 = $388;
                $2504 = $2503;
               }
               $384 = $2504;
               $2505 = $384;
               __THREW__ = 0;
               $2506 = (invoke_ii(508,($2505|0))|0);
               $2507 = __THREW__; __THREW__ = 0;
               $2508 = $2507&1;
               if ($2508) {
                label = 56;
                break L130;
               }
               $2509 = $2506&255;
               $r6 = $2509;
               $2510 = $k;
               $2511 = (($2510) + 1)|0;
               $382 = $tokens;
               $383 = $2511;
               $2512 = $382;
               $2513 = $383;
               $2514 = HEAP32[$2512>>2]|0;
               $2515 = (($2514) + (($2513*12)|0)|0);
               $381 = $2515;
               $2516 = $381;
               $380 = $2516;
               $2517 = $380;
               $379 = $2517;
               $2518 = $379;
               $378 = $2518;
               $2519 = $378;
               $377 = $2519;
               $2520 = $377;
               $376 = $2520;
               $2521 = $376;
               $2522 = HEAP8[$2521>>0]|0;
               $2523 = $2522&255;
               $2524 = $2523 & 1;
               $2525 = ($2524|0)!=(0);
               if ($2525) {
                $370 = $2518;
                $2526 = $370;
                $369 = $2526;
                $2527 = $369;
                $368 = $2527;
                $2528 = $368;
                $2529 = (($2528) + 8|0);
                $2530 = HEAP32[$2529>>2]|0;
                $2537 = $2530;
               } else {
                $375 = $2518;
                $2531 = $375;
                $374 = $2531;
                $2532 = $374;
                $373 = $2532;
                $2533 = $373;
                $2534 = (($2533) + 1|0);
                $372 = $2534;
                $2535 = $372;
                $371 = $2535;
                $2536 = $371;
                $2537 = $2536;
               }
               $367 = $2537;
               $2538 = $367;
               __THREW__ = 0;
               $2539 = (invoke_ii(508,($2538|0))|0);
               $2540 = __THREW__; __THREW__ = 0;
               $2541 = $2540&1;
               if ($2541) {
                label = 56;
                break L130;
               }
               $2542 = $2539&255;
               $g7 = $2542;
               $2543 = $k;
               $2544 = (($2543) + 2)|0;
               $353 = $tokens;
               $354 = $2544;
               $2545 = $353;
               $2546 = $354;
               $2547 = HEAP32[$2545>>2]|0;
               $2548 = (($2547) + (($2546*12)|0)|0);
               $352 = $2548;
               $2549 = $352;
               $351 = $2549;
               $2550 = $351;
               $350 = $2550;
               $2551 = $350;
               $349 = $2551;
               $2552 = $349;
               $348 = $2552;
               $2553 = $348;
               $347 = $2553;
               $2554 = $347;
               $2555 = HEAP8[$2554>>0]|0;
               $2556 = $2555&255;
               $2557 = $2556 & 1;
               $2558 = ($2557|0)!=(0);
               if ($2558) {
                $341 = $2551;
                $2559 = $341;
                $340 = $2559;
                $2560 = $340;
                $339 = $2560;
                $2561 = $339;
                $2562 = (($2561) + 8|0);
                $2563 = HEAP32[$2562>>2]|0;
                $2570 = $2563;
               } else {
                $346 = $2551;
                $2564 = $346;
                $345 = $2564;
                $2565 = $345;
                $344 = $2565;
                $2566 = $344;
                $2567 = (($2566) + 1|0);
                $343 = $2567;
                $2568 = $343;
                $342 = $2568;
                $2569 = $342;
                $2570 = $2569;
               }
               $338 = $2570;
               $2571 = $338;
               __THREW__ = 0;
               $2572 = (invoke_ii(508,($2571|0))|0);
               $2573 = __THREW__; __THREW__ = 0;
               $2574 = $2573&1;
               if ($2574) {
                label = 56;
                break L130;
               }
               $2575 = $2572&255;
               $b8 = $2575;
               $2576 = $k;
               $2577 = (($2576) + 3)|0;
               $336 = $tokens;
               $337 = $2577;
               $2578 = $336;
               $2579 = $337;
               $2580 = HEAP32[$2578>>2]|0;
               $2581 = (($2580) + (($2579*12)|0)|0);
               $335 = $2581;
               $2582 = $335;
               $334 = $2582;
               $2583 = $334;
               $333 = $2583;
               $2584 = $333;
               $332 = $2584;
               $2585 = $332;
               $331 = $2585;
               $2586 = $331;
               $330 = $2586;
               $2587 = $330;
               $2588 = HEAP8[$2587>>0]|0;
               $2589 = $2588&255;
               $2590 = $2589 & 1;
               $2591 = ($2590|0)!=(0);
               if ($2591) {
                $324 = $2584;
                $2592 = $324;
                $323 = $2592;
                $2593 = $323;
                $322 = $2593;
                $2594 = $322;
                $2595 = (($2594) + 8|0);
                $2596 = HEAP32[$2595>>2]|0;
                $2603 = $2596;
               } else {
                $329 = $2584;
                $2597 = $329;
                $328 = $2597;
                $2598 = $328;
                $327 = $2598;
                $2599 = $327;
                $2600 = (($2599) + 1|0);
                $326 = $2600;
                $2601 = $326;
                $325 = $2601;
                $2602 = $325;
                $2603 = $2602;
               }
               $321 = $2603;
               $2604 = $321;
               __THREW__ = 0;
               $2605 = (invoke_ii(508,($2604|0))|0);
               $2606 = __THREW__; __THREW__ = 0;
               $2607 = $2606&1;
               if ($2607) {
                label = 56;
                break L130;
               }
               $2608 = $2605&255;
               $a = $2608;
               $2609 = $r6;
               $2610 = $g7;
               $2611 = $b8;
               $2612 = $a;
               __THREW__ = 0;
               invoke_viiiii(514,($color9|0),($2609|0),($2610|0),($2611|0),($2612|0));
               $2613 = __THREW__; __THREW__ = 0;
               $2614 = $2613&1;
               if ($2614) {
                label = 56;
                break L130;
               }
               $270 = $v_iter;
               $2615 = $270;
               $2616 = HEAP32[$2615>>2]|0;
               __THREW__ = 0;
               $2617 = (invoke_ii(420,($2616|0))|0);
               $2618 = __THREW__; __THREW__ = 0;
               $2619 = $2618&1;
               if ($2619) {
                label = 56;
                break L130;
               }
               __THREW__ = 0;
               invoke_vii(515,($2617|0),($color9|0));
               $2620 = __THREW__; __THREW__ = 0;
               $2621 = $2620&1;
               if ($2621) {
                label = 56;
                break L130;
               }
              } else {
               $2622 = $k;
               $268 = $tokens;
               $269 = $2622;
               $2623 = $268;
               $2624 = $269;
               $2625 = HEAP32[$2623>>2]|0;
               $2626 = (($2625) + (($2624*12)|0)|0);
               $265 = $2626;
               $2627 = $265;
               $264 = $2627;
               $2628 = $264;
               $263 = $2628;
               $2629 = $263;
               $262 = $2629;
               $2630 = $262;
               $261 = $2630;
               $2631 = $261;
               $260 = $2631;
               $2632 = $260;
               $2633 = HEAP8[$2632>>0]|0;
               $2634 = $2633&255;
               $2635 = $2634 & 1;
               $2636 = ($2635|0)!=(0);
               if ($2636) {
                $254 = $2629;
                $2637 = $254;
                $253 = $2637;
                $2638 = $253;
                $252 = $2638;
                $2639 = $252;
                $2640 = (($2639) + 8|0);
                $2641 = HEAP32[$2640>>2]|0;
                $2648 = $2641;
               } else {
                $259 = $2629;
                $2642 = $259;
                $258 = $2642;
                $2643 = $258;
                $257 = $2643;
                $2644 = $257;
                $2645 = (($2644) + 1|0);
                $256 = $2645;
                $2646 = $256;
                $255 = $2646;
                $2647 = $255;
                $2648 = $2647;
               }
               $251 = $2648;
               $2649 = $251;
               __THREW__ = 0;
               $2650 = (+invoke_di(510,($2649|0)));
               $2651 = __THREW__; __THREW__ = 0;
               $2652 = $2651&1;
               if ($2652) {
                label = 56;
                break L130;
               }
               $2653 = $2650;
               $r10 = $2653;
               $2654 = $k;
               $2655 = (($2654) + 1)|0;
               $247 = $tokens;
               $248 = $2655;
               $2656 = $247;
               $2657 = $248;
               $2658 = HEAP32[$2656>>2]|0;
               $2659 = (($2658) + (($2657*12)|0)|0);
               $246 = $2659;
               $2660 = $246;
               $245 = $2660;
               $2661 = $245;
               $244 = $2661;
               $2662 = $244;
               $243 = $2662;
               $2663 = $243;
               $242 = $2663;
               $2664 = $242;
               $241 = $2664;
               $2665 = $241;
               $2666 = HEAP8[$2665>>0]|0;
               $2667 = $2666&255;
               $2668 = $2667 & 1;
               $2669 = ($2668|0)!=(0);
               if ($2669) {
                $235 = $2662;
                $2670 = $235;
                $234 = $2670;
                $2671 = $234;
                $233 = $2671;
                $2672 = $233;
                $2673 = (($2672) + 8|0);
                $2674 = HEAP32[$2673>>2]|0;
                $2681 = $2674;
               } else {
                $240 = $2662;
                $2675 = $240;
                $239 = $2675;
                $2676 = $239;
                $238 = $2676;
                $2677 = $238;
                $2678 = (($2677) + 1|0);
                $237 = $2678;
                $2679 = $237;
                $236 = $2679;
                $2680 = $236;
                $2681 = $2680;
               }
               $232 = $2681;
               $2682 = $232;
               __THREW__ = 0;
               $2683 = (+invoke_di(510,($2682|0)));
               $2684 = __THREW__; __THREW__ = 0;
               $2685 = $2684&1;
               if ($2685) {
                label = 56;
                break L130;
               }
               $2686 = $2683;
               $g11 = $2686;
               $2687 = $k;
               $2688 = (($2687) + 2)|0;
               $224 = $tokens;
               $225 = $2688;
               $2689 = $224;
               $2690 = $225;
               $2691 = HEAP32[$2689>>2]|0;
               $2692 = (($2691) + (($2690*12)|0)|0);
               $217 = $2692;
               $2693 = $217;
               $216 = $2693;
               $2694 = $216;
               $215 = $2694;
               $2695 = $215;
               $214 = $2695;
               $2696 = $214;
               $213 = $2696;
               $2697 = $213;
               $212 = $2697;
               $2698 = $212;
               $2699 = HEAP8[$2698>>0]|0;
               $2700 = $2699&255;
               $2701 = $2700 & 1;
               $2702 = ($2701|0)!=(0);
               if ($2702) {
                $206 = $2695;
                $2703 = $206;
                $205 = $2703;
                $2704 = $205;
                $204 = $2704;
                $2705 = $204;
                $2706 = (($2705) + 8|0);
                $2707 = HEAP32[$2706>>2]|0;
                $2714 = $2707;
               } else {
                $211 = $2695;
                $2708 = $211;
                $210 = $2708;
                $2709 = $210;
                $209 = $2709;
                $2710 = $209;
                $2711 = (($2710) + 1|0);
                $208 = $2711;
                $2712 = $208;
                $207 = $2712;
                $2713 = $207;
                $2714 = $2713;
               }
               $203 = $2714;
               $2715 = $203;
               __THREW__ = 0;
               $2716 = (+invoke_di(510,($2715|0)));
               $2717 = __THREW__; __THREW__ = 0;
               $2718 = $2717&1;
               if ($2718) {
                label = 56;
                break L130;
               }
               $2719 = $2716;
               $b12 = $2719;
               $2720 = $k;
               $2721 = (($2720) + 3)|0;
               $189 = $tokens;
               $190 = $2721;
               $2722 = $189;
               $2723 = $190;
               $2724 = HEAP32[$2722>>2]|0;
               $2725 = (($2724) + (($2723*12)|0)|0);
               $188 = $2725;
               $2726 = $188;
               $187 = $2726;
               $2727 = $187;
               $186 = $2727;
               $2728 = $186;
               $185 = $2728;
               $2729 = $185;
               $184 = $2729;
               $2730 = $184;
               $183 = $2730;
               $2731 = $183;
               $2732 = HEAP8[$2731>>0]|0;
               $2733 = $2732&255;
               $2734 = $2733 & 1;
               $2735 = ($2734|0)!=(0);
               if ($2735) {
                $177 = $2728;
                $2736 = $177;
                $176 = $2736;
                $2737 = $176;
                $175 = $2737;
                $2738 = $175;
                $2739 = (($2738) + 8|0);
                $2740 = HEAP32[$2739>>2]|0;
                $2747 = $2740;
               } else {
                $182 = $2728;
                $2741 = $182;
                $181 = $2741;
                $2742 = $181;
                $180 = $2742;
                $2743 = $180;
                $2744 = (($2743) + 1|0);
                $179 = $2744;
                $2745 = $179;
                $178 = $2745;
                $2746 = $178;
                $2747 = $2746;
               }
               $174 = $2747;
               $2748 = $174;
               __THREW__ = 0;
               $2749 = (+invoke_di(510,($2748|0)));
               $2750 = __THREW__; __THREW__ = 0;
               $2751 = $2750&1;
               if ($2751) {
                label = 56;
                break L130;
               }
               $2752 = $2749;
               $a13 = $2752;
               $2753 = $r10;
               $2754 = $g11;
               $2755 = $b12;
               $2756 = $a13;
               __THREW__ = 0;
               invoke_vidddd(516,($color14|0),(+$2753),(+$2754),(+$2755),(+$2756));
               $2757 = __THREW__; __THREW__ = 0;
               $2758 = $2757&1;
               if ($2758) {
                label = 56;
                break L130;
               }
               $167 = $v_iter;
               $2759 = $167;
               $2760 = HEAP32[$2759>>2]|0;
               __THREW__ = 0;
               $2761 = (invoke_ii(420,($2760|0))|0);
               $2762 = __THREW__; __THREW__ = 0;
               $2763 = $2762&1;
               if ($2763) {
                label = 56;
                break L130;
               }
               __THREW__ = 0;
               invoke_vii(512,($2761|0),($color14|0));
               $2764 = __THREW__; __THREW__ = 0;
               $2765 = $2764&1;
               if ($2765) {
                label = 56;
                break L130;
               }
              }
             }
            }
           }
          }
          $2766 = $nb_color_components;
          $2767 = $k;
          $2768 = (($2767) + ($2766))|0;
          $k = $2768;
         }
         $2769 = $isTexCoordDefined;
         $2770 = $2769&1;
         if ($2770) {
          $j15 = 0;
          while(1) {
           $2771 = $j15;
           $2772 = ($2771>>>0)<(2);
           if (!($2772)) {
            break;
           }
           $2773 = $k;
           $166 = $tokens;
           $2774 = $166;
           $2775 = (($2774) + 4|0);
           $2776 = HEAP32[$2775>>2]|0;
           $2777 = HEAP32[$2774>>2]|0;
           $2778 = $2776;
           $2779 = $2777;
           $2780 = (($2778) - ($2779))|0;
           $2781 = (($2780|0) / 12)&-1;
           $2782 = ($2773|0)==($2781|0);
           if ($2782) {
            $2783 = $1236;
            __THREW__ = 0;
            invoke_vii(502,($2783|0),($tokens|0));
            $2784 = __THREW__; __THREW__ = 0;
            $2785 = $2784&1;
            if ($2785) {
             label = 56;
             break L130;
            }
            $165 = $tokens;
            $2786 = $165;
            $2787 = (($2786) + 4|0);
            $2788 = HEAP32[$2787>>2]|0;
            $2789 = HEAP32[$2786>>2]|0;
            $2790 = $2788;
            $2791 = $2789;
            $2792 = (($2790) - ($2791))|0;
            $2793 = (($2792|0) / 12)&-1;
            $2794 = ($2793|0)==(0);
            if ($2794) {
             label = 328;
             break L171;
            }
            $k = 0;
           }
           $2795 = $k;
           $137 = $tokens;
           $138 = $2795;
           $2796 = $137;
           $2797 = $138;
           $2798 = HEAP32[$2796>>2]|0;
           $2799 = (($2798) + (($2797*12)|0)|0);
           __THREW__ = 0;
           invoke_vii(503,($str|0),($2799|0));
           $2800 = __THREW__; __THREW__ = 0;
           $2801 = $2800&1;
           if ($2801) {
            label = 56;
            break L130;
           }
           $2802 = $k;
           $2803 = (($2802) + 1)|0;
           $k = $2803;
           $2804 = $1235;
           __THREW__ = 0;
           $2805 = (invoke_ii(517,($2804|0))|0);
           $2806 = __THREW__; __THREW__ = 0;
           $2807 = $2806&1;
           if ($2807) {
            label = 335;
            break L171;
           }
           if ($2805) {
           }
           __THREW__ = 0;
           invoke_vi(396,($str|0));
           $2812 = __THREW__; __THREW__ = 0;
           $2813 = $2812&1;
           if ($2813) {
            label = 56;
            break L130;
           }
           $2814 = $j15;
           $2815 = (($2814) + 1)|0;
           $j15 = $2815;
          }
         }
         $2816 = $i;
         $2817 = (($2816) + 1)|0;
         $i = $2817;
         $134 = $v_iter;
         $135 = 0;
         $2818 = $134;
         ;HEAP32[$1249+0>>2]=HEAP32[$2818+0>>2]|0;
         $133 = $2818;
         $2819 = $133;
         $2820 = HEAP32[$2819>>2]|0;
         $2821 = (($2820) + 36|0);
         HEAP32[$2819>>2] = $2821;
        }
        switch (label|0) {
         case 141: {
          $1234 = 2;
          $1241 = 1;
          break L37;
          break;
         }
         case 158: {
          $1234 = 2;
          $1241 = 1;
          break L37;
          break;
         }
         case 173: {
          $1234 = 2;
          $1241 = 1;
          break L37;
          break;
         }
         case 205: {
          $2147 = ___cxa_find_matching_catch()|0;
          $2148 = tempRet0;
          $597 = $2147;
          $598 = $2148;
          $2149 = $597;
          ___cxa_call_unexpected(($2149|0));
          // unreachable;
          break;
         }
         case 207: {
          $2155 = ___cxa_find_matching_catch()|0;
          $2156 = tempRet0;
          $616 = $2155;
          $617 = $2156;
          $2157 = $616;
          ___cxa_call_unexpected(($2157|0));
          // unreachable;
          break;
         }
         case 265: {
          $2465 = ___cxa_find_matching_catch()|0;
          $2466 = tempRet0;
          $419 = $2465;
          $420 = $2466;
          $2467 = $419;
          ___cxa_call_unexpected(($2467|0));
          // unreachable;
          break;
         }
         case 267: {
          $2473 = ___cxa_find_matching_catch()|0;
          $2474 = tempRet0;
          $438 = $2473;
          $439 = $2474;
          $2475 = $438;
          ___cxa_call_unexpected(($2475|0));
          // unreachable;
          break;
         }
         case 328: {
          $1234 = 2;
          $1241 = 1;
          break L37;
          break;
         }
         case 335: {
          $2808 = ___cxa_find_matching_catch()|0;
          $2809 = tempRet0;
          $1239 = $2808;
          $1240 = $2809;
          __THREW__ = 0;
          invoke_vi(396,($str|0));
          $2810 = __THREW__; __THREW__ = 0;
          $2811 = $2810&1;
          if ($2811) {
           $4413 = ___cxa_find_matching_catch(0|0)|0;
           $4414 = tempRet0;
           ___clang_call_terminate($4413);
           // unreachable;
          } else {
           break L130;
          }
          break;
         }
         case 343: {
          __THREW__ = 0;
          $2822 = (invoke_i(518)|0);
          $2823 = __THREW__; __THREW__ = 0;
          $2824 = $2823&1;
          if ($2824) {
           label = 56;
           break L130;
          }
          L436: do {
           if ($2822) {
            $f = 0;
            L835: while(1) {
             $2825 = $f;
             $2826 = $nFaces;
             $2827 = ($2825>>>0)<($2826>>>0);
             if (!($2827)) {
              label = 400;
              break;
             }
             $2828 = $1238;
             $2829 = ($2828|0)!=(0|0);
             do {
              if ($2829) {
               $2830 = $f;
               $2831 = (($2830>>>0) % 1000)&-1;
               $2832 = ($2831|0)==(0);
               if (!($2832)) {
                break;
               }
               $2833 = $1238;
               $2834 = $f;
               $2835 = ($2834*50)|0;
               $2836 = $nFaces;
               $2837 = (($2835>>>0) / ($2836>>>0))&-1;
               $2838 = (50 + ($2837))|0;
               __THREW__ = 0;
               (invoke_iii($2833|0,($2838|0),(4976|0))|0);
               $2839 = __THREW__; __THREW__ = 0;
               $2840 = $2839&1;
               if ($2840) {
                label = 56;
                break L130;
               }
              }
             } while(0);
             $2841 = $1236;
             __THREW__ = 0;
             invoke_vii(502,($2841|0),($tokens|0));
             $2842 = __THREW__; __THREW__ = 0;
             $2843 = $2842&1;
             if ($2843) {
              label = 56;
              break L130;
             }
             $131 = $tokens;
             $132 = 0;
             $2844 = $131;
             $2845 = $132;
             $2846 = HEAP32[$2844>>2]|0;
             $2847 = (($2846) + (($2845*12)|0)|0);
             $130 = $2847;
             $2848 = $130;
             $129 = $2848;
             $2849 = $129;
             $128 = $2849;
             $2850 = $128;
             $127 = $2850;
             $2851 = $127;
             $126 = $2851;
             $2852 = $126;
             $125 = $2852;
             $2853 = $125;
             $2854 = HEAP8[$2853>>0]|0;
             $2855 = $2854&255;
             $2856 = $2855 & 1;
             $2857 = ($2856|0)!=(0);
             if ($2857) {
              $119 = $2850;
              $2858 = $119;
              $118 = $2858;
              $2859 = $118;
              $117 = $2859;
              $2860 = $117;
              $2861 = (($2860) + 8|0);
              $2862 = HEAP32[$2861>>2]|0;
              $2869 = $2862;
             } else {
              $124 = $2850;
              $2863 = $124;
              $123 = $2863;
              $2864 = $123;
              $122 = $2864;
              $2865 = $122;
              $2866 = (($2865) + 1|0);
              $121 = $2866;
              $2867 = $121;
              $120 = $2867;
              $2868 = $120;
              $2869 = $2868;
             }
             $116 = $2869;
             $2870 = $116;
             __THREW__ = 0;
             $2871 = (invoke_ii(508,($2870|0))|0);
             $2872 = __THREW__; __THREW__ = 0;
             $2873 = $2872&1;
             if ($2873) {
              label = 56;
              break L130;
             }
             $vert_per_face = $2871;
             $2874 = $vert_per_face;
             __THREW__ = 0;
             invoke_vii(519,($vInd|0),($2874|0));
             $2875 = __THREW__; __THREW__ = 0;
             $2876 = $2875&1;
             if ($2876) {
              label = 56;
              break L130;
             }
             $k = 1;
             $j16 = 0;
             while(1) {
              $2877 = $j16;
              $2878 = $vert_per_face;
              $2879 = ($2877|0)<($2878|0);
              if (!($2879)) {
               label = 374;
               break;
              }
              $2880 = $k;
              $115 = $tokens;
              $2881 = $115;
              $2882 = (($2881) + 4|0);
              $2883 = HEAP32[$2882>>2]|0;
              $2884 = HEAP32[$2881>>2]|0;
              $2885 = $2883;
              $2886 = $2884;
              $2887 = (($2885) - ($2886))|0;
              $2888 = (($2887|0) / 12)&-1;
              $2889 = ($2880|0)==($2888|0);
              if ($2889) {
               $2890 = $1236;
               __THREW__ = 0;
               invoke_vii(502,($2890|0),($tokens|0));
               $2891 = __THREW__; __THREW__ = 0;
               $2892 = $2891&1;
               if ($2892) {
                break L835;
               }
               $92 = $tokens;
               $2893 = $92;
               $2894 = (($2893) + 4|0);
               $2895 = HEAP32[$2894>>2]|0;
               $2896 = HEAP32[$2893>>2]|0;
               $2897 = $2895;
               $2898 = $2896;
               $2899 = (($2897) - ($2898))|0;
               $2900 = (($2899|0) / 12)&-1;
               $2901 = ($2900|0)==(0);
               if ($2901) {
                label = 363;
                break;
               }
               $k = 0;
              }
              $2906 = $k;
              $72 = $tokens;
              $73 = $2906;
              $2907 = $72;
              $2908 = $73;
              $2909 = HEAP32[$2907>>2]|0;
              $2910 = (($2909) + (($2908*12)|0)|0);
              $71 = $2910;
              $2911 = $71;
              $70 = $2911;
              $2912 = $70;
              $69 = $2912;
              $2913 = $69;
              $68 = $2913;
              $2914 = $68;
              $67 = $2914;
              $2915 = $67;
              $66 = $2915;
              $2916 = $66;
              $2917 = HEAP8[$2916>>0]|0;
              $2918 = $2917&255;
              $2919 = $2918 & 1;
              $2920 = ($2919|0)!=(0);
              if ($2920) {
               $60 = $2913;
               $2921 = $60;
               $59 = $2921;
               $2922 = $59;
               $58 = $2922;
               $2923 = $58;
               $2924 = (($2923) + 8|0);
               $2925 = HEAP32[$2924>>2]|0;
               $2932 = $2925;
              } else {
               $65 = $2913;
               $2926 = $65;
               $64 = $2926;
               $2927 = $64;
               $63 = $2927;
               $2928 = $63;
               $2929 = (($2928) + 1|0);
               $62 = $2929;
               $2930 = $62;
               $61 = $2930;
               $2931 = $61;
               $2932 = $2931;
              }
              $57 = $2932;
              $2933 = $57;
              __THREW__ = 0;
              $2934 = (invoke_ii(508,($2933|0))|0);
              $2935 = __THREW__; __THREW__ = 0;
              $2936 = $2935&1;
              if ($2936) {
               break L835;
              }
              $2937 = $j16;
              $53 = $vInd;
              $54 = $2937;
              $2938 = $53;
              $2939 = $54;
              $2940 = HEAP32[$2938>>2]|0;
              $2941 = (($2940) + ($2939<<2)|0);
              HEAP32[$2941>>2] = $2934;
              $2942 = $k;
              $2943 = (($2942) + 1)|0;
              $k = $2943;
              $2944 = $j16;
              $2945 = (($2944) + 1)|0;
              $j16 = $2945;
             }
             if ((label|0) == 363) {
              label = 0;
              $1234 = 2;
              $1241 = 1;
             }
             else if ((label|0) == 374) {
              label = 0;
              $2946 = $vert_per_face;
              $2947 = ($2946|0)==(3);
              if ($2947) {
               $2948 = $1235;
               $2949 = $1235;
               $26 = $vInd;
               $27 = 0;
               $2950 = $26;
               $2951 = $27;
               $2952 = HEAP32[$2950>>2]|0;
               $2953 = (($2952) + ($2951<<2)|0);
               $2954 = HEAP32[$2953>>2]|0;
               $24 = $2949;
               $25 = $2954;
               $2955 = $24;
               $2956 = $25;
               $2957 = HEAP32[$2955>>2]|0;
               $2958 = (($2957) + (($2956*36)|0)|0);
               $2959 = $1235;
               $22 = $vInd;
               $23 = 1;
               $2960 = $22;
               $2961 = $23;
               $2962 = HEAP32[$2960>>2]|0;
               $2963 = (($2962) + ($2961<<2)|0);
               $2964 = HEAP32[$2963>>2]|0;
               $4 = $2959;
               $5 = $2964;
               $2965 = $4;
               $2966 = $5;
               $2967 = HEAP32[$2965>>2]|0;
               $2968 = (($2967) + (($2966*36)|0)|0);
               $2969 = $1235;
               $0 = $vInd;
               $1 = 2;
               $2970 = $0;
               $2971 = $1;
               $2972 = HEAP32[$2970>>2]|0;
               $2973 = (($2972) + ($2971<<2)|0);
               $2974 = HEAP32[$2973>>2]|0;
               $2 = $2969;
               $3 = $2974;
               $2975 = $2;
               $2976 = $3;
               $2977 = HEAP32[$2975>>2]|0;
               $2978 = (($2977) + (($2976*36)|0)|0);
               __THREW__ = 0;
               invoke_viiiii(520,($1250|0),($2948|0),($2958|0),($2968|0),($2978|0));
               $2979 = __THREW__; __THREW__ = 0;
               $2980 = $2979&1;
               if ($2980) {
                break;
               }
              }
              $2981 = $vert_per_face;
              $2982 = ($2981|0)==(4);
              if ($2982) {
               $2983 = $1235;
               $2984 = $1235;
               $6 = $vInd;
               $7 = 0;
               $2985 = $6;
               $2986 = $7;
               $2987 = HEAP32[$2985>>2]|0;
               $2988 = (($2987) + ($2986<<2)|0);
               $2989 = HEAP32[$2988>>2]|0;
               $8 = $2984;
               $9 = $2989;
               $2990 = $8;
               $2991 = $9;
               $2992 = HEAP32[$2990>>2]|0;
               $2993 = (($2992) + (($2991*36)|0)|0);
               $2994 = $1235;
               $10 = $vInd;
               $11 = 1;
               $2995 = $10;
               $2996 = $11;
               $2997 = HEAP32[$2995>>2]|0;
               $2998 = (($2997) + ($2996<<2)|0);
               $2999 = HEAP32[$2998>>2]|0;
               $12 = $2994;
               $13 = $2999;
               $3000 = $12;
               $3001 = $13;
               $3002 = HEAP32[$3000>>2]|0;
               $3003 = (($3002) + (($3001*36)|0)|0);
               $3004 = $1235;
               $14 = $vInd;
               $15 = 2;
               $3005 = $14;
               $3006 = $15;
               $3007 = HEAP32[$3005>>2]|0;
               $3008 = (($3007) + ($3006<<2)|0);
               $3009 = HEAP32[$3008>>2]|0;
               $16 = $3004;
               $17 = $3009;
               $3010 = $16;
               $3011 = $17;
               $3012 = HEAP32[$3010>>2]|0;
               $3013 = (($3012) + (($3011*36)|0)|0);
               $3014 = $1235;
               $18 = $vInd;
               $19 = 3;
               $3015 = $18;
               $3016 = $19;
               $3017 = HEAP32[$3015>>2]|0;
               $3018 = (($3017) + ($3016<<2)|0);
               $3019 = HEAP32[$3018>>2]|0;
               $20 = $3014;
               $21 = $3019;
               $3020 = $20;
               $3021 = $21;
               $3022 = HEAP32[$3020>>2]|0;
               $3023 = (($3022) + (($3021*36)|0)|0);
               __THREW__ = 0;
               invoke_viiiiii(521,($1251|0),($2983|0),($2993|0),($3003|0),($3013|0),($3023|0));
               $3024 = __THREW__; __THREW__ = 0;
               $3025 = $3024&1;
               if ($3025) {
                break;
               }
              }
              $1241 = 0;
             }
             __THREW__ = 0;
             invoke_vi(439,($vInd|0));
             $3026 = __THREW__; __THREW__ = 0;
             $3027 = $3026&1;
             if ($3027) {
              label = 56;
              break L130;
             }
             $cleanup$dest = $1241;
             $cond2 = ($cleanup$dest|0)==(0);
             if (!($cond2)) {
              break L37;
             }
             $3028 = $f;
             $3029 = (($3028) + 1)|0;
             $f = $3029;
            }
            if ((label|0) == 400) {
             break;
            }
            $2902 = ___cxa_find_matching_catch()|0;
            $2903 = tempRet0;
            $1239 = $2902;
            $1240 = $2903;
            __THREW__ = 0;
            invoke_vi(439,($vInd|0));
            $2904 = __THREW__; __THREW__ = 0;
            $2905 = $2904&1;
            if ($2905) {
             $4413 = ___cxa_find_matching_catch(0|0)|0;
             $4414 = tempRet0;
             ___clang_call_terminate($4413);
             // unreachable;
            } else {
             break L130;
            }
           } else {
            $3030 = $1235;
            $3031 = $nFaces;
            __THREW__ = 0;
            invoke_viii(522,($1252|0),($3030|0),($3031|0));
            $3032 = __THREW__; __THREW__ = 0;
            $3033 = $3032&1;
            if ($3033) {
             label = 56;
             break L130;
            }
            $f0 = 0;
            $52 = $qtmp;
            $3034 = $52;
            $48 = $3034;
            $3035 = $48;
            $47 = $3035;
            $28 = $30;
            $29 = -1;
            $3036 = $28;
            HEAP32[$3036>>2] = 0;
            $3037 = HEAP32[$30>>2]|0;
            HEAP32[$49>>2] = $3037;
            $31 = $49;
            HEAP32[$3035>>2] = 0;
            $3038 = (($3035) + 4|0);
            $32 = $34;
            $33 = -1;
            $3039 = $32;
            HEAP32[$3039>>2] = 0;
            $3040 = HEAP32[$34>>2]|0;
            HEAP32[$50>>2] = $3040;
            $35 = $50;
            HEAP32[$3038>>2] = 0;
            $3041 = (($3035) + 8|0);
            $36 = $38;
            $37 = -1;
            $3042 = $36;
            HEAP32[$3042>>2] = 0;
            $3043 = HEAP32[$38>>2]|0;
            HEAP32[$51>>2] = $3043;
            $39 = $51;
            $45 = $3041;
            HEAP32[$46>>2] = 0;
            $3044 = $45;
            $44 = $46;
            $3045 = $44;
            $3046 = HEAP32[$3045>>2]|0;
            $42 = $3044;
            HEAP32[$43>>2] = $3046;
            $3047 = $42;
            $41 = $3047;
            $40 = $43;
            $3048 = $40;
            $3049 = HEAP32[$3048>>2]|0;
            HEAP32[$3047>>2] = $3049;
            __THREW__ = 0;
            invoke_vi(523,($qtmp|0));
            $3050 = __THREW__; __THREW__ = 0;
            $3051 = $3050&1;
            L440: do {
             if ($3051) {
              label = 409;
             } else {
              $f17 = 0;
              L442: while(1) {
               $3052 = $f17;
               $3053 = $nFaces;
               $3054 = ($3052>>>0)<($3053>>>0);
               if (!($3054)) {
                label = 725;
                break;
               }
               $3055 = $f17;
               $f0 = $3055;
               $3056 = $1236;
               $3057 = HEAP32[$3056>>2]|0;
               $3058 = (($3057) + -12|0);
               $3059 = HEAP32[$3058>>2]|0;
               $3060 = (($3056) + ($3059)|0);
               $56 = $3060;
               $3061 = $56;
               $55 = $3061;
               $3062 = $55;
               $3063 = (($3062) + 16|0);
               $3064 = HEAP32[$3063>>2]|0;
               $3065 = $3064 & 5;
               $3066 = ($3065|0)!=(0);
               if ($3066) {
                label = 408;
                break;
               }
               $3069 = $1238;
               $3070 = ($3069|0)!=(0|0);
               do {
                if ($3070) {
                 $3071 = $f17;
                 $3072 = (($3071>>>0) % 1000)&-1;
                 $3073 = ($3072|0)==(0);
                 if (!($3073)) {
                  break;
                 }
                 $3074 = $1238;
                 $3075 = $f17;
                 $3076 = ($3075*50)|0;
                 $3077 = $nFaces;
                 $3078 = (($3076>>>0) / ($3077>>>0))&-1;
                 $3079 = (50 + ($3078))|0;
                 __THREW__ = 0;
                 (invoke_iii($3074|0,($3079|0),(4976|0))|0);
                 $3080 = __THREW__; __THREW__ = 0;
                 $3081 = $3080&1;
                 if ($3081) {
                  label = 409;
                  break L440;
                 }
                }
               } while(0);
               $3082 = $1236;
               __THREW__ = 0;
               invoke_vii(502,($3082|0),($tokens|0));
               $3083 = __THREW__; __THREW__ = 0;
               $3084 = $3083&1;
               if ($3084) {
                label = 409;
                break L440;
               }
               $74 = $tokens;
               $75 = 0;
               $3085 = $74;
               $3086 = $75;
               $3087 = HEAP32[$3085>>2]|0;
               $3088 = (($3087) + (($3086*12)|0)|0);
               $90 = $3088;
               $3089 = $90;
               $89 = $3089;
               $3090 = $89;
               $88 = $3090;
               $3091 = $88;
               $87 = $3091;
               $3092 = $87;
               $86 = $3092;
               $3093 = $86;
               $85 = $3093;
               $3094 = $85;
               $3095 = HEAP8[$3094>>0]|0;
               $3096 = $3095&255;
               $3097 = $3096 & 1;
               $3098 = ($3097|0)!=(0);
               if ($3098) {
                $79 = $3091;
                $3099 = $79;
                $78 = $3099;
                $3100 = $78;
                $77 = $3100;
                $3101 = $77;
                $3102 = (($3101) + 8|0);
                $3103 = HEAP32[$3102>>2]|0;
                $3110 = $3103;
               } else {
                $84 = $3091;
                $3104 = $84;
                $83 = $3104;
                $3105 = $83;
                $82 = $3105;
                $3106 = $82;
                $3107 = (($3106) + 1|0);
                $81 = $3107;
                $3108 = $81;
                $80 = $3108;
                $3109 = $80;
                $3110 = $3109;
               }
               $76 = $3110;
               $3111 = $76;
               __THREW__ = 0;
               $3112 = (invoke_ii(508,($3111|0))|0);
               $3113 = __THREW__; __THREW__ = 0;
               $3114 = $3113&1;
               if ($3114) {
                label = 409;
                break L440;
               }
               $vert_per_face18 = $3112;
               $3115 = $vert_per_face18;
               $3116 = ($3115|0)<(3);
               if ($3116) {
                label = 421;
                break;
               }
               $k = 1;
               $3117 = $vert_per_face18;
               $3118 = ($3117|0)==(3);
               if ($3118) {
                $j19 = 0;
                while(1) {
                 $3119 = $j19;
                 $3120 = ($3119|0)<(3);
                 if (!($3120)) {
                  break;
                 }
                 $3121 = $k;
                 $91 = $tokens;
                 $3122 = $91;
                 $3123 = (($3122) + 4|0);
                 $3124 = HEAP32[$3123>>2]|0;
                 $3125 = HEAP32[$3122>>2]|0;
                 $3126 = $3124;
                 $3127 = $3125;
                 $3128 = (($3126) - ($3127))|0;
                 $3129 = (($3128|0) / 12)&-1;
                 $3130 = ($3121|0)==($3129|0);
                 if ($3130) {
                  $3131 = $1236;
                  __THREW__ = 0;
                  invoke_vii(502,($3131|0),($tokens|0));
                  $3132 = __THREW__; __THREW__ = 0;
                  $3133 = $3132&1;
                  if ($3133) {
                   label = 409;
                   break L440;
                  }
                  $93 = $tokens;
                  $3134 = $93;
                  $3135 = (($3134) + 4|0);
                  $3136 = HEAP32[$3135>>2]|0;
                  $3137 = HEAP32[$3134>>2]|0;
                  $3138 = $3136;
                  $3139 = $3137;
                  $3140 = (($3138) - ($3139))|0;
                  $3141 = (($3140|0) / 12)&-1;
                  $3142 = ($3141|0)==(0);
                  if ($3142) {
                   label = 428;
                   break L442;
                  }
                  $k = 0;
                 }
                 $3143 = $1235;
                 $3144 = $k;
                 $94 = $tokens;
                 $95 = $3144;
                 $3145 = $94;
                 $3146 = $95;
                 $3147 = HEAP32[$3145>>2]|0;
                 $3148 = (($3147) + (($3146*12)|0)|0);
                 $110 = $3148;
                 $3149 = $110;
                 $109 = $3149;
                 $3150 = $109;
                 $108 = $3150;
                 $3151 = $108;
                 $107 = $3151;
                 $3152 = $107;
                 $106 = $3152;
                 $3153 = $106;
                 $105 = $3153;
                 $3154 = $105;
                 $3155 = HEAP8[$3154>>0]|0;
                 $3156 = $3155&255;
                 $3157 = $3156 & 1;
                 $3158 = ($3157|0)!=(0);
                 if ($3158) {
                  $99 = $3151;
                  $3159 = $99;
                  $98 = $3159;
                  $3160 = $98;
                  $97 = $3160;
                  $3161 = $97;
                  $3162 = (($3161) + 8|0);
                  $3163 = HEAP32[$3162>>2]|0;
                  $3170 = $3163;
                 } else {
                  $104 = $3151;
                  $3164 = $104;
                  $103 = $3164;
                  $3165 = $103;
                  $102 = $3165;
                  $3166 = $102;
                  $3167 = (($3166) + 1|0);
                  $101 = $3167;
                  $3168 = $101;
                  $100 = $3168;
                  $3169 = $100;
                  $3170 = $3169;
                 }
                 $96 = $3170;
                 $3171 = $96;
                 __THREW__ = 0;
                 $3172 = (invoke_ii(508,($3171|0))|0);
                 $3173 = __THREW__; __THREW__ = 0;
                 $3174 = $3173&1;
                 if ($3174) {
                  label = 409;
                  break L440;
                 }
                 $111 = $3143;
                 $112 = $3172;
                 $3175 = $111;
                 $3176 = $112;
                 $3177 = HEAP32[$3175>>2]|0;
                 $3178 = (($3177) + (($3176*36)|0)|0);
                 $3179 = $1235;
                 $3180 = (($3179) + 32|0);
                 $3181 = $f17;
                 $113 = $3180;
                 $114 = $3181;
                 $3182 = $113;
                 $3183 = $114;
                 $3184 = HEAP32[$3182>>2]|0;
                 $3185 = (($3184) + (($3183*44)|0)|0);
                 $3186 = $j19;
                 __THREW__ = 0;
                 $3187 = (invoke_iii(524,($3185|0),($3186|0))|0);
                 $3188 = __THREW__; __THREW__ = 0;
                 $3189 = $3188&1;
                 if ($3189) {
                  label = 409;
                  break L440;
                 }
                 HEAP32[$3187>>2] = $3178;
                 $3190 = $k;
                 $3191 = (($3190) + 1)|0;
                 $k = $3191;
                 $3192 = $j19;
                 $3193 = (($3192) + 1)|0;
                 $j19 = $3193;
                }
               } else {
                $3194 = $vert_per_face18;
                $3195 = (($3194) - 3)|0;
                $trigs = $3195;
                $3196 = $trigs;
                $3197 = $nFaces;
                $3198 = (($3197) + ($3196))|0;
                $nFaces = $3198;
                $3199 = $1235;
                $3200 = $trigs;
                __THREW__ = 0;
                invoke_viii(522,($1253|0),($3199|0),($3200|0));
                $3201 = __THREW__; __THREW__ = 0;
                $3202 = $3201&1;
                if ($3202) {
                 label = 409;
                 break L440;
                }
                $3203 = $vert_per_face18;
                __THREW__ = 0;
                invoke_vii(519,($vertIndices|0),($3203|0));
                $3204 = __THREW__; __THREW__ = 0;
                $3205 = $3204&1;
                if ($3205) {
                 label = 409;
                 break L440;
                }
                $3206 = $vert_per_face18;
                __THREW__ = 0;
                invoke_vii(525,($polygonVect|0),($3206|0));
                $3207 = __THREW__; __THREW__ = 0;
                $3208 = $3207&1;
                if ($3208) {
                 label = 450;
                 break;
                }
                $j20 = 0;
                while(1) {
                 $3209 = $j20;
                 $3210 = $vert_per_face18;
                 $3211 = ($3209|0)<($3210|0);
                 if (!($3211)) {
                  label = 466;
                  break;
                 }
                 $3212 = $k;
                 $136 = $tokens;
                 $3213 = $136;
                 $3214 = (($3213) + 4|0);
                 $3215 = HEAP32[$3214>>2]|0;
                 $3216 = HEAP32[$3213>>2]|0;
                 $3217 = $3215;
                 $3218 = $3216;
                 $3219 = (($3217) - ($3218))|0;
                 $3220 = (($3219|0) / 12)&-1;
                 $3221 = ($3212|0)==($3220|0);
                 if ($3221) {
                  $3222 = $1236;
                  __THREW__ = 0;
                  invoke_vii(502,($3222|0),($tokens|0));
                  $3223 = __THREW__; __THREW__ = 0;
                  $3224 = $3223&1;
                  if ($3224) {
                   label = 451;
                   break L442;
                  }
                  $139 = $tokens;
                  $3225 = $139;
                  $3226 = (($3225) + 4|0);
                  $3227 = HEAP32[$3226>>2]|0;
                  $3228 = HEAP32[$3225>>2]|0;
                  $3229 = $3227;
                  $3230 = $3228;
                  $3231 = (($3229) - ($3230))|0;
                  $3232 = (($3231|0) / 12)&-1;
                  $3233 = ($3232|0)==(0);
                  if ($3233) {
                   label = 449;
                   break;
                  }
                  $k = 0;
                 }
                 $3238 = $k;
                 $140 = $tokens;
                 $141 = $3238;
                 $3239 = $140;
                 $3240 = $141;
                 $3241 = HEAP32[$3239>>2]|0;
                 $3242 = (($3241) + (($3240*12)|0)|0);
                 $156 = $3242;
                 $3243 = $156;
                 $155 = $3243;
                 $3244 = $155;
                 $154 = $3244;
                 $3245 = $154;
                 $153 = $3245;
                 $3246 = $153;
                 $152 = $3246;
                 $3247 = $152;
                 $151 = $3247;
                 $3248 = $151;
                 $3249 = HEAP8[$3248>>0]|0;
                 $3250 = $3249&255;
                 $3251 = $3250 & 1;
                 $3252 = ($3251|0)!=(0);
                 if ($3252) {
                  $145 = $3245;
                  $3253 = $145;
                  $144 = $3253;
                  $3254 = $144;
                  $143 = $3254;
                  $3255 = $143;
                  $3256 = (($3255) + 8|0);
                  $3257 = HEAP32[$3256>>2]|0;
                  $3264 = $3257;
                 } else {
                  $150 = $3245;
                  $3258 = $150;
                  $149 = $3258;
                  $3259 = $149;
                  $148 = $3259;
                  $3260 = $148;
                  $3261 = (($3260) + 1|0);
                  $147 = $3261;
                  $3262 = $147;
                  $146 = $3262;
                  $3263 = $146;
                  $3264 = $3263;
                 }
                 $142 = $3264;
                 $3265 = $142;
                 __THREW__ = 0;
                 $3266 = (invoke_ii(508,($3265|0))|0);
                 $3267 = __THREW__; __THREW__ = 0;
                 $3268 = $3267&1;
                 if ($3268) {
                  label = 451;
                  break L442;
                 }
                 $3269 = $j20;
                 $157 = $vertIndices;
                 $158 = $3269;
                 $3270 = $157;
                 $3271 = $158;
                 $3272 = HEAP32[$3270>>2]|0;
                 $3273 = (($3272) + ($3271<<2)|0);
                 HEAP32[$3273>>2] = $3266;
                 $3274 = $j20;
                 $159 = $polygonVect;
                 $160 = $3274;
                 $3275 = $159;
                 $3276 = $160;
                 $3277 = HEAP32[$3275>>2]|0;
                 $3278 = (($3277) + (($3276*12)|0)|0);
                 $3279 = $1235;
                 $3280 = $j20;
                 $161 = $vertIndices;
                 $162 = $3280;
                 $3281 = $161;
                 $3282 = $162;
                 $3283 = HEAP32[$3281>>2]|0;
                 $3284 = (($3283) + ($3282<<2)|0);
                 $3285 = HEAP32[$3284>>2]|0;
                 $163 = $3279;
                 $164 = $3285;
                 $3286 = $163;
                 $3287 = $164;
                 $3288 = HEAP32[$3286>>2]|0;
                 $3289 = (($3288) + (($3287*36)|0)|0);
                 __THREW__ = 0;
                 $3290 = (invoke_ii(417,($3289|0))|0);
                 $3291 = __THREW__; __THREW__ = 0;
                 $3292 = $3291&1;
                 if ($3292) {
                  label = 451;
                  break L442;
                 }
                 __THREW__ = 0;
                 invoke_vii(526,($3278|0),($3290|0));
                 $3293 = __THREW__; __THREW__ = 0;
                 $3294 = $3293&1;
                 if ($3294) {
                  label = 451;
                  break L442;
                 }
                 $3295 = $k;
                 $3296 = (($3295) + 1)|0;
                 $k = $3296;
                 $3297 = $j20;
                 $3298 = (($3297) + 1)|0;
                 $j20 = $3298;
                }
                if ((label|0) == 449) {
                 label = 0;
                 $1234 = 2;
                 $1241 = 1;
                }
                else if ((label|0) == 466) {
                 label = 0;
                 $3299 = $vert_per_face18;
                 $3300 = ($3299|0)==(4);
                 if ($3300) {
                  __THREW__ = 0;
                  invoke_vii(527,($q|0),4);
                  $3301 = __THREW__; __THREW__ = 0;
                  $3302 = $3301&1;
                  if ($3302) {
                   label = 451;
                   break;
                  }
                  $qqi = 0;
                  while(1) {
                   $3303 = $qqi;
                   $3304 = ($3303|0)<(4);
                   if (!($3304)) {
                    break;
                   }
                   $3305 = $1235;
                   $3306 = $qqi;
                   $168 = $vertIndices;
                   $169 = $3306;
                   $3307 = $168;
                   $3308 = $169;
                   $3309 = HEAP32[$3307>>2]|0;
                   $3310 = (($3309) + ($3308<<2)|0);
                   $3311 = HEAP32[$3310>>2]|0;
                   $170 = $3305;
                   $171 = $3311;
                   $3312 = $170;
                   $3313 = $171;
                   $3314 = HEAP32[$3312>>2]|0;
                   $3315 = (($3314) + (($3313*36)|0)|0);
                   $3316 = $qqi;
                   $172 = $q;
                   $173 = $3316;
                   $3317 = $172;
                   $3318 = $173;
                   $3319 = HEAP32[$3317>>2]|0;
                   $3320 = (($3319) + ($3318<<2)|0);
                   HEAP32[$3320>>2] = $3315;
                   $3321 = $qqi;
                   $3322 = (($3321) + 1)|0;
                   $qqi = $3322;
                  }
                  __THREW__ = 0;
                  invoke_vi(523,($q|0));
                  $3327 = __THREW__; __THREW__ = 0;
                  $3328 = $3327&1;
                  if ($3328) {
                   label = 475;
                   break;
                  }
                  $qqi21 = 0;
                  while(1) {
                   $3329 = $qqi21;
                   $3330 = ($3329|0)<(4);
                   if (!($3330)) {
                    break;
                   }
                   $3331 = $qqi21;
                   $191 = $q;
                   $192 = $3331;
                   $3332 = $191;
                   $3333 = $192;
                   $3334 = HEAP32[$3332>>2]|0;
                   $3335 = (($3334) + ($3333<<2)|0);
                   $3336 = HEAP32[$3335>>2]|0;
                   $3337 = $1235;
                   $193 = $3337;
                   $194 = 0;
                   $3338 = $193;
                   $3339 = $194;
                   $3340 = HEAP32[$3338>>2]|0;
                   $3341 = (($3340) + (($3339*36)|0)|0);
                   $3342 = $3336;
                   $3343 = $3341;
                   $3344 = (($3342) - ($3343))|0;
                   $3345 = (($3344|0) / 36)&-1;
                   $3346 = $qqi21;
                   $195 = $vertIndices;
                   $196 = $3346;
                   $3347 = $195;
                   $3348 = $196;
                   $3349 = HEAP32[$3347>>2]|0;
                   $3350 = (($3349) + ($3348<<2)|0);
                   HEAP32[$3350>>2] = $3345;
                   $3351 = $qqi21;
                   $3352 = (($3351) + 1)|0;
                   $qqi21 = $3352;
                  }
                  $j22 = 0;
                  while(1) {
                   $3353 = $j22;
                   $3354 = ($3353|0)<(2);
                   if (!($3354)) {
                    break;
                   }
                   $3355 = $1235;
                   $197 = $vertIndices;
                   $198 = 0;
                   $3356 = $197;
                   $3357 = $198;
                   $3358 = HEAP32[$3356>>2]|0;
                   $3359 = (($3358) + ($3357<<2)|0);
                   $3360 = HEAP32[$3359>>2]|0;
                   $199 = $3355;
                   $200 = $3360;
                   $3361 = $199;
                   $3362 = $200;
                   $3363 = HEAP32[$3361>>2]|0;
                   $3364 = (($3363) + (($3362*36)|0)|0);
                   $3365 = $1235;
                   $3366 = (($3365) + 32|0);
                   $3367 = $f17;
                   $3368 = $j22;
                   $3369 = (($3367) + ($3368))|0;
                   $201 = $3366;
                   $202 = $3369;
                   $3370 = $201;
                   $3371 = $202;
                   $3372 = HEAP32[$3370>>2]|0;
                   $3373 = (($3372) + (($3371*44)|0)|0);
                   __THREW__ = 0;
                   $3374 = (invoke_iii(524,($3373|0),0)|0);
                   $3375 = __THREW__; __THREW__ = 0;
                   $3376 = $3375&1;
                   if ($3376) {
                    label = 475;
                    break L442;
                   }
                   HEAP32[$3374>>2] = $3364;
                   $3377 = $1235;
                   $3378 = $j22;
                   $3379 = (1 + ($3378))|0;
                   $218 = $vertIndices;
                   $219 = $3379;
                   $3380 = $218;
                   $3381 = $219;
                   $3382 = HEAP32[$3380>>2]|0;
                   $3383 = (($3382) + ($3381<<2)|0);
                   $3384 = HEAP32[$3383>>2]|0;
                   $220 = $3377;
                   $221 = $3384;
                   $3385 = $220;
                   $3386 = $221;
                   $3387 = HEAP32[$3385>>2]|0;
                   $3388 = (($3387) + (($3386*36)|0)|0);
                   $3389 = $1235;
                   $3390 = (($3389) + 32|0);
                   $3391 = $f17;
                   $3392 = $j22;
                   $3393 = (($3391) + ($3392))|0;
                   $222 = $3390;
                   $223 = $3393;
                   $3394 = $222;
                   $3395 = $223;
                   $3396 = HEAP32[$3394>>2]|0;
                   $3397 = (($3396) + (($3395*44)|0)|0);
                   __THREW__ = 0;
                   $3398 = (invoke_iii(524,($3397|0),1)|0);
                   $3399 = __THREW__; __THREW__ = 0;
                   $3400 = $3399&1;
                   if ($3400) {
                    label = 475;
                    break L442;
                   }
                   HEAP32[$3398>>2] = $3388;
                   $3401 = $1235;
                   $3402 = $j22;
                   $3403 = (2 + ($3402))|0;
                   $226 = $vertIndices;
                   $227 = $3403;
                   $3404 = $226;
                   $3405 = $227;
                   $3406 = HEAP32[$3404>>2]|0;
                   $3407 = (($3406) + ($3405<<2)|0);
                   $3408 = HEAP32[$3407>>2]|0;
                   $228 = $3401;
                   $229 = $3408;
                   $3409 = $228;
                   $3410 = $229;
                   $3411 = HEAP32[$3409>>2]|0;
                   $3412 = (($3411) + (($3410*36)|0)|0);
                   $3413 = $1235;
                   $3414 = (($3413) + 32|0);
                   $3415 = $f17;
                   $3416 = $j22;
                   $3417 = (($3415) + ($3416))|0;
                   $230 = $3414;
                   $231 = $3417;
                   $3418 = $230;
                   $3419 = $231;
                   $3420 = HEAP32[$3418>>2]|0;
                   $3421 = (($3420) + (($3419*44)|0)|0);
                   __THREW__ = 0;
                   $3422 = (invoke_iii(524,($3421|0),2)|0);
                   $3423 = __THREW__; __THREW__ = 0;
                   $3424 = $3423&1;
                   if ($3424) {
                    label = 475;
                    break L442;
                   }
                   HEAP32[$3422>>2] = $3412;
                   $3425 = $1235;
                   __THREW__ = 0;
                   $3426 = (invoke_ii(528,($3425|0))|0);
                   $3427 = __THREW__; __THREW__ = 0;
                   $3428 = $3427&1;
                   if ($3428) {
                    label = 475;
                    break L442;
                   }
                   if ($3426) {
                    $3429 = $j22;
                    $3430 = ($3429|0)>(0);
                    if ($3430) {
                     $3431 = $1235;
                     $3432 = (($3431) + 32|0);
                     $3433 = $f17;
                     $3434 = $j22;
                     $3435 = (($3433) + ($3434))|0;
                     $249 = $3432;
                     $250 = $3435;
                     $3436 = $249;
                     $3437 = $250;
                     $3438 = HEAP32[$3436>>2]|0;
                     $3439 = (($3438) + (($3437*44)|0)|0);
                     __THREW__ = 0;
                     invoke_vii(529,($3439|0),0);
                     $3440 = __THREW__; __THREW__ = 0;
                     $3441 = $3440&1;
                     if ($3441) {
                      label = 475;
                      break L442;
                     }
                    }
                    $3442 = $j22;
                    $3443 = $vert_per_face18;
                    $3444 = (($3443) - 3)|0;
                    $3445 = ($3442|0)<($3444|0);
                    if ($3445) {
                     $3446 = $1235;
                     $3447 = (($3446) + 32|0);
                     $3448 = $f17;
                     $3449 = $j22;
                     $3450 = (($3448) + ($3449))|0;
                     $266 = $3447;
                     $267 = $3450;
                     $3451 = $266;
                     $3452 = $267;
                     $3453 = HEAP32[$3451>>2]|0;
                     $3454 = (($3453) + (($3452*44)|0)|0);
                     __THREW__ = 0;
                     invoke_vii(529,($3454|0),2);
                     $3455 = __THREW__; __THREW__ = 0;
                     $3456 = $3455&1;
                     if ($3456) {
                      label = 475;
                      break L442;
                     }
                    }
                    $3457 = $1237;
                    $3458 = HEAP32[$3457>>2]|0;
                    $3459 = $3458 | 131072;
                    HEAP32[$3457>>2] = $3459;
                   }
                   $3460 = $j22;
                   $3461 = (($3460) + 1)|0;
                   $j22 = $3461;
                  }
                  __THREW__ = 0;
                  invoke_vi(433,($q|0));
                  $3462 = __THREW__; __THREW__ = 0;
                  $3463 = $3462&1;
                  if ($3463) {
                   label = 451;
                   break;
                  }
                 } else {
                  $295 = $indexTriangulatedVect;
                  $3464 = $295;
                  $291 = $3464;
                  $3465 = $291;
                  $290 = $3465;
                  $271 = $273;
                  $272 = -1;
                  $3466 = $271;
                  HEAP32[$3466>>2] = 0;
                  $3467 = HEAP32[$273>>2]|0;
                  HEAP32[$292>>2] = $3467;
                  $274 = $292;
                  HEAP32[$3465>>2] = 0;
                  $3468 = (($3465) + 4|0);
                  $275 = $277;
                  $276 = -1;
                  $3469 = $275;
                  HEAP32[$3469>>2] = 0;
                  $3470 = HEAP32[$277>>2]|0;
                  HEAP32[$293>>2] = $3470;
                  $278 = $293;
                  HEAP32[$3468>>2] = 0;
                  $3471 = (($3465) + 8|0);
                  $279 = $281;
                  $280 = -1;
                  $3472 = $279;
                  HEAP32[$3472>>2] = 0;
                  $3473 = HEAP32[$281>>2]|0;
                  HEAP32[$294>>2] = $3473;
                  $282 = $294;
                  $288 = $3471;
                  HEAP32[$289>>2] = 0;
                  $3474 = $288;
                  $287 = $289;
                  $3475 = $287;
                  $3476 = HEAP32[$3475>>2]|0;
                  $285 = $3474;
                  HEAP32[$286>>2] = $3476;
                  $3477 = $285;
                  $284 = $3477;
                  $283 = $286;
                  $3478 = $283;
                  $3479 = HEAP32[$3478>>2]|0;
                  HEAP32[$3477>>2] = $3479;
                  $320 = $loopVect;
                  $3480 = $320;
                  $316 = $3480;
                  $3481 = $316;
                  $315 = $3481;
                  $296 = $298;
                  $297 = -1;
                  $3482 = $296;
                  HEAP32[$3482>>2] = 0;
                  $3483 = HEAP32[$298>>2]|0;
                  HEAP32[$317>>2] = $3483;
                  $299 = $317;
                  HEAP32[$3481>>2] = 0;
                  $3484 = (($3481) + 4|0);
                  $300 = $302;
                  $301 = -1;
                  $3485 = $300;
                  HEAP32[$3485>>2] = 0;
                  $3486 = HEAP32[$302>>2]|0;
                  HEAP32[$318>>2] = $3486;
                  $303 = $318;
                  HEAP32[$3484>>2] = 0;
                  $3487 = (($3481) + 8|0);
                  $304 = $306;
                  $305 = -1;
                  $3488 = $304;
                  HEAP32[$3488>>2] = 0;
                  $3489 = HEAP32[$306>>2]|0;
                  HEAP32[$319>>2] = $3489;
                  $307 = $319;
                  $313 = $3487;
                  HEAP32[$314>>2] = 0;
                  $3490 = $313;
                  $312 = $314;
                  $3491 = $312;
                  $3492 = HEAP32[$3491>>2]|0;
                  $310 = $3490;
                  HEAP32[$311>>2] = $3492;
                  $3493 = $310;
                  $309 = $3493;
                  $308 = $311;
                  $3494 = $308;
                  $3495 = HEAP32[$3494>>2]|0;
                  HEAP32[$3493>>2] = $3495;
                  $365 = $loopVect;
                  $366 = $polygonVect;
                  $3496 = $365;
                  $3497 = (($3496) + 4|0);
                  $3498 = HEAP32[$3497>>2]|0;
                  $364 = $3496;
                  $3499 = $364;
                  $3500 = (($3499) + 8|0);
                  $363 = $3500;
                  $3501 = $363;
                  $362 = $3501;
                  $3502 = $362;
                  $3503 = HEAP32[$3502>>2]|0;
                  $3504 = ($3498|0)!=($3503|0);
                  if ($3504) {
                   __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$3496,1);
                   $361 = $3496;
                   $3505 = $361;
                   $3506 = (($3505) + 8|0);
                   $360 = $3506;
                   $3507 = $360;
                   $359 = $3507;
                   $3508 = $359;
                   $3509 = (($3496) + 4|0);
                   $3510 = HEAP32[$3509>>2]|0;
                   $358 = $3510;
                   $3511 = $358;
                   $3512 = $366;
                   $355 = $3508;
                   $356 = $3511;
                   $357 = $3512;
                   $3513 = $356;
                   $3514 = ($3513|0)==(0|0);
                   if (!($3514)) {
                    $3515 = $357;
                    __THREW__ = 0;
                    invoke_vii(530,($3513|0),($3515|0));
                    $3516 = __THREW__; __THREW__ = 0;
                    $3517 = $3516&1;
                    if ($3517) {
                     label = 551;
                     break;
                    }
                   }
                   __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
                   $3518 = (($3496) + 4|0);
                   $3519 = HEAP32[$3518>>2]|0;
                   $3520 = (($3519) + 12|0);
                   HEAP32[$3518>>2] = $3520;
                  } else {
                   $3521 = $366;
                   __THREW__ = 0;
                   invoke_vii(531,($3496|0),($3521|0));
                   $3522 = __THREW__; __THREW__ = 0;
                   $3523 = $3522&1;
                   if ($3523) {
                    label = 551;
                    break;
                   }
                  }
                  __THREW__ = 0;
                  invoke_vii(532,($loopVect|0),($indexTriangulatedVect|0));
                  $3524 = __THREW__; __THREW__ = 0;
                  $3525 = $3524&1;
                  if ($3525) {
                   label = 551;
                   break;
                  }
                  $j23 = 0;
                  while(1) {
                   $3526 = $j23;
                   $440 = $indexTriangulatedVect;
                   $3527 = $440;
                   $3528 = (($3527) + 4|0);
                   $3529 = HEAP32[$3528>>2]|0;
                   $3530 = HEAP32[$3527>>2]|0;
                   $3531 = $3529;
                   $3532 = $3530;
                   $3533 = (($3531) - ($3532))|0;
                   $3534 = (($3533|0) / 4)&-1;
                   $3535 = ($3526>>>0)<($3534>>>0);
                   if (!($3535)) {
                    break;
                   }
                   $3536 = $1235;
                   $3537 = $j23;
                   $3538 = (($3537) + 0)|0;
                   $441 = $indexTriangulatedVect;
                   $442 = $3538;
                   $3539 = $441;
                   $3540 = $442;
                   $3541 = HEAP32[$3539>>2]|0;
                   $3542 = (($3541) + ($3540<<2)|0);
                   $3543 = HEAP32[$3542>>2]|0;
                   $443 = $vertIndices;
                   $444 = $3543;
                   $3544 = $443;
                   $3545 = $444;
                   $3546 = HEAP32[$3544>>2]|0;
                   $3547 = (($3546) + ($3545<<2)|0);
                   $3548 = HEAP32[$3547>>2]|0;
                   $445 = $3536;
                   $446 = $3548;
                   $3549 = $445;
                   $3550 = $446;
                   $3551 = HEAP32[$3549>>2]|0;
                   $3552 = (($3551) + (($3550*36)|0)|0);
                   $3553 = $1235;
                   $3554 = (($3553) + 32|0);
                   $3555 = $f17;
                   $3556 = $j23;
                   $3557 = (($3556>>>0) / 3)&-1;
                   $3558 = (($3555) + ($3557))|0;
                   $447 = $3554;
                   $448 = $3558;
                   $3559 = $447;
                   $3560 = $448;
                   $3561 = HEAP32[$3559>>2]|0;
                   $3562 = (($3561) + (($3560*44)|0)|0);
                   __THREW__ = 0;
                   $3563 = (invoke_iii(524,($3562|0),0)|0);
                   $3564 = __THREW__; __THREW__ = 0;
                   $3565 = $3564&1;
                   if ($3565) {
                    label = 551;
                    break L442;
                   }
                   HEAP32[$3563>>2] = $3552;
                   $3566 = $1235;
                   $3567 = $j23;
                   $3568 = (($3567) + 1)|0;
                   $451 = $indexTriangulatedVect;
                   $452 = $3568;
                   $3569 = $451;
                   $3570 = $452;
                   $3571 = HEAP32[$3569>>2]|0;
                   $3572 = (($3571) + ($3570<<2)|0);
                   $3573 = HEAP32[$3572>>2]|0;
                   $453 = $vertIndices;
                   $454 = $3573;
                   $3574 = $453;
                   $3575 = $454;
                   $3576 = HEAP32[$3574>>2]|0;
                   $3577 = (($3576) + ($3575<<2)|0);
                   $3578 = HEAP32[$3577>>2]|0;
                   $455 = $3566;
                   $456 = $3578;
                   $3579 = $455;
                   $3580 = $456;
                   $3581 = HEAP32[$3579>>2]|0;
                   $3582 = (($3581) + (($3580*36)|0)|0);
                   $3583 = $1235;
                   $3584 = (($3583) + 32|0);
                   $3585 = $f17;
                   $3586 = $j23;
                   $3587 = (($3586>>>0) / 3)&-1;
                   $3588 = (($3585) + ($3587))|0;
                   $457 = $3584;
                   $458 = $3588;
                   $3589 = $457;
                   $3590 = $458;
                   $3591 = HEAP32[$3589>>2]|0;
                   $3592 = (($3591) + (($3590*44)|0)|0);
                   __THREW__ = 0;
                   $3593 = (invoke_iii(524,($3592|0),1)|0);
                   $3594 = __THREW__; __THREW__ = 0;
                   $3595 = $3594&1;
                   if ($3595) {
                    label = 551;
                    break L442;
                   }
                   HEAP32[$3593>>2] = $3582;
                   $3596 = $1235;
                   $3597 = $j23;
                   $3598 = (($3597) + 2)|0;
                   $460 = $indexTriangulatedVect;
                   $461 = $3598;
                   $3599 = $460;
                   $3600 = $461;
                   $3601 = HEAP32[$3599>>2]|0;
                   $3602 = (($3601) + ($3600<<2)|0);
                   $3603 = HEAP32[$3602>>2]|0;
                   $462 = $vertIndices;
                   $463 = $3603;
                   $3604 = $462;
                   $3605 = $463;
                   $3606 = HEAP32[$3604>>2]|0;
                   $3607 = (($3606) + ($3605<<2)|0);
                   $3608 = HEAP32[$3607>>2]|0;
                   $464 = $3596;
                   $465 = $3608;
                   $3609 = $464;
                   $3610 = $465;
                   $3611 = HEAP32[$3609>>2]|0;
                   $3612 = (($3611) + (($3610*36)|0)|0);
                   $3613 = $1235;
                   $3614 = (($3613) + 32|0);
                   $3615 = $f17;
                   $3616 = $j23;
                   $3617 = (($3616>>>0) / 3)&-1;
                   $3618 = (($3615) + ($3617))|0;
                   $466 = $3614;
                   $467 = $3618;
                   $3619 = $466;
                   $3620 = $467;
                   $3621 = HEAP32[$3619>>2]|0;
                   $3622 = (($3621) + (($3620*44)|0)|0);
                   __THREW__ = 0;
                   $3623 = (invoke_iii(524,($3622|0),2)|0);
                   $3624 = __THREW__; __THREW__ = 0;
                   $3625 = $3624&1;
                   if ($3625) {
                    label = 551;
                    break L442;
                   }
                   HEAP32[$3623>>2] = $3612;
                   $qq = 0;
                   while(1) {
                    $3626 = $qq;
                    $3627 = ($3626|0)<(3);
                    if (!($3627)) {
                     break;
                    }
                    $3628 = $j23;
                    $3629 = $qq;
                    $3630 = (($3628) + ($3629))|0;
                    $483 = $indexTriangulatedVect;
                    $484 = $3630;
                    $3631 = $483;
                    $3632 = $484;
                    $3633 = HEAP32[$3631>>2]|0;
                    $3634 = (($3633) + ($3632<<2)|0);
                    $3635 = HEAP32[$3634>>2]|0;
                    $3636 = (($3635) + 1)|0;
                    $3637 = $vert_per_face18;
                    $3638 = (($3636|0) % ($3637|0))&-1;
                    $3639 = $j23;
                    $3640 = $qq;
                    $3641 = (($3640) + 1)|0;
                    $3642 = (($3641|0) % 3)&-1;
                    $3643 = (($3639) + ($3642))|0;
                    $485 = $indexTriangulatedVect;
                    $486 = $3643;
                    $3644 = $485;
                    $3645 = $486;
                    $3646 = HEAP32[$3644>>2]|0;
                    $3647 = (($3646) + ($3645<<2)|0);
                    $3648 = HEAP32[$3647>>2]|0;
                    $3649 = ($3638|0)==($3648|0);
                    if ($3649) {
                     $3650 = $1235;
                     $3651 = (($3650) + 32|0);
                     $3652 = $f17;
                     $3653 = $j23;
                     $3654 = (($3653>>>0) / 3)&-1;
                     $3655 = (($3652) + ($3654))|0;
                     $487 = $3651;
                     $488 = $3655;
                     $3656 = $487;
                     $3657 = $488;
                     $3658 = HEAP32[$3656>>2]|0;
                     $3659 = (($3658) + (($3657*44)|0)|0);
                     $3660 = $qq;
                     __THREW__ = 0;
                     invoke_vii(533,($3659|0),($3660|0));
                     $3661 = __THREW__; __THREW__ = 0;
                     $3662 = $3661&1;
                     if ($3662) {
                      label = 551;
                      break L442;
                     }
                    } else {
                     $3669 = $1235;
                     $3670 = (($3669) + 32|0);
                     $3671 = $f17;
                     $3672 = $j23;
                     $3673 = (($3672>>>0) / 3)&-1;
                     $3674 = (($3671) + ($3673))|0;
                     $506 = $3670;
                     $507 = $3674;
                     $3675 = $506;
                     $3676 = $507;
                     $3677 = HEAP32[$3675>>2]|0;
                     $3678 = (($3677) + (($3676*44)|0)|0);
                     $3679 = $qq;
                     __THREW__ = 0;
                     invoke_vii(529,($3678|0),($3679|0));
                     $3680 = __THREW__; __THREW__ = 0;
                     $3681 = $3680&1;
                     if ($3681) {
                      label = 551;
                      break L442;
                     }
                    }
                    $3682 = $qq;
                    $3683 = (($3682) + 1)|0;
                    $qq = $3683;
                   }
                   $3684 = $j23;
                   $3685 = (($3684) + 3)|0;
                   $j23 = $3685;
                  }
                  __THREW__ = 0;
                  invoke_vi(534,($loopVect|0));
                  $3686 = __THREW__; __THREW__ = 0;
                  $3687 = $3686&1;
                  if ($3687) {
                   label = 550;
                   break;
                  }
                  __THREW__ = 0;
                  invoke_vi(439,($indexTriangulatedVect|0));
                  $3688 = __THREW__; __THREW__ = 0;
                  $3689 = $3688&1;
                  if ($3689) {
                   label = 451;
                   break;
                  }
                 }
                 $3692 = $trigs;
                 $3693 = $f17;
                 $3694 = (($3693) + ($3692))|0;
                 $f17 = $3694;
                 $1241 = 0;
                }
                __THREW__ = 0;
                invoke_vi(535,($polygonVect|0));
                $3695 = __THREW__; __THREW__ = 0;
                $3696 = $3695&1;
                if ($3696) {
                 label = 450;
                 break;
                }
                __THREW__ = 0;
                invoke_vi(439,($vertIndices|0));
                $3697 = __THREW__; __THREW__ = 0;
                $3698 = $3697&1;
                if ($3698) {
                 label = 409;
                 break L440;
                }
                $cleanup$dest24 = $1241;
                $cond1 = ($cleanup$dest24|0)==(0);
                if (!($cond1)) {
                 label = 726;
                 break;
                }
               }
               $620 = $tokens;
               $3703 = $620;
               $3704 = (($3703) + 4|0);
               $3705 = HEAP32[$3704>>2]|0;
               $3706 = HEAP32[$3703>>2]|0;
               $3707 = $3705;
               $3708 = $3706;
               $3709 = (($3707) - ($3708))|0;
               $3710 = (($3709|0) / 12)&-1;
               $3711 = $vert_per_face18;
               $3712 = (($3710) - ($3711))|0;
               $3713 = (($3712) - 1)|0;
               $color_elements = $3713;
               $3714 = $color_elements;
               $3715 = ($3714>>>0)>(0);
               $3716 = $3715&1;
               $3717 = $isColorDefined;
               $3718 = $3717&1;
               $3719 = $3718&1;
               $3720 = $3719 | $3716;
               $3721 = ($3720|0)!=(0);
               $3722 = $3721&1;
               $isColorDefined = $3722;
               $3723 = $isColorDefined;
               $3724 = $3723&1;
               if ($3724) {
                $3725 = $1237;
                $3726 = HEAP32[$3725>>2]|0;
                $3727 = $3726 | 256;
                HEAP32[$3725>>2] = $3727;
               }
               $3728 = $color_elements;
               $3729 = ($3728>>>0)>(0);
               do {
                if ($3729) {
                 $3730 = $1235;
                 __THREW__ = 0;
                 $3731 = (invoke_ii(434,($3730|0))|0);
                 $3732 = __THREW__; __THREW__ = 0;
                 $3733 = $3732&1;
                 if ($3733) {
                  label = 409;
                  break L440;
                 }
                 if (!($3731)) {
                  break;
                 }
                 $3734 = $color_elements;
                 $3735 = ($3734>>>0)>(0);
                 if ($3735) {
                  $3736 = $1237;
                  $3737 = HEAP32[$3736>>2]|0;
                  $3738 = $3737 | 256;
                  HEAP32[$3736>>2] = $3738;
                 }
                 $3739 = $color_elements;
                 if ((($3739|0) == 0)) {
                  while(1) {
                   $3740 = $f0;
                   $3741 = $f17;
                   $3742 = ($3740>>>0)<=($3741>>>0);
                   if (!($3742)) {
                    break;
                   }
                   $3743 = $1235;
                   $3744 = (($3743) + 32|0);
                   $3745 = $f0;
                   $636 = $3744;
                   $637 = $3745;
                   $3746 = $636;
                   $3747 = $637;
                   $3748 = HEAP32[$3746>>2]|0;
                   $3749 = (($3748) + (($3747*44)|0)|0);
                   __THREW__ = 0;
                   $3750 = (invoke_ii(436,($3749|0))|0);
                   $3751 = __THREW__; __THREW__ = 0;
                   $3752 = $3751&1;
                   if ($3752) {
                    label = 409;
                    break L440;
                   }
                   __THREW__ = 0;
                   invoke_vidddd(516,($1254|0),0.66600000858306885,0.66600000858306885,0.66600000858306885,0.66600000858306885);
                   $3753 = __THREW__; __THREW__ = 0;
                   $3754 = $3753&1;
                   if ($3754) {
                    label = 409;
                    break L440;
                   }
                   __THREW__ = 0;
                   invoke_vii(512,($3750|0),($1254|0));
                   $3755 = __THREW__; __THREW__ = 0;
                   $3756 = $3755&1;
                   if ($3756) {
                    label = 409;
                    break L440;
                   }
                   $3757 = $f0;
                   $3758 = (($3757) + 1)|0;
                   $f0 = $3758;
                  }
                 } else if ((($3739|0) == 3)) {
                  $3810 = $vert_per_face18;
                  $3811 = (($3810) + 1)|0;
                  $679 = $tokens;
                  $680 = $3811;
                  $3812 = $679;
                  $3813 = $680;
                  $3814 = HEAP32[$3812>>2]|0;
                  $3815 = (($3814) + (($3813*12)|0)|0);
                  $3816 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($3815,46,0)|0);
                  $3817 = ($3816|0)==(-1);
                  if ($3817) {
                   __THREW__ = 0;
                   invoke_vii(447,($cc|0),-1);
                   $3818 = __THREW__; __THREW__ = 0;
                   $3819 = $3818&1;
                   if ($3819) {
                    label = 409;
                    break L440;
                   }
                   $3820 = $vert_per_face18;
                   $3821 = (($3820) + 1)|0;
                   $682 = $tokens;
                   $683 = $3821;
                   $3822 = $682;
                   $3823 = $683;
                   $3824 = HEAP32[$3822>>2]|0;
                   $3825 = (($3824) + (($3823*12)|0)|0);
                   $698 = $3825;
                   $3826 = $698;
                   $697 = $3826;
                   $3827 = $697;
                   $696 = $3827;
                   $3828 = $696;
                   $695 = $3828;
                   $3829 = $695;
                   $694 = $3829;
                   $3830 = $694;
                   $693 = $3830;
                   $3831 = $693;
                   $3832 = HEAP8[$3831>>0]|0;
                   $3833 = $3832&255;
                   $3834 = $3833 & 1;
                   $3835 = ($3834|0)!=(0);
                   if ($3835) {
                    $687 = $3828;
                    $3836 = $687;
                    $686 = $3836;
                    $3837 = $686;
                    $685 = $3837;
                    $3838 = $685;
                    $3839 = (($3838) + 8|0);
                    $3840 = HEAP32[$3839>>2]|0;
                    $3847 = $3840;
                   } else {
                    $692 = $3828;
                    $3841 = $692;
                    $691 = $3841;
                    $3842 = $691;
                    $690 = $3842;
                    $3843 = $690;
                    $3844 = (($3843) + 1|0);
                    $689 = $3844;
                    $3845 = $689;
                    $688 = $3845;
                    $3846 = $688;
                    $3847 = $3846;
                   }
                   $684 = $3847;
                   $3848 = $684;
                   __THREW__ = 0;
                   $3849 = (invoke_ii(508,($3848|0))|0);
                   $3850 = __THREW__; __THREW__ = 0;
                   $3851 = $3850&1;
                   if ($3851) {
                    label = 409;
                    break L440;
                   }
                   $3852 = $3849&255;
                   __THREW__ = 0;
                   $3853 = (invoke_iii(421,($cc|0),0)|0);
                   $3854 = __THREW__; __THREW__ = 0;
                   $3855 = $3854&1;
                   if ($3855) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$3853>>0] = $3852;
                   $3856 = $vert_per_face18;
                   $3857 = (($3856) + 2)|0;
                   $700 = $tokens;
                   $701 = $3857;
                   $3858 = $700;
                   $3859 = $701;
                   $3860 = HEAP32[$3858>>2]|0;
                   $3861 = (($3860) + (($3859*12)|0)|0);
                   $716 = $3861;
                   $3862 = $716;
                   $715 = $3862;
                   $3863 = $715;
                   $714 = $3863;
                   $3864 = $714;
                   $713 = $3864;
                   $3865 = $713;
                   $712 = $3865;
                   $3866 = $712;
                   $711 = $3866;
                   $3867 = $711;
                   $3868 = HEAP8[$3867>>0]|0;
                   $3869 = $3868&255;
                   $3870 = $3869 & 1;
                   $3871 = ($3870|0)!=(0);
                   if ($3871) {
                    $705 = $3864;
                    $3872 = $705;
                    $704 = $3872;
                    $3873 = $704;
                    $703 = $3873;
                    $3874 = $703;
                    $3875 = (($3874) + 8|0);
                    $3876 = HEAP32[$3875>>2]|0;
                    $3883 = $3876;
                   } else {
                    $710 = $3864;
                    $3877 = $710;
                    $709 = $3877;
                    $3878 = $709;
                    $708 = $3878;
                    $3879 = $708;
                    $3880 = (($3879) + 1|0);
                    $707 = $3880;
                    $3881 = $707;
                    $706 = $3881;
                    $3882 = $706;
                    $3883 = $3882;
                   }
                   $702 = $3883;
                   $3884 = $702;
                   __THREW__ = 0;
                   $3885 = (invoke_ii(508,($3884|0))|0);
                   $3886 = __THREW__; __THREW__ = 0;
                   $3887 = $3886&1;
                   if ($3887) {
                    label = 409;
                    break L440;
                   }
                   $3888 = $3885&255;
                   __THREW__ = 0;
                   $3889 = (invoke_iii(421,($cc|0),1)|0);
                   $3890 = __THREW__; __THREW__ = 0;
                   $3891 = $3890&1;
                   if ($3891) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$3889>>0] = $3888;
                   $3892 = $vert_per_face18;
                   $3893 = (($3892) + 3)|0;
                   $718 = $tokens;
                   $719 = $3893;
                   $3894 = $718;
                   $3895 = $719;
                   $3896 = HEAP32[$3894>>2]|0;
                   $3897 = (($3896) + (($3895*12)|0)|0);
                   $734 = $3897;
                   $3898 = $734;
                   $733 = $3898;
                   $3899 = $733;
                   $732 = $3899;
                   $3900 = $732;
                   $731 = $3900;
                   $3901 = $731;
                   $730 = $3901;
                   $3902 = $730;
                   $729 = $3902;
                   $3903 = $729;
                   $3904 = HEAP8[$3903>>0]|0;
                   $3905 = $3904&255;
                   $3906 = $3905 & 1;
                   $3907 = ($3906|0)!=(0);
                   if ($3907) {
                    $723 = $3900;
                    $3908 = $723;
                    $722 = $3908;
                    $3909 = $722;
                    $721 = $3909;
                    $3910 = $721;
                    $3911 = (($3910) + 8|0);
                    $3912 = HEAP32[$3911>>2]|0;
                    $3919 = $3912;
                   } else {
                    $728 = $3900;
                    $3913 = $728;
                    $727 = $3913;
                    $3914 = $727;
                    $726 = $3914;
                    $3915 = $726;
                    $3916 = (($3915) + 1|0);
                    $725 = $3916;
                    $3917 = $725;
                    $724 = $3917;
                    $3918 = $724;
                    $3919 = $3918;
                   }
                   $720 = $3919;
                   $3920 = $720;
                   __THREW__ = 0;
                   $3921 = (invoke_ii(508,($3920|0))|0);
                   $3922 = __THREW__; __THREW__ = 0;
                   $3923 = $3922&1;
                   if ($3923) {
                    label = 409;
                    break L440;
                   }
                   $3924 = $3921&255;
                   __THREW__ = 0;
                   $3925 = (invoke_iii(421,($cc|0),2)|0);
                   $3926 = __THREW__; __THREW__ = 0;
                   $3927 = $3926&1;
                   if ($3927) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$3925>>0] = $3924;
                   while(1) {
                    $3928 = $f0;
                    $3929 = $f17;
                    $3930 = ($3928>>>0)<=($3929>>>0);
                    if (!($3930)) {
                     break;
                    }
                    $3931 = $1235;
                    $3932 = (($3931) + 32|0);
                    $3933 = $f0;
                    $750 = $3932;
                    $751 = $3933;
                    $3934 = $750;
                    $3935 = $751;
                    $3936 = HEAP32[$3934>>2]|0;
                    $3937 = (($3936) + (($3935*44)|0)|0);
                    __THREW__ = 0;
                    $3938 = (invoke_ii(436,($3937|0))|0);
                    $3939 = __THREW__; __THREW__ = 0;
                    $3940 = $3939&1;
                    if ($3940) {
                     label = 409;
                     break L440;
                    }
                    ;HEAP8[$3938+0>>0]=HEAP8[$cc+0>>0]|0;HEAP8[$3938+1>>0]=HEAP8[$cc+1>>0]|0;HEAP8[$3938+2>>0]=HEAP8[$cc+2>>0]|0;HEAP8[$3938+3>>0]=HEAP8[$cc+3>>0]|0;
                    $3941 = $f0;
                    $3942 = (($3941) + 1)|0;
                    $f0 = $3942;
                   }
                  } else {
                   $3943 = $vert_per_face18;
                   $3944 = (($3943) + 1)|0;
                   $754 = $tokens;
                   $755 = $3944;
                   $3945 = $754;
                   $3946 = $755;
                   $3947 = HEAP32[$3945>>2]|0;
                   $3948 = (($3947) + (($3946*12)|0)|0);
                   $770 = $3948;
                   $3949 = $770;
                   $769 = $3949;
                   $3950 = $769;
                   $768 = $3950;
                   $3951 = $768;
                   $767 = $3951;
                   $3952 = $767;
                   $766 = $3952;
                   $3953 = $766;
                   $765 = $3953;
                   $3954 = $765;
                   $3955 = HEAP8[$3954>>0]|0;
                   $3956 = $3955&255;
                   $3957 = $3956 & 1;
                   $3958 = ($3957|0)!=(0);
                   if ($3958) {
                    $759 = $3951;
                    $3959 = $759;
                    $758 = $3959;
                    $3960 = $758;
                    $757 = $3960;
                    $3961 = $757;
                    $3962 = (($3961) + 8|0);
                    $3963 = HEAP32[$3962>>2]|0;
                    $3970 = $3963;
                   } else {
                    $764 = $3951;
                    $3964 = $764;
                    $763 = $3964;
                    $3965 = $763;
                    $762 = $3965;
                    $3966 = $762;
                    $3967 = (($3966) + 1|0);
                    $761 = $3967;
                    $3968 = $761;
                    $760 = $3968;
                    $3969 = $760;
                    $3970 = $3969;
                   }
                   $756 = $3970;
                   $3971 = $756;
                   __THREW__ = 0;
                   $3972 = (+invoke_di(510,($3971|0)));
                   $3973 = __THREW__; __THREW__ = 0;
                   $3974 = $3973&1;
                   if ($3974) {
                    label = 409;
                    break L440;
                   }
                   $3975 = $3972;
                   HEAPF32[$color25>>2] = $3975;
                   $3976 = $vert_per_face18;
                   $3977 = (($3976) + 2)|0;
                   $771 = $tokens;
                   $772 = $3977;
                   $3978 = $771;
                   $3979 = $772;
                   $3980 = HEAP32[$3978>>2]|0;
                   $3981 = (($3980) + (($3979*12)|0)|0);
                   $787 = $3981;
                   $3982 = $787;
                   $786 = $3982;
                   $3983 = $786;
                   $785 = $3983;
                   $3984 = $785;
                   $784 = $3984;
                   $3985 = $784;
                   $783 = $3985;
                   $3986 = $783;
                   $782 = $3986;
                   $3987 = $782;
                   $3988 = HEAP8[$3987>>0]|0;
                   $3989 = $3988&255;
                   $3990 = $3989 & 1;
                   $3991 = ($3990|0)!=(0);
                   if ($3991) {
                    $776 = $3984;
                    $3992 = $776;
                    $775 = $3992;
                    $3993 = $775;
                    $774 = $3993;
                    $3994 = $774;
                    $3995 = (($3994) + 8|0);
                    $3996 = HEAP32[$3995>>2]|0;
                    $4003 = $3996;
                   } else {
                    $781 = $3984;
                    $3997 = $781;
                    $780 = $3997;
                    $3998 = $780;
                    $779 = $3998;
                    $3999 = $779;
                    $4000 = (($3999) + 1|0);
                    $778 = $4000;
                    $4001 = $778;
                    $777 = $4001;
                    $4002 = $777;
                    $4003 = $4002;
                   }
                   $773 = $4003;
                   $4004 = $773;
                   __THREW__ = 0;
                   $4005 = (+invoke_di(510,($4004|0)));
                   $4006 = __THREW__; __THREW__ = 0;
                   $4007 = $4006&1;
                   if ($4007) {
                    label = 409;
                    break L440;
                   }
                   $4008 = $4005;
                   $4009 = (($color25) + 4|0);
                   HEAPF32[$4009>>2] = $4008;
                   $4010 = $vert_per_face18;
                   $4011 = (($4010) + 3)|0;
                   $788 = $tokens;
                   $789 = $4011;
                   $4012 = $788;
                   $4013 = $789;
                   $4014 = HEAP32[$4012>>2]|0;
                   $4015 = (($4014) + (($4013*12)|0)|0);
                   $804 = $4015;
                   $4016 = $804;
                   $803 = $4016;
                   $4017 = $803;
                   $802 = $4017;
                   $4018 = $802;
                   $801 = $4018;
                   $4019 = $801;
                   $800 = $4019;
                   $4020 = $800;
                   $799 = $4020;
                   $4021 = $799;
                   $4022 = HEAP8[$4021>>0]|0;
                   $4023 = $4022&255;
                   $4024 = $4023 & 1;
                   $4025 = ($4024|0)!=(0);
                   if ($4025) {
                    $793 = $4018;
                    $4026 = $793;
                    $792 = $4026;
                    $4027 = $792;
                    $791 = $4027;
                    $4028 = $791;
                    $4029 = (($4028) + 8|0);
                    $4030 = HEAP32[$4029>>2]|0;
                    $4037 = $4030;
                   } else {
                    $798 = $4018;
                    $4031 = $798;
                    $797 = $4031;
                    $4032 = $797;
                    $796 = $4032;
                    $4033 = $796;
                    $4034 = (($4033) + 1|0);
                    $795 = $4034;
                    $4035 = $795;
                    $794 = $4035;
                    $4036 = $794;
                    $4037 = $4036;
                   }
                   $790 = $4037;
                   $4038 = $790;
                   __THREW__ = 0;
                   $4039 = (+invoke_di(510,($4038|0)));
                   $4040 = __THREW__; __THREW__ = 0;
                   $4041 = $4040&1;
                   if ($4041) {
                    label = 409;
                    break L440;
                   }
                   $4042 = $4039;
                   $4043 = (($color25) + 8|0);
                   HEAPF32[$4043>>2] = $4042;
                   while(1) {
                    $4044 = $f0;
                    $4045 = $f17;
                    $4046 = ($4044>>>0)<=($4045>>>0);
                    if (!($4046)) {
                     break;
                    }
                    $4047 = $1235;
                    $4048 = (($4047) + 32|0);
                    $4049 = $f0;
                    $805 = $4048;
                    $806 = $4049;
                    $4050 = $805;
                    $4051 = $806;
                    $4052 = HEAP32[$4050>>2]|0;
                    $4053 = (($4052) + (($4051*44)|0)|0);
                    __THREW__ = 0;
                    $4054 = (invoke_ii(436,($4053|0))|0);
                    $4055 = __THREW__; __THREW__ = 0;
                    $4056 = $4055&1;
                    if ($4056) {
                     label = 409;
                     break L440;
                    }
                    $4057 = +HEAPF32[$color25>>2];
                    $4058 = (($color25) + 4|0);
                    $4059 = +HEAPF32[$4058>>2];
                    $4060 = (($color25) + 8|0);
                    $4061 = +HEAPF32[$4060>>2];
                    __THREW__ = 0;
                    invoke_vidddd(516,($1256|0),(+$4057),(+$4059),(+$4061),1.0);
                    $4062 = __THREW__; __THREW__ = 0;
                    $4063 = $4062&1;
                    if ($4063) {
                     label = 409;
                     break L440;
                    }
                    __THREW__ = 0;
                    invoke_vii(512,($4054|0),($1256|0));
                    $4064 = __THREW__; __THREW__ = 0;
                    $4065 = $4064&1;
                    if ($4065) {
                     label = 409;
                     break L440;
                    }
                    $4066 = $f0;
                    $4067 = (($4066) + 1)|0;
                    $f0 = $4067;
                   }
                  }
                 } else if ((($3739|0) == 4)) {
                  $4068 = $vert_per_face18;
                  $4069 = (($4068) + 1)|0;
                  $824 = $tokens;
                  $825 = $4069;
                  $4070 = $824;
                  $4071 = $825;
                  $4072 = HEAP32[$4070>>2]|0;
                  $4073 = (($4072) + (($4071*12)|0)|0);
                  $4074 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($4073,46,0)|0);
                  $4075 = ($4074|0)==(-1);
                  if ($4075) {
                   __THREW__ = 0;
                   invoke_vi(536,($cc26|0));
                   $4076 = __THREW__; __THREW__ = 0;
                   $4077 = $4076&1;
                   if ($4077) {
                    label = 409;
                    break L440;
                   }
                   $4078 = $vert_per_face18;
                   $4079 = (($4078) + 1)|0;
                   $828 = $tokens;
                   $829 = $4079;
                   $4080 = $828;
                   $4081 = $829;
                   $4082 = HEAP32[$4080>>2]|0;
                   $4083 = (($4082) + (($4081*12)|0)|0);
                   $844 = $4083;
                   $4084 = $844;
                   $843 = $4084;
                   $4085 = $843;
                   $842 = $4085;
                   $4086 = $842;
                   $841 = $4086;
                   $4087 = $841;
                   $840 = $4087;
                   $4088 = $840;
                   $839 = $4088;
                   $4089 = $839;
                   $4090 = HEAP8[$4089>>0]|0;
                   $4091 = $4090&255;
                   $4092 = $4091 & 1;
                   $4093 = ($4092|0)!=(0);
                   if ($4093) {
                    $833 = $4086;
                    $4094 = $833;
                    $832 = $4094;
                    $4095 = $832;
                    $831 = $4095;
                    $4096 = $831;
                    $4097 = (($4096) + 8|0);
                    $4098 = HEAP32[$4097>>2]|0;
                    $4105 = $4098;
                   } else {
                    $838 = $4086;
                    $4099 = $838;
                    $837 = $4099;
                    $4100 = $837;
                    $836 = $4100;
                    $4101 = $836;
                    $4102 = (($4101) + 1|0);
                    $835 = $4102;
                    $4103 = $835;
                    $834 = $4103;
                    $4104 = $834;
                    $4105 = $4104;
                   }
                   $830 = $4105;
                   $4106 = $830;
                   __THREW__ = 0;
                   $4107 = (invoke_ii(508,($4106|0))|0);
                   $4108 = __THREW__; __THREW__ = 0;
                   $4109 = $4108&1;
                   if ($4109) {
                    label = 409;
                    break L440;
                   }
                   $4110 = $4107&255;
                   __THREW__ = 0;
                   $4111 = (invoke_iii(421,($cc26|0),0)|0);
                   $4112 = __THREW__; __THREW__ = 0;
                   $4113 = $4112&1;
                   if ($4113) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$4111>>0] = $4110;
                   $4114 = $vert_per_face18;
                   $4115 = (($4114) + 2)|0;
                   $860 = $tokens;
                   $861 = $4115;
                   $4116 = $860;
                   $4117 = $861;
                   $4118 = HEAP32[$4116>>2]|0;
                   $4119 = (($4118) + (($4117*12)|0)|0);
                   $876 = $4119;
                   $4120 = $876;
                   $875 = $4120;
                   $4121 = $875;
                   $874 = $4121;
                   $4122 = $874;
                   $873 = $4122;
                   $4123 = $873;
                   $872 = $4123;
                   $4124 = $872;
                   $871 = $4124;
                   $4125 = $871;
                   $4126 = HEAP8[$4125>>0]|0;
                   $4127 = $4126&255;
                   $4128 = $4127 & 1;
                   $4129 = ($4128|0)!=(0);
                   if ($4129) {
                    $865 = $4122;
                    $4130 = $865;
                    $864 = $4130;
                    $4131 = $864;
                    $863 = $4131;
                    $4132 = $863;
                    $4133 = (($4132) + 8|0);
                    $4134 = HEAP32[$4133>>2]|0;
                    $4141 = $4134;
                   } else {
                    $870 = $4122;
                    $4135 = $870;
                    $869 = $4135;
                    $4136 = $869;
                    $868 = $4136;
                    $4137 = $868;
                    $4138 = (($4137) + 1|0);
                    $867 = $4138;
                    $4139 = $867;
                    $866 = $4139;
                    $4140 = $866;
                    $4141 = $4140;
                   }
                   $862 = $4141;
                   $4142 = $862;
                   __THREW__ = 0;
                   $4143 = (invoke_ii(508,($4142|0))|0);
                   $4144 = __THREW__; __THREW__ = 0;
                   $4145 = $4144&1;
                   if ($4145) {
                    label = 409;
                    break L440;
                   }
                   $4146 = $4143&255;
                   __THREW__ = 0;
                   $4147 = (invoke_iii(421,($cc26|0),1)|0);
                   $4148 = __THREW__; __THREW__ = 0;
                   $4149 = $4148&1;
                   if ($4149) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$4147>>0] = $4146;
                   $4150 = $vert_per_face18;
                   $4151 = (($4150) + 3)|0;
                   $879 = $tokens;
                   $880 = $4151;
                   $4152 = $879;
                   $4153 = $880;
                   $4154 = HEAP32[$4152>>2]|0;
                   $4155 = (($4154) + (($4153*12)|0)|0);
                   $895 = $4155;
                   $4156 = $895;
                   $894 = $4156;
                   $4157 = $894;
                   $893 = $4157;
                   $4158 = $893;
                   $892 = $4158;
                   $4159 = $892;
                   $891 = $4159;
                   $4160 = $891;
                   $890 = $4160;
                   $4161 = $890;
                   $4162 = HEAP8[$4161>>0]|0;
                   $4163 = $4162&255;
                   $4164 = $4163 & 1;
                   $4165 = ($4164|0)!=(0);
                   if ($4165) {
                    $884 = $4158;
                    $4166 = $884;
                    $883 = $4166;
                    $4167 = $883;
                    $882 = $4167;
                    $4168 = $882;
                    $4169 = (($4168) + 8|0);
                    $4170 = HEAP32[$4169>>2]|0;
                    $4177 = $4170;
                   } else {
                    $889 = $4158;
                    $4171 = $889;
                    $888 = $4171;
                    $4172 = $888;
                    $887 = $4172;
                    $4173 = $887;
                    $4174 = (($4173) + 1|0);
                    $886 = $4174;
                    $4175 = $886;
                    $885 = $4175;
                    $4176 = $885;
                    $4177 = $4176;
                   }
                   $881 = $4177;
                   $4178 = $881;
                   __THREW__ = 0;
                   $4179 = (invoke_ii(508,($4178|0))|0);
                   $4180 = __THREW__; __THREW__ = 0;
                   $4181 = $4180&1;
                   if ($4181) {
                    label = 409;
                    break L440;
                   }
                   $4182 = $4179&255;
                   __THREW__ = 0;
                   $4183 = (invoke_iii(421,($cc26|0),2)|0);
                   $4184 = __THREW__; __THREW__ = 0;
                   $4185 = $4184&1;
                   if ($4185) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$4183>>0] = $4182;
                   $4186 = $vert_per_face18;
                   $4187 = (($4186) + 4)|0;
                   $911 = $tokens;
                   $912 = $4187;
                   $4188 = $911;
                   $4189 = $912;
                   $4190 = HEAP32[$4188>>2]|0;
                   $4191 = (($4190) + (($4189*12)|0)|0);
                   $927 = $4191;
                   $4192 = $927;
                   $926 = $4192;
                   $4193 = $926;
                   $925 = $4193;
                   $4194 = $925;
                   $924 = $4194;
                   $4195 = $924;
                   $923 = $4195;
                   $4196 = $923;
                   $922 = $4196;
                   $4197 = $922;
                   $4198 = HEAP8[$4197>>0]|0;
                   $4199 = $4198&255;
                   $4200 = $4199 & 1;
                   $4201 = ($4200|0)!=(0);
                   if ($4201) {
                    $916 = $4194;
                    $4202 = $916;
                    $915 = $4202;
                    $4203 = $915;
                    $914 = $4203;
                    $4204 = $914;
                    $4205 = (($4204) + 8|0);
                    $4206 = HEAP32[$4205>>2]|0;
                    $4213 = $4206;
                   } else {
                    $921 = $4194;
                    $4207 = $921;
                    $920 = $4207;
                    $4208 = $920;
                    $919 = $4208;
                    $4209 = $919;
                    $4210 = (($4209) + 1|0);
                    $918 = $4210;
                    $4211 = $918;
                    $917 = $4211;
                    $4212 = $917;
                    $4213 = $4212;
                   }
                   $913 = $4213;
                   $4214 = $913;
                   __THREW__ = 0;
                   $4215 = (invoke_ii(508,($4214|0))|0);
                   $4216 = __THREW__; __THREW__ = 0;
                   $4217 = $4216&1;
                   if ($4217) {
                    label = 409;
                    break L440;
                   }
                   $4218 = $4215&255;
                   __THREW__ = 0;
                   $4219 = (invoke_iii(421,($cc26|0),3)|0);
                   $4220 = __THREW__; __THREW__ = 0;
                   $4221 = $4220&1;
                   if ($4221) {
                    label = 409;
                    break L440;
                   }
                   HEAP8[$4219>>0] = $4218;
                   while(1) {
                    $4222 = $f0;
                    $4223 = $f17;
                    $4224 = ($4222>>>0)<=($4223>>>0);
                    if (!($4224)) {
                     break;
                    }
                    $4225 = $1235;
                    $4226 = (($4225) + 32|0);
                    $4227 = $f0;
                    $930 = $4226;
                    $931 = $4227;
                    $4228 = $930;
                    $4229 = $931;
                    $4230 = HEAP32[$4228>>2]|0;
                    $4231 = (($4230) + (($4229*44)|0)|0);
                    __THREW__ = 0;
                    $4232 = (invoke_ii(436,($4231|0))|0);
                    $4233 = __THREW__; __THREW__ = 0;
                    $4234 = $4233&1;
                    if ($4234) {
                     label = 409;
                     break L440;
                    }
                    ;HEAP8[$4232+0>>0]=HEAP8[$cc26+0>>0]|0;HEAP8[$4232+1>>0]=HEAP8[$cc26+1>>0]|0;HEAP8[$4232+2>>0]=HEAP8[$cc26+2>>0]|0;HEAP8[$4232+3>>0]=HEAP8[$cc26+3>>0]|0;
                    $4235 = $f0;
                    $4236 = (($4235) + 1)|0;
                    $f0 = $4236;
                   }
                  } else {
                   $4237 = $vert_per_face18;
                   $4238 = (($4237) + 1)|0;
                   $933 = $tokens;
                   $934 = $4238;
                   $4239 = $933;
                   $4240 = $934;
                   $4241 = HEAP32[$4239>>2]|0;
                   $4242 = (($4241) + (($4240*12)|0)|0);
                   $949 = $4242;
                   $4243 = $949;
                   $948 = $4243;
                   $4244 = $948;
                   $947 = $4244;
                   $4245 = $947;
                   $946 = $4245;
                   $4246 = $946;
                   $945 = $4246;
                   $4247 = $945;
                   $944 = $4247;
                   $4248 = $944;
                   $4249 = HEAP8[$4248>>0]|0;
                   $4250 = $4249&255;
                   $4251 = $4250 & 1;
                   $4252 = ($4251|0)!=(0);
                   if ($4252) {
                    $938 = $4245;
                    $4253 = $938;
                    $937 = $4253;
                    $4254 = $937;
                    $936 = $4254;
                    $4255 = $936;
                    $4256 = (($4255) + 8|0);
                    $4257 = HEAP32[$4256>>2]|0;
                    $4264 = $4257;
                   } else {
                    $943 = $4245;
                    $4258 = $943;
                    $942 = $4258;
                    $4259 = $942;
                    $941 = $4259;
                    $4260 = $941;
                    $4261 = (($4260) + 1|0);
                    $940 = $4261;
                    $4262 = $940;
                    $939 = $4262;
                    $4263 = $939;
                    $4264 = $4263;
                   }
                   $935 = $4264;
                   $4265 = $935;
                   __THREW__ = 0;
                   $4266 = (+invoke_di(510,($4265|0)));
                   $4267 = __THREW__; __THREW__ = 0;
                   $4268 = $4267&1;
                   if ($4268) {
                    label = 409;
                    break L440;
                   }
                   $4269 = $4266;
                   HEAPF32[$color27>>2] = $4269;
                   $4270 = $vert_per_face18;
                   $4271 = (($4270) + 2)|0;
                   $950 = $tokens;
                   $951 = $4271;
                   $4272 = $950;
                   $4273 = $951;
                   $4274 = HEAP32[$4272>>2]|0;
                   $4275 = (($4274) + (($4273*12)|0)|0);
                   $966 = $4275;
                   $4276 = $966;
                   $965 = $4276;
                   $4277 = $965;
                   $964 = $4277;
                   $4278 = $964;
                   $963 = $4278;
                   $4279 = $963;
                   $962 = $4279;
                   $4280 = $962;
                   $961 = $4280;
                   $4281 = $961;
                   $4282 = HEAP8[$4281>>0]|0;
                   $4283 = $4282&255;
                   $4284 = $4283 & 1;
                   $4285 = ($4284|0)!=(0);
                   if ($4285) {
                    $955 = $4278;
                    $4286 = $955;
                    $954 = $4286;
                    $4287 = $954;
                    $953 = $4287;
                    $4288 = $953;
                    $4289 = (($4288) + 8|0);
                    $4290 = HEAP32[$4289>>2]|0;
                    $4297 = $4290;
                   } else {
                    $960 = $4278;
                    $4291 = $960;
                    $959 = $4291;
                    $4292 = $959;
                    $958 = $4292;
                    $4293 = $958;
                    $4294 = (($4293) + 1|0);
                    $957 = $4294;
                    $4295 = $957;
                    $956 = $4295;
                    $4296 = $956;
                    $4297 = $4296;
                   }
                   $952 = $4297;
                   $4298 = $952;
                   __THREW__ = 0;
                   $4299 = (+invoke_di(510,($4298|0)));
                   $4300 = __THREW__; __THREW__ = 0;
                   $4301 = $4300&1;
                   if ($4301) {
                    label = 409;
                    break L440;
                   }
                   $4302 = $4299;
                   $4303 = (($color27) + 4|0);
                   HEAPF32[$4303>>2] = $4302;
                   $4304 = $vert_per_face18;
                   $4305 = (($4304) + 3)|0;
                   $967 = $tokens;
                   $968 = $4305;
                   $4306 = $967;
                   $4307 = $968;
                   $4308 = HEAP32[$4306>>2]|0;
                   $4309 = (($4308) + (($4307*12)|0)|0);
                   $983 = $4309;
                   $4310 = $983;
                   $982 = $4310;
                   $4311 = $982;
                   $981 = $4311;
                   $4312 = $981;
                   $980 = $4312;
                   $4313 = $980;
                   $979 = $4313;
                   $4314 = $979;
                   $978 = $4314;
                   $4315 = $978;
                   $4316 = HEAP8[$4315>>0]|0;
                   $4317 = $4316&255;
                   $4318 = $4317 & 1;
                   $4319 = ($4318|0)!=(0);
                   if ($4319) {
                    $972 = $4312;
                    $4320 = $972;
                    $971 = $4320;
                    $4321 = $971;
                    $970 = $4321;
                    $4322 = $970;
                    $4323 = (($4322) + 8|0);
                    $4324 = HEAP32[$4323>>2]|0;
                    $4331 = $4324;
                   } else {
                    $977 = $4312;
                    $4325 = $977;
                    $976 = $4325;
                    $4326 = $976;
                    $975 = $4326;
                    $4327 = $975;
                    $4328 = (($4327) + 1|0);
                    $974 = $4328;
                    $4329 = $974;
                    $973 = $4329;
                    $4330 = $973;
                    $4331 = $4330;
                   }
                   $969 = $4331;
                   $4332 = $969;
                   __THREW__ = 0;
                   $4333 = (+invoke_di(510,($4332|0)));
                   $4334 = __THREW__; __THREW__ = 0;
                   $4335 = $4334&1;
                   if ($4335) {
                    label = 409;
                    break L440;
                   }
                   $4336 = $4333;
                   $4337 = (($color27) + 8|0);
                   HEAPF32[$4337>>2] = $4336;
                   $4338 = $vert_per_face18;
                   $4339 = (($4338) + 4)|0;
                   $984 = $tokens;
                   $985 = $4339;
                   $4340 = $984;
                   $4341 = $985;
                   $4342 = HEAP32[$4340>>2]|0;
                   $4343 = (($4342) + (($4341*12)|0)|0);
                   $1000 = $4343;
                   $4344 = $1000;
                   $999 = $4344;
                   $4345 = $999;
                   $998 = $4345;
                   $4346 = $998;
                   $997 = $4346;
                   $4347 = $997;
                   $996 = $4347;
                   $4348 = $996;
                   $995 = $4348;
                   $4349 = $995;
                   $4350 = HEAP8[$4349>>0]|0;
                   $4351 = $4350&255;
                   $4352 = $4351 & 1;
                   $4353 = ($4352|0)!=(0);
                   if ($4353) {
                    $989 = $4346;
                    $4354 = $989;
                    $988 = $4354;
                    $4355 = $988;
                    $987 = $4355;
                    $4356 = $987;
                    $4357 = (($4356) + 8|0);
                    $4358 = HEAP32[$4357>>2]|0;
                    $4365 = $4358;
                   } else {
                    $994 = $4346;
                    $4359 = $994;
                    $993 = $4359;
                    $4360 = $993;
                    $992 = $4360;
                    $4361 = $992;
                    $4362 = (($4361) + 1|0);
                    $991 = $4362;
                    $4363 = $991;
                    $990 = $4363;
                    $4364 = $990;
                    $4365 = $4364;
                   }
                   $986 = $4365;
                   $4366 = $986;
                   __THREW__ = 0;
                   $4367 = (+invoke_di(510,($4366|0)));
                   $4368 = __THREW__; __THREW__ = 0;
                   $4369 = $4368&1;
                   if ($4369) {
                    label = 409;
                    break L440;
                   }
                   $4370 = $4367;
                   $4371 = (($color27) + 12|0);
                   HEAPF32[$4371>>2] = $4370;
                   while(1) {
                    $4372 = $f0;
                    $4373 = $f17;
                    $4374 = ($4372>>>0)<=($4373>>>0);
                    if (!($4374)) {
                     break;
                    }
                    $4375 = $1235;
                    $4376 = (($4375) + 32|0);
                    $4377 = $f0;
                    $1001 = $4376;
                    $1002 = $4377;
                    $4378 = $1001;
                    $4379 = $1002;
                    $4380 = HEAP32[$4378>>2]|0;
                    $4381 = (($4380) + (($4379*44)|0)|0);
                    __THREW__ = 0;
                    $4382 = (invoke_ii(436,($4381|0))|0);
                    $4383 = __THREW__; __THREW__ = 0;
                    $4384 = $4383&1;
                    if ($4384) {
                     label = 409;
                     break L440;
                    }
                    $4385 = +HEAPF32[$color27>>2];
                    $4386 = (($color27) + 4|0);
                    $4387 = +HEAPF32[$4386>>2];
                    $4388 = (($color27) + 8|0);
                    $4389 = +HEAPF32[$4388>>2];
                    $4390 = (($color27) + 12|0);
                    $4391 = +HEAPF32[$4390>>2];
                    __THREW__ = 0;
                    invoke_vidddd(516,($1257|0),(+$4385),(+$4387),(+$4389),(+$4391));
                    $4392 = __THREW__; __THREW__ = 0;
                    $4393 = $4392&1;
                    if ($4393) {
                     label = 409;
                     break L440;
                    }
                    __THREW__ = 0;
                    invoke_vii(512,($4382|0),($1257|0));
                    $4394 = __THREW__; __THREW__ = 0;
                    $4395 = $4394&1;
                    if ($4395) {
                     label = 409;
                     break L440;
                    }
                    $4396 = $f0;
                    $4397 = (($4396) + 1)|0;
                    $f0 = $4397;
                   }
                  }
                 } else if ((($3739|0) == 1)) {
                  while(1) {
                   $3759 = $f0;
                   $3760 = $f17;
                   $3761 = ($3759>>>0)<=($3760>>>0);
                   if (!($3761)) {
                    break;
                   }
                   $3762 = $1235;
                   $3763 = (($3762) + 32|0);
                   $3764 = $f0;
                   $642 = $3763;
                   $643 = $3764;
                   $3765 = $642;
                   $3766 = $643;
                   $3767 = HEAP32[$3765>>2]|0;
                   $3768 = (($3767) + (($3766*44)|0)|0);
                   __THREW__ = 0;
                   $3769 = (invoke_ii(436,($3768|0))|0);
                   $3770 = __THREW__; __THREW__ = 0;
                   $3771 = $3770&1;
                   if ($3771) {
                    label = 409;
                    break L440;
                   }
                   $3772 = $vert_per_face18;
                   $3773 = (($3772) + 1)|0;
                   $645 = $tokens;
                   $646 = $3773;
                   $3774 = $645;
                   $3775 = $646;
                   $3776 = HEAP32[$3774>>2]|0;
                   $3777 = (($3776) + (($3775*12)|0)|0);
                   $661 = $3777;
                   $3778 = $661;
                   $660 = $3778;
                   $3779 = $660;
                   $659 = $3779;
                   $3780 = $659;
                   $658 = $3780;
                   $3781 = $658;
                   $657 = $3781;
                   $3782 = $657;
                   $656 = $3782;
                   $3783 = $656;
                   $3784 = HEAP8[$3783>>0]|0;
                   $3785 = $3784&255;
                   $3786 = $3785 & 1;
                   $3787 = ($3786|0)!=(0);
                   if ($3787) {
                    $650 = $3780;
                    $3788 = $650;
                    $649 = $3788;
                    $3789 = $649;
                    $648 = $3789;
                    $3790 = $648;
                    $3791 = (($3790) + 8|0);
                    $3792 = HEAP32[$3791>>2]|0;
                    $3799 = $3792;
                   } else {
                    $655 = $3780;
                    $3793 = $655;
                    $654 = $3793;
                    $3794 = $654;
                    $653 = $3794;
                    $3795 = $653;
                    $3796 = (($3795) + 1|0);
                    $652 = $3796;
                    $3797 = $652;
                    $651 = $3797;
                    $3798 = $651;
                    $3799 = $3798;
                   }
                   $647 = $3799;
                   $3800 = $647;
                   __THREW__ = 0;
                   $3801 = (invoke_ii(508,($3800|0))|0);
                   $3802 = __THREW__; __THREW__ = 0;
                   $3803 = $3802&1;
                   if ($3803) {
                    label = 409;
                    break L440;
                   }
                   __THREW__ = 0;
                   invoke_vii(511,($1255|0),($3801|0));
                   $3804 = __THREW__; __THREW__ = 0;
                   $3805 = $3804&1;
                   if ($3805) {
                    label = 409;
                    break L440;
                   }
                   __THREW__ = 0;
                   invoke_vii(512,($3769|0),($1255|0));
                   $3806 = __THREW__; __THREW__ = 0;
                   $3807 = $3806&1;
                   if ($3807) {
                    label = 409;
                    break L440;
                   }
                   $3808 = $f0;
                   $3809 = (($3808) + 1)|0;
                   $f0 = $3809;
                  }
                 }
                }
               } while(0);
               $4398 = $f17;
               $4399 = (($4398) + 1)|0;
               $f17 = $4399;
              }
              do {
               if ((label|0) == 408) {
                $1234 = 2;
                $1241 = 1;
                label = 726;
               }
               else if ((label|0) == 421) {
                $1234 = 7;
                $1241 = 1;
                label = 726;
               }
               else if ((label|0) == 428) {
                $1234 = 2;
                $1241 = 1;
                label = 726;
               }
               else if ((label|0) == 450) {
                $3234 = ___cxa_find_matching_catch()|0;
                $3235 = tempRet0;
                $1239 = $3234;
                $1240 = $3235;
               }
               else if ((label|0) == 451) {
                $3236 = ___cxa_find_matching_catch()|0;
                $3237 = tempRet0;
                $1239 = $3236;
                $1240 = $3237;
                label = 570;
               }
               else if ((label|0) == 475) {
                $3323 = ___cxa_find_matching_catch()|0;
                $3324 = tempRet0;
                $1239 = $3323;
                $1240 = $3324;
                __THREW__ = 0;
                invoke_vi(433,($q|0));
                $3325 = __THREW__; __THREW__ = 0;
                $3326 = $3325&1;
                if ($3326) {
                 $4413 = ___cxa_find_matching_catch(0|0)|0;
                 $4414 = tempRet0;
                 ___clang_call_terminate($4413);
                 // unreachable;
                } else {
                 label = 570;
                 break;
                }
               }
               else if ((label|0) == 550) {
                $3663 = ___cxa_find_matching_catch()|0;
                $3664 = tempRet0;
                $1239 = $3663;
                $1240 = $3664;
                label = 563;
               }
               else if ((label|0) == 551) {
                $3665 = ___cxa_find_matching_catch()|0;
                $3666 = tempRet0;
                $1239 = $3665;
                $1240 = $3666;
                __THREW__ = 0;
                invoke_vi(534,($loopVect|0));
                $3667 = __THREW__; __THREW__ = 0;
                $3668 = $3667&1;
                if ($3668) {
                 $4413 = ___cxa_find_matching_catch(0|0)|0;
                 $4414 = tempRet0;
                 ___clang_call_terminate($4413);
                 // unreachable;
                } else {
                 label = 563;
                 break;
                }
               }
               else if ((label|0) == 725) {
                $1241 = 0;
                label = 726;
               }
              } while(0);
              do {
               if ((label|0) == 563) {
                __THREW__ = 0;
                invoke_vi(439,($indexTriangulatedVect|0));
                $3690 = __THREW__; __THREW__ = 0;
                $3691 = $3690&1;
                if ($3691) {
                 $4413 = ___cxa_find_matching_catch(0|0)|0;
                 $4414 = tempRet0;
                 ___clang_call_terminate($4413);
                 // unreachable;
                } else {
                 label = 570;
                 break;
                }
               }
               else if ((label|0) == 726) {
                __THREW__ = 0;
                invoke_vi(433,($qtmp|0));
                $4400 = __THREW__; __THREW__ = 0;
                $4401 = $4400&1;
                if ($4401) {
                 label = 56;
                 break L130;
                }
                $cleanup$dest28 = $1241;
                $cond = ($cleanup$dest28|0)==(0);
                if (!($cond)) {
                 break L37;
                }
                break L436;
               }
              } while(0);
              do {
               if ((label|0) == 570) {
                __THREW__ = 0;
                invoke_vi(535,($polygonVect|0));
                $3699 = __THREW__; __THREW__ = 0;
                $3700 = $3699&1;
                if ($3700) {
                 $4413 = ___cxa_find_matching_catch(0|0)|0;
                 $4414 = tempRet0;
                 ___clang_call_terminate($4413);
                 // unreachable;
                } else {
                 break;
                }
               }
              } while(0);
              __THREW__ = 0;
              invoke_vi(439,($vertIndices|0));
              $3701 = __THREW__; __THREW__ = 0;
              $3702 = $3701&1;
              if ($3702) {
               $4413 = ___cxa_find_matching_catch(0|0)|0;
               $4414 = tempRet0;
               ___clang_call_terminate($4413);
               // unreachable;
              } else {
               break;
              }
             }
            } while(0);
            if ((label|0) == 409) {
             $3067 = ___cxa_find_matching_catch()|0;
             $3068 = tempRet0;
             $1239 = $3067;
             $1240 = $3068;
            }
            __THREW__ = 0;
            invoke_vi(433,($qtmp|0));
            $4402 = __THREW__; __THREW__ = 0;
            $4403 = $4402&1;
            if ($4403) {
             $4413 = ___cxa_find_matching_catch(0|0)|0;
             $4414 = tempRet0;
             ___clang_call_terminate($4413);
             // unreachable;
            } else {
             break L130;
            }
           }
          } while(0);
          $1234 = 0;
          $1241 = 1;
          break L37;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 56) {
       $1523 = ___cxa_find_matching_catch()|0;
       $1524 = tempRet0;
       $1239 = $1523;
       $1240 = $1524;
      }
      __THREW__ = 0;
      invoke_vi(396,($header|0));
      $4406 = __THREW__; __THREW__ = 0;
      $4407 = $4406&1;
      if ($4407) {
       $4413 = ___cxa_find_matching_catch(0|0)|0;
       $4414 = tempRet0;
       ___clang_call_terminate($4413);
       // unreachable;
      } else {
       break L1;
      }
     } else {
      $1234 = 3;
      $1241 = 1;
     }
    } while(0);
    __THREW__ = 0;
    invoke_vi(396,($header|0));
    $4404 = __THREW__; __THREW__ = 0;
    $4405 = $4404&1;
    if ($4405) {
     label = 4;
    } else {
     __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($tokens);
     $4408 = $1234;
     STACKTOP = sp;return ($4408|0);
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $1282 = ___cxa_find_matching_catch()|0;
  $1283 = tempRet0;
  $1239 = $1282;
  $1240 = $1283;
 }
 __THREW__ = 0;
 invoke_vi(537,($tokens|0));
 $4409 = __THREW__; __THREW__ = 0;
 $4410 = $4409&1;
 if ($4410) {
  $4413 = ___cxa_find_matching_catch(0|0)|0;
  $4414 = tempRet0;
  ___clang_call_terminate($4413);
  // unreachable;
 }
 $4411 = $1239;
 $4412 = $1240;
 ___resumeException($4411|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vii(538,($3|0),(4648|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = (($3) + 60|0);
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($6);
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 $9 = (($3) + 60|0);
 __THREW__ = 0;
 invoke_vi(397,($9|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $vtt;
 $4 = $0;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$4>>2] = $6;
 $7 = (($5) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = HEAP32[$4>>2]|0;
 $10 = (($9) + -12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($4) + ($11)|0);
 HEAP32[$12>>2] = $8;
 $13 = (($4) + 8|0);
 __THREW__ = 0;
 invoke_vi(22,($13|0));
 $14 = __THREW__; __THREW__ = 0;
 $15 = $14&1;
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = ___cxa_find_matching_catch()|0;
 $17 = tempRet0;
 $2 = $16;
 $3 = $17;
 __THREW__ = 0;
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $22 = ___cxa_find_matching_catch(0|0)|0;
  $23 = tempRet0;
  ___clang_call_terminate($22);
  // unreachable;
 }
 $20 = $2;
 $21 = $3;
 ___resumeException($20|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(14,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 __ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($5);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = (4792 + 8|0);
 HEAP32[$3>>2] = $4;
 $5 = (($3) + 32|0);
 __THREW__ = 0;
 invoke_vi(396,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($3);
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(58,($3|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(22,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  __ZdlPv($3);
  STACKTOP = sp;return;
 }
 $6 = ___cxa_find_matching_catch()|0;
 $7 = tempRet0;
 $1 = $6;
 $2 = $7;
 __ZdlPv($3);
 $8 = $1;
 $9 = $2;
 ___resumeException($8|0);
 // unreachable;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$__way,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $__way = $__way|0;
 $__wch = $__wch|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0;
 var $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0;
 var $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0;
 var $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0;
 var $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0;
 var $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0;
 var $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0;
 var $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__noff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 64|0;
 $6 = sp;
 $26 = sp + 56|0;
 $42 = sp + 32|0;
 $45 = sp + 24|0;
 $48 = sp + 40|0;
 $63 = sp + 16|0;
 $66 = sp + 8|0;
 $__noff = sp + 48|0;
 $65 = $this;
 $69 = $66;
 $70 = $69;
 HEAP32[$70>>2] = $0;
 $71 = (($69) + 4)|0;
 $72 = $71;
 HEAP32[$72>>2] = $1;
 $67 = $__way;
 $68 = $__wch;
 $73 = $65;
 $74 = (($73) + 44|0);
 $75 = HEAP32[$74>>2]|0;
 $64 = $73;
 $76 = $64;
 $77 = (($76) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)<($78>>>0);
 if ($79) {
  $2 = $73;
  $80 = $2;
  $81 = (($80) + 24|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = (($73) + 44|0);
  HEAP32[$83>>2] = $82;
 }
 $84 = $68;
 $85 = $84 & 24;
 $86 = ($85|0)==(0);
 if ($86) {
  $3 = $agg$result;
  $87 = $4;
  $88 = $87;
  HEAP32[$88>>2] = -1;
  $89 = (($87) + 4)|0;
  $90 = $89;
  HEAP32[$90>>2] = -1;
  $91 = $3;
  ;HEAP32[$91+0>>2]=0|0;HEAP32[$91+4>>2]=0|0;
  $92 = (($91) + 8|0);
  $93 = $4;
  $94 = $93;
  $95 = HEAP32[$94>>2]|0;
  $96 = (($93) + 4)|0;
  $97 = $96;
  $98 = HEAP32[$97>>2]|0;
  $99 = $92;
  $100 = $99;
  HEAP32[$100>>2] = $95;
  $101 = (($99) + 4)|0;
  $102 = $101;
  HEAP32[$102>>2] = $98;
  STACKTOP = sp;return;
 }
 $103 = $68;
 $104 = $103 & 24;
 $105 = ($104|0)==(24);
 if ($105) {
  $106 = $67;
  $107 = ($106|0)==(1);
  if ($107) {
   $5 = $agg$result;
   $108 = $6;
   $109 = $108;
   HEAP32[$109>>2] = -1;
   $110 = (($108) + 4)|0;
   $111 = $110;
   HEAP32[$111>>2] = -1;
   $112 = $5;
   ;HEAP32[$112+0>>2]=0|0;HEAP32[$112+4>>2]=0|0;
   $113 = (($112) + 8|0);
   $114 = $6;
   $115 = $114;
   $116 = HEAP32[$115>>2]|0;
   $117 = (($114) + 4)|0;
   $118 = $117;
   $119 = HEAP32[$118>>2]|0;
   $120 = $113;
   $121 = $120;
   HEAP32[$121>>2] = $116;
   $122 = (($120) + 4)|0;
   $123 = $122;
   HEAP32[$123>>2] = $119;
   STACKTOP = sp;return;
  }
 }
 $124 = $67;
 if ((($124|0) == 0)) {
  $125 = $__noff;
  $126 = $125;
  HEAP32[$126>>2] = 0;
  $127 = (($125) + 4)|0;
  $128 = $127;
  HEAP32[$128>>2] = 0;
 } else if ((($124|0) == 1)) {
  $129 = $68;
  $130 = $129 & 8;
  $131 = ($130|0)!=(0);
  if ($131) {
   $7 = $73;
   $132 = $7;
   $133 = (($132) + 12|0);
   $134 = HEAP32[$133>>2]|0;
   $8 = $73;
   $135 = $8;
   $136 = (($135) + 8|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = $134;
   $139 = $137;
   $140 = (($138) - ($139))|0;
   $141 = ($140|0)<(0);
   $142 = $141 << 31 >> 31;
   $143 = $__noff;
   $144 = $143;
   HEAP32[$144>>2] = $140;
   $145 = (($143) + 4)|0;
   $146 = $145;
   HEAP32[$146>>2] = $142;
  } else {
   $9 = $73;
   $147 = $9;
   $148 = (($147) + 24|0);
   $149 = HEAP32[$148>>2]|0;
   $10 = $73;
   $150 = $10;
   $151 = (($150) + 20|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $149;
   $154 = $152;
   $155 = (($153) - ($154))|0;
   $156 = ($155|0)<(0);
   $157 = $156 << 31 >> 31;
   $158 = $__noff;
   $159 = $158;
   HEAP32[$159>>2] = $155;
   $160 = (($158) + 4)|0;
   $161 = $160;
   HEAP32[$161>>2] = $157;
  }
 } else if ((($124|0) == 2)) {
  $162 = (($73) + 44|0);
  $163 = HEAP32[$162>>2]|0;
  $164 = (($73) + 32|0);
  $24 = $164;
  $165 = $24;
  $23 = $165;
  $166 = $23;
  $22 = $166;
  $167 = $22;
  $21 = $167;
  $168 = $21;
  $20 = $168;
  $169 = $20;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $14 = $166;
   $174 = $14;
   $13 = $174;
   $175 = $13;
   $12 = $175;
   $176 = $12;
   $177 = (($176) + 8|0);
   $178 = HEAP32[$177>>2]|0;
   $185 = $178;
  } else {
   $19 = $166;
   $179 = $19;
   $18 = $179;
   $180 = $18;
   $17 = $180;
   $181 = $17;
   $182 = (($181) + 1|0);
   $16 = $182;
   $183 = $16;
   $15 = $183;
   $184 = $15;
   $185 = $184;
  }
  $11 = $185;
  $186 = $11;
  $187 = $163;
  $188 = $186;
  $189 = (($187) - ($188))|0;
  $190 = ($189|0)<(0);
  $191 = $190 << 31 >> 31;
  $192 = $__noff;
  $193 = $192;
  HEAP32[$193>>2] = $189;
  $194 = (($192) + 4)|0;
  $195 = $194;
  HEAP32[$195>>2] = $191;
 } else {
  $25 = $agg$result;
  $196 = $26;
  $197 = $196;
  HEAP32[$197>>2] = -1;
  $198 = (($196) + 4)|0;
  $199 = $198;
  HEAP32[$199>>2] = -1;
  $200 = $25;
  ;HEAP32[$200+0>>2]=0|0;HEAP32[$200+4>>2]=0|0;
  $201 = (($200) + 8|0);
  $202 = $26;
  $203 = $202;
  $204 = HEAP32[$203>>2]|0;
  $205 = (($202) + 4)|0;
  $206 = $205;
  $207 = HEAP32[$206>>2]|0;
  $208 = $201;
  $209 = $208;
  HEAP32[$209>>2] = $204;
  $210 = (($208) + 4)|0;
  $211 = $210;
  HEAP32[$211>>2] = $207;
  STACKTOP = sp;return;
 }
 $212 = $66;
 $213 = $212;
 $214 = HEAP32[$213>>2]|0;
 $215 = (($212) + 4)|0;
 $216 = $215;
 $217 = HEAP32[$216>>2]|0;
 $218 = $__noff;
 $219 = $218;
 $220 = HEAP32[$219>>2]|0;
 $221 = (($218) + 4)|0;
 $222 = $221;
 $223 = HEAP32[$222>>2]|0;
 $224 = (_i64Add(($220|0),($223|0),($214|0),($217|0))|0);
 $225 = tempRet0;
 $226 = $__noff;
 $227 = $226;
 HEAP32[$227>>2] = $224;
 $228 = (($226) + 4)|0;
 $229 = $228;
 HEAP32[$229>>2] = $225;
 $230 = $__noff;
 $231 = $230;
 $232 = HEAP32[$231>>2]|0;
 $233 = (($230) + 4)|0;
 $234 = $233;
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)<(0);
 if (!($236)) {
  $237 = (($73) + 44|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = (($73) + 32|0);
  $40 = $239;
  $240 = $40;
  $39 = $240;
  $241 = $39;
  $38 = $241;
  $242 = $38;
  $37 = $242;
  $243 = $37;
  $36 = $243;
  $244 = $36;
  $245 = HEAP8[$244>>0]|0;
  $246 = $245&255;
  $247 = $246 & 1;
  $248 = ($247|0)!=(0);
  if ($248) {
   $30 = $241;
   $249 = $30;
   $29 = $249;
   $250 = $29;
   $28 = $250;
   $251 = $28;
   $252 = (($251) + 8|0);
   $253 = HEAP32[$252>>2]|0;
   $260 = $253;
  } else {
   $35 = $241;
   $254 = $35;
   $34 = $254;
   $255 = $34;
   $33 = $255;
   $256 = $33;
   $257 = (($256) + 1|0);
   $32 = $257;
   $258 = $32;
   $31 = $258;
   $259 = $31;
   $260 = $259;
  }
  $27 = $260;
  $261 = $27;
  $262 = $238;
  $263 = $261;
  $264 = (($262) - ($263))|0;
  $265 = ($264|0)<(0);
  $266 = $265 << 31 >> 31;
  $267 = $__noff;
  $268 = $267;
  $269 = HEAP32[$268>>2]|0;
  $270 = (($267) + 4)|0;
  $271 = $270;
  $272 = HEAP32[$271>>2]|0;
  $273 = ($266|0)<($272|0);
  $274 = ($264>>>0)<($269>>>0);
  $275 = ($266|0)==($272|0);
  $276 = $275 & $274;
  $277 = $273 | $276;
  if (!($277)) {
   $294 = $__noff;
   $295 = $294;
   $296 = HEAP32[$295>>2]|0;
   $297 = (($294) + 4)|0;
   $298 = $297;
   $299 = HEAP32[$298>>2]|0;
   $300 = ($296|0)!=(0);
   $301 = ($299|0)!=(0);
   $302 = $300 | $301;
   if ($302) {
    $303 = $68;
    $304 = $303 & 8;
    $305 = ($304|0)!=(0);
    if ($305) {
     $43 = $73;
     $306 = $43;
     $307 = (($306) + 12|0);
     $308 = HEAP32[$307>>2]|0;
     $309 = ($308|0)==(0|0);
     if ($309) {
      $44 = $agg$result;
      $310 = $45;
      $311 = $310;
      HEAP32[$311>>2] = -1;
      $312 = (($310) + 4)|0;
      $313 = $312;
      HEAP32[$313>>2] = -1;
      $314 = $44;
      ;HEAP32[$314+0>>2]=0|0;HEAP32[$314+4>>2]=0|0;
      $315 = (($314) + 8|0);
      $316 = $45;
      $317 = $316;
      $318 = HEAP32[$317>>2]|0;
      $319 = (($316) + 4)|0;
      $320 = $319;
      $321 = HEAP32[$320>>2]|0;
      $322 = $315;
      $323 = $322;
      HEAP32[$323>>2] = $318;
      $324 = (($322) + 4)|0;
      $325 = $324;
      HEAP32[$325>>2] = $321;
      STACKTOP = sp;return;
     }
    }
    $326 = $68;
    $327 = $326 & 16;
    $328 = ($327|0)!=(0);
    if ($328) {
     $46 = $73;
     $329 = $46;
     $330 = (($329) + 24|0);
     $331 = HEAP32[$330>>2]|0;
     $332 = ($331|0)==(0|0);
     if ($332) {
      $47 = $agg$result;
      $333 = $48;
      $334 = $333;
      HEAP32[$334>>2] = -1;
      $335 = (($333) + 4)|0;
      $336 = $335;
      HEAP32[$336>>2] = -1;
      $337 = $47;
      ;HEAP32[$337+0>>2]=0|0;HEAP32[$337+4>>2]=0|0;
      $338 = (($337) + 8|0);
      $339 = $48;
      $340 = $339;
      $341 = HEAP32[$340>>2]|0;
      $342 = (($339) + 4)|0;
      $343 = $342;
      $344 = HEAP32[$343>>2]|0;
      $345 = $338;
      $346 = $345;
      HEAP32[$346>>2] = $341;
      $347 = (($345) + 4)|0;
      $348 = $347;
      HEAP32[$348>>2] = $344;
      STACKTOP = sp;return;
     }
    }
   }
   $349 = $68;
   $350 = $349 & 8;
   $351 = ($350|0)!=(0);
   if ($351) {
    $49 = $73;
    $352 = $49;
    $353 = (($352) + 8|0);
    $354 = HEAP32[$353>>2]|0;
    $50 = $73;
    $355 = $50;
    $356 = (($355) + 8|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = $__noff;
    $359 = $358;
    $360 = HEAP32[$359>>2]|0;
    $361 = (($358) + 4)|0;
    $362 = $361;
    $363 = HEAP32[$362>>2]|0;
    $364 = (($357) + ($360)|0);
    $365 = (($73) + 44|0);
    $366 = HEAP32[$365>>2]|0;
    $51 = $73;
    $52 = $354;
    $53 = $364;
    $54 = $366;
    $367 = $51;
    $368 = $52;
    $369 = (($367) + 8|0);
    HEAP32[$369>>2] = $368;
    $370 = $53;
    $371 = (($367) + 12|0);
    HEAP32[$371>>2] = $370;
    $372 = $54;
    $373 = (($367) + 16|0);
    HEAP32[$373>>2] = $372;
   }
   $374 = $68;
   $375 = $374 & 16;
   $376 = ($375|0)!=(0);
   if ($376) {
    $55 = $73;
    $377 = $55;
    $378 = (($377) + 20|0);
    $379 = HEAP32[$378>>2]|0;
    $56 = $73;
    $380 = $56;
    $381 = (($380) + 28|0);
    $382 = HEAP32[$381>>2]|0;
    $57 = $73;
    $58 = $379;
    $59 = $382;
    $383 = $57;
    $384 = $58;
    $385 = (($383) + 24|0);
    HEAP32[$385>>2] = $384;
    $386 = (($383) + 20|0);
    HEAP32[$386>>2] = $384;
    $387 = $59;
    $388 = (($383) + 28|0);
    HEAP32[$388>>2] = $387;
    $389 = $__noff;
    $390 = $389;
    $391 = HEAP32[$390>>2]|0;
    $392 = (($389) + 4)|0;
    $393 = $392;
    $394 = HEAP32[$393>>2]|0;
    $60 = $73;
    $61 = $391;
    $395 = $60;
    $396 = $61;
    $397 = (($395) + 24|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + ($396)|0);
    HEAP32[$397>>2] = $399;
   }
   $400 = $__noff;
   $401 = $400;
   $402 = HEAP32[$401>>2]|0;
   $403 = (($400) + 4)|0;
   $404 = $403;
   $405 = HEAP32[$404>>2]|0;
   $62 = $agg$result;
   $406 = $63;
   $407 = $406;
   HEAP32[$407>>2] = $402;
   $408 = (($406) + 4)|0;
   $409 = $408;
   HEAP32[$409>>2] = $405;
   $410 = $62;
   ;HEAP32[$410+0>>2]=0|0;HEAP32[$410+4>>2]=0|0;
   $411 = (($410) + 8|0);
   $412 = $63;
   $413 = $412;
   $414 = HEAP32[$413>>2]|0;
   $415 = (($412) + 4)|0;
   $416 = $415;
   $417 = HEAP32[$416>>2]|0;
   $418 = $411;
   $419 = $418;
   HEAP32[$419>>2] = $414;
   $420 = (($418) + 4)|0;
   $421 = $420;
   HEAP32[$421>>2] = $417;
   STACKTOP = sp;return;
  }
 }
 $41 = $agg$result;
 $278 = $42;
 $279 = $278;
 HEAP32[$279>>2] = -1;
 $280 = (($278) + 4)|0;
 $281 = $280;
 HEAP32[$281>>2] = -1;
 $282 = $41;
 ;HEAP32[$282+0>>2]=0|0;HEAP32[$282+4>>2]=0|0;
 $283 = (($282) + 8|0);
 $284 = $42;
 $285 = $284;
 $286 = HEAP32[$285>>2]|0;
 $287 = (($284) + 4)|0;
 $288 = $287;
 $289 = HEAP32[$288>>2]|0;
 $290 = $283;
 $291 = $290;
 HEAP32[$291>>2] = $286;
 $292 = (($290) + 4)|0;
 $293 = $292;
 HEAP32[$293>>2] = $289;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$__sp,$__wch) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__sp = $__sp|0;
 $__wch = $__wch|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $__wch;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $0 = $__sp;
 $7 = $0;
 $8 = (($7) + 8|0);
 $9 = $8;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) + 4)|0;
 $13 = $12;
 $14 = HEAP32[$13>>2]|0;
 $15 = $2;
 FUNCTION_TABLE_viiiiii[$6 & 1023]($agg$result,$3,$11,$14,0,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = $this;
 $14 = $13;
 $15 = (($14) + 44|0);
 $16 = HEAP32[$15>>2]|0;
 $11 = $14;
 $17 = $11;
 $18 = (($17) + 24|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16>>>0)<($19>>>0);
 if ($20) {
  $10 = $14;
  $21 = $10;
  $22 = (($21) + 24|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = (($14) + 44|0);
  HEAP32[$24>>2] = $23;
 }
 $25 = (($14) + 48|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 & 8;
 $28 = ($27|0)!=(0);
 do {
  if ($28) {
   $9 = $14;
   $29 = $9;
   $30 = (($29) + 16|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = (($14) + 44|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ($31>>>0)<($33>>>0);
   if ($34) {
    $0 = $14;
    $35 = $0;
    $36 = (($35) + 8|0);
    $37 = HEAP32[$36>>2]|0;
    $1 = $14;
    $38 = $1;
    $39 = (($38) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($14) + 44|0);
    $42 = HEAP32[$41>>2]|0;
    $2 = $14;
    $3 = $37;
    $4 = $40;
    $5 = $42;
    $43 = $2;
    $44 = $3;
    $45 = (($43) + 8|0);
    HEAP32[$45>>2] = $44;
    $46 = $4;
    $47 = (($43) + 12|0);
    HEAP32[$47>>2] = $46;
    $48 = $5;
    $49 = (($43) + 16|0);
    HEAP32[$49>>2] = $48;
   }
   $6 = $14;
   $50 = $6;
   $51 = (($50) + 12|0);
   $52 = HEAP32[$51>>2]|0;
   $7 = $14;
   $53 = $7;
   $54 = (($53) + 16|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = ($52>>>0)<($55>>>0);
   if (!($56)) {
    break;
   }
   $8 = $14;
   $57 = $8;
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = HEAP8[$59>>0]|0;
   $61 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($60)|0);
   $12 = $61;
   $63 = $12;
   STACKTOP = sp;return ($63|0);
  }
 } while(0);
 $62 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $12 = $62;
 $63 = $12;
 STACKTOP = sp;return ($63|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $__c;
 $21 = $19;
 $22 = (($21) + 44|0);
 $23 = HEAP32[$22>>2]|0;
 $17 = $21;
 $24 = $17;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($23>>>0)<($26>>>0);
 if ($27) {
  $16 = $21;
  $28 = $16;
  $29 = (($28) + 24|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($21) + 44|0);
  HEAP32[$31>>2] = $30;
 }
 $14 = $21;
 $32 = $14;
 $33 = (($32) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $7 = $21;
 $35 = $7;
 $36 = (($35) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($34>>>0)<($37>>>0);
 do {
  if ($38) {
   $39 = $20;
   $40 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $41 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($39,$40)|0);
   if ($41) {
    $5 = $21;
    $42 = $5;
    $43 = (($42) + 8|0);
    $44 = HEAP32[$43>>2]|0;
    $4 = $21;
    $45 = $4;
    $46 = (($45) + 12|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = (($47) + -1|0);
    $49 = (($21) + 44|0);
    $50 = HEAP32[$49>>2]|0;
    $0 = $21;
    $1 = $44;
    $2 = $48;
    $3 = $50;
    $51 = $0;
    $52 = $1;
    $53 = (($51) + 8|0);
    HEAP32[$53>>2] = $52;
    $54 = $2;
    $55 = (($51) + 12|0);
    HEAP32[$55>>2] = $54;
    $56 = $3;
    $57 = (($51) + 16|0);
    HEAP32[$57>>2] = $56;
    $58 = $20;
    $59 = (__ZNSt3__111char_traitsIcE7not_eofEi($58)|0);
    $18 = $59;
    $95 = $18;
    STACKTOP = sp;return ($95|0);
   }
   $60 = (($21) + 48|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & 16;
   $63 = ($62|0)!=(0);
   if (!($63)) {
    $64 = $20;
    $65 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($64)|0);
    $6 = $21;
    $66 = $6;
    $67 = (($66) + 12|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (($68) + -1|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = (__ZNSt3__111char_traitsIcE2eqEcc($65,$70)|0);
    if (!($71)) {
     break;
    }
   }
   $8 = $21;
   $72 = $8;
   $73 = (($72) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $9 = $21;
   $75 = $9;
   $76 = (($75) + 12|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = (($77) + -1|0);
   $79 = (($21) + 44|0);
   $80 = HEAP32[$79>>2]|0;
   $10 = $21;
   $11 = $74;
   $12 = $78;
   $13 = $80;
   $81 = $10;
   $82 = $11;
   $83 = (($81) + 8|0);
   HEAP32[$83>>2] = $82;
   $84 = $12;
   $85 = (($81) + 12|0);
   HEAP32[$85>>2] = $84;
   $86 = $13;
   $87 = (($81) + 16|0);
   HEAP32[$87>>2] = $86;
   $88 = $20;
   $89 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($88)|0);
   $15 = $21;
   $90 = $15;
   $91 = (($90) + 12|0);
   $92 = HEAP32[$91>>2]|0;
   HEAP8[$92>>0] = $89;
   $93 = $20;
   $18 = $93;
   $95 = $18;
   STACKTOP = sp;return ($95|0);
  }
 } while(0);
 $94 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $18 = $94;
 $95 = $18;
 STACKTOP = sp;return ($95|0);
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__hm = 0, $__ninp = 0, $__nout = 0, $__p = 0, $__p1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $47 = sp;
 $50 = sp + 348|0;
 $83 = sp + 268|0;
 $78 = $this;
 $79 = $__c;
 $84 = $78;
 $85 = $79;
 $86 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $87 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($85,$86)|0);
 if ($87) {
  $299 = $79;
  $300 = (__ZNSt3__111char_traitsIcE7not_eofEi($299)|0);
  $77 = $300;
  $301 = $77;
  STACKTOP = sp;return ($301|0);
 }
 $76 = $84;
 $88 = $76;
 $89 = (($88) + 12|0);
 $90 = HEAP32[$89>>2]|0;
 $75 = $84;
 $91 = $75;
 $92 = (($91) + 8|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = $90;
 $95 = $93;
 $96 = (($94) - ($95))|0;
 $__ninp = $96;
 $71 = $84;
 $97 = $71;
 $98 = (($97) + 24|0);
 $99 = HEAP32[$98>>2]|0;
 $70 = $84;
 $100 = $70;
 $101 = (($100) + 28|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($99|0)==($102|0);
 do {
  if ($103) {
   $104 = (($84) + 48|0);
   $105 = HEAP32[$104>>2]|0;
   $106 = $105 & 16;
   $107 = ($106|0)!=(0);
   if (!($107)) {
    $108 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
    $77 = $108;
    $301 = $77;
    STACKTOP = sp;return ($301|0);
   }
   $69 = $84;
   $109 = $69;
   $110 = (($109) + 24|0);
   $111 = HEAP32[$110>>2]|0;
   $40 = $84;
   $112 = $40;
   $113 = (($112) + 20|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = $111;
   $116 = $114;
   $117 = (($115) - ($116))|0;
   $__nout = $117;
   $118 = (($84) + 44|0);
   $119 = HEAP32[$118>>2]|0;
   $7 = $84;
   $120 = $7;
   $121 = (($120) + 20|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = $119;
   $124 = $122;
   $125 = (($123) - ($124))|0;
   $__hm = $125;
   $126 = (($84) + 32|0);
   __THREW__ = 0;
   invoke_vii(539,($126|0),0);
   $127 = __THREW__; __THREW__ = 0;
   $128 = $127&1;
   if (!($128)) {
    $129 = (($84) + 32|0);
    $130 = (($84) + 32|0);
    $6 = $130;
    $131 = $6;
    $5 = $131;
    $132 = $5;
    $4 = $132;
    $133 = $4;
    $3 = $133;
    $134 = $3;
    $135 = HEAP8[$134>>0]|0;
    $136 = $135&255;
    $137 = $136 & 1;
    $138 = ($137|0)!=(0);
    if ($138) {
     $2 = $131;
     $139 = $2;
     $1 = $139;
     $140 = $1;
     $0 = $140;
     $141 = $0;
     $142 = HEAP32[$141>>2]|0;
     $143 = $142 & -2;
     $145 = $143;
    } else {
     $145 = 11;
    }
    $144 = (($145) - 1)|0;
    $8 = $129;
    $9 = $144;
    $146 = $8;
    $147 = $9;
    __THREW__ = 0;
    invoke_viii(540,($146|0),($147|0),0);
    $148 = __THREW__; __THREW__ = 0;
    $149 = $148&1;
    if (!($149)) {
     $150 = (($84) + 32|0);
     $23 = $150;
     $151 = $23;
     $22 = $151;
     $152 = $22;
     $21 = $152;
     $153 = $21;
     $20 = $153;
     $154 = $20;
     $19 = $154;
     $155 = $19;
     $156 = HEAP8[$155>>0]|0;
     $157 = $156&255;
     $158 = $157 & 1;
     $159 = ($158|0)!=(0);
     if ($159) {
      $13 = $152;
      $160 = $13;
      $12 = $160;
      $161 = $12;
      $11 = $161;
      $162 = $11;
      $163 = (($162) + 8|0);
      $164 = HEAP32[$163>>2]|0;
      $171 = $164;
     } else {
      $18 = $152;
      $165 = $18;
      $17 = $165;
      $166 = $17;
      $16 = $166;
      $167 = $16;
      $168 = (($167) + 1|0);
      $15 = $168;
      $169 = $15;
      $14 = $169;
      $170 = $14;
      $171 = $170;
     }
     $10 = $171;
     $172 = $10;
     $__p = $172;
     $173 = $__p;
     $174 = $__p;
     $175 = (($84) + 32|0);
     $33 = $175;
     $176 = $33;
     $32 = $176;
     $177 = $32;
     $31 = $177;
     $178 = $31;
     $30 = $178;
     $179 = $30;
     $180 = HEAP8[$179>>0]|0;
     $181 = $180&255;
     $182 = $181 & 1;
     $183 = ($182|0)!=(0);
     if ($183) {
      $26 = $176;
      $184 = $26;
      $25 = $184;
      $185 = $25;
      $24 = $185;
      $186 = $24;
      $187 = (($186) + 4|0);
      $188 = HEAP32[$187>>2]|0;
      $196 = $188;
     } else {
      $29 = $176;
      $189 = $29;
      $28 = $189;
      $190 = $28;
      $27 = $190;
      $191 = $27;
      $192 = HEAP8[$191>>0]|0;
      $193 = $192&255;
      $194 = $193 >> 1;
      $196 = $194;
     }
     $195 = (($174) + ($196)|0);
     $34 = $84;
     $35 = $173;
     $36 = $195;
     $197 = $34;
     $198 = $35;
     $199 = (($197) + 24|0);
     HEAP32[$199>>2] = $198;
     $200 = (($197) + 20|0);
     HEAP32[$200>>2] = $198;
     $201 = $36;
     $202 = (($197) + 28|0);
     HEAP32[$202>>2] = $201;
     $203 = $__nout;
     $37 = $84;
     $38 = $203;
     $204 = $37;
     $205 = $38;
     $206 = (($204) + 24|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = (($207) + ($205)|0);
     HEAP32[$206>>2] = $208;
     $39 = $84;
     $209 = $39;
     $210 = (($209) + 20|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = $__hm;
     $213 = (($211) + ($212)|0);
     $214 = (($84) + 44|0);
     HEAP32[$214>>2] = $213;
     break;
    }
   }
   $215 = ___cxa_find_matching_catch(0|0)|0;
   $216 = tempRet0;
   $80 = $215;
   $81 = $216;
   $217 = $80;
   (___cxa_begin_catch(($217|0))|0);
   $218 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
   $77 = $218;
   $82 = 1;
   ___cxa_end_catch();
   $301 = $77;
   STACKTOP = sp;return ($301|0);
  }
 } while(0);
 $41 = $84;
 $219 = $41;
 $220 = (($219) + 24|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = (($221) + 1|0);
 HEAP32[$83>>2] = $222;
 $223 = (($84) + 44|0);
 $48 = $83;
 $49 = $223;
 $224 = $48;
 $225 = $49;
 ;HEAP8[$47+0>>0]=HEAP8[$50+0>>0]|0;
 $45 = $224;
 $46 = $225;
 $226 = $45;
 $227 = $46;
 $42 = $47;
 $43 = $226;
 $44 = $227;
 $228 = $43;
 $229 = HEAP32[$228>>2]|0;
 $230 = $44;
 $231 = HEAP32[$230>>2]|0;
 $232 = ($229>>>0)<($231>>>0);
 if ($232) {
  $233 = $46;
  $236 = $233;
 } else {
  $234 = $45;
  $236 = $234;
 }
 $235 = HEAP32[$236>>2]|0;
 $237 = (($84) + 44|0);
 HEAP32[$237>>2] = $235;
 $238 = (($84) + 48|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = $239 & 8;
 $241 = ($240|0)!=(0);
 if ($241) {
  $242 = (($84) + 32|0);
  $64 = $242;
  $243 = $64;
  $63 = $243;
  $244 = $63;
  $62 = $244;
  $245 = $62;
  $61 = $245;
  $246 = $61;
  $60 = $246;
  $247 = $60;
  $248 = HEAP8[$247>>0]|0;
  $249 = $248&255;
  $250 = $249 & 1;
  $251 = ($250|0)!=(0);
  if ($251) {
   $54 = $244;
   $252 = $54;
   $53 = $252;
   $253 = $53;
   $52 = $253;
   $254 = $52;
   $255 = (($254) + 8|0);
   $256 = HEAP32[$255>>2]|0;
   $263 = $256;
  } else {
   $59 = $244;
   $257 = $59;
   $58 = $257;
   $258 = $58;
   $57 = $258;
   $259 = $57;
   $260 = (($259) + 1|0);
   $56 = $260;
   $261 = $56;
   $55 = $261;
   $262 = $55;
   $263 = $262;
  }
  $51 = $263;
  $264 = $51;
  $__p1 = $264;
  $265 = $__p1;
  $266 = $__p1;
  $267 = $__ninp;
  $268 = (($266) + ($267)|0);
  $269 = (($84) + 44|0);
  $270 = HEAP32[$269>>2]|0;
  $65 = $84;
  $66 = $265;
  $67 = $268;
  $68 = $270;
  $271 = $65;
  $272 = $66;
  $273 = (($271) + 8|0);
  HEAP32[$273>>2] = $272;
  $274 = $67;
  $275 = (($271) + 12|0);
  HEAP32[$275>>2] = $274;
  $276 = $68;
  $277 = (($271) + 16|0);
  HEAP32[$277>>2] = $276;
 }
 $278 = $79;
 $279 = $278&255;
 $73 = $84;
 $74 = $279;
 $280 = $73;
 $281 = (($280) + 24|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = (($280) + 28|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($282|0)==($284|0);
 if ($285) {
  $286 = HEAP32[$280>>2]|0;
  $287 = (($286) + 52|0);
  $288 = HEAP32[$287>>2]|0;
  $289 = $74;
  $290 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($289)|0);
  $291 = (FUNCTION_TABLE_iii[$288 & 1023]($280,$290)|0);
  $72 = $291;
 } else {
  $292 = $74;
  $293 = (($280) + 24|0);
  $294 = HEAP32[$293>>2]|0;
  $295 = (($294) + 1|0);
  HEAP32[$293>>2] = $295;
  HEAP8[$294>>0] = $292;
  $296 = $74;
  $297 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($296)|0);
  $72 = $297;
 }
 $298 = $72;
 $77 = $298;
 $301 = $77;
 STACKTOP = sp;return ($301|0);
}
function __ZNSt3__111char_traitsIcE7not_eofEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
 $3 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($1,$2)|0);
 if ($3) {
  $4 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
  $5 = $4 ^ -1;
  $7 = $5;
  STACKTOP = sp;return ($7|0);
 } else {
  $6 = $0;
  $7 = $6;
  STACKTOP = sp;return ($7|0);
 }
 return (0)|0;
}
function __ZNSt3__111char_traitsIcE11to_int_typeEc($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__111char_traitsIcE2eqEcc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = ($3|0)==($5|0);
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__111char_traitsIcE12to_char_typeEi($__c) {
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c;
 $1 = $0;
 $2 = $1&255;
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE($stream,$tokens) {
 $stream = $stream|0;
 $tokens = $tokens|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__annotator$i = 0, $__i$i$i$i = 0, $__old_size$i = 0, $from = 0, $length = 0, $line = 0;
 var $to = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $108 = sp;
 $111 = sp + 884|0;
 $__annotator$i = sp + 885|0;
 $line = sp + 384|0;
 $207 = sp + 712|0;
 $208 = sp + 424|0;
 $203 = $stream;
 $204 = $tokens;
 $202 = $line;
 $209 = $202;
 $201 = $209;
 $210 = $201;
 $200 = $210;
 $211 = $200;
 $199 = $211;
 $212 = $199;
 $198 = $212;
 $197 = $210;
 $213 = $197;
 $196 = $213;
 $214 = $196;
 $195 = $214;
 $215 = $195;
 $__a$i$i$i = $215;
 $__i$i$i$i = 0;
 while(1) {
  $216 = $__i$i$i$i;
  $217 = ($216>>>0)<(3);
  if (!($217)) {
   break;
  }
  $218 = $__i$i$i$i;
  $219 = $__a$i$i$i;
  $220 = (($219) + ($218<<2)|0);
  HEAP32[$220>>2] = 0;
  $221 = $__i$i$i$i;
  $222 = (($221) + 1)|0;
  $__i$i$i$i = $222;
 }
 while(1) {
  $223 = $203;
  __THREW__ = 0;
  (invoke_iiii(541,($223|0),($line|0),10)|0);
  $224 = __THREW__; __THREW__ = 0;
  $225 = $224&1;
  if ($225) {
   label = 55;
   break;
  }
  $193 = $line;
  $194 = 0;
  $226 = $193;
  $192 = $226;
  $227 = $192;
  $191 = $227;
  $228 = $191;
  $190 = $228;
  $229 = $190;
  $189 = $229;
  $230 = $189;
  $231 = HEAP8[$230>>0]|0;
  $232 = $231&255;
  $233 = $232 & 1;
  $234 = ($233|0)!=(0);
  if ($234) {
   $183 = $227;
   $235 = $183;
   $182 = $235;
   $236 = $182;
   $181 = $236;
   $237 = $181;
   $238 = (($237) + 8|0);
   $239 = HEAP32[$238>>2]|0;
   $248 = $239;
  } else {
   $188 = $227;
   $240 = $188;
   $187 = $240;
   $241 = $187;
   $186 = $241;
   $242 = $186;
   $243 = (($242) + 1|0);
   $185 = $243;
   $244 = $185;
   $184 = $244;
   $245 = $184;
   $248 = $245;
  }
  $246 = $194;
  $247 = (($248) + ($246)|0);
  $249 = HEAP8[$247>>0]|0;
  $250 = $249 << 24 >> 24;
  $251 = ($250|0)==(35);
  if ($251) {
   label = 21;
  } else {
   $168 = $line;
   $252 = $168;
   $167 = $252;
   $253 = $167;
   $166 = $253;
   $254 = $166;
   $165 = $254;
   $255 = $165;
   $164 = $255;
   $256 = $164;
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&255;
   $259 = $258 & 1;
   $260 = ($259|0)!=(0);
   if ($260) {
    $160 = $253;
    $261 = $160;
    $159 = $261;
    $262 = $159;
    $158 = $262;
    $263 = $158;
    $264 = (($263) + 4|0);
    $265 = HEAP32[$264>>2]|0;
    $273 = $265;
   } else {
    $163 = $253;
    $266 = $163;
    $162 = $266;
    $267 = $162;
    $161 = $267;
    $268 = $161;
    $269 = HEAP8[$268>>0]|0;
    $270 = $269&255;
    $271 = $270 >> 1;
    $273 = $271;
   }
   $272 = ($273|0)==(0);
   if ($272) {
    label = 21;
   } else {
    $156 = $line;
    $157 = 0;
    $274 = $156;
    $155 = $274;
    $275 = $155;
    $154 = $275;
    $276 = $154;
    $153 = $276;
    $277 = $153;
    $152 = $277;
    $278 = $152;
    $279 = HEAP8[$278>>0]|0;
    $280 = $279&255;
    $281 = $280 & 1;
    $282 = ($281|0)!=(0);
    if ($282) {
     $146 = $275;
     $283 = $146;
     $145 = $283;
     $284 = $145;
     $144 = $284;
     $285 = $144;
     $286 = (($285) + 8|0);
     $287 = HEAP32[$286>>2]|0;
     $296 = $287;
    } else {
     $151 = $275;
     $288 = $151;
     $150 = $288;
     $289 = $150;
     $149 = $289;
     $290 = $149;
     $291 = (($290) + 1|0);
     $148 = $291;
     $292 = $148;
     $147 = $292;
     $293 = $147;
     $296 = $293;
    }
    $294 = $157;
    $295 = (($296) + ($294)|0);
    $297 = HEAP8[$295>>0]|0;
    $298 = $297 << 24 >> 24;
    $299 = ($298|0)==(13);
    if ($299) {
     label = 21;
    } else {
     $648 = 0;
    }
   }
  }
  if ((label|0) == 21) {
   label = 0;
   $300 = $203;
   $301 = HEAP32[$300>>2]|0;
   $302 = (($301) + -12|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = (($300) + ($303)|0);
   $143 = $304;
   $305 = $143;
   $142 = $305;
   $306 = $142;
   $307 = (($306) + 16|0);
   $308 = HEAP32[$307>>2]|0;
   $309 = $308 & 2;
   $310 = ($309|0)!=(0);
   $311 = $310 ^ 1;
   $648 = $311;
  }
  if (!($648)) {
   label = 24;
   break;
  }
 }
 L30: do {
  if ((label|0) == 24) {
   $from = 0;
   $to = 0;
   $141 = $line;
   $312 = $141;
   $140 = $312;
   $313 = $140;
   $139 = $313;
   $314 = $139;
   $138 = $314;
   $315 = $138;
   $316 = HEAP8[$315>>0]|0;
   $317 = $316&255;
   $318 = $317 & 1;
   $319 = ($318|0)!=(0);
   if ($319) {
    $134 = $312;
    $320 = $134;
    $133 = $320;
    $321 = $133;
    $132 = $321;
    $322 = $132;
    $323 = (($322) + 4|0);
    $324 = HEAP32[$323>>2]|0;
    $331 = $324;
   } else {
    $137 = $312;
    $325 = $137;
    $136 = $325;
    $326 = $136;
    $135 = $326;
    $327 = $135;
    $328 = HEAP8[$327>>0]|0;
    $329 = $328&255;
    $330 = $329 >> 1;
    $331 = $330;
   }
   $length = $331;
   $332 = $204;
   $122 = $332;
   $333 = $122;
   $121 = $333;
   $334 = $121;
   $335 = (($334) + 4|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = HEAP32[$334>>2]|0;
   $338 = $336;
   $339 = $337;
   $340 = (($338) - ($339))|0;
   $341 = (($340|0) / 12)&-1;
   $__old_size$i = $341;
   $119 = $333;
   $342 = $119;
   $343 = HEAP32[$342>>2]|0;
   $115 = $342;
   $116 = $343;
   $344 = $115;
   while(1) {
    $345 = $116;
    $346 = (($344) + 4|0);
    $347 = HEAP32[$346>>2]|0;
    $348 = ($345|0)!=($347|0);
    if (!($348)) {
     break;
    }
    $114 = $344;
    $349 = $114;
    $350 = (($349) + 8|0);
    $113 = $350;
    $351 = $113;
    $112 = $351;
    $352 = $112;
    $353 = (($344) + 4|0);
    $354 = HEAP32[$353>>2]|0;
    $355 = (($354) + -12|0);
    HEAP32[$353>>2] = $355;
    $105 = $355;
    $356 = $105;
    $109 = $352;
    $110 = $356;
    $357 = $109;
    $358 = $110;
    ;HEAP8[$108+0>>0]=HEAP8[$111+0>>0]|0;
    $106 = $357;
    $107 = $358;
    $359 = $107;
    __THREW__ = 0;
    invoke_vi(396,($359|0));
    $360 = __THREW__; __THREW__ = 0;
    $361 = $360&1;
    if ($361) {
     label = 31;
     break;
    }
   }
   if ((label|0) == 31) {
    $362 = ___cxa_find_matching_catch()|0;
    $363 = tempRet0;
    $117 = $362;
    $118 = $363;
    $364 = $117;
    ___cxa_call_unexpected(($364|0));
    // unreachable;
   }
   $365 = $__old_size$i;
   __THREW__ = 0;
   invoke_vii(542,($333|0),($365|0));
   $366 = __THREW__; __THREW__ = 0;
   $367 = $366&1;
   if ($367) {
    $368 = ___cxa_find_matching_catch()|0;
    $369 = tempRet0;
    $123 = $368;
    $124 = $369;
    $370 = $123;
    ___cxa_call_unexpected(($370|0));
    // unreachable;
   }
   $120 = $333;
   while(1) {
    while(1) {
     $371 = $from;
     $372 = $length;
     $373 = ($371|0)!=($372|0);
     if ($373) {
      $374 = $from;
      $103 = $line;
      $104 = $374;
      $375 = $103;
      $102 = $375;
      $376 = $102;
      $101 = $376;
      $377 = $101;
      $100 = $377;
      $378 = $100;
      $99 = $378;
      $379 = $99;
      $380 = HEAP8[$379>>0]|0;
      $381 = $380&255;
      $382 = $381 & 1;
      $383 = ($382|0)!=(0);
      if ($383) {
       $93 = $376;
       $384 = $93;
       $92 = $384;
       $385 = $92;
       $91 = $385;
       $386 = $91;
       $387 = (($386) + 8|0);
       $388 = HEAP32[$387>>2]|0;
       $397 = $388;
      } else {
       $98 = $376;
       $389 = $98;
       $97 = $389;
       $390 = $97;
       $96 = $390;
       $391 = $96;
       $392 = (($391) + 1|0);
       $95 = $392;
       $393 = $95;
       $94 = $393;
       $394 = $94;
       $397 = $394;
      }
      $395 = $104;
      $396 = (($397) + ($395)|0);
      $398 = HEAP8[$396>>0]|0;
      $399 = $398 << 24 >> 24;
      $400 = ($399|0)==(32);
      if ($400) {
       $650 = 1;
      } else {
       $401 = $from;
       $89 = $line;
       $90 = $401;
       $402 = $89;
       $88 = $402;
       $403 = $88;
       $87 = $403;
       $404 = $87;
       $86 = $404;
       $405 = $86;
       $85 = $405;
       $406 = $85;
       $407 = HEAP8[$406>>0]|0;
       $408 = $407&255;
       $409 = $408 & 1;
       $410 = ($409|0)!=(0);
       if ($410) {
        $79 = $403;
        $411 = $79;
        $78 = $411;
        $412 = $78;
        $77 = $412;
        $413 = $77;
        $414 = (($413) + 8|0);
        $415 = HEAP32[$414>>2]|0;
        $424 = $415;
       } else {
        $84 = $403;
        $416 = $84;
        $83 = $416;
        $417 = $83;
        $82 = $417;
        $418 = $82;
        $419 = (($418) + 1|0);
        $81 = $419;
        $420 = $81;
        $80 = $420;
        $421 = $80;
        $424 = $421;
       }
       $422 = $90;
       $423 = (($424) + ($422)|0);
       $425 = HEAP8[$423>>0]|0;
       $426 = $425 << 24 >> 24;
       $427 = ($426|0)==(9);
       if ($427) {
        $650 = 1;
       } else {
        $428 = $from;
        $75 = $line;
        $76 = $428;
        $429 = $75;
        $74 = $429;
        $430 = $74;
        $73 = $430;
        $431 = $73;
        $72 = $431;
        $432 = $72;
        $71 = $432;
        $433 = $71;
        $434 = HEAP8[$433>>0]|0;
        $435 = $434&255;
        $436 = $435 & 1;
        $437 = ($436|0)!=(0);
        if ($437) {
         $65 = $430;
         $438 = $65;
         $64 = $438;
         $439 = $64;
         $63 = $439;
         $440 = $63;
         $441 = (($440) + 8|0);
         $442 = HEAP32[$441>>2]|0;
         $451 = $442;
        } else {
         $70 = $430;
         $443 = $70;
         $69 = $443;
         $444 = $69;
         $68 = $444;
         $445 = $68;
         $446 = (($445) + 1|0);
         $67 = $446;
         $447 = $67;
         $66 = $447;
         $448 = $66;
         $451 = $448;
        }
        $449 = $76;
        $450 = (($451) + ($449)|0);
        $452 = HEAP8[$450>>0]|0;
        $453 = $452 << 24 >> 24;
        $454 = ($453|0)==(13);
        $650 = $454;
       }
      }
      $649 = $650;
     } else {
      $649 = 0;
     }
     if (!($649)) {
      break;
     }
     $455 = $from;
     $456 = (($455) + 1)|0;
     $from = $456;
    }
    $459 = $from;
    $460 = $length;
    $461 = ($459|0)!=($460|0);
    if ($461) {
     $462 = $from;
     $463 = (($462) + 1)|0;
     $to = $463;
     while(1) {
      $464 = $to;
      $465 = $length;
      $466 = ($464|0)!=($465|0);
      if ($466) {
       $467 = $to;
       $61 = $line;
       $62 = $467;
       $468 = $61;
       $60 = $468;
       $469 = $60;
       $59 = $469;
       $470 = $59;
       $58 = $470;
       $471 = $58;
       $57 = $471;
       $472 = $57;
       $473 = HEAP8[$472>>0]|0;
       $474 = $473&255;
       $475 = $474 & 1;
       $476 = ($475|0)!=(0);
       if ($476) {
        $51 = $469;
        $477 = $51;
        $50 = $477;
        $478 = $50;
        $49 = $478;
        $479 = $49;
        $480 = (($479) + 8|0);
        $481 = HEAP32[$480>>2]|0;
        $490 = $481;
       } else {
        $56 = $469;
        $482 = $56;
        $55 = $482;
        $483 = $55;
        $54 = $483;
        $484 = $54;
        $485 = (($484) + 1|0);
        $53 = $485;
        $486 = $53;
        $52 = $486;
        $487 = $52;
        $490 = $487;
       }
       $488 = $62;
       $489 = (($490) + ($488)|0);
       $491 = HEAP8[$489>>0]|0;
       $492 = $491 << 24 >> 24;
       $493 = ($492|0)!=(32);
       if ($493) {
        $494 = $to;
        $47 = $line;
        $48 = $494;
        $495 = $47;
        $46 = $495;
        $496 = $46;
        $45 = $496;
        $497 = $45;
        $44 = $497;
        $498 = $44;
        $43 = $498;
        $499 = $43;
        $500 = HEAP8[$499>>0]|0;
        $501 = $500&255;
        $502 = $501 & 1;
        $503 = ($502|0)!=(0);
        if ($503) {
         $37 = $496;
         $504 = $37;
         $36 = $504;
         $505 = $36;
         $35 = $505;
         $506 = $35;
         $507 = (($506) + 8|0);
         $508 = HEAP32[$507>>2]|0;
         $517 = $508;
        } else {
         $42 = $496;
         $509 = $42;
         $41 = $509;
         $510 = $41;
         $40 = $510;
         $511 = $40;
         $512 = (($511) + 1|0);
         $39 = $512;
         $513 = $39;
         $38 = $513;
         $514 = $38;
         $517 = $514;
        }
        $515 = $48;
        $516 = (($517) + ($515)|0);
        $518 = HEAP8[$516>>0]|0;
        $519 = $518 << 24 >> 24;
        $520 = ($519|0)!=(9);
        if ($520) {
         $652 = 1;
        } else {
         label = 69;
        }
       } else {
        label = 69;
       }
       if ((label|0) == 69) {
        label = 0;
        $521 = $to;
        $12 = $line;
        $13 = $521;
        $522 = $12;
        $11 = $522;
        $523 = $11;
        $10 = $523;
        $524 = $10;
        $9 = $524;
        $525 = $9;
        $8 = $525;
        $526 = $8;
        $527 = HEAP8[$526>>0]|0;
        $528 = $527&255;
        $529 = $528 & 1;
        $530 = ($529|0)!=(0);
        if ($530) {
         $2 = $523;
         $531 = $2;
         $1 = $531;
         $532 = $1;
         $0 = $532;
         $533 = $0;
         $534 = (($533) + 8|0);
         $535 = HEAP32[$534>>2]|0;
         $544 = $535;
        } else {
         $7 = $523;
         $536 = $7;
         $6 = $536;
         $537 = $6;
         $5 = $537;
         $538 = $5;
         $539 = (($538) + 1|0);
         $4 = $539;
         $540 = $4;
         $3 = $540;
         $541 = $3;
         $544 = $541;
        }
        $542 = $13;
        $543 = (($544) + ($542)|0);
        $545 = HEAP8[$543>>0]|0;
        $546 = $545 << 24 >> 24;
        $547 = ($546|0)==(13);
        $652 = $547;
       }
       $651 = $652;
      } else {
       $651 = 0;
      }
      if (!($651)) {
       break;
      }
      $548 = $to;
      $549 = (($548) + 1)|0;
      $to = $549;
     }
     $550 = $204;
     $551 = $from;
     $552 = $to;
     $553 = $from;
     $554 = (($552) - ($553))|0;
     $17 = $line;
     $18 = $551;
     $19 = $554;
     $555 = $17;
     $556 = $18;
     $557 = $19;
     $16 = $555;
     $558 = $16;
     $15 = $558;
     $559 = $15;
     $14 = $559;
     $560 = $14;
     __THREW__ = 0;
     invoke_viiiii(543,($208|0),($555|0),($556|0),($557|0),($560|0));
     $561 = __THREW__; __THREW__ = 0;
     $562 = $561&1;
     if ($562) {
      label = 55;
      break L30;
     }
     $34 = $208;
     $563 = $34;
     $33 = $563;
     $564 = $33;
     $32 = $564;
     $565 = $32;
     $31 = $565;
     $566 = $31;
     $30 = $566;
     $567 = $30;
     $29 = $567;
     $568 = $29;
     $569 = HEAP8[$568>>0]|0;
     $570 = $569&255;
     $571 = $570 & 1;
     $572 = ($571|0)!=(0);
     if ($572) {
      $23 = $565;
      $573 = $23;
      $22 = $573;
      $574 = $22;
      $21 = $574;
      $575 = $21;
      $576 = (($575) + 8|0);
      $577 = HEAP32[$576>>2]|0;
      $584 = $577;
     } else {
      $28 = $565;
      $578 = $28;
      $27 = $578;
      $579 = $27;
      $26 = $579;
      $580 = $26;
      $581 = (($580) + 1|0);
      $25 = $581;
      $582 = $25;
      $24 = $582;
      $583 = $24;
      $584 = $583;
     }
     $20 = $584;
     $585 = $20;
     $130 = $207;
     $131 = $585;
     $586 = $130;
     $587 = $131;
     $128 = $586;
     $129 = $587;
     $588 = $128;
     $127 = $588;
     $589 = $127;
     $126 = $589;
     $590 = $126;
     $125 = $590;
     $591 = $129;
     $592 = $129;
     __THREW__ = 0;
     $593 = (invoke_ii(441,($592|0))|0);
     $594 = __THREW__; __THREW__ = 0;
     $595 = $594&1;
     if ($595) {
      label = 96;
      break;
     }
     __THREW__ = 0;
     invoke_viii(442,($588|0),($591|0),($593|0));
     $596 = __THREW__; __THREW__ = 0;
     $597 = $596&1;
     if ($597) {
      label = 96;
      break;
     }
     $179 = $550;
     $180 = $207;
     $598 = $179;
     $599 = (($598) + 4|0);
     $600 = HEAP32[$599>>2]|0;
     $178 = $598;
     $601 = $178;
     $602 = (($601) + 8|0);
     $177 = $602;
     $603 = $177;
     $176 = $603;
     $604 = $176;
     $605 = HEAP32[$604>>2]|0;
     $606 = ($600|0)!=($605|0);
     if ($606) {
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($__annotator$i,$598,1);
      $175 = $598;
      $607 = $175;
      $608 = (($607) + 8|0);
      $174 = $608;
      $609 = $174;
      $173 = $609;
      $610 = $173;
      $611 = (($598) + 4|0);
      $612 = HEAP32[$611>>2]|0;
      $172 = $612;
      $613 = $172;
      $614 = $180;
      $169 = $610;
      $170 = $613;
      $171 = $614;
      $615 = $170;
      $616 = ($615|0)==(0|0);
      if (!($616)) {
       $617 = $171;
       __THREW__ = 0;
       invoke_vii(503,($615|0),($617|0));
       $618 = __THREW__; __THREW__ = 0;
       $619 = $618&1;
       if ($619) {
        label = 97;
        break;
       }
      }
      __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
      $620 = (($598) + 4|0);
      $621 = HEAP32[$620>>2]|0;
      $622 = (($621) + 12|0);
      HEAP32[$620>>2] = $622;
     } else {
      $623 = $180;
      __THREW__ = 0;
      invoke_vii(544,($598|0),($623|0));
      $624 = __THREW__; __THREW__ = 0;
      $625 = $624&1;
      if ($625) {
       label = 97;
       break;
      }
     }
     __THREW__ = 0;
     invoke_vi(396,($207|0));
     $626 = __THREW__; __THREW__ = 0;
     $627 = $626&1;
     if ($627) {
      label = 96;
      break;
     }
     __THREW__ = 0;
     invoke_vi(396,($208|0));
     $628 = __THREW__; __THREW__ = 0;
     $629 = $628&1;
     if ($629) {
      label = 55;
      break L30;
     }
     $630 = $to;
     $from = $630;
    }
    $639 = $from;
    $640 = $length;
    $641 = ($639>>>0)<($640>>>0);
    if (!($641)) {
     label = 103;
     break;
    }
   }
   do {
    if ((label|0) == 96) {
     $631 = ___cxa_find_matching_catch()|0;
     $632 = tempRet0;
     $205 = $631;
     $206 = $632;
    }
    else if ((label|0) == 97) {
     $633 = ___cxa_find_matching_catch()|0;
     $634 = tempRet0;
     $205 = $633;
     $206 = $634;
     __THREW__ = 0;
     invoke_vi(396,($207|0));
     $635 = __THREW__; __THREW__ = 0;
     $636 = $635&1;
     if ($636) {
      $646 = ___cxa_find_matching_catch(0|0)|0;
      $647 = tempRet0;
      ___clang_call_terminate($646);
      // unreachable;
     } else {
      break;
     }
    }
    else if ((label|0) == 103) {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($line);
     STACKTOP = sp;return;
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(396,($208|0));
   $637 = __THREW__; __THREW__ = 0;
   $638 = $637&1;
   if ($638) {
    $646 = ___cxa_find_matching_catch(0|0)|0;
    $647 = tempRet0;
    ___clang_call_terminate($646);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 if ((label|0) == 55) {
  $457 = ___cxa_find_matching_catch()|0;
  $458 = tempRet0;
  $205 = $457;
  $206 = $458;
 }
 __THREW__ = 0;
 invoke_vi(396,($line|0));
 $642 = __THREW__; __THREW__ = 0;
 $643 = $642&1;
 if ($643) {
  $646 = ___cxa_find_matching_catch(0|0)|0;
  $647 = tempRet0;
  ___clang_call_terminate($646);
  // unreachable;
 }
 $644 = $205;
 $645 = $206;
 ___resumeException($644|0);
 // unreachable;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5eraseENS_11__wrap_iterIPKS6_EESC_($agg$result,$this,$__first,$__last) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, $__p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $31 = sp;
 $34 = sp + 220|0;
 $53 = sp + 112|0;
 $52 = $this;
 $54 = $52;
 $55 = HEAP32[$54>>2]|0;
 $51 = $54;
 $56 = $51;
 $57 = HEAP32[$56>>2]|0;
 $49 = $56;
 $50 = $57;
 $58 = $50;
 $47 = $53;
 $48 = $58;
 $59 = $47;
 $60 = $48;
 HEAP32[$59>>2] = $60;
 $26 = $__first;
 $27 = $53;
 $61 = $26;
 $25 = $61;
 $62 = $25;
 $63 = HEAP32[$62>>2]|0;
 $64 = $27;
 $24 = $64;
 $65 = $24;
 $66 = HEAP32[$65>>2]|0;
 $67 = $63;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 12)&-1;
 $71 = (($55) + (($70*12)|0)|0);
 $__p = $71;
 $72 = $__p;
 $22 = $54;
 $23 = $72;
 $73 = $23;
 $20 = $agg$result;
 $21 = $73;
 $74 = $20;
 $75 = $21;
 HEAP32[$74>>2] = $75;
 $18 = $__first;
 $19 = $__last;
 $76 = $18;
 $77 = $19;
 $16 = $76;
 $17 = $77;
 $78 = $16;
 $15 = $78;
 $79 = $15;
 $80 = HEAP32[$79>>2]|0;
 $81 = $17;
 $14 = $81;
 $82 = $14;
 $83 = HEAP32[$82>>2]|0;
 $84 = ($80|0)==($83|0);
 $85 = $84 ^ 1;
 if (!($85)) {
  STACKTOP = sp;return;
 }
 $86 = $__p;
 $12 = $__last;
 $13 = $__first;
 $87 = $12;
 $11 = $87;
 $88 = $11;
 $89 = HEAP32[$88>>2]|0;
 $90 = $13;
 $10 = $90;
 $91 = $10;
 $92 = HEAP32[$91>>2]|0;
 $93 = $89;
 $94 = $92;
 $95 = (($93) - ($94))|0;
 $96 = (($95|0) / 12)&-1;
 $97 = (($86) + (($96*12)|0)|0);
 $98 = (($54) + 4|0);
 $99 = HEAP32[$98>>2]|0;
 $100 = $__p;
 $7 = $97;
 $8 = $99;
 $9 = $100;
 $101 = $7;
 $6 = $101;
 $102 = $6;
 $103 = $8;
 $1 = $103;
 $104 = $1;
 $105 = $9;
 $0 = $105;
 $106 = $0;
 $3 = $102;
 $4 = $104;
 $5 = $106;
 while(1) {
  $107 = $3;
  $108 = $4;
  $109 = ($107|0)!=($108|0);
  if (!($109)) {
   break;
  }
  $110 = $5;
  $111 = $3;
  $2 = $111;
  $112 = $2;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($110,$112)|0);
  $113 = $3;
  $114 = (($113) + 12|0);
  $3 = $114;
  $115 = $5;
  $116 = (($115) + 12|0);
  $5 = $116;
 }
 $117 = $5;
 $43 = $54;
 $44 = $117;
 $118 = $43;
 $42 = $118;
 $119 = $42;
 $120 = (($119) + 4|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = HEAP32[$119>>2]|0;
 $123 = $121;
 $124 = $122;
 $125 = (($123) - ($124))|0;
 $126 = (($125|0) / 12)&-1;
 $__old_size$i = $126;
 $127 = $44;
 $38 = $118;
 $39 = $127;
 $128 = $38;
 while(1) {
  $129 = $39;
  $130 = (($128) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($129|0)!=($131|0);
  if (!($132)) {
   break;
  }
  $37 = $128;
  $133 = $37;
  $134 = (($133) + 8|0);
  $36 = $134;
  $135 = $36;
  $35 = $135;
  $136 = $35;
  $137 = (($128) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = (($138) + -12|0);
  HEAP32[$137>>2] = $139;
  $28 = $139;
  $140 = $28;
  $32 = $136;
  $33 = $140;
  $141 = $32;
  $142 = $33;
  ;HEAP8[$31+0>>0]=HEAP8[$34+0>>0]|0;
  $29 = $141;
  $30 = $142;
  $143 = $30;
  __THREW__ = 0;
  invoke_vi(396,($143|0));
  $144 = __THREW__; __THREW__ = 0;
  $145 = $144&1;
  if ($145) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $146 = ___cxa_find_matching_catch()|0;
  $147 = tempRet0;
  $40 = $146;
  $41 = $147;
  $148 = $40;
  ___cxa_call_unexpected(($148|0));
  // unreachable;
 }
 $149 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(542,($118|0),($149|0));
 $150 = __THREW__; __THREW__ = 0;
 $151 = $150&1;
 if ($151) {
  $152 = ___cxa_find_matching_catch()|0;
  $153 = tempRet0;
  $45 = $152;
  $46 = $153;
  $154 = $45;
  ___cxa_call_unexpected(($154|0));
  // unreachable;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__old_size$i = 0, $__old_size$i10 = 0, $__old_size$i3 = 0, $fi = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 816|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 24|0;
 $9 = sp + 756|0;
 $11 = sp + 8|0;
 $21 = sp + 148|0;
 $32 = sp + 32|0;
 $42 = sp + 184|0;
 $62 = sp + 48|0;
 $68 = sp + 444|0;
 $79 = sp + 72|0;
 $82 = sp + 800|0;
 $95 = sp;
 $105 = sp + 436|0;
 $107 = sp + 16|0;
 $113 = sp + 468|0;
 $118 = sp + 64|0;
 $121 = sp + 801|0;
 $141 = sp + 56|0;
 $144 = sp + 802|0;
 $157 = sp + 40|0;
 $167 = sp + 688|0;
 $169 = sp + 80|0;
 $175 = sp + 364|0;
 $i = sp + 732|0;
 $178 = sp + 368|0;
 $179 = sp + 748|0;
 $180 = sp + 724|0;
 $181 = sp + 108|0;
 $182 = sp + 104|0;
 $183 = sp + 100|0;
 $184 = sp + 392|0;
 $185 = sp + 592|0;
 $fi = sp + 508|0;
 $186 = sp + 340|0;
 $187 = sp + 796|0;
 $177 = $this;
 $188 = $177;
 $176 = $i;
 $189 = (($188) + 116|0);
 $174 = $189;
 $190 = $174;
 $173 = $190;
 $191 = $173;
 $172 = $191;
 $192 = $172;
 $193 = HEAP32[$192>>2]|0;
 $170 = $175;
 $171 = $193;
 $194 = $170;
 $195 = $171;
 HEAP32[$194>>2] = $195;
 ;HEAP8[$169+0>>0]=HEAP8[$175+0>>0]|0;HEAP8[$169+1>>0]=HEAP8[$175+1>>0]|0;HEAP8[$169+2>>0]=HEAP8[$175+2>>0]|0;HEAP8[$169+3>>0]=HEAP8[$175+3>>0]|0;
 $168 = $178;
 $196 = $168;
 $197 = HEAP32[$169>>2]|0;
 HEAP32[$196>>2] = $197;
 ;HEAP32[$i+0>>2]=HEAP32[$178+0>>2]|0;
 while(1) {
  $198 = (($188) + 116|0);
  $166 = $198;
  $199 = $166;
  $165 = $199;
  $200 = $165;
  $164 = $200;
  $201 = $164;
  $202 = (($201) + 4|0);
  $163 = $202;
  $203 = $163;
  $162 = $203;
  $204 = $162;
  $161 = $204;
  $205 = $161;
  $160 = $205;
  $206 = $160;
  $158 = $167;
  $159 = $206;
  $207 = $158;
  $208 = $159;
  HEAP32[$207>>2] = $208;
  ;HEAP8[$157+0>>0]=HEAP8[$167+0>>0]|0;HEAP8[$157+1>>0]=HEAP8[$167+1>>0]|0;HEAP8[$157+2>>0]=HEAP8[$167+2>>0]|0;HEAP8[$157+3>>0]=HEAP8[$167+3>>0]|0;
  $156 = $179;
  $209 = $156;
  $210 = HEAP32[$157>>2]|0;
  HEAP32[$209>>2] = $210;
  $136 = $i;
  $137 = $179;
  $211 = $136;
  $212 = $137;
  $134 = $211;
  $135 = $212;
  $213 = $134;
  $214 = HEAP32[$213>>2]|0;
  $215 = $135;
  $216 = HEAP32[$215>>2]|0;
  $217 = ($214|0)==($216|0);
  $218 = $217 ^ 1;
  if (!($218)) {
   break;
  }
  $133 = $i;
  $219 = $133;
  $220 = HEAP32[$219>>2]|0;
  $221 = (($220) + 16|0);
  $222 = HEAP32[$221>>2]|0;
  $223 = ($222|0)==(0|0);
  if (!($223)) {
   $224 = HEAP32[$222>>2]|0;
   $225 = (($224) + 4|0);
   $226 = HEAP32[$225>>2]|0;
   FUNCTION_TABLE_vi[$226 & 1023]($222);
  }
  $114 = $i;
  $227 = $114;
  $228 = HEAP32[$227>>2]|0;
  $229 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($228)|0);
  HEAP32[$227>>2] = $229;
 }
 $230 = (($188) + 128|0);
 $112 = $230;
 $231 = $112;
 $111 = $231;
 $232 = $111;
 $110 = $232;
 $233 = $110;
 $234 = HEAP32[$233>>2]|0;
 $108 = $113;
 $109 = $234;
 $235 = $108;
 $236 = $109;
 HEAP32[$235>>2] = $236;
 ;HEAP8[$107+0>>0]=HEAP8[$113+0>>0]|0;HEAP8[$107+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$107+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$107+3>>0]=HEAP8[$113+3>>0]|0;
 $106 = $180;
 $237 = $106;
 $238 = HEAP32[$107>>2]|0;
 HEAP32[$237>>2] = $238;
 ;HEAP32[$i+0>>2]=HEAP32[$180+0>>2]|0;
 while(1) {
  $239 = (($188) + 128|0);
  $104 = $239;
  $240 = $104;
  $103 = $240;
  $241 = $103;
  $102 = $241;
  $242 = $102;
  $243 = (($242) + 4|0);
  $101 = $243;
  $244 = $101;
  $100 = $244;
  $245 = $100;
  $99 = $245;
  $246 = $99;
  $98 = $246;
  $247 = $98;
  $96 = $105;
  $97 = $247;
  $248 = $96;
  $249 = $97;
  HEAP32[$248>>2] = $249;
  ;HEAP8[$95+0>>0]=HEAP8[$105+0>>0]|0;HEAP8[$95+1>>0]=HEAP8[$105+1>>0]|0;HEAP8[$95+2>>0]=HEAP8[$105+2>>0]|0;HEAP8[$95+3>>0]=HEAP8[$105+3>>0]|0;
  $94 = $181;
  $250 = $94;
  $251 = HEAP32[$95>>2]|0;
  HEAP32[$250>>2] = $251;
  $74 = $i;
  $75 = $181;
  $252 = $74;
  $253 = $75;
  $72 = $252;
  $73 = $253;
  $254 = $72;
  $255 = HEAP32[$254>>2]|0;
  $256 = $73;
  $257 = HEAP32[$256>>2]|0;
  $258 = ($255|0)==($257|0);
  $259 = $258 ^ 1;
  if (!($259)) {
   break;
  }
  $71 = $i;
  $260 = $71;
  $261 = HEAP32[$260>>2]|0;
  $262 = (($261) + 16|0);
  $263 = HEAP32[$262>>2]|0;
  $264 = ($263|0)==(0|0);
  if (!($264)) {
   $265 = HEAP32[$263>>2]|0;
   $266 = (($265) + 4|0);
   $267 = HEAP32[$266>>2]|0;
   FUNCTION_TABLE_vi[$267 & 1023]($263);
  }
  $69 = $i;
  $268 = $69;
  $269 = HEAP32[$268>>2]|0;
  $270 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($269)|0);
  HEAP32[$268>>2] = $270;
 }
 $271 = (($188) + 140|0);
 $67 = $271;
 $272 = $67;
 $66 = $272;
 $273 = $66;
 $65 = $273;
 $274 = $65;
 $275 = HEAP32[$274>>2]|0;
 $63 = $68;
 $64 = $275;
 $276 = $63;
 $277 = $64;
 HEAP32[$276>>2] = $277;
 ;HEAP8[$62+0>>0]=HEAP8[$68+0>>0]|0;HEAP8[$62+1>>0]=HEAP8[$68+1>>0]|0;HEAP8[$62+2>>0]=HEAP8[$68+2>>0]|0;HEAP8[$62+3>>0]=HEAP8[$68+3>>0]|0;
 $61 = $182;
 $278 = $61;
 $279 = HEAP32[$62>>2]|0;
 HEAP32[$278>>2] = $279;
 ;HEAP32[$i+0>>2]=HEAP32[$182+0>>2]|0;
 while(1) {
  $280 = (($188) + 140|0);
  $41 = $280;
  $281 = $41;
  $40 = $281;
  $282 = $40;
  $39 = $282;
  $283 = $39;
  $284 = (($283) + 4|0);
  $38 = $284;
  $285 = $38;
  $37 = $285;
  $286 = $37;
  $36 = $286;
  $287 = $36;
  $35 = $287;
  $288 = $35;
  $33 = $42;
  $34 = $288;
  $289 = $33;
  $290 = $34;
  HEAP32[$289>>2] = $290;
  ;HEAP8[$32+0>>0]=HEAP8[$42+0>>0]|0;HEAP8[$32+1>>0]=HEAP8[$42+1>>0]|0;HEAP8[$32+2>>0]=HEAP8[$42+2>>0]|0;HEAP8[$32+3>>0]=HEAP8[$42+3>>0]|0;
  $31 = $183;
  $291 = $31;
  $292 = HEAP32[$32>>2]|0;
  HEAP32[$291>>2] = $292;
  $29 = $i;
  $30 = $183;
  $293 = $29;
  $294 = $30;
  $27 = $293;
  $28 = $294;
  $295 = $27;
  $296 = HEAP32[$295>>2]|0;
  $297 = $28;
  $298 = HEAP32[$297>>2]|0;
  $299 = ($296|0)==($298|0);
  $300 = $299 ^ 1;
  if (!($300)) {
   break;
  }
  $0 = $i;
  $301 = $0;
  $302 = HEAP32[$301>>2]|0;
  $303 = (($302) + 16|0);
  $304 = HEAP32[$303>>2]|0;
  $305 = ($304|0)==(0|0);
  if (!($305)) {
   $306 = HEAP32[$304>>2]|0;
   $307 = (($306) + 4|0);
   $308 = HEAP32[$307>>2]|0;
   FUNCTION_TABLE_vi[$308 & 1023]($304);
  }
  $1 = $i;
  $309 = $1;
  $310 = HEAP32[$309>>2]|0;
  $311 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($310)|0);
  HEAP32[$309>>2] = $311;
 }
 $312 = (($188) + 152|0);
 $8 = $312;
 $313 = $8;
 $7 = $313;
 $314 = $7;
 $6 = $314;
 $315 = $6;
 $316 = HEAP32[$315>>2]|0;
 $4 = $9;
 $5 = $316;
 $317 = $4;
 $318 = $5;
 HEAP32[$317>>2] = $318;
 ;HEAP8[$3+0>>0]=HEAP8[$9+0>>0]|0;HEAP8[$3+1>>0]=HEAP8[$9+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$9+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$9+3>>0]|0;
 $2 = $184;
 $319 = $2;
 $320 = HEAP32[$3>>2]|0;
 HEAP32[$319>>2] = $320;
 ;HEAP32[$i+0>>2]=HEAP32[$184+0>>2]|0;
 while(1) {
  $321 = (($188) + 152|0);
  $20 = $321;
  $322 = $20;
  $19 = $322;
  $323 = $19;
  $18 = $323;
  $324 = $18;
  $325 = (($324) + 4|0);
  $17 = $325;
  $326 = $17;
  $16 = $326;
  $327 = $16;
  $15 = $327;
  $328 = $15;
  $14 = $328;
  $329 = $14;
  $12 = $21;
  $13 = $329;
  $330 = $12;
  $331 = $13;
  HEAP32[$330>>2] = $331;
  ;HEAP8[$11+0>>0]=HEAP8[$21+0>>0]|0;HEAP8[$11+1>>0]=HEAP8[$21+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$21+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$21+3>>0]|0;
  $10 = $185;
  $332 = $10;
  $333 = HEAP32[$11>>2]|0;
  HEAP32[$332>>2] = $333;
  $24 = $i;
  $25 = $185;
  $334 = $24;
  $335 = $25;
  $22 = $334;
  $23 = $335;
  $336 = $22;
  $337 = HEAP32[$336>>2]|0;
  $338 = $23;
  $339 = HEAP32[$338>>2]|0;
  $340 = ($337|0)==($339|0);
  $341 = $340 ^ 1;
  if (!($341)) {
   break;
  }
  $26 = $i;
  $342 = $26;
  $343 = HEAP32[$342>>2]|0;
  $344 = (($343) + 16|0);
  $345 = HEAP32[$344>>2]|0;
  $346 = ($345|0)==(0|0);
  if (!($346)) {
   $347 = HEAP32[$345>>2]|0;
   $348 = (($347) + 4|0);
   $349 = HEAP32[$348>>2]|0;
   FUNCTION_TABLE_vi[$349 & 1023]($345);
  }
  $43 = $i;
  $350 = $43;
  $351 = HEAP32[$350>>2]|0;
  $352 = (__ZNSt3__111__tree_nextIPNS_16__tree_node_baseIPvEEEET_S5_($351)|0);
  HEAP32[$350>>2] = $352;
 }
 $353 = (($188) + 32|0);
 $48 = $353;
 $354 = $48;
 $355 = HEAP32[$354>>2]|0;
 $46 = $354;
 $47 = $355;
 $356 = $47;
 $44 = $fi;
 $45 = $356;
 $357 = $44;
 $358 = $45;
 HEAP32[$357>>2] = $358;
 while(1) {
  $359 = (($188) + 32|0);
  $53 = $359;
  $360 = $53;
  $361 = (($360) + 4|0);
  $362 = HEAP32[$361>>2]|0;
  $51 = $360;
  $52 = $362;
  $363 = $52;
  $49 = $186;
  $50 = $363;
  $364 = $49;
  $365 = $50;
  HEAP32[$364>>2] = $365;
  $58 = $fi;
  $59 = $186;
  $366 = $58;
  $367 = $59;
  $56 = $366;
  $57 = $367;
  $368 = $56;
  $55 = $368;
  $369 = $55;
  $370 = HEAP32[$369>>2]|0;
  $371 = $57;
  $54 = $371;
  $372 = $54;
  $373 = HEAP32[$372>>2]|0;
  $374 = ($370|0)==($373|0);
  $375 = $374 ^ 1;
  if (!($375)) {
   break;
  }
  $60 = $fi;
  $376 = $60;
  $377 = HEAP32[$376>>2]|0;
  __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE7DeallocEv($377);
  $70 = $fi;
  $378 = $70;
  $379 = HEAP32[$378>>2]|0;
  $380 = (($379) + 44|0);
  HEAP32[$378>>2] = $380;
 }
 $91 = $188;
 $381 = $91;
 $90 = $381;
 $382 = $90;
 $383 = (($382) + 4|0);
 $384 = HEAP32[$383>>2]|0;
 $385 = HEAP32[$382>>2]|0;
 $386 = $384;
 $387 = $385;
 $388 = (($386) - ($387))|0;
 $389 = (($388|0) / 36)&-1;
 $__old_size$i10 = $389;
 $88 = $381;
 $390 = $88;
 $391 = HEAP32[$390>>2]|0;
 $86 = $390;
 $87 = $391;
 $392 = $86;
 while(1) {
  $393 = $87;
  $394 = (($392) + 4|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = ($393|0)!=($395|0);
  if (!($396)) {
   break;
  }
  $85 = $392;
  $397 = $85;
  $398 = (($397) + 8|0);
  $84 = $398;
  $399 = $84;
  $83 = $399;
  $400 = $83;
  $401 = (($392) + 4|0);
  $402 = HEAP32[$401>>2]|0;
  $403 = (($402) + -36|0);
  HEAP32[$401>>2] = $403;
  $76 = $403;
  $404 = $76;
  $80 = $400;
  $81 = $404;
  $405 = $80;
  $406 = $81;
  ;HEAP8[$79+0>>0]=HEAP8[$82+0>>0]|0;
  $77 = $405;
  $78 = $406;
 }
 $407 = $__old_size$i10;
 __THREW__ = 0;
 invoke_vii(484,($381|0),($407|0));
 $408 = __THREW__; __THREW__ = 0;
 $409 = $408&1;
 if ($409) {
  $410 = ___cxa_find_matching_catch()|0;
  $411 = tempRet0;
  $92 = $410;
  $93 = $411;
  $412 = $92;
  ___cxa_call_unexpected(($412|0));
  // unreachable;
 }
 $89 = $381;
 $413 = (($188) + 32|0);
 $130 = $413;
 $414 = $130;
 $129 = $414;
 $415 = $129;
 $416 = (($415) + 4|0);
 $417 = HEAP32[$416>>2]|0;
 $418 = HEAP32[$415>>2]|0;
 $419 = $417;
 $420 = $418;
 $421 = (($419) - ($420))|0;
 $422 = (($421|0) / 44)&-1;
 $__old_size$i3 = $422;
 $127 = $414;
 $423 = $127;
 $424 = HEAP32[$423>>2]|0;
 $125 = $423;
 $126 = $424;
 $425 = $125;
 while(1) {
  $426 = $126;
  $427 = (($425) + 4|0);
  $428 = HEAP32[$427>>2]|0;
  $429 = ($426|0)!=($428|0);
  if (!($429)) {
   break;
  }
  $124 = $425;
  $430 = $124;
  $431 = (($430) + 8|0);
  $123 = $431;
  $432 = $123;
  $122 = $432;
  $433 = $122;
  $434 = (($425) + 4|0);
  $435 = HEAP32[$434>>2]|0;
  $436 = (($435) + -44|0);
  HEAP32[$434>>2] = $436;
  $115 = $436;
  $437 = $115;
  $119 = $433;
  $120 = $437;
  $438 = $119;
  $439 = $120;
  ;HEAP8[$118+0>>0]=HEAP8[$121+0>>0]|0;
  $116 = $438;
  $117 = $439;
 }
 $440 = $__old_size$i3;
 __THREW__ = 0;
 invoke_vii(480,($414|0),($440|0));
 $441 = __THREW__; __THREW__ = 0;
 $442 = $441&1;
 if ($442) {
  $443 = ___cxa_find_matching_catch()|0;
  $444 = tempRet0;
  $131 = $443;
  $132 = $444;
  $445 = $131;
  ___cxa_call_unexpected(($445|0));
  // unreachable;
 }
 $128 = $414;
 $446 = (($188) + 16|0);
 $153 = $446;
 $447 = $153;
 $152 = $447;
 $448 = $152;
 $449 = (($448) + 4|0);
 $450 = HEAP32[$449>>2]|0;
 $451 = HEAP32[$448>>2]|0;
 $452 = $450;
 $453 = $451;
 $454 = (($452) - ($453))|0;
 $__old_size$i = $454;
 $150 = $447;
 $455 = $150;
 $456 = HEAP32[$455>>2]|0;
 $148 = $455;
 $149 = $456;
 $457 = $148;
 while(1) {
  $458 = $149;
  $459 = (($457) + 4|0);
  $460 = HEAP32[$459>>2]|0;
  $461 = ($458|0)!=($460|0);
  if (!($461)) {
   break;
  }
  $147 = $457;
  $462 = $147;
  $463 = (($462) + 8|0);
  $146 = $463;
  $464 = $146;
  $145 = $464;
  $465 = $145;
  $466 = (($457) + 4|0);
  $467 = HEAP32[$466>>2]|0;
  $468 = (($467) + -1|0);
  HEAP32[$466>>2] = $468;
  $138 = $468;
  $469 = $138;
  $142 = $465;
  $143 = $469;
  $470 = $142;
  $471 = $143;
  ;HEAP8[$141+0>>0]=HEAP8[$144+0>>0]|0;
  $139 = $470;
  $140 = $471;
 }
 $472 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(545,($447|0),($472|0));
 $473 = __THREW__; __THREW__ = 0;
 $474 = $473&1;
 if ($474) {
  $475 = ___cxa_find_matching_catch()|0;
  $476 = tempRet0;
  $154 = $475;
  $155 = $476;
  $477 = $154;
  ___cxa_call_unexpected(($477|0));
  // unreachable;
 } else {
  $151 = $447;
  $478 = (($188) + 12|0);
  HEAP32[$478>>2] = 0;
  $479 = (($188) + 28|0);
  HEAP32[$479>>2] = 0;
  $480 = (($188) + 44|0);
  HEAP32[$480>>2] = 0;
  $481 = (($188) + 60|0);
  HEAP32[$481>>2] = 0;
  $482 = (($188) + 300|0);
  HEAP32[$482>>2] = 0;
  $483 = (($188) + 112|0);
  HEAP32[$483>>2] = 0;
  $484 = (__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE1CEv($188)|0);
  __ZN3vcg6Color4IhEC2ENS1_13ColorConstantE($187,-8355712);
  ;HEAP8[$484+0>>0]=HEAP8[$187+0>>0]|0;HEAP8[$484+1>>0]=HEAP8[$187+1>>0]|0;HEAP8[$484+2>>0]=HEAP8[$187+2>>0]|0;HEAP8[$484+3>>0]=HEAP8[$187+3>>0]|0;
  STACKTOP = sp;return;
 }
}
function __ZN3vcg6Color4IhE6ImportIfEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point4IfEixEi($3,0)|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $5 * 255.0;
 $7 = (~~(($6))&255);
 $8 = (__ZN3vcg6Point4IhEixEi($2,0)|0);
 HEAP8[$8>>0] = $7;
 $9 = $1;
 $10 = (__ZNK3vcg6Point4IfEixEi($9,1)|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $11 * 255.0;
 $13 = (~~(($12))&255);
 $14 = (__ZN3vcg6Point4IhEixEi($2,1)|0);
 HEAP8[$14>>0] = $13;
 $15 = $1;
 $16 = (__ZNK3vcg6Point4IfEixEi($15,2)|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * 255.0;
 $19 = (~~(($18))&255);
 $20 = (__ZN3vcg6Point4IhEixEi($2,2)|0);
 HEAP8[$20>>0] = $19;
 $21 = $1;
 $22 = (__ZNK3vcg6Point4IfEixEi($21,3)|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 * 255.0;
 $25 = (~~(($24))&255);
 $26 = (__ZN3vcg6Point4IhEixEi($2,3)|0);
 HEAP8[$26>>0] = $25;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io11ImporterOFFI6MyMeshE8ColorMapEi($agg$result,$i) {
 $agg$result = $agg$result|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $i;
 $1 = $0;
 $2 = (5288 + ($1<<4)|0);
 $3 = +HEAPF32[$2>>2];
 $4 = $0;
 $5 = (5288 + ($4<<4)|0);
 $6 = (($5) + 4|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $0;
 $9 = (5288 + ($8<<4)|0);
 $10 = (($9) + 8|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $0;
 $13 = (5288 + ($12<<4)|0);
 $14 = (($13) + 12|0);
 $15 = +HEAPF32[$14>>2];
 __ZN3vcg6Color4IfEC2Effff($agg$result,$3,$7,$11,$15);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2Ehhhh($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 $nz = $nz|0;
 $nw = $nw|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Point4IhEC2Ehhhh($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhE6ImportIhEEvRKNS0_IT_EE($this,$b) {
 $this = $this|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $b;
 $2 = $0;
 $3 = $1;
 $4 = (__ZNK3vcg6Point4IhEixEi($3,0)|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = (__ZN3vcg6Point4IhEixEi($2,0)|0);
 HEAP8[$6>>0] = $5;
 $7 = $1;
 $8 = (__ZNK3vcg6Point4IhEixEi($7,1)|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = (__ZN3vcg6Point4IhEixEi($2,1)|0);
 HEAP8[$10>>0] = $9;
 $11 = $1;
 $12 = (__ZNK3vcg6Point4IhEixEi($11,2)|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = (__ZN3vcg6Point4IhEixEi($2,2)|0);
 HEAP8[$14>>0] = $13;
 $15 = $1;
 $16 = (__ZNK3vcg6Point4IhEixEi($15,3)|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = (__ZN3vcg6Point4IhEixEi($2,3)|0);
 HEAP8[$18>>0] = $17;
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IfEC2Effff($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 $nw = +$nw;
 var $0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 __ZN3vcg6Point4IfEC2Effff($5,$6,$7,$8,$9);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE11HasPolyInfoEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 60|0;
 $18 = sp + 52|0;
 $21 = sp + 68|0;
 $22 = sp + 76|0;
 $23 = sp + 24|0;
 $24 = $this;
 $25 = $__n;
 $28 = $24;
 $20 = $28;
 $29 = $20;
 $19 = $29;
 $0 = $2;
 $1 = -1;
 $30 = $0;
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $31;
 $3 = $21;
 HEAP32[$29>>2] = 0;
 $32 = (($29) + 4|0);
 $4 = $6;
 $5 = -1;
 $33 = $4;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $34;
 $7 = $22;
 HEAP32[$32>>2] = 0;
 $35 = (($29) + 8|0);
 $8 = $10;
 $9 = -1;
 $36 = $8;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $37;
 $11 = $23;
 $17 = $35;
 HEAP32[$18>>2] = 0;
 $38 = $17;
 $16 = $18;
 $39 = $16;
 $40 = HEAP32[$39>>2]|0;
 $14 = $38;
 HEAP32[$15>>2] = $40;
 $41 = $14;
 $13 = $41;
 $12 = $15;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $25;
 $45 = ($44>>>0)>(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $25;
 __THREW__ = 0;
 invoke_vii(546,($28|0),($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if (!($48)) {
  $49 = $25;
  __THREW__ = 0;
  invoke_vii(547,($28|0),($49|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if (!($51)) {
   STACKTOP = sp;return;
  }
 }
 $52 = ___cxa_find_matching_catch()|0;
 $53 = tempRet0;
 $26 = $52;
 $27 = $53;
 __THREW__ = 0;
 invoke_vi(548,($28|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 }
 $56 = $26;
 $57 = $27;
 ___resumeException($56|0);
 // unreachable;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE7AddFaceERS2_P8MyVertexS6_S6_($agg$result,$m,$v0,$v1,$v2) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 48|0;
 $17 = sp + 92|0;
 $11 = $m;
 $12 = $v0;
 $13 = $v1;
 $14 = $v2;
 $19 = $11;
 $10 = $19;
 $20 = $10;
 $21 = (($20) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = HEAP32[$20>>2]|0;
 $24 = $22;
 $25 = $23;
 $26 = (($24) - ($25))|0;
 $27 = (($26|0) / 36)&-1;
 $28 = ($27>>>0)>(0);
 if (!($28)) {
  ___assert_fail((5016|0),(3600|0),471,(5240|0));
  // unreachable;
 }
 $29 = $12;
 $30 = $13;
 $31 = ($29|0)!=($30|0);
 if (!($31)) {
  ___assert_fail((5248|0),(3600|0),472,(5240|0));
  // unreachable;
 }
 $32 = $13;
 $33 = $14;
 $34 = ($32|0)!=($33|0);
 if (!($34)) {
  ___assert_fail((5248|0),(3600|0),472,(5240|0));
  // unreachable;
 }
 $35 = $12;
 $36 = $14;
 $37 = ($35|0)!=($36|0);
 if (!($37)) {
  ___assert_fail((5248|0),(3600|0),472,(5240|0));
  // unreachable;
 }
 $38 = $12;
 $39 = $11;
 $9 = $39;
 $40 = $9;
 $41 = HEAP32[$40>>2]|0;
 $42 = ($38>>>0)>=($41>>>0);
 if (!($42)) {
  ___assert_fail((5048|0),(3600|0),473,(5240|0));
  // unreachable;
 }
 $43 = $12;
 $44 = $11;
 $8 = $44;
 $45 = $8;
 $46 = (($45) + 4|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (($47) + -36|0);
 $49 = ($43>>>0)<=($48>>>0);
 if (!($49)) {
  ___assert_fail((5048|0),(3600|0),473,(5240|0));
  // unreachable;
 }
 $50 = $13;
 $51 = $11;
 $7 = $51;
 $52 = $7;
 $53 = HEAP32[$52>>2]|0;
 $54 = ($50>>>0)>=($53>>>0);
 if (!($54)) {
  ___assert_fail((5096|0),(3600|0),474,(5240|0));
  // unreachable;
 }
 $55 = $13;
 $56 = $11;
 $6 = $56;
 $57 = $6;
 $58 = (($57) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = (($59) + -36|0);
 $61 = ($55>>>0)<=($60>>>0);
 if (!($61)) {
  ___assert_fail((5096|0),(3600|0),474,(5240|0));
  // unreachable;
 }
 $62 = $14;
 $63 = $11;
 $4 = $63;
 $64 = $4;
 $65 = HEAP32[$64>>2]|0;
 $66 = ($62>>>0)>=($65>>>0);
 if (!($66)) {
  ___assert_fail((5144|0),(3600|0),475,(5240|0));
  // unreachable;
 }
 $67 = $14;
 $68 = $11;
 $2 = $68;
 $69 = $2;
 $70 = (($69) + 4|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = (($71) + -36|0);
 $73 = ($67>>>0)<=($72>>>0);
 if (!($73)) {
  ___assert_fail((5144|0),(3600|0),475,(5240|0));
  // unreachable;
 }
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($pu);
 $74 = $11;
 __THREW__ = 0;
 invoke_viiii(476,($agg$result|0),($74|0),1,($pu|0));
 $75 = __THREW__; __THREW__ = 0;
 $76 = $75&1;
 if (!($76)) {
  $0 = $agg$result;
  $77 = $0;
  $78 = HEAP32[$77>>2]|0;
  HEAP32[$17>>2] = 3;
  __THREW__ = 0;
  invoke_vii(549,($78|0),($17|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if (!($80)) {
   $81 = $12;
   $1 = $agg$result;
   $82 = $1;
   $83 = HEAP32[$82>>2]|0;
   __THREW__ = 0;
   $84 = (invoke_iii(524,($83|0),0)|0);
   $85 = __THREW__; __THREW__ = 0;
   $86 = $85&1;
   if (!($86)) {
    HEAP32[$84>>2] = $81;
    $87 = $13;
    $3 = $agg$result;
    $88 = $3;
    $89 = HEAP32[$88>>2]|0;
    __THREW__ = 0;
    $90 = (invoke_iii(524,($89|0),1)|0);
    $91 = __THREW__; __THREW__ = 0;
    $92 = $91&1;
    if (!($92)) {
     HEAP32[$90>>2] = $87;
     $93 = $14;
     $5 = $agg$result;
     $94 = $5;
     $95 = HEAP32[$94>>2]|0;
     __THREW__ = 0;
     $96 = (invoke_iii(524,($95|0),2)|0);
     $97 = __THREW__; __THREW__ = 0;
     $98 = $97&1;
     if (!($98)) {
      HEAP32[$96>>2] = $93;
      $18 = 1;
      __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($pu);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $99 = ___cxa_find_matching_catch()|0;
 $100 = tempRet0;
 $15 = $99;
 $16 = $100;
 __THREW__ = 0;
 invoke_vi(477,($pu|0));
 $101 = __THREW__; __THREW__ = 0;
 $102 = $101&1;
 if ($102) {
  $105 = ___cxa_find_matching_catch(0|0)|0;
  $106 = tempRet0;
  ___clang_call_terminate($105);
  // unreachable;
 }
 $103 = $15;
 $104 = $16;
 ___resumeException($103|0);
 // unreachable;
}
function __ZN3vcg3tri9AllocatorI6MyMeshE11AddQuadFaceERS2_P8MyVertexS6_S6_S6_($agg$result,$m,$v0,$v1,$v2,$v3) {
 $agg$result = $agg$result|0;
 $m = $m|0;
 $v0 = $v0|0;
 $v1 = $v1|0;
 $v2 = $v2|0;
 $v3 = $v3|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fi = 0, $fi1 = 0, $pu = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pu = sp + 112|0;
 $fi = sp + 44|0;
 $32 = sp + 156|0;
 $fi1 = sp + 48|0;
 $34 = sp + 164|0;
 $35 = sp + 52|0;
 $25 = $m;
 $26 = $v0;
 $27 = $v1;
 $28 = $v2;
 $29 = $v3;
 $36 = $25;
 $24 = $36;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 36)&-1;
 $45 = ($44>>>0)>(0);
 if (!($45)) {
  ___assert_fail((5016|0),(3600|0),517,(5032|0));
  // unreachable;
 }
 $46 = $26;
 $47 = $25;
 $23 = $47;
 $48 = $23;
 $49 = HEAP32[$48>>2]|0;
 $50 = ($46>>>0)>=($49>>>0);
 if (!($50)) {
  ___assert_fail((5048|0),(3600|0),518,(5032|0));
  // unreachable;
 }
 $51 = $26;
 $52 = $25;
 $22 = $52;
 $53 = $22;
 $54 = (($53) + 4|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = (($55) + -36|0);
 $57 = ($51>>>0)<=($56>>>0);
 if (!($57)) {
  ___assert_fail((5048|0),(3600|0),518,(5032|0));
  // unreachable;
 }
 $58 = $27;
 $59 = $25;
 $21 = $59;
 $60 = $21;
 $61 = HEAP32[$60>>2]|0;
 $62 = ($58>>>0)>=($61>>>0);
 if (!($62)) {
  ___assert_fail((5096|0),(3600|0),519,(5032|0));
  // unreachable;
 }
 $63 = $27;
 $64 = $25;
 $19 = $64;
 $65 = $19;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = (($67) + -36|0);
 $69 = ($63>>>0)<=($68>>>0);
 if (!($69)) {
  ___assert_fail((5096|0),(3600|0),519,(5032|0));
  // unreachable;
 }
 $70 = $28;
 $71 = $25;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = ($70>>>0)>=($73>>>0);
 if (!($74)) {
  ___assert_fail((5144|0),(3600|0),520,(5032|0));
  // unreachable;
 }
 $75 = $28;
 $76 = $25;
 $15 = $76;
 $77 = $15;
 $78 = (($77) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = (($79) + -36|0);
 $81 = ($75>>>0)<=($80>>>0);
 if (!($81)) {
  ___assert_fail((5144|0),(3600|0),520,(5032|0));
  // unreachable;
 }
 $82 = $29;
 $83 = $25;
 $13 = $83;
 $84 = $13;
 $85 = HEAP32[$84>>2]|0;
 $86 = ($82>>>0)>=($85>>>0);
 if (!($86)) {
  ___assert_fail((5192|0),(3600|0),521,(5032|0));
  // unreachable;
 }
 $87 = $29;
 $88 = $25;
 $10 = $88;
 $89 = $10;
 $90 = (($89) + 4|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = (($91) + -36|0);
 $93 = ($87>>>0)<=($92>>>0);
 if (!($93)) {
  ___assert_fail((5192|0),(3600|0),521,(5032|0));
  // unreachable;
 }
 __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceEC2Ev($pu);
 __THREW__ = 0;
 $94 = (invoke_i(518)|0);
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 do {
  if (!($96)) {
   if ($94) {
    $97 = $25;
    __THREW__ = 0;
    invoke_viiii(476,($fi|0),($97|0),1,($pu|0));
    $98 = __THREW__; __THREW__ = 0;
    $99 = $98&1;
    if ($99) {
     break;
    }
    $8 = $fi;
    $100 = $8;
    $101 = HEAP32[$100>>2]|0;
    HEAP32[$32>>2] = 4;
    __THREW__ = 0;
    invoke_vii(549,($101|0),($32|0));
    $102 = __THREW__; __THREW__ = 0;
    $103 = $102&1;
    if ($103) {
     break;
    }
    $104 = $26;
    $6 = $fi;
    $105 = $6;
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_iii(524,($106|0),0)|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    HEAP32[$107>>2] = $104;
    $110 = $27;
    $4 = $fi;
    $111 = $4;
    $112 = HEAP32[$111>>2]|0;
    __THREW__ = 0;
    $113 = (invoke_iii(524,($112|0),1)|0);
    $114 = __THREW__; __THREW__ = 0;
    $115 = $114&1;
    if ($115) {
     break;
    }
    HEAP32[$113>>2] = $110;
    $116 = $28;
    $2 = $fi;
    $117 = $2;
    $118 = HEAP32[$117>>2]|0;
    __THREW__ = 0;
    $119 = (invoke_iii(524,($118|0),2)|0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     break;
    }
    HEAP32[$119>>2] = $116;
    $122 = $29;
    $0 = $fi;
    $123 = $0;
    $124 = HEAP32[$123>>2]|0;
    __THREW__ = 0;
    $125 = (invoke_iii(524,($124|0),3)|0);
    $126 = __THREW__; __THREW__ = 0;
    $127 = $126&1;
    if ($127) {
     break;
    }
    HEAP32[$125>>2] = $122;
    ;HEAP32[$agg$result+0>>2]=HEAP32[$fi+0>>2]|0;
    $33 = 1;
    __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($pu);
    STACKTOP = sp;return;
   }
   $132 = $25;
   __THREW__ = 0;
   invoke_viiii(476,($fi1|0),($132|0),2,($pu|0));
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if (!($134)) {
    $1 = $fi1;
    $135 = $1;
    $136 = HEAP32[$135>>2]|0;
    HEAP32[$34>>2] = 3;
    __THREW__ = 0;
    invoke_vii(549,($136|0),($34|0));
    $137 = __THREW__; __THREW__ = 0;
    $138 = $137&1;
    if (!($138)) {
     $139 = $26;
     $3 = $fi1;
     $140 = $3;
     $141 = HEAP32[$140>>2]|0;
     __THREW__ = 0;
     $142 = (invoke_iii(524,($141|0),0)|0);
     $143 = __THREW__; __THREW__ = 0;
     $144 = $143&1;
     if (!($144)) {
      HEAP32[$142>>2] = $139;
      $145 = $27;
      $5 = $fi1;
      $146 = $5;
      $147 = HEAP32[$146>>2]|0;
      __THREW__ = 0;
      $148 = (invoke_iii(524,($147|0),1)|0);
      $149 = __THREW__; __THREW__ = 0;
      $150 = $149&1;
      if (!($150)) {
       HEAP32[$148>>2] = $145;
       $151 = $28;
       $7 = $fi1;
       $152 = $7;
       $153 = HEAP32[$152>>2]|0;
       __THREW__ = 0;
       $154 = (invoke_iii(524,($153|0),2)|0);
       $155 = __THREW__; __THREW__ = 0;
       $156 = $155&1;
       if (!($156)) {
        HEAP32[$154>>2] = $151;
        $9 = $fi1;
        $157 = $9;
        $158 = HEAP32[$157>>2]|0;
        __THREW__ = 0;
        invoke_vii(529,($158|0),2);
        $159 = __THREW__; __THREW__ = 0;
        $160 = $159&1;
        if (!($160)) {
         $11 = $fi1;
         $161 = $11;
         $162 = HEAP32[$161>>2]|0;
         $163 = (($162) + 44|0);
         HEAP32[$161>>2] = $163;
         $12 = $fi1;
         $164 = $12;
         $165 = HEAP32[$164>>2]|0;
         HEAP32[$35>>2] = 3;
         __THREW__ = 0;
         invoke_vii(549,($165|0),($35|0));
         $166 = __THREW__; __THREW__ = 0;
         $167 = $166&1;
         if (!($167)) {
          $168 = $26;
          $14 = $fi1;
          $169 = $14;
          $170 = HEAP32[$169>>2]|0;
          __THREW__ = 0;
          $171 = (invoke_iii(524,($170|0),0)|0);
          $172 = __THREW__; __THREW__ = 0;
          $173 = $172&1;
          if (!($173)) {
           HEAP32[$171>>2] = $168;
           $174 = $27;
           $16 = $fi1;
           $175 = $16;
           $176 = HEAP32[$175>>2]|0;
           __THREW__ = 0;
           $177 = (invoke_iii(524,($176|0),2)|0);
           $178 = __THREW__; __THREW__ = 0;
           $179 = $178&1;
           if ($179) {
            break;
           }
           HEAP32[$177>>2] = $174;
           $180 = $28;
           $18 = $fi1;
           $181 = $18;
           $182 = HEAP32[$181>>2]|0;
           __THREW__ = 0;
           $183 = (invoke_iii(524,($182|0),3)|0);
           $184 = __THREW__; __THREW__ = 0;
           $185 = $184&1;
           if ($185) {
            break;
           }
           HEAP32[$183>>2] = $180;
           $20 = $fi1;
           $186 = $20;
           $187 = HEAP32[$186>>2]|0;
           __THREW__ = 0;
           invoke_vii(529,($187|0),0);
           $188 = __THREW__; __THREW__ = 0;
           $189 = $188&1;
           if ($189) {
            break;
           }
           ;HEAP32[$agg$result+0>>2]=HEAP32[$fi1+0>>2]|0;
           $33 = 1;
           __ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev($pu);
           STACKTOP = sp;return;
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $128 = ___cxa_find_matching_catch()|0;
 $129 = tempRet0;
 $30 = $128;
 $31 = $129;
 __THREW__ = 0;
 invoke_vi(477,($pu|0));
 $130 = __THREW__; __THREW__ = 0;
 $131 = $130&1;
 if ($131) {
  $192 = ___cxa_find_matching_catch(0|0)|0;
  $193 = tempRet0;
  ___clang_call_terminate($192);
  // unreachable;
 }
 $190 = $30;
 $191 = $31;
 ___resumeException($190|0);
 // unreachable;
}
function __ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE($q) {
 $q = $q|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0.0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $Angle0Rad = 0.0, $Angle1Rad = 0.0, $N00 = 0, $N01 = 0, $N10 = 0, $N11 = 0, $P0 = 0, $P1 = 0, $P2 = 0, $P3 = 0, $qualityImprove = 0, $res = 0, $swapCauseFlip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy13 = sp + 680|0;
 $$byval_copy12 = sp + 912|0;
 $$byval_copy11 = sp + 764|0;
 $$byval_copy10 = sp + 760|0;
 $$byval_copy9 = sp + 1204|0;
 $$byval_copy8 = sp + 228|0;
 $$byval_copy7 = sp + 272|0;
 $$byval_copy6 = sp + 400|0;
 $$byval_copy5 = sp + 1208|0;
 $$byval_copy4 = sp + 1268|0;
 $$byval_copy3 = sp + 1276|0;
 $$byval_copy2 = sp + 1284|0;
 $$byval_copy1 = sp + 656|0;
 $$byval_copy = sp + 224|0;
 $24 = sp + 96|0;
 $27 = sp + 1301|0;
 $40 = sp + 48|0;
 $43 = sp + 1302|0;
 $46 = sp + 192|0;
 $55 = sp + 24|0;
 $58 = sp + 1305|0;
 $61 = sp + 80|0;
 $62 = sp + 612|0;
 $63 = sp + 608|0;
 $64 = sp + 600|0;
 $65 = sp + 404|0;
 $66 = sp + 408|0;
 $67 = sp + 412|0;
 $68 = sp + 416|0;
 $69 = sp + 420|0;
 $70 = sp + 424|0;
 $71 = sp + 428|0;
 $72 = sp + 432|0;
 $73 = sp + 112|0;
 $74 = sp + 32|0;
 $75 = sp + 64|0;
 $76 = sp;
 $81 = sp + 468|0;
 $82 = sp + 472|0;
 $83 = sp + 476|0;
 $84 = sp + 1306|0;
 $85 = sp + 152|0;
 $86 = sp + 176|0;
 $87 = sp + 56|0;
 $101 = sp + 548|0;
 $102 = sp + 552|0;
 $108 = sp + 168|0;
 $111 = sp + 1303|0;
 $113 = sp + 200|0;
 $116 = sp + 1248|0;
 $119 = sp + 1024|0;
 $129 = sp + 660|0;
 $130 = sp + 664|0;
 $134 = sp + 120|0;
 $137 = sp + 616|0;
 $140 = sp + 712|0;
 $181 = sp + 144|0;
 $184 = sp + 1310|0;
 $187 = sp + 88|0;
 $196 = sp + 136|0;
 $199 = sp + 1308|0;
 $202 = sp + 160|0;
 $203 = sp + 976|0;
 $204 = sp + 980|0;
 $205 = sp + 524|0;
 $206 = sp + 988|0;
 $207 = sp + 992|0;
 $208 = sp + 996|0;
 $209 = sp + 1000|0;
 $210 = sp + 1004|0;
 $211 = sp + 1008|0;
 $212 = sp + 1012|0;
 $213 = sp + 1016|0;
 $214 = sp + 16|0;
 $215 = sp + 8|0;
 $216 = sp + 72|0;
 $217 = sp + 184|0;
 $222 = sp + 1068|0;
 $223 = sp + 1072|0;
 $224 = sp + 1076|0;
 $225 = sp + 1307|0;
 $226 = sp + 40|0;
 $227 = sp + 104|0;
 $228 = sp + 128|0;
 $231 = sp + 1300|0;
 $235 = sp + 1128|0;
 $236 = sp + 1144|0;
 $237 = sp + 1160|0;
 $238 = sp + 1176|0;
 $N00 = sp + 260|0;
 $N01 = sp + 1216|0;
 $N10 = sp + 240|0;
 $N11 = sp + 1092|0;
 $239 = sp + 368|0;
 $240 = sp + 1212|0;
 $241 = sp + 748|0;
 $242 = sp + 1252|0;
 $243 = sp + 276|0;
 $244 = sp + 756|0;
 $245 = sp + 1260|0;
 $246 = sp + 908|0;
 $247 = sp + 396|0;
 $res = sp + 1240|0;
 $248 = sp + 576|0;
 $249 = sp + 1080|0;
 $250 = sp + 960|0;
 $251 = sp + 896|0;
 $252 = sp + 592|0;
 $253 = sp + 480|0;
 $254 = sp + 640|0;
 $255 = sp + 320|0;
 $256 = sp + 376|0;
 $232 = $q;
 $257 = HEAP8[5008>>0]|0;
 $258 = ($257<<24>>24)==(0);
 do {
  if ($258) {
   $259 = (___cxa_guard_acquire((5008|0))|0);
   $260 = ($259|0)!=(0);
   if ($260) {
    $230 = 4992;
    $261 = $230;
    __THREW__ = 0;
    invoke_vii(550,($261|0),($231|0));
    $262 = __THREW__; __THREW__ = 0;
    $263 = $262&1;
    if ($263) {
     $275 = ___cxa_find_matching_catch()|0;
     $276 = tempRet0;
     $233 = $275;
     $234 = $276;
     ___cxa_guard_abort((5008|0));
     $607 = $233;
     $608 = $234;
     ___resumeException($607|0);
     // unreachable;
    } else {
     (___cxa_atexit((551|0),(4992|0),(___dso_handle|0))|0);
     ___cxa_guard_release((5008|0));
     break;
    }
   }
  }
 } while(0);
 $264 = $232;
 $229 = $264;
 $265 = $229;
 $266 = (($265) + 4|0);
 $267 = HEAP32[$266>>2]|0;
 $268 = HEAP32[$265>>2]|0;
 $269 = $267;
 $270 = $268;
 $271 = (($269) - ($270))|0;
 $272 = (($271|0) / 4)&-1;
 $273 = ($272|0)!=(4);
 if ($273) {
  $168 = 4992;
  $274 = $168;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE5clearEv($274);
  STACKTOP = sp;return;
 }
 $277 = $232;
 $166 = $277;
 $167 = 0;
 $278 = $166;
 $279 = $167;
 $280 = HEAP32[$278>>2]|0;
 $281 = (($280) + ($279<<2)|0);
 $282 = HEAP32[$281>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($235,$282);
 $P0 = $235;
 $283 = $232;
 $164 = $283;
 $165 = 1;
 $284 = $164;
 $285 = $165;
 $286 = HEAP32[$284>>2]|0;
 $287 = (($286) + ($285<<2)|0);
 $288 = HEAP32[$287>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($236,$288);
 $P1 = $236;
 $289 = $232;
 $162 = $289;
 $163 = 2;
 $290 = $162;
 $291 = $163;
 $292 = HEAP32[$290>>2]|0;
 $293 = (($292) + ($291<<2)|0);
 $294 = HEAP32[$293>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($237,$294);
 $P2 = $237;
 $295 = $232;
 $131 = $295;
 $132 = 3;
 $296 = $131;
 $297 = $132;
 $298 = HEAP32[$296>>2]|0;
 $299 = (($298) + ($297<<2)|0);
 $300 = HEAP32[$299>>2]|0;
 __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($238,$300);
 $P3 = $238;
 $301 = $P0;
 $302 = $P1;
 $303 = $P2;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N00,$301,$302,$303);
 $304 = $P0;
 $305 = $P2;
 $306 = $P3;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N01,$304,$305,$306);
 $307 = $P1;
 $308 = $P2;
 $309 = $P3;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N10,$307,$308,$309);
 $310 = $P1;
 $311 = $P3;
 $312 = $P0;
 __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($N11,$310,$311,$312);
 $313 = (+__ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($N00,$N01));
 $Angle0Rad = $313;
 $314 = (+__ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($N10,$N11));
 $Angle1Rad = $314;
 $315 = $P0;
 $316 = $P1;
 $317 = $P2;
 $318 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($315,$316,$317));
 HEAPF32[$239>>2] = $318;
 $319 = $P0;
 $320 = $P2;
 $321 = $P3;
 $322 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($319,$320,$321));
 HEAPF32[$240>>2] = $322;
 $109 = $239;
 $110 = $240;
 $323 = $109;
 $324 = $110;
 ;HEAP8[$108+0>>0]=HEAP8[$111+0>>0]|0;
 $106 = $323;
 $107 = $324;
 $325 = $107;
 $326 = $106;
 $103 = $108;
 $104 = $325;
 $105 = $326;
 $327 = $104;
 $328 = +HEAPF32[$327>>2];
 $329 = $105;
 $330 = +HEAPF32[$329>>2];
 $331 = $328 < $330;
 if ($331) {
  $332 = $107;
  $335 = $332;
 } else {
  $333 = $106;
  $335 = $333;
 }
 $334 = +HEAPF32[$335>>2];
 $336 = $P1;
 $337 = $P2;
 $338 = $P3;
 $339 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($336,$337,$338));
 HEAPF32[$241>>2] = $339;
 $340 = $P1;
 $341 = $P3;
 $342 = $P0;
 $343 = (+__ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($340,$341,$342));
 HEAPF32[$242>>2] = $343;
 $25 = $241;
 $26 = $242;
 $344 = $25;
 $345 = $26;
 ;HEAP8[$24+0>>0]=HEAP8[$27+0>>0]|0;
 $22 = $344;
 $23 = $345;
 $346 = $23;
 $347 = $22;
 $19 = $24;
 $20 = $346;
 $21 = $347;
 $348 = $20;
 $349 = +HEAPF32[$348>>2];
 $350 = $21;
 $351 = +HEAPF32[$350>>2];
 $352 = $349 < $351;
 if ($352) {
  $353 = $23;
  $356 = $353;
 } else {
  $354 = $22;
  $356 = $354;
 }
 $355 = +HEAPF32[$356>>2];
 $357 = $334 < $355;
 $358 = $357&1;
 $qualityImprove = $358;
 $359 = $Angle1Rad;
 $360 = $359;
 $361 = $360 > 1.5707963267948966;
 if ($361) {
  $362 = $Angle0Rad;
  $363 = $362;
  $364 = $363 < 1.5707963267948966;
  $366 = $364;
 } else {
  $366 = 0;
 }
 $365 = $366&1;
 $swapCauseFlip = $365;
 $367 = $qualityImprove;
 $368 = $367&1;
 if ($368) {
  $369 = $swapCauseFlip;
  $370 = $369&1;
  if (!($370)) {
   $371 = $232;
   $18 = $371;
   $372 = $18;
   $373 = HEAP32[$372>>2]|0;
   $16 = $372;
   $17 = $373;
   $374 = $17;
   $14 = $243;
   $15 = $374;
   $375 = $14;
   $376 = $15;
   HEAP32[$375>>2] = $376;
   $377 = $232;
   $13 = $377;
   $378 = $13;
   $379 = HEAP32[$378>>2]|0;
   $11 = $378;
   $12 = $379;
   $380 = $12;
   $9 = $245;
   $10 = $380;
   $381 = $9;
   $382 = $10;
   HEAP32[$381>>2] = $382;
   $2 = $245;
   $3 = 1;
   $383 = $2;
   ;HEAP32[$244+0>>2]=HEAP32[$383+0>>2]|0;
   $384 = $3;
   $0 = $244;
   $1 = $384;
   $385 = $0;
   $386 = $1;
   $387 = HEAP32[$385>>2]|0;
   $388 = (($387) + ($386<<2)|0);
   HEAP32[$385>>2] = $388;
   $389 = $232;
   $8 = $389;
   $390 = $8;
   $391 = (($390) + 4|0);
   $392 = HEAP32[$391>>2]|0;
   $6 = $390;
   $7 = $392;
   $393 = $7;
   $4 = $246;
   $5 = $393;
   $394 = $4;
   $395 = $5;
   HEAP32[$394>>2] = $395;
   ;HEAP8[$87+0>>0]=HEAP8[$243+0>>0]|0;HEAP8[$87+1>>0]=HEAP8[$243+1>>0]|0;HEAP8[$87+2>>0]=HEAP8[$243+2>>0]|0;HEAP8[$87+3>>0]=HEAP8[$243+3>>0]|0;
   ;HEAP8[$86+0>>0]=HEAP8[$244+0>>0]|0;HEAP8[$86+1>>0]=HEAP8[$244+1>>0]|0;HEAP8[$86+2>>0]=HEAP8[$244+2>>0]|0;HEAP8[$86+3>>0]=HEAP8[$244+3>>0]|0;
   ;HEAP8[$85+0>>0]=HEAP8[$246+0>>0]|0;HEAP8[$85+1>>0]=HEAP8[$246+1>>0]|0;HEAP8[$85+2>>0]=HEAP8[$246+2>>0]|0;HEAP8[$85+3>>0]=HEAP8[$246+3>>0]|0;
   $79 = $87;
   $80 = $86;
   $396 = $79;
   $78 = $396;
   $397 = $78;
   $398 = HEAP32[$397>>2]|0;
   $399 = $80;
   $77 = $399;
   $400 = $77;
   $401 = HEAP32[$400>>2]|0;
   $402 = ($398|0)==($401|0);
   do {
    if ($402) {
     ;HEAP32[$247+0>>2]=HEAP32[$85+0>>2]|0;
    } else {
     $30 = $86;
     $31 = $85;
     $403 = $30;
     $29 = $403;
     $404 = $29;
     $405 = HEAP32[$404>>2]|0;
     $406 = $31;
     $28 = $406;
     $407 = $28;
     $408 = HEAP32[$407>>2]|0;
     $409 = ($405|0)==($408|0);
     if ($409) {
      ;HEAP32[$247+0>>2]=HEAP32[$87+0>>2]|0;
      break;
     }
     ;HEAP32[$81+0>>2]=HEAP32[$87+0>>2]|0;
     ;HEAP32[$82+0>>2]=HEAP32[$86+0>>2]|0;
     ;HEAP32[$83+0>>2]=HEAP32[$85+0>>2]|0;
     ;HEAP8[$76+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$76+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$76+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$76+3>>0]=HEAP8[$81+3>>0]|0;
     ;HEAP8[$75+0>>0]=HEAP8[$82+0>>0]|0;HEAP8[$75+1>>0]=HEAP8[$82+1>>0]|0;HEAP8[$75+2>>0]=HEAP8[$82+2>>0]|0;HEAP8[$75+3>>0]=HEAP8[$82+3>>0]|0;
     ;HEAP8[$74+0>>0]=HEAP8[$83+0>>0]|0;HEAP8[$74+1>>0]=HEAP8[$83+1>>0]|0;HEAP8[$74+2>>0]=HEAP8[$83+2>>0]|0;HEAP8[$74+3>>0]=HEAP8[$83+3>>0]|0;
     ;HEAP8[$73+0>>0]=HEAP8[$84+0>>0]|0;
     ;HEAP32[$63+0>>2]=HEAP32[$76+0>>2]|0;
     ;HEAP8[$61+0>>0]=HEAP8[$63+0>>0]|0;HEAP8[$61+1>>0]=HEAP8[$63+1>>0]|0;HEAP8[$61+2>>0]=HEAP8[$63+2>>0]|0;HEAP8[$61+3>>0]=HEAP8[$63+3>>0]|0;
     $59 = 1;
     $60 = 0;
     $410 = $59;
     $56 = $61;
     $57 = $410;
     $411 = $56;
     $412 = $57;
     ;HEAP8[$55+0>>0]=HEAP8[$58+0>>0]|0;
     $53 = $411;
     $54 = $412;
     $413 = $53;
     $414 = $54;
     $51 = $413;
     $52 = $414;
     $415 = $51;
     $416 = $52;
     $417 = HEAP32[$415>>2]|0;
     $418 = (($417) + ($416<<2)|0);
     HEAP32[$415>>2] = $418;
     ;HEAP32[$62+0>>2]=HEAP32[$61+0>>2]|0;
     $49 = $62;
     $50 = $75;
     $419 = $49;
     $48 = $419;
     $420 = $48;
     $421 = HEAP32[$420>>2]|0;
     $422 = $50;
     $47 = $422;
     $423 = $47;
     $424 = HEAP32[$423>>2]|0;
     $425 = ($421|0)==($424|0);
     do {
      if ($425) {
       ;HEAP32[$64+0>>2]=HEAP32[$76+0>>2]|0;
       ;HEAP32[$65+0>>2]=HEAP32[$74+0>>2]|0;
       ;HEAP32[$$byval_copy+0>>2]=HEAP32[$64+0>>2]|0;
       ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$65+0>>2]|0;
       __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($247,$$byval_copy,$$byval_copy1);
      } else {
       ;HEAP32[$67+0>>2]=HEAP32[$75+0>>2]|0;
       ;HEAP8[$46+0>>0]=HEAP8[$67+0>>0]|0;HEAP8[$46+1>>0]=HEAP8[$67+1>>0]|0;HEAP8[$46+2>>0]=HEAP8[$67+2>>0]|0;HEAP8[$46+3>>0]=HEAP8[$67+3>>0]|0;
       $44 = 1;
       $45 = 0;
       $426 = $44;
       $41 = $46;
       $42 = $426;
       $427 = $41;
       $428 = $42;
       ;HEAP8[$40+0>>0]=HEAP8[$43+0>>0]|0;
       $38 = $427;
       $39 = $428;
       $429 = $38;
       $430 = $39;
       $36 = $429;
       $37 = $430;
       $431 = $36;
       $432 = $37;
       $433 = HEAP32[$431>>2]|0;
       $434 = (($433) + ($432<<2)|0);
       HEAP32[$431>>2] = $434;
       ;HEAP32[$66+0>>2]=HEAP32[$46+0>>2]|0;
       $34 = $66;
       $35 = $74;
       $435 = $34;
       $33 = $435;
       $436 = $33;
       $437 = HEAP32[$436>>2]|0;
       $438 = $35;
       $32 = $438;
       $439 = $32;
       $440 = HEAP32[$439>>2]|0;
       $441 = ($437|0)==($440|0);
       if ($441) {
        ;HEAP32[$68+0>>2]=HEAP32[$76+0>>2]|0;
        ;HEAP32[$69+0>>2]=HEAP32[$74+0>>2]|0;
        ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$68+0>>2]|0;
        ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$69+0>>2]|0;
        __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($247,$$byval_copy2,$$byval_copy3);
        break;
       } else {
        ;HEAP32[$70+0>>2]=HEAP32[$76+0>>2]|0;
        ;HEAP32[$71+0>>2]=HEAP32[$75+0>>2]|0;
        ;HEAP32[$72+0>>2]=HEAP32[$74+0>>2]|0;
        ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$70+0>>2]|0;
        ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$71+0>>2]|0;
        ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$72+0>>2]|0;
        __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($247,$$byval_copy4,$$byval_copy5,$$byval_copy6);
        break;
       }
      }
     } while(0);
    }
   } while(0);
  }
 }
 $89 = $res;
 $442 = $89;
 $88 = $442;
 $443 = (($442) + 4|0);
 HEAP8[$443>>0] = 0;
 $444 = $232;
 $90 = $444;
 $91 = 0;
 $445 = $90;
 $446 = $91;
 $447 = HEAP32[$445>>2]|0;
 $448 = (($447) + ($446<<2)|0);
 $449 = HEAP32[$448>>2]|0;
 $450 = $232;
 $92 = $450;
 $93 = 2;
 $451 = $92;
 $452 = $93;
 $453 = HEAP32[$451>>2]|0;
 $454 = (($453) + ($452<<2)|0);
 $455 = HEAP32[$454>>2]|0;
 $456 = ($449>>>0)<($455>>>0);
 if ($456) {
  $457 = $232;
  $94 = $457;
  $95 = 0;
  $458 = $94;
  $459 = $95;
  $460 = HEAP32[$458>>2]|0;
  $461 = (($460) + ($459<<2)|0);
  $462 = HEAP32[$461>>2]|0;
  $463 = $232;
  $96 = $463;
  $97 = 2;
  $464 = $96;
  $465 = $97;
  $466 = HEAP32[$464>>2]|0;
  $467 = (($466) + ($465<<2)|0);
  $468 = HEAP32[$467>>2]|0;
  HEAP32[$101>>2] = $462;
  HEAP32[$102>>2] = $468;
  $98 = $249;
  $99 = $101;
  $100 = $102;
  $469 = $98;
  $470 = $99;
  $471 = HEAP32[$470>>2]|0;
  HEAP32[$469>>2] = $471;
  $472 = (($469) + 4|0);
  $473 = $100;
  $474 = HEAP32[$473>>2]|0;
  HEAP32[$472>>2] = $474;
  $117 = 4992;
  $118 = $249;
  $475 = $117;
  $476 = $118;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($119,$475,$476);
  $114 = $248;
  $115 = $119;
  $477 = $114;
  $478 = $115;
  ;HEAP32[$116+0>>2]=HEAP32[$478+0>>2]|0;
  ;HEAP8[$113+0>>0]=HEAP8[$116+0>>0]|0;HEAP8[$113+1>>0]=HEAP8[$116+1>>0]|0;HEAP8[$113+2>>0]=HEAP8[$116+2>>0]|0;HEAP8[$113+3>>0]=HEAP8[$116+3>>0]|0;
  $112 = $477;
  $479 = $112;
  $480 = HEAP32[$113>>2]|0;
  HEAP32[$479>>2] = $480;
  $481 = (($477) + 4|0);
  $482 = $115;
  $483 = (($482) + 4|0);
  $484 = HEAP8[$483>>0]|0;
  $485 = $484&1;
  $486 = $485&1;
  HEAP8[$481>>0] = $486;
  $120 = $res;
  $121 = $248;
  $487 = $120;
  $488 = $121;
  ;HEAP32[$487+0>>2]=HEAP32[$488+0>>2]|0;
  $489 = $121;
  $490 = (($489) + 4|0);
  $491 = HEAP8[$490>>0]|0;
  $492 = $491&1;
  $493 = (($487) + 4|0);
  $494 = $492&1;
  HEAP8[$493>>0] = $494;
 } else {
  $495 = $232;
  $122 = $495;
  $123 = 2;
  $496 = $122;
  $497 = $123;
  $498 = HEAP32[$496>>2]|0;
  $499 = (($498) + ($497<<2)|0);
  $500 = HEAP32[$499>>2]|0;
  $501 = $232;
  $124 = $501;
  $125 = 0;
  $502 = $124;
  $503 = $125;
  $504 = HEAP32[$502>>2]|0;
  $505 = (($504) + ($503<<2)|0);
  $506 = HEAP32[$505>>2]|0;
  HEAP32[$129>>2] = $500;
  HEAP32[$130>>2] = $506;
  $126 = $251;
  $127 = $129;
  $128 = $130;
  $507 = $126;
  $508 = $127;
  $509 = HEAP32[$508>>2]|0;
  HEAP32[$507>>2] = $509;
  $510 = (($507) + 4|0);
  $511 = $128;
  $512 = HEAP32[$511>>2]|0;
  HEAP32[$510>>2] = $512;
  $138 = 4992;
  $139 = $251;
  $513 = $138;
  $514 = $139;
  __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($140,$513,$514);
  $135 = $250;
  $136 = $140;
  $515 = $135;
  $516 = $136;
  ;HEAP32[$137+0>>2]=HEAP32[$516+0>>2]|0;
  ;HEAP8[$134+0>>0]=HEAP8[$137+0>>0]|0;HEAP8[$134+1>>0]=HEAP8[$137+1>>0]|0;HEAP8[$134+2>>0]=HEAP8[$137+2>>0]|0;HEAP8[$134+3>>0]=HEAP8[$137+3>>0]|0;
  $133 = $515;
  $517 = $133;
  $518 = HEAP32[$134>>2]|0;
  HEAP32[$517>>2] = $518;
  $519 = (($515) + 4|0);
  $520 = $136;
  $521 = (($520) + 4|0);
  $522 = HEAP8[$521>>0]|0;
  $523 = $522&1;
  $524 = $523&1;
  HEAP8[$519>>0] = $524;
  $141 = $res;
  $142 = $250;
  $525 = $141;
  $526 = $142;
  ;HEAP32[$525+0>>2]=HEAP32[$526+0>>2]|0;
  $527 = $142;
  $528 = (($527) + 4|0);
  $529 = HEAP8[$528>>0]|0;
  $530 = $529&1;
  $531 = (($525) + 4|0);
  $532 = $530&1;
  HEAP8[$531>>0] = $532;
 }
 $533 = (($res) + 4|0);
 $534 = HEAP8[$533>>0]|0;
 $535 = $534&1;
 if ($535) {
  STACKTOP = sp;return;
 }
 $536 = $232;
 $147 = $536;
 $537 = $147;
 $538 = HEAP32[$537>>2]|0;
 $145 = $537;
 $146 = $538;
 $539 = $146;
 $143 = $252;
 $144 = $539;
 $540 = $143;
 $541 = $144;
 HEAP32[$540>>2] = $541;
 $542 = $232;
 $152 = $542;
 $543 = $152;
 $544 = HEAP32[$543>>2]|0;
 $150 = $543;
 $151 = $544;
 $545 = $151;
 $148 = $254;
 $149 = $545;
 $546 = $148;
 $547 = $149;
 HEAP32[$546>>2] = $547;
 $155 = $254;
 $156 = 1;
 $548 = $155;
 ;HEAP32[$253+0>>2]=HEAP32[$548+0>>2]|0;
 $549 = $156;
 $153 = $253;
 $154 = $549;
 $550 = $153;
 $551 = $154;
 $552 = HEAP32[$550>>2]|0;
 $553 = (($552) + ($551<<2)|0);
 HEAP32[$550>>2] = $553;
 $554 = $232;
 $161 = $554;
 $555 = $161;
 $556 = (($555) + 4|0);
 $557 = HEAP32[$556>>2]|0;
 $159 = $555;
 $160 = $557;
 $558 = $160;
 $157 = $255;
 $158 = $558;
 $559 = $157;
 $560 = $158;
 HEAP32[$559>>2] = $560;
 ;HEAP8[$228+0>>0]=HEAP8[$252+0>>0]|0;HEAP8[$228+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$228+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$228+3>>0]=HEAP8[$252+3>>0]|0;
 ;HEAP8[$227+0>>0]=HEAP8[$253+0>>0]|0;HEAP8[$227+1>>0]=HEAP8[$253+1>>0]|0;HEAP8[$227+2>>0]=HEAP8[$253+2>>0]|0;HEAP8[$227+3>>0]=HEAP8[$253+3>>0]|0;
 ;HEAP8[$226+0>>0]=HEAP8[$255+0>>0]|0;HEAP8[$226+1>>0]=HEAP8[$255+1>>0]|0;HEAP8[$226+2>>0]=HEAP8[$255+2>>0]|0;HEAP8[$226+3>>0]=HEAP8[$255+3>>0]|0;
 $220 = $228;
 $221 = $227;
 $561 = $220;
 $219 = $561;
 $562 = $219;
 $563 = HEAP32[$562>>2]|0;
 $564 = $221;
 $218 = $564;
 $565 = $218;
 $566 = HEAP32[$565>>2]|0;
 $567 = ($563|0)==($566|0);
 do {
  if ($567) {
   ;HEAP32[$256+0>>2]=HEAP32[$226+0>>2]|0;
  } else {
   $171 = $227;
   $172 = $226;
   $568 = $171;
   $170 = $568;
   $569 = $170;
   $570 = HEAP32[$569>>2]|0;
   $571 = $172;
   $169 = $571;
   $572 = $169;
   $573 = HEAP32[$572>>2]|0;
   $574 = ($570|0)==($573|0);
   if ($574) {
    ;HEAP32[$256+0>>2]=HEAP32[$228+0>>2]|0;
    break;
   }
   ;HEAP32[$222+0>>2]=HEAP32[$228+0>>2]|0;
   ;HEAP32[$223+0>>2]=HEAP32[$227+0>>2]|0;
   ;HEAP32[$224+0>>2]=HEAP32[$226+0>>2]|0;
   ;HEAP8[$217+0>>0]=HEAP8[$222+0>>0]|0;HEAP8[$217+1>>0]=HEAP8[$222+1>>0]|0;HEAP8[$217+2>>0]=HEAP8[$222+2>>0]|0;HEAP8[$217+3>>0]=HEAP8[$222+3>>0]|0;
   ;HEAP8[$216+0>>0]=HEAP8[$223+0>>0]|0;HEAP8[$216+1>>0]=HEAP8[$223+1>>0]|0;HEAP8[$216+2>>0]=HEAP8[$223+2>>0]|0;HEAP8[$216+3>>0]=HEAP8[$223+3>>0]|0;
   ;HEAP8[$215+0>>0]=HEAP8[$224+0>>0]|0;HEAP8[$215+1>>0]=HEAP8[$224+1>>0]|0;HEAP8[$215+2>>0]=HEAP8[$224+2>>0]|0;HEAP8[$215+3>>0]=HEAP8[$224+3>>0]|0;
   ;HEAP8[$214+0>>0]=HEAP8[$225+0>>0]|0;
   ;HEAP32[$204+0>>2]=HEAP32[$217+0>>2]|0;
   ;HEAP8[$202+0>>0]=HEAP8[$204+0>>0]|0;HEAP8[$202+1>>0]=HEAP8[$204+1>>0]|0;HEAP8[$202+2>>0]=HEAP8[$204+2>>0]|0;HEAP8[$202+3>>0]=HEAP8[$204+3>>0]|0;
   $200 = 1;
   $201 = 0;
   $575 = $200;
   $197 = $202;
   $198 = $575;
   $576 = $197;
   $577 = $198;
   ;HEAP8[$196+0>>0]=HEAP8[$199+0>>0]|0;
   $194 = $576;
   $195 = $577;
   $578 = $194;
   $579 = $195;
   $192 = $578;
   $193 = $579;
   $580 = $192;
   $581 = $193;
   $582 = HEAP32[$580>>2]|0;
   $583 = (($582) + ($581<<2)|0);
   HEAP32[$580>>2] = $583;
   ;HEAP32[$203+0>>2]=HEAP32[$202+0>>2]|0;
   $190 = $203;
   $191 = $216;
   $584 = $190;
   $189 = $584;
   $585 = $189;
   $586 = HEAP32[$585>>2]|0;
   $587 = $191;
   $188 = $587;
   $588 = $188;
   $589 = HEAP32[$588>>2]|0;
   $590 = ($586|0)==($589|0);
   do {
    if ($590) {
     ;HEAP32[$205+0>>2]=HEAP32[$217+0>>2]|0;
     ;HEAP32[$206+0>>2]=HEAP32[$215+0>>2]|0;
     ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$205+0>>2]|0;
     ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$206+0>>2]|0;
     __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($256,$$byval_copy7,$$byval_copy8);
    } else {
     ;HEAP32[$208+0>>2]=HEAP32[$216+0>>2]|0;
     ;HEAP8[$187+0>>0]=HEAP8[$208+0>>0]|0;HEAP8[$187+1>>0]=HEAP8[$208+1>>0]|0;HEAP8[$187+2>>0]=HEAP8[$208+2>>0]|0;HEAP8[$187+3>>0]=HEAP8[$208+3>>0]|0;
     $185 = 1;
     $186 = 0;
     $591 = $185;
     $182 = $187;
     $183 = $591;
     $592 = $182;
     $593 = $183;
     ;HEAP8[$181+0>>0]=HEAP8[$184+0>>0]|0;
     $179 = $592;
     $180 = $593;
     $594 = $179;
     $595 = $180;
     $177 = $594;
     $178 = $595;
     $596 = $177;
     $597 = $178;
     $598 = HEAP32[$596>>2]|0;
     $599 = (($598) + ($597<<2)|0);
     HEAP32[$596>>2] = $599;
     ;HEAP32[$207+0>>2]=HEAP32[$187+0>>2]|0;
     $175 = $207;
     $176 = $215;
     $600 = $175;
     $174 = $600;
     $601 = $174;
     $602 = HEAP32[$601>>2]|0;
     $603 = $176;
     $173 = $603;
     $604 = $173;
     $605 = HEAP32[$604>>2]|0;
     $606 = ($602|0)==($605|0);
     if ($606) {
      ;HEAP32[$209+0>>2]=HEAP32[$217+0>>2]|0;
      ;HEAP32[$210+0>>2]=HEAP32[$215+0>>2]|0;
      ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$209+0>>2]|0;
      ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$210+0>>2]|0;
      __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($256,$$byval_copy9,$$byval_copy10);
      break;
     } else {
      ;HEAP32[$211+0>>2]=HEAP32[$217+0>>2]|0;
      ;HEAP32[$212+0>>2]=HEAP32[$216+0>>2]|0;
      ;HEAP32[$213+0>>2]=HEAP32[$215+0>>2]|0;
      ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$211+0>>2]|0;
      ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$212+0>>2]|0;
      ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$213+0>>2]|0;
      __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($256,$$byval_copy11,$$byval_copy12,$$byval_copy13);
      break;
     }
    }
   } while(0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 60|0;
 $18 = sp + 52|0;
 $21 = sp + 68|0;
 $22 = sp + 76|0;
 $23 = sp + 24|0;
 $24 = $this;
 $25 = $__n;
 $28 = $24;
 $20 = $28;
 $29 = $20;
 $19 = $29;
 $0 = $2;
 $1 = -1;
 $30 = $0;
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $31;
 $3 = $21;
 HEAP32[$29>>2] = 0;
 $32 = (($29) + 4|0);
 $4 = $6;
 $5 = -1;
 $33 = $4;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $34;
 $7 = $22;
 HEAP32[$32>>2] = 0;
 $35 = (($29) + 8|0);
 $8 = $10;
 $9 = -1;
 $36 = $8;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $37;
 $11 = $23;
 $17 = $35;
 HEAP32[$18>>2] = 0;
 $38 = $17;
 $16 = $18;
 $39 = $16;
 $40 = HEAP32[$39>>2]|0;
 $14 = $38;
 HEAP32[$15>>2] = $40;
 $41 = $14;
 $13 = $41;
 $12 = $15;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $25;
 $45 = ($44>>>0)>(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $25;
 __THREW__ = 0;
 invoke_vii(552,($28|0),($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if (!($48)) {
  $49 = $25;
  __THREW__ = 0;
  invoke_vii(553,($28|0),($49|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if (!($51)) {
   STACKTOP = sp;return;
  }
 }
 $52 = ___cxa_find_matching_catch()|0;
 $53 = tempRet0;
 $26 = $52;
 $27 = $53;
 __THREW__ = 0;
 invoke_vi(554,($28|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 }
 $56 = $26;
 $57 = $27;
 ___resumeException($56|0);
 // unreachable;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $6 = sp + 12|0;
 $10 = sp + 80|0;
 $15 = sp + 60|0;
 $18 = sp + 52|0;
 $21 = sp + 68|0;
 $22 = sp + 76|0;
 $23 = sp + 24|0;
 $24 = $this;
 $25 = $__n;
 $28 = $24;
 $20 = $28;
 $29 = $20;
 $19 = $29;
 $0 = $2;
 $1 = -1;
 $30 = $0;
 HEAP32[$30>>2] = 0;
 $31 = HEAP32[$2>>2]|0;
 HEAP32[$21>>2] = $31;
 $3 = $21;
 HEAP32[$29>>2] = 0;
 $32 = (($29) + 4|0);
 $4 = $6;
 $5 = -1;
 $33 = $4;
 HEAP32[$33>>2] = 0;
 $34 = HEAP32[$6>>2]|0;
 HEAP32[$22>>2] = $34;
 $7 = $22;
 HEAP32[$32>>2] = 0;
 $35 = (($29) + 8|0);
 $8 = $10;
 $9 = -1;
 $36 = $8;
 HEAP32[$36>>2] = 0;
 $37 = HEAP32[$10>>2]|0;
 HEAP32[$23>>2] = $37;
 $11 = $23;
 $17 = $35;
 HEAP32[$18>>2] = 0;
 $38 = $17;
 $16 = $18;
 $39 = $16;
 $40 = HEAP32[$39>>2]|0;
 $14 = $38;
 HEAP32[$15>>2] = $40;
 $41 = $14;
 $13 = $41;
 $12 = $15;
 $42 = $12;
 $43 = HEAP32[$42>>2]|0;
 HEAP32[$41>>2] = $43;
 $44 = $25;
 $45 = ($44>>>0)>(0);
 if (!($45)) {
  STACKTOP = sp;return;
 }
 $46 = $25;
 __THREW__ = 0;
 invoke_vii(555,($28|0),($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if (!($48)) {
  $49 = $25;
  __THREW__ = 0;
  invoke_vii(556,($28|0),($49|0));
  $50 = __THREW__; __THREW__ = 0;
  $51 = $50&1;
  if (!($51)) {
   STACKTOP = sp;return;
  }
 }
 $52 = ___cxa_find_matching_catch()|0;
 $53 = tempRet0;
 $26 = $52;
 $27 = $53;
 __THREW__ = 0;
 invoke_vi(557,($28|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $58 = ___cxa_find_matching_catch(0|0)|0;
  $59 = tempRet0;
  ___clang_call_terminate($58);
  // unreachable;
 }
 $56 = $26;
 $57 = $27;
 ___resumeException($56|0);
 // unreachable;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 262144 << $3;
 $5 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | $4;
 HEAP32[$5>>2] = $7;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE($outlines,$indices) {
 $outlines = $outlines|0;
 $indices = $indices|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__annotator$i = 0, $__annotator$i1 = 0, $__annotator$i4 = 0, $__old_size$i = 0, $i = 0, $points = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator$i4 = sp + 260|0;
 $__annotator$i1 = sp + 261|0;
 $__annotator$i = sp + 262|0;
 $43 = sp;
 $46 = sp + 263|0;
 $60 = sp + 132|0;
 $61 = sp + 80|0;
 $62 = sp + 32|0;
 $58 = $outlines;
 $59 = $indices;
 $63 = $59;
 $55 = $63;
 $64 = $55;
 $54 = $64;
 $65 = $54;
 $66 = (($65) + 4|0);
 $67 = HEAP32[$66>>2]|0;
 $68 = HEAP32[$65>>2]|0;
 $69 = $67;
 $70 = $68;
 $71 = (($69) - ($70))|0;
 $72 = (($71|0) / 4)&-1;
 $__old_size$i = $72;
 $52 = $64;
 $73 = $52;
 $74 = HEAP32[$73>>2]|0;
 $50 = $73;
 $51 = $74;
 $75 = $50;
 while(1) {
  $76 = $51;
  $77 = (($75) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ($76|0)!=($78|0);
  if (!($79)) {
   break;
  }
  $49 = $75;
  $80 = $49;
  $81 = (($80) + 8|0);
  $48 = $81;
  $82 = $48;
  $47 = $82;
  $83 = $47;
  $84 = (($75) + 4|0);
  $85 = HEAP32[$84>>2]|0;
  $86 = (($85) + -4|0);
  HEAP32[$84>>2] = $86;
  $40 = $86;
  $87 = $40;
  $44 = $83;
  $45 = $87;
  $88 = $44;
  $89 = $45;
  ;HEAP8[$43+0>>0]=HEAP8[$46+0>>0]|0;
  $41 = $88;
  $42 = $89;
 }
 $90 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(558,($64|0),($90|0));
 $91 = __THREW__; __THREW__ = 0;
 $92 = $91&1;
 if ($92) {
  $93 = ___cxa_find_matching_catch()|0;
  $94 = tempRet0;
  $56 = $93;
  $57 = $94;
  $95 = $56;
  ___cxa_call_unexpected(($95|0));
  // unreachable;
 }
 $53 = $64;
 $96 = $58;
 $39 = $96;
 $97 = $39;
 $98 = HEAP32[$97>>2]|0;
 $99 = (($97) + 4|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($98|0)==($100|0);
 if ($101) {
  STACKTOP = sp;return;
 }
 $102 = $58;
 $37 = $102;
 $38 = 0;
 $103 = $37;
 $104 = $38;
 $105 = HEAP32[$103>>2]|0;
 $106 = (($105) + (($104*12)|0)|0);
 $points = $106;
 $i = 0;
 while(1) {
  $107 = $i;
  $108 = $points;
  $24 = $108;
  $109 = $24;
  $110 = (($109) + 4|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = HEAP32[$109>>2]|0;
  $113 = $111;
  $114 = $112;
  $115 = (($113) - ($114))|0;
  $116 = (($115|0) / 12)&-1;
  $117 = (($116) - 2)|0;
  $118 = ($107>>>0)<($117>>>0);
  if (!($118)) {
   break;
  }
  $119 = $59;
  HEAP32[$60>>2] = 0;
  $22 = $119;
  $23 = $60;
  $120 = $22;
  $121 = (($120) + 4|0);
  $122 = HEAP32[$121>>2]|0;
  $21 = $120;
  $123 = $21;
  $124 = (($123) + 8|0);
  $20 = $124;
  $125 = $20;
  $19 = $125;
  $126 = $19;
  $127 = HEAP32[$126>>2]|0;
  $128 = ($122|0)!=($127|0);
  if ($128) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i1,$120,1);
   $18 = $120;
   $129 = $18;
   $130 = (($129) + 8|0);
   $17 = $130;
   $131 = $17;
   $16 = $131;
   $132 = $16;
   $133 = (($120) + 4|0);
   $134 = HEAP32[$133>>2]|0;
   $15 = $134;
   $135 = $15;
   $136 = $23;
   $12 = $132;
   $13 = $135;
   $14 = $136;
   $137 = $13;
   $138 = ($137|0)==(0|0);
   if (!($138)) {
    $139 = $14;
    $140 = HEAP32[$139>>2]|0;
    HEAP32[$137>>2] = $140;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i1);
   $141 = (($120) + 4|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = (($142) + 4|0);
   HEAP32[$141>>2] = $143;
  } else {
   $144 = $23;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($120,$144);
  }
  $145 = $59;
  $146 = $i;
  $147 = (($146) + 1)|0;
  HEAP32[$61>>2] = $147;
  $10 = $145;
  $11 = $61;
  $148 = $10;
  $149 = (($148) + 4|0);
  $150 = HEAP32[$149>>2]|0;
  $9 = $148;
  $151 = $9;
  $152 = (($151) + 8|0);
  $8 = $152;
  $153 = $8;
  $7 = $153;
  $154 = $7;
  $155 = HEAP32[$154>>2]|0;
  $156 = ($150|0)!=($155|0);
  if ($156) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i4,$148,1);
   $6 = $148;
   $157 = $6;
   $158 = (($157) + 8|0);
   $5 = $158;
   $159 = $5;
   $4 = $159;
   $160 = $4;
   $161 = (($148) + 4|0);
   $162 = HEAP32[$161>>2]|0;
   $3 = $162;
   $163 = $3;
   $164 = $11;
   $0 = $160;
   $1 = $163;
   $2 = $164;
   $165 = $1;
   $166 = ($165|0)==(0|0);
   if (!($166)) {
    $167 = $2;
    $168 = HEAP32[$167>>2]|0;
    HEAP32[$165>>2] = $168;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i4);
   $169 = (($148) + 4|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($170) + 4|0);
   HEAP32[$169>>2] = $171;
  } else {
   $172 = $11;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($148,$172);
  }
  $173 = $59;
  $174 = $i;
  $175 = (($174) + 2)|0;
  HEAP32[$62>>2] = $175;
  $35 = $173;
  $36 = $62;
  $176 = $35;
  $177 = (($176) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  $34 = $176;
  $179 = $34;
  $180 = (($179) + 8|0);
  $33 = $180;
  $181 = $33;
  $32 = $181;
  $182 = $32;
  $183 = HEAP32[$182>>2]|0;
  $184 = ($178|0)!=($183|0);
  if ($184) {
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$176,1);
   $31 = $176;
   $185 = $31;
   $186 = (($185) + 8|0);
   $30 = $186;
   $187 = $30;
   $29 = $187;
   $188 = $29;
   $189 = (($176) + 4|0);
   $190 = HEAP32[$189>>2]|0;
   $28 = $190;
   $191 = $28;
   $192 = $36;
   $25 = $188;
   $26 = $191;
   $27 = $192;
   $193 = $26;
   $194 = ($193|0)==(0|0);
   if (!($194)) {
    $195 = $27;
    $196 = HEAP32[$195>>2]|0;
    HEAP32[$193>>2] = $196;
   }
   __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $197 = (($176) + 4|0);
   $198 = HEAP32[$197>>2]|0;
   $199 = (($198) + 4|0);
   HEAP32[$197>>2] = $199;
  } else {
   $200 = $36;
   __ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_($176,$200);
  }
  $201 = $i;
  $202 = (($201) + 1)|0;
  $i = $202;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearFEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = 262144 << $3;
 $5 = $4 ^ -1;
 $6 = (__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5FlagsEv($2)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & $5;
 HEAP32[$6>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg6Color4IhEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point4IhEC2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 12|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $38;
 $22 = $34;
 $39 = ($36|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $40 = $14;
 $41 = HEAP32[$40>>2]|0;
 $10 = $40;
 $11 = $41;
 $42 = $10;
 while(1) {
  $43 = $11;
  $44 = (($42) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)!=($45|0);
  if (!($46)) {
   break;
  }
  $9 = $42;
  $47 = $9;
  $48 = (($47) + 8|0);
  $8 = $48;
  $49 = $8;
  $7 = $49;
  $50 = $7;
  $51 = (($42) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $0 = $53;
  $54 = $0;
  $4 = $50;
  $5 = $54;
  $55 = $4;
  $56 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $55;
  $2 = $56;
  $57 = $2;
  __THREW__ = 0;
  invoke_vi(396,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $12 = $60;
  $13 = $61;
  $62 = $12;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $17 = $35;
 $63 = $17;
 $64 = (($63) + 8|0);
 $16 = $64;
 $65 = $16;
 $15 = $65;
 $66 = $15;
 $67 = HEAP32[$35>>2]|0;
 $21 = $35;
 $68 = $21;
 $20 = $68;
 $69 = $20;
 $70 = (($69) + 8|0);
 $19 = $70;
 $71 = $19;
 $18 = $71;
 $72 = $18;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $27 = $66;
 $28 = $67;
 $29 = $78;
 $79 = $27;
 $80 = $28;
 $81 = $29;
 $24 = $79;
 $25 = $80;
 $26 = $81;
 $82 = $25;
 $23 = $82;
 $83 = $23;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -12|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 12)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEENS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 136|0;
 $32 = sp + 4|0;
 $34 = sp + 12|0;
 $33 = $this;
 $35 = $33;
 $36 = HEAP32[$35>>2]|0;
 $30 = $32;
 $31 = -1;
 $37 = $30;
 HEAP32[$37>>2] = 0;
 $38 = HEAP32[$32>>2]|0;
 HEAP32[$34>>2] = $38;
 $22 = $34;
 $39 = ($36|0)!=(0|0);
 if (!($39)) {
  STACKTOP = sp;return;
 }
 $14 = $35;
 $40 = $14;
 $41 = HEAP32[$40>>2]|0;
 $10 = $40;
 $11 = $41;
 $42 = $10;
 while(1) {
  $43 = $11;
  $44 = (($42) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)!=($45|0);
  if (!($46)) {
   break;
  }
  $9 = $42;
  $47 = $9;
  $48 = (($47) + 8|0);
  $8 = $48;
  $49 = $8;
  $7 = $49;
  $50 = $7;
  $51 = (($42) + 4|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $0 = $53;
  $54 = $0;
  $4 = $50;
  $5 = $54;
  $55 = $4;
  $56 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $55;
  $2 = $56;
  $57 = $2;
  __THREW__ = 0;
  invoke_vi(535,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $12 = $60;
  $13 = $61;
  $62 = $12;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $17 = $35;
 $63 = $17;
 $64 = (($63) + 8|0);
 $16 = $64;
 $65 = $16;
 $15 = $65;
 $66 = $15;
 $67 = HEAP32[$35>>2]|0;
 $21 = $35;
 $68 = $21;
 $20 = $68;
 $69 = $20;
 $70 = (($69) + 8|0);
 $19 = $70;
 $71 = $19;
 $18 = $71;
 $72 = $18;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $78 = (($77|0) / 12)&-1;
 $27 = $66;
 $28 = $67;
 $29 = $78;
 $79 = $27;
 $80 = $28;
 $81 = $29;
 $24 = $79;
 $25 = $80;
 $26 = $81;
 $82 = $25;
 $23 = $82;
 $83 = $23;
 __ZdlPv($83);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 4)&-1;
 $35 = (($22) + ($34<<2)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + ($39<<2)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 4)&-1;
 $52 = (($43) + ($51<<2)|0);
 __ZNKSt3__16vectorIiNS_9allocatorIiEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 100|0;
 $23 = sp + 12|0;
 $__v = sp + 60|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 12)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 12)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 12)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 12;
 } else {
  $101 = $2;
  __THREW__ = 0;
  invoke_vii(530,($99|0),($101|0));
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $104 = (($__v) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 12|0);
  HEAP32[$104>>2] = $106;
  __THREW__ = 0;
  invoke_vii(559,($32|0),($__v|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch()|0;
 $110 = tempRet0;
 $30 = $109;
 $31 = $110;
 __THREW__ = 0;
 invoke_vi(560,($__v|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 }
 $113 = $30;
 $114 = $31;
 ___resumeException($113|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEEC2EjjS9_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 28|0;
 $22 = sp + 84|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 16|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*12)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*12)|0)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*12)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 92|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -12|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -12|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -12|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 12)&-1;
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $24 = $38;
 $25 = $39;
 $40 = $24;
 while(1) {
  $41 = $25;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $23 = $40;
  $45 = $23;
  $46 = (($45) + 12|0);
  $22 = $46;
  $47 = $22;
  $21 = $47;
  $48 = $21;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $14 = $53;
  $54 = $14;
  $18 = $50;
  $19 = $54;
  $55 = $18;
  $56 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $55;
  $16 = $56;
  $57 = $16;
  __THREW__ = 0;
  invoke_vi(535,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $26 = $60;
  $27 = $61;
  $62 = $26;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $63 = HEAP32[$34>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $65 = $13;
 $66 = (($65) + 12|0);
 $12 = $66;
 $67 = $12;
 $11 = $67;
 $68 = $11;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$34>>2]|0;
 $10 = $34;
 $72 = $10;
 $9 = $72;
 $73 = $9;
 $74 = (($73) + 12|0);
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $4 = $70;
 $5 = $71;
 $6 = $82;
 $83 = $4;
 $84 = $5;
 $85 = $6;
 $1 = $83;
 $2 = $84;
 $3 = $85;
 $86 = $2;
 $0 = $86;
 $87 = $0;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp;
 $4 = sp + 84|0;
 $10 = sp + 8|0;
 $13 = sp + 85|0;
 $18 = sp + 40|0;
 $19 = sp + 36|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $__n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 120|0;
 $7 = sp + 116|0;
 $11 = sp + 36|0;
 $17 = sp + 164|0;
 $18 = sp + 8|0;
 $21 = sp + 76|0;
 $22 = sp + 168|0;
 $23 = sp;
 $27 = sp + 96|0;
 $28 = sp + 100|0;
 $29 = sp + 104|0;
 $30 = sp + 169|0;
 $32 = sp + 16|0;
 $34 = sp + 170|0;
 $40 = sp + 171|0;
 $38 = $this;
 $39 = $__x;
 $43 = $38;
 $44 = $39;
 $37 = $44;
 $45 = $37;
 $46 = (($45) + 8|0);
 $36 = $46;
 $47 = $36;
 $35 = $47;
 $48 = $35;
 $33 = $48;
 $49 = $33;
 ;HEAP8[$32+0>>0]=HEAP8[$34+0>>0]|0;
 $31 = $49;
 $25 = $43;
 $26 = $40;
 $50 = $25;
 $24 = $50;
 $1 = $3;
 $2 = -1;
 $51 = $1;
 HEAP32[$51>>2] = 0;
 $52 = HEAP32[$3>>2]|0;
 HEAP32[$27>>2] = $52;
 $4 = $27;
 HEAP32[$50>>2] = 0;
 $53 = (($50) + 4|0);
 $5 = $7;
 $6 = -1;
 $54 = $5;
 HEAP32[$54>>2] = 0;
 $55 = HEAP32[$7>>2]|0;
 HEAP32[$28>>2] = $55;
 $8 = $28;
 HEAP32[$53>>2] = 0;
 $56 = (($50) + 8|0);
 $9 = $11;
 $10 = -1;
 $57 = $9;
 HEAP32[$57>>2] = 0;
 $58 = HEAP32[$11>>2]|0;
 HEAP32[$29>>2] = $58;
 $12 = $29;
 ;HEAP8[$23+0>>0]=HEAP8[$30+0>>0]|0;
 $20 = $56;
 HEAP32[$21>>2] = 0;
 $59 = $20;
 $19 = $21;
 $60 = $19;
 $61 = HEAP32[$60>>2]|0;
 $13 = $23;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;
 $16 = $59;
 HEAP32[$17>>2] = $61;
 $62 = $16;
 $15 = $18;
 $14 = $17;
 $63 = $14;
 $64 = HEAP32[$63>>2]|0;
 HEAP32[$62>>2] = $64;
 $65 = $39;
 $0 = $65;
 $66 = $0;
 $67 = (($66) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = HEAP32[$66>>2]|0;
 $70 = $68;
 $71 = $69;
 $72 = (($70) - ($71))|0;
 $73 = (($72|0) / 12)&-1;
 $__n = $73;
 $74 = $__n;
 $75 = ($74>>>0)>(0);
 if (!($75)) {
  STACKTOP = sp;return;
 }
 $76 = $__n;
 __THREW__ = 0;
 invoke_vii(552,($43|0),($76|0));
 $77 = __THREW__; __THREW__ = 0;
 $78 = $77&1;
 if (!($78)) {
  $79 = $39;
  $80 = HEAP32[$79>>2]|0;
  $81 = $39;
  $82 = (($81) + 4|0);
  $83 = HEAP32[$82>>2]|0;
  __THREW__ = 0;
  invoke_viii(561,($43|0),($80|0),($83|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if (!($85)) {
   STACKTOP = sp;return;
  }
 }
 $86 = ___cxa_find_matching_catch()|0;
 $87 = tempRet0;
 $41 = $86;
 $42 = $87;
 __THREW__ = 0;
 invoke_vi(554,($43|0));
 $88 = __THREW__; __THREW__ = 0;
 $89 = $88&1;
 if ($89) {
  $92 = ___cxa_find_matching_catch(0|0)|0;
  $93 = tempRet0;
  ___clang_call_terminate($92);
  // unreachable;
 }
 $90 = $41;
 $91 = $42;
 ___resumeException($90|0);
 // unreachable;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = ($25*12)|0;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + (($31*12)|0)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 44|0;
 $7 = $this;
 $8 = $__first;
 $9 = $__last;
 $10 = $7;
 $6 = $10;
 $11 = $6;
 $12 = (($11) + 8|0);
 $5 = $12;
 $13 = $5;
 $4 = $13;
 $14 = $4;
 $__a = $14;
 while(1) {
  $15 = $8;
  $16 = $9;
  $17 = ($15|0)!=($16|0);
  if (!($17)) {
   break;
  }
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$10,1);
  $18 = $__a;
  $19 = (($10) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $3 = $20;
  $21 = $3;
  $22 = $8;
  $0 = $18;
  $1 = $21;
  $2 = $22;
  $23 = $1;
  $24 = ($23|0)==(0|0);
  if (!($24)) {
   $25 = $2;
   __ZN3vcg6Point3IfEC2ERKS1_($23,$25);
  }
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $26 = (($10) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (($27) + 12|0);
  HEAP32[$26>>2] = $28;
  $29 = $8;
  $30 = (($29) + 12|0);
  $8 = $30;
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE31__annotate_contiguous_containerEPKvS8_S8_S8_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotatorC2ERKS5_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP32[$17>>2] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotatorC2ERKS6_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   __ZN3vcg6Point3IfEC2Ev($17);
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 12|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNK3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE2cPEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2ERKS1_($agg$result,$1);
 STACKTOP = sp;return;
}
function __ZN3vcg6NormalINS_6Point3IfEEEET_RKS3_S5_S5_($agg$result,$p0,$p1,$p2) {
 $agg$result = $agg$result|0;
 $p0 = $p0|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 12|0;
 $4 = sp;
 $0 = $p0;
 $1 = $p1;
 $2 = $p2;
 $5 = $1;
 $6 = $0;
 __ZNK3vcg6Point3IfEmiERKS1_($3,$5,$6);
 $7 = $2;
 $8 = $0;
 __ZNK3vcg6Point3IfEmiERKS1_($4,$7,$8);
 __ZNK3vcg6Point3IfEeoERKS1_($agg$result,$3,$4);
 STACKTOP = sp;return;
}
function __ZN3vcg5AngleIfEET_RKNS_6Point3IS1_EES5_($p1,$p2) {
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $3 = 0, $4 = 0.0, $5 = 0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $t = 0.0, $w = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p1;
 $2 = $p2;
 $3 = $1;
 $4 = (+__ZNK3vcg6Point3IfE4NormEv($3));
 $5 = $2;
 $6 = (+__ZNK3vcg6Point3IfE4NormEv($5));
 $7 = $4 * $6;
 $w = $7;
 $8 = $w;
 $9 = $8 == 0.0;
 if ($9) {
  $0 = -1.0;
  $23 = $0;
  STACKTOP = sp;return (+$23);
 }
 $10 = $1;
 $11 = $2;
 $12 = (+__ZNK3vcg6Point3IfEmlERKS1_($10,$11));
 $13 = $w;
 $14 = $12 / $13;
 $t = $14;
 $15 = $t;
 $16 = $15 > 1.0;
 if ($16) {
  $t = 1.0;
 } else {
  $17 = $t;
  $18 = $17 < -1.0;
  if ($18) {
   $t = -1.0;
  }
 }
 $19 = $t;
 $20 = $19;
 $21 = (+Math_acos((+$20)));
 $22 = $21;
 $0 = $22;
 $23 = $0;
 STACKTOP = sp;return (+$23);
}
function __ZN3vcg12QualityRadiiIfEET_RKNS_6Point3IS1_EES5_S5_($p0,$p1,$p2) {
 $p0 = $p0|0;
 $p1 = $p1|0;
 $p2 = $p2|0;
 var $0 = 0.0, $1 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $a = 0.0, $area2 = 0.0, $b = 0.0, $c = 0.0;
 var $sum = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 56|0;
 $5 = sp + 32|0;
 $6 = sp + 12|0;
 $1 = $p0;
 $2 = $p1;
 $3 = $p2;
 $7 = $2;
 $8 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($4,$7,$8);
 $9 = (+__ZNK3vcg6Point3IfE4NormEv($4));
 $a = $9;
 $10 = $3;
 $11 = $1;
 __ZNK3vcg6Point3IfEmiERKS1_($5,$10,$11);
 $12 = (+__ZNK3vcg6Point3IfE4NormEv($5));
 $b = $12;
 $13 = $2;
 $14 = $3;
 __ZNK3vcg6Point3IfEmiERKS1_($6,$13,$14);
 $15 = (+__ZNK3vcg6Point3IfE4NormEv($6));
 $c = $15;
 $16 = $a;
 $17 = $b;
 $18 = $16 + $17;
 $19 = $c;
 $20 = $18 + $19;
 $21 = $20;
 $22 = $21 * 0.5;
 $23 = $22;
 $sum = $23;
 $24 = $sum;
 $25 = $a;
 $26 = $b;
 $27 = $25 + $26;
 $28 = $sum;
 $29 = $27 - $28;
 $30 = $24 * $29;
 $31 = $a;
 $32 = $c;
 $33 = $31 + $32;
 $34 = $sum;
 $35 = $33 - $34;
 $36 = $30 * $35;
 $37 = $b;
 $38 = $c;
 $39 = $37 + $38;
 $40 = $sum;
 $41 = $39 - $40;
 $42 = $36 * $41;
 $area2 = $42;
 $43 = $area2;
 $44 = $43 <= 0.0;
 if ($44) {
  $0 = 0.0;
  $55 = $0;
  STACKTOP = sp;return (+$55);
 } else {
  $45 = $area2;
  $46 = 8.0 * $45;
  $47 = $a;
  $48 = $b;
  $49 = $47 * $48;
  $50 = $c;
  $51 = $49 * $50;
  $52 = $sum;
  $53 = $51 * $52;
  $54 = $46 / $53;
  $0 = $54;
  $55 = $0;
  STACKTOP = sp;return (+$55);
 }
 return +(0.0);
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE15__insert_uniqueERKS4_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__child = 0, $__h = 0, $__inserted = 0, $__parent = 0, $__r = 0, $__t$i = 0, $__t$i$i = 0, $__tmp$i$i = 0, $__tmp$i$i1 = 0, $__tmp$i$i12 = 0, $__tmp$i$i7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = sp + 48|0;
 $17 = sp + 688|0;
 $39 = sp + 24|0;
 $42 = sp + 689|0;
 $72 = sp + 660|0;
 $73 = sp + 32|0;
 $76 = sp + 332|0;
 $77 = sp + 336|0;
 $78 = sp + 16|0;
 $81 = sp + 352|0;
 $82 = sp;
 $89 = sp + 40|0;
 $92 = sp + 690|0;
 $117 = sp + 8|0;
 $120 = sp + 691|0;
 $144 = sp + 260|0;
 $__parent = sp + 620|0;
 $__inserted = sp + 692|0;
 $147 = sp + 292|0;
 $__h = sp + 320|0;
 $148 = sp + 136|0;
 $149 = sp + 516|0;
 $152 = sp + 140|0;
 $145 = $this;
 $146 = $__v;
 $153 = $145;
 $154 = $146;
 $155 = (__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE12__find_equalIS4_EERPNS_16__tree_node_baseIPvEESF_RKT_($153,$__parent,$154)|0);
 $__child = $155;
 $156 = $__child;
 $157 = HEAP32[$156>>2]|0;
 $__r = $157;
 HEAP8[$__inserted>>0] = 0;
 $158 = $__child;
 $159 = HEAP32[$158>>2]|0;
 $142 = $144;
 $143 = -1;
 $160 = $142;
 HEAP32[$160>>2] = 0;
 $161 = HEAP32[$144>>2]|0;
 HEAP32[$147>>2] = $161;
 $141 = $147;
 $162 = ($159|0)==(0|0);
 if (!($162)) {
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $163 = $146;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeERKS4_($149,$153,$163);
 $110 = $149;
 $164 = $110;
 $108 = $148;
 $109 = $164;
 $165 = $108;
 $166 = $109;
 HEAP32[$165>>2] = $166;
 ;HEAP8[$82+0>>0]=HEAP8[$148+0>>0]|0;HEAP8[$82+1>>0]=HEAP8[$148+1>>0]|0;HEAP8[$82+2>>0]=HEAP8[$148+2>>0]|0;HEAP8[$82+3>>0]=HEAP8[$148+3>>0]|0;
 $80 = $__h;
 $167 = $80;
 $79 = $82;
 $168 = $79;
 $169 = HEAP32[$168>>2]|0;
 $62 = $169;
 $170 = $62;
 $61 = $170;
 $171 = $61;
 $60 = $171;
 $172 = $60;
 $173 = HEAP32[$172>>2]|0;
 $__t$i$i = $173;
 $59 = $170;
 $174 = $59;
 $58 = $174;
 $175 = $58;
 HEAP32[$175>>2] = 0;
 $176 = $__t$i$i;
 $63 = $82;
 $177 = $63;
 $178 = HEAP32[$177>>2]|0;
 $66 = $178;
 $179 = $66;
 $65 = $179;
 $180 = $65;
 $64 = $180;
 $181 = $64;
 $182 = (($181) + 4|0);
 $67 = $182;
 $183 = $67;
 ;HEAP32[$81+0>>2]=HEAP32[$183+0>>2]|0;HEAP32[$81+4>>2]=HEAP32[$183+4>>2]|0;
 ;HEAP8[$78+0>>0]=HEAP8[$81+0>>0]|0;HEAP8[$78+1>>0]=HEAP8[$81+1>>0]|0;HEAP8[$78+2>>0]=HEAP8[$81+2>>0]|0;HEAP8[$78+3>>0]=HEAP8[$81+3>>0]|0;HEAP8[$78+4>>0]=HEAP8[$81+4>>0]|0;HEAP8[$78+5>>0]=HEAP8[$81+5>>0]|0;HEAP8[$78+6>>0]=HEAP8[$81+6>>0]|0;HEAP8[$78+7>>0]=HEAP8[$81+7>>0]|0;
 $75 = $167;
 HEAP32[$76>>2] = $176;
 $184 = $75;
 $74 = $76;
 $185 = $74;
 $186 = HEAP32[$185>>2]|0;
 $68 = $78;
 $187 = $68;
 ;HEAP32[$77+0>>2]=HEAP32[$187+0>>2]|0;HEAP32[$77+4>>2]=HEAP32[$187+4>>2]|0;
 ;HEAP8[$73+0>>0]=HEAP8[$77+0>>0]|0;HEAP8[$73+1>>0]=HEAP8[$77+1>>0]|0;HEAP8[$73+2>>0]=HEAP8[$77+2>>0]|0;HEAP8[$73+3>>0]=HEAP8[$77+3>>0]|0;HEAP8[$73+4>>0]=HEAP8[$77+4>>0]|0;HEAP8[$73+5>>0]=HEAP8[$77+5>>0]|0;HEAP8[$73+6>>0]=HEAP8[$77+6>>0]|0;HEAP8[$73+7>>0]=HEAP8[$77+7>>0]|0;
 $71 = $184;
 HEAP32[$72>>2] = $186;
 $188 = $71;
 $70 = $72;
 $189 = $70;
 $190 = HEAP32[$189>>2]|0;
 HEAP32[$188>>2] = $190;
 $191 = (($188) + 4|0);
 $69 = $73;
 $192 = $69;
 ;HEAP32[$191+0>>2]=HEAP32[$192+0>>2]|0;HEAP32[$191+4>>2]=HEAP32[$192+4>>2]|0;
 $32 = $149;
 $193 = $32;
 $30 = $193;
 $31 = 0;
 $194 = $30;
 $29 = $194;
 $195 = $29;
 $28 = $195;
 $196 = $28;
 $197 = HEAP32[$196>>2]|0;
 $__tmp$i$i12 = $197;
 $198 = $31;
 $11 = $194;
 $199 = $11;
 $10 = $199;
 $200 = $10;
 HEAP32[$200>>2] = $198;
 $201 = $__tmp$i$i12;
 $202 = ($201|0)!=(0|0);
 if ($202) {
  $9 = $194;
  $203 = $9;
  $8 = $203;
  $204 = $8;
  $205 = (($204) + 4|0);
  $206 = $__tmp$i$i12;
  $26 = $205;
  $27 = $206;
  $207 = $26;
  $208 = (($207) + 4|0);
  $209 = HEAP8[$208>>0]|0;
  $210 = $209&1;
  if ($210) {
   $211 = HEAP32[$207>>2]|0;
   $212 = $27;
   $213 = (($212) + 16|0);
   $25 = $213;
   $214 = $25;
   $15 = $211;
   $16 = $214;
   $215 = $15;
   $216 = $16;
   ;HEAP8[$14+0>>0]=HEAP8[$17+0>>0]|0;
   $12 = $215;
   $13 = $216;
  }
  $217 = $27;
  $218 = ($217|0)!=(0|0);
  if ($218) {
   $219 = HEAP32[$207>>2]|0;
   $220 = $27;
   $22 = $219;
   $23 = $220;
   $24 = 1;
   $221 = $22;
   $222 = $23;
   $223 = $24;
   $19 = $221;
   $20 = $222;
   $21 = $223;
   $224 = $20;
   $18 = $224;
   $225 = $18;
   __ZdlPv($225);
  }
 }
 $226 = HEAP32[$__parent>>2]|0;
 $227 = $__child;
 $7 = $__h;
 $228 = $7;
 $6 = $228;
 $229 = $6;
 $5 = $229;
 $230 = $5;
 $231 = HEAP32[$230>>2]|0;
 __THREW__ = 0;
 invoke_viiii(562,($153|0),($226|0),($227|0),($231|0));
 $232 = __THREW__; __THREW__ = 0;
 $233 = $232&1;
 if (!($233)) {
  $4 = $__h;
  $234 = $4;
  $3 = $234;
  $235 = $3;
  $2 = $235;
  $236 = $2;
  $237 = HEAP32[$236>>2]|0;
  $__t$i = $237;
  $1 = $234;
  $238 = $1;
  $0 = $238;
  $239 = $0;
  HEAP32[$239>>2] = 0;
  $240 = $__t$i;
  $__r = $240;
  HEAP8[$__inserted>>0] = 1;
  $57 = $__h;
  $241 = $57;
  $55 = $241;
  $56 = 0;
  $242 = $55;
  $54 = $242;
  $243 = $54;
  $53 = $243;
  $244 = $53;
  $245 = HEAP32[$244>>2]|0;
  $__tmp$i$i7 = $245;
  $246 = $56;
  $36 = $242;
  $247 = $36;
  $35 = $247;
  $248 = $35;
  HEAP32[$248>>2] = $246;
  $249 = $__tmp$i$i7;
  $250 = ($249|0)!=(0|0);
  if ($250) {
   $34 = $242;
   $251 = $34;
   $33 = $251;
   $252 = $33;
   $253 = (($252) + 4|0);
   $254 = $__tmp$i$i7;
   $51 = $253;
   $52 = $254;
   $255 = $51;
   $256 = (($255) + 4|0);
   $257 = HEAP8[$256>>0]|0;
   $258 = $257&1;
   if ($258) {
    $259 = HEAP32[$255>>2]|0;
    $260 = $52;
    $261 = (($260) + 16|0);
    $50 = $261;
    $262 = $50;
    $40 = $259;
    $41 = $262;
    $263 = $40;
    $264 = $41;
    ;HEAP8[$39+0>>0]=HEAP8[$42+0>>0]|0;
    $37 = $263;
    $38 = $264;
   }
   $265 = $52;
   $266 = ($265|0)!=(0|0);
   if ($266) {
    $267 = HEAP32[$255>>2]|0;
    $268 = $52;
    $47 = $267;
    $48 = $268;
    $49 = 1;
    $269 = $47;
    $270 = $48;
    $271 = $49;
    $44 = $269;
    $45 = $270;
    $46 = $271;
    $272 = $45;
    $43 = $272;
    $273 = $43;
    __ZdlPv($273);
   }
  }
  $309 = $__r;
  $136 = $152;
  $137 = $309;
  $310 = $136;
  $311 = $137;
  HEAP32[$310>>2] = $311;
  $138 = $agg$result;
  $139 = $152;
  $140 = $__inserted;
  $312 = $138;
  $313 = $139;
  ;HEAP32[$312+0>>2]=HEAP32[$313+0>>2]|0;
  $314 = (($312) + 4|0);
  $315 = $140;
  $316 = HEAP8[$315>>0]|0;
  $317 = $316&1;
  $318 = $317&1;
  HEAP8[$314>>0] = $318;
  STACKTOP = sp;return;
 }
 $274 = ___cxa_find_matching_catch()|0;
 $275 = tempRet0;
 $150 = $274;
 $151 = $275;
 $135 = $__h;
 $276 = $135;
 $133 = $276;
 $134 = 0;
 $277 = $133;
 $132 = $277;
 $278 = $132;
 $131 = $278;
 $279 = $131;
 $280 = HEAP32[$279>>2]|0;
 $__tmp$i$i = $280;
 $281 = $134;
 $114 = $277;
 $282 = $114;
 $113 = $282;
 $283 = $113;
 HEAP32[$283>>2] = $281;
 $284 = $__tmp$i$i;
 $285 = ($284|0)!=(0|0);
 if ($285) {
  $112 = $277;
  $286 = $112;
  $111 = $286;
  $287 = $111;
  $288 = (($287) + 4|0);
  $289 = $__tmp$i$i;
  $129 = $288;
  $130 = $289;
  $290 = $129;
  $291 = (($290) + 4|0);
  $292 = HEAP8[$291>>0]|0;
  $293 = $292&1;
  if ($293) {
   $294 = HEAP32[$290>>2]|0;
   $295 = $130;
   $296 = (($295) + 16|0);
   $128 = $296;
   $297 = $128;
   $118 = $294;
   $119 = $297;
   $298 = $118;
   $299 = $119;
   ;HEAP8[$117+0>>0]=HEAP8[$120+0>>0]|0;
   $115 = $298;
   $116 = $299;
  }
  $300 = $130;
  $301 = ($300|0)!=(0|0);
  if ($301) {
   $302 = HEAP32[$290>>2]|0;
   $303 = $130;
   $125 = $302;
   $126 = $303;
   $127 = 1;
   $304 = $125;
   $305 = $126;
   $306 = $127;
   $122 = $304;
   $123 = $305;
   $124 = $306;
   $307 = $123;
   $121 = $307;
   $308 = $121;
   __ZdlPv($308);
  }
 }
 $319 = $150;
 $320 = $151;
 ___resumeException($319|0);
 // unreachable;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE12__find_equalIS4_EERPNS_16__tree_node_baseIPvEESF_RKT_($this,$__parent,$__v) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__nd = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 164|0;
 $14 = sp + 52|0;
 $26 = sp + 100|0;
 $43 = sp + 4|0;
 $44 = sp + 76|0;
 $45 = sp + 156|0;
 $40 = $this;
 $41 = $__parent;
 $42 = $__v;
 $46 = $40;
 $38 = $46;
 $47 = $38;
 $37 = $47;
 $48 = $37;
 $49 = (($48) + 4|0);
 $36 = $49;
 $50 = $36;
 $35 = $50;
 $51 = $35;
 $34 = $51;
 $52 = $34;
 $33 = $52;
 $53 = $33;
 $54 = HEAP32[$53>>2]|0;
 $__nd = $54;
 $55 = $__nd;
 $0 = $2;
 $1 = -1;
 $56 = $0;
 HEAP32[$56>>2] = 0;
 $57 = HEAP32[$2>>2]|0;
 HEAP32[$43>>2] = $57;
 $3 = $43;
 $58 = ($55|0)!=(0|0);
 if (!($58)) {
  $32 = $46;
  $139 = $32;
  $140 = (($139) + 4|0);
  $31 = $140;
  $141 = $31;
  $30 = $141;
  $142 = $30;
  $29 = $142;
  $143 = $29;
  $28 = $143;
  $144 = $28;
  $145 = $41;
  HEAP32[$145>>2] = $144;
  $146 = $41;
  $147 = HEAP32[$146>>2]|0;
  $39 = $147;
  $148 = $39;
  STACKTOP = sp;return ($148|0);
 }
 while(1) {
  $6 = $46;
  $59 = $6;
  $60 = (($59) + 8|0);
  $5 = $60;
  $61 = $5;
  $4 = $61;
  $62 = $4;
  $63 = $42;
  $64 = $__nd;
  $65 = (($64) + 16|0);
  $9 = $62;
  $10 = $63;
  $11 = $65;
  $66 = $10;
  $67 = $11;
  $7 = $66;
  $8 = $67;
  $68 = $7;
  $69 = HEAP32[$68>>2]|0;
  $70 = $8;
  $71 = HEAP32[$70>>2]|0;
  $72 = ($69>>>0)<($71>>>0);
  if ($72) {
   $149 = 1;
  } else {
   $73 = $8;
   $74 = HEAP32[$73>>2]|0;
   $75 = $7;
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74>>>0)<($76>>>0);
   if ($77) {
    $150 = 0;
   } else {
    $78 = $7;
    $79 = (($78) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $8;
    $82 = (($81) + 4|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($80>>>0)<($83>>>0);
    $150 = $84;
   }
   $149 = $150;
  }
  if ($149) {
   $85 = $__nd;
   $86 = HEAP32[$85>>2]|0;
   $12 = $14;
   $13 = -1;
   $87 = $12;
   HEAP32[$87>>2] = 0;
   $88 = HEAP32[$14>>2]|0;
   HEAP32[$44>>2] = $88;
   $15 = $44;
   $89 = ($86|0)!=(0|0);
   if (!($89)) {
    label = 10;
    break;
   }
   $90 = $__nd;
   $91 = HEAP32[$90>>2]|0;
   $__nd = $91;
  } else {
   $18 = $46;
   $96 = $18;
   $97 = (($96) + 8|0);
   $17 = $97;
   $98 = $17;
   $16 = $98;
   $99 = $16;
   $100 = $__nd;
   $101 = (($100) + 16|0);
   $102 = $42;
   $21 = $99;
   $22 = $101;
   $23 = $102;
   $103 = $22;
   $104 = $23;
   $19 = $103;
   $20 = $104;
   $105 = $19;
   $106 = HEAP32[$105>>2]|0;
   $107 = $20;
   $108 = HEAP32[$107>>2]|0;
   $109 = ($106>>>0)<($108>>>0);
   if ($109) {
    $151 = 1;
   } else {
    $110 = $20;
    $111 = HEAP32[$110>>2]|0;
    $112 = $19;
    $113 = HEAP32[$112>>2]|0;
    $114 = ($111>>>0)<($113>>>0);
    if ($114) {
     $152 = 0;
    } else {
     $115 = $19;
     $116 = (($115) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $20;
     $119 = (($118) + 4|0);
     $120 = HEAP32[$119>>2]|0;
     $121 = ($117>>>0)<($120>>>0);
     $152 = $121;
    }
    $151 = $152;
   }
   if (!($151)) {
    label = 21;
    break;
   }
   $122 = $__nd;
   $123 = (($122) + 4|0);
   $124 = HEAP32[$123>>2]|0;
   $24 = $26;
   $25 = -1;
   $125 = $24;
   HEAP32[$125>>2] = 0;
   $126 = HEAP32[$26>>2]|0;
   HEAP32[$45>>2] = $126;
   $27 = $45;
   $127 = ($124|0)!=(0|0);
   if (!($127)) {
    label = 19;
    break;
   }
   $128 = $__nd;
   $129 = (($128) + 4|0);
   $130 = HEAP32[$129>>2]|0;
   $__nd = $130;
  }
 }
 if ((label|0) == 10) {
  $92 = $__nd;
  $93 = $41;
  HEAP32[$93>>2] = $92;
  $94 = $41;
  $95 = HEAP32[$94>>2]|0;
  $39 = $95;
  $148 = $39;
  STACKTOP = sp;return ($148|0);
 }
 else if ((label|0) == 19) {
  $131 = $__nd;
  $132 = $41;
  HEAP32[$132>>2] = $131;
  $133 = $41;
  $134 = HEAP32[$133>>2]|0;
  $135 = (($134) + 4|0);
  $39 = $135;
  $148 = $39;
  STACKTOP = sp;return ($148|0);
 }
 else if ((label|0) == 21) {
  $136 = $__nd;
  $137 = $41;
  HEAP32[$137>>2] = $136;
  $138 = $41;
  $39 = $138;
  $148 = $39;
  STACKTOP = sp;return ($148|0);
 }
 return (0)|0;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__construct_nodeERKS4_($agg$result,$this,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__h = 0, $__na = 0, $__t$i$i = 0, $__t$i$i$i = 0, $__t$i$i9$i = 0, $__tmp$i$i = 0, $__tmp$i$i12 = 0, $__tmp$i$i2 = 0, $__tmp$i$i2$i = 0, $__tmp$i$i7 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp + 336|0;
 $18 = sp + 72|0;
 $21 = sp + 204|0;
 $22 = sp + 184|0;
 $23 = sp + 80|0;
 $26 = sp + 160|0;
 $27 = sp + 120|0;
 $34 = sp + 40|0;
 $37 = sp + 1196|0;
 $70 = sp + 344|0;
 $71 = sp + 88|0;
 $74 = sp + 360|0;
 $75 = sp + 368|0;
 $76 = sp + 56|0;
 $79 = sp + 392|0;
 $80 = sp + 64|0;
 $84 = sp + 416|0;
 $85 = sp + 420|0;
 $86 = sp + 432|0;
 $104 = sp + 508|0;
 $105 = sp + 112|0;
 $108 = sp + 528|0;
 $109 = sp + 536|0;
 $110 = sp + 8|0;
 $113 = sp + 560|0;
 $114 = sp + 128|0;
 $124 = sp + 32|0;
 $127 = sp + 1197|0;
 $150 = sp + 104|0;
 $153 = sp + 1198|0;
 $178 = sp + 24|0;
 $181 = sp + 1199|0;
 $202 = sp + 928|0;
 $203 = sp + 96|0;
 $206 = sp + 940|0;
 $207 = sp + 944|0;
 $208 = sp;
 $211 = sp + 964|0;
 $212 = sp + 512|0;
 $213 = sp + 16|0;
 $220 = sp + 48|0;
 $223 = sp + 1200|0;
 $__h = sp + 1156|0;
 $252 = sp + 968|0;
 $255 = sp + 732|0;
 $256 = sp + 1180|0;
 $250 = $this;
 $251 = $__v;
 $258 = $250;
 $249 = $258;
 $259 = $249;
 $260 = (($259) + 4|0);
 $248 = $260;
 $261 = $248;
 $247 = $261;
 $262 = $247;
 $__na = $262;
 $263 = $__na;
 $245 = $263;
 $246 = 1;
 $264 = $245;
 $265 = $246;
 $242 = $264;
 $243 = $265;
 $244 = 0;
 $266 = $243;
 $267 = ($266*24)|0;
 $241 = $267;
 $268 = $241;
 $269 = (__Znwj($268)|0);
 $270 = $__na;
 $239 = $252;
 $240 = $270;
 $271 = $239;
 $272 = $240;
 HEAP32[$271>>2] = $272;
 $273 = (($271) + 4|0);
 HEAP8[$273>>0] = 0;
 ;HEAP8[$213+0>>0]=HEAP8[$252+0>>0]|0;HEAP8[$213+1>>0]=HEAP8[$252+1>>0]|0;HEAP8[$213+2>>0]=HEAP8[$252+2>>0]|0;HEAP8[$213+3>>0]=HEAP8[$252+3>>0]|0;HEAP8[$213+4>>0]=HEAP8[$252+4>>0]|0;HEAP8[$213+5>>0]=HEAP8[$252+5>>0]|0;HEAP8[$213+6>>0]=HEAP8[$252+6>>0]|0;HEAP8[$213+7>>0]=HEAP8[$252+7>>0]|0;
 $210 = $__h;
 HEAP32[$211>>2] = $269;
 $274 = $210;
 $209 = $211;
 $275 = $209;
 $276 = HEAP32[$275>>2]|0;
 $197 = $213;
 $277 = $197;
 ;HEAP32[$212+0>>2]=HEAP32[$277+0>>2]|0;HEAP32[$212+4>>2]=HEAP32[$277+4>>2]|0;
 ;HEAP8[$208+0>>0]=HEAP8[$212+0>>0]|0;HEAP8[$208+1>>0]=HEAP8[$212+1>>0]|0;HEAP8[$208+2>>0]=HEAP8[$212+2>>0]|0;HEAP8[$208+3>>0]=HEAP8[$212+3>>0]|0;HEAP8[$208+4>>0]=HEAP8[$212+4>>0]|0;HEAP8[$208+5>>0]=HEAP8[$212+5>>0]|0;HEAP8[$208+6>>0]=HEAP8[$212+6>>0]|0;HEAP8[$208+7>>0]=HEAP8[$212+7>>0]|0;
 $205 = $274;
 HEAP32[$206>>2] = $276;
 $278 = $205;
 $204 = $206;
 $279 = $204;
 $280 = HEAP32[$279>>2]|0;
 $198 = $208;
 $281 = $198;
 ;HEAP32[$207+0>>2]=HEAP32[$281+0>>2]|0;HEAP32[$207+4>>2]=HEAP32[$281+4>>2]|0;
 ;HEAP8[$203+0>>0]=HEAP8[$207+0>>0]|0;HEAP8[$203+1>>0]=HEAP8[$207+1>>0]|0;HEAP8[$203+2>>0]=HEAP8[$207+2>>0]|0;HEAP8[$203+3>>0]=HEAP8[$207+3>>0]|0;HEAP8[$203+4>>0]=HEAP8[$207+4>>0]|0;HEAP8[$203+5>>0]=HEAP8[$207+5>>0]|0;HEAP8[$203+6>>0]=HEAP8[$207+6>>0]|0;HEAP8[$203+7>>0]=HEAP8[$207+7>>0]|0;
 $201 = $278;
 HEAP32[$202>>2] = $280;
 $282 = $201;
 $200 = $202;
 $283 = $200;
 $284 = HEAP32[$283>>2]|0;
 HEAP32[$282>>2] = $284;
 $285 = (($282) + 4|0);
 $199 = $203;
 $286 = $199;
 ;HEAP32[$285+0>>2]=HEAP32[$286+0>>2]|0;HEAP32[$285+4>>2]=HEAP32[$286+4>>2]|0;
 $287 = $__na;
 $171 = $__h;
 $288 = $171;
 $170 = $288;
 $289 = $170;
 $169 = $289;
 $290 = $169;
 $291 = HEAP32[$290>>2]|0;
 $292 = (($291) + 16|0);
 $143 = $292;
 $293 = $143;
 $294 = $251;
 $115 = $287;
 $116 = $293;
 $117 = $294;
 $295 = $116;
 $296 = ($295|0)==(0|0);
 if (!($296)) {
  $297 = $117;
  ;HEAP32[$295+0>>2]=HEAP32[$297+0>>2]|0;HEAP32[$295+4>>2]=HEAP32[$297+4>>2]|0;
 }
 $2 = $__h;
 $298 = $2;
 $1 = $298;
 $299 = $1;
 $0 = $299;
 $300 = $0;
 $301 = (($300) + 4|0);
 $302 = (($301) + 4|0);
 HEAP8[$302>>0] = 1;
 $83 = $__h;
 $303 = $83;
 $81 = $86;
 $82 = $303;
 $304 = $81;
 $305 = $82;
 HEAP32[$304>>2] = $305;
 ;HEAP8[$80+0>>0]=HEAP8[$86+0>>0]|0;HEAP8[$80+1>>0]=HEAP8[$86+1>>0]|0;HEAP8[$80+2>>0]=HEAP8[$86+2>>0]|0;HEAP8[$80+3>>0]=HEAP8[$86+3>>0]|0;
 $78 = $85;
 $306 = $78;
 $77 = $80;
 $307 = $77;
 $308 = HEAP32[$307>>2]|0;
 $60 = $308;
 $309 = $60;
 $59 = $309;
 $310 = $59;
 $58 = $310;
 $311 = $58;
 $312 = HEAP32[$311>>2]|0;
 $__t$i$i$i = $312;
 $57 = $309;
 $313 = $57;
 $56 = $313;
 $314 = $56;
 HEAP32[$314>>2] = 0;
 $315 = $__t$i$i$i;
 $61 = $80;
 $316 = $61;
 $317 = HEAP32[$316>>2]|0;
 $64 = $317;
 $318 = $64;
 $63 = $318;
 $319 = $63;
 $62 = $319;
 $320 = $62;
 $321 = (($320) + 4|0);
 $65 = $321;
 $322 = $65;
 ;HEAP32[$79+0>>2]=HEAP32[$322+0>>2]|0;HEAP32[$79+4>>2]=HEAP32[$322+4>>2]|0;
 ;HEAP8[$76+0>>0]=HEAP8[$79+0>>0]|0;HEAP8[$76+1>>0]=HEAP8[$79+1>>0]|0;HEAP8[$76+2>>0]=HEAP8[$79+2>>0]|0;HEAP8[$76+3>>0]=HEAP8[$79+3>>0]|0;HEAP8[$76+4>>0]=HEAP8[$79+4>>0]|0;HEAP8[$76+5>>0]=HEAP8[$79+5>>0]|0;HEAP8[$76+6>>0]=HEAP8[$79+6>>0]|0;HEAP8[$76+7>>0]=HEAP8[$79+7>>0]|0;
 $73 = $306;
 HEAP32[$74>>2] = $315;
 $323 = $73;
 $72 = $74;
 $324 = $72;
 $325 = HEAP32[$324>>2]|0;
 $66 = $76;
 $326 = $66;
 ;HEAP32[$75+0>>2]=HEAP32[$326+0>>2]|0;HEAP32[$75+4>>2]=HEAP32[$326+4>>2]|0;
 ;HEAP8[$71+0>>0]=HEAP8[$75+0>>0]|0;HEAP8[$71+1>>0]=HEAP8[$75+1>>0]|0;HEAP8[$71+2>>0]=HEAP8[$75+2>>0]|0;HEAP8[$71+3>>0]=HEAP8[$75+3>>0]|0;HEAP8[$71+4>>0]=HEAP8[$75+4>>0]|0;HEAP8[$71+5>>0]=HEAP8[$75+5>>0]|0;HEAP8[$71+6>>0]=HEAP8[$75+6>>0]|0;HEAP8[$71+7>>0]=HEAP8[$75+7>>0]|0;
 $69 = $323;
 HEAP32[$70>>2] = $325;
 $327 = $69;
 $68 = $70;
 $328 = $68;
 $329 = HEAP32[$328>>2]|0;
 HEAP32[$327>>2] = $329;
 $330 = (($327) + 4|0);
 $67 = $71;
 $331 = $67;
 ;HEAP32[$330+0>>2]=HEAP32[$331+0>>2]|0;HEAP32[$330+4>>2]=HEAP32[$331+4>>2]|0;
 $55 = $85;
 $332 = $55;
 $53 = $84;
 $54 = $332;
 $333 = $53;
 $334 = $54;
 HEAP32[$333>>2] = $334;
 ;HEAP8[$27+0>>0]=HEAP8[$84+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$84+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$84+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$84+3>>0]|0;
 $25 = $256;
 $335 = $25;
 $24 = $27;
 $336 = $24;
 $337 = HEAP32[$336>>2]|0;
 $7 = $337;
 $338 = $7;
 $6 = $338;
 $339 = $6;
 $5 = $339;
 $340 = $5;
 $341 = HEAP32[$340>>2]|0;
 $__t$i$i9$i = $341;
 $4 = $338;
 $342 = $4;
 $3 = $342;
 $343 = $3;
 HEAP32[$343>>2] = 0;
 $344 = $__t$i$i9$i;
 $8 = $27;
 $345 = $8;
 $346 = HEAP32[$345>>2]|0;
 $11 = $346;
 $347 = $11;
 $10 = $347;
 $348 = $10;
 $9 = $348;
 $349 = $9;
 $350 = (($349) + 4|0);
 $12 = $350;
 $351 = $12;
 ;HEAP32[$26+0>>2]=HEAP32[$351+0>>2]|0;HEAP32[$26+4>>2]=HEAP32[$351+4>>2]|0;
 ;HEAP8[$23+0>>0]=HEAP8[$26+0>>0]|0;HEAP8[$23+1>>0]=HEAP8[$26+1>>0]|0;HEAP8[$23+2>>0]=HEAP8[$26+2>>0]|0;HEAP8[$23+3>>0]=HEAP8[$26+3>>0]|0;HEAP8[$23+4>>0]=HEAP8[$26+4>>0]|0;HEAP8[$23+5>>0]=HEAP8[$26+5>>0]|0;HEAP8[$23+6>>0]=HEAP8[$26+6>>0]|0;HEAP8[$23+7>>0]=HEAP8[$26+7>>0]|0;
 $20 = $335;
 HEAP32[$21>>2] = $344;
 $352 = $20;
 $19 = $21;
 $353 = $19;
 $354 = HEAP32[$353>>2]|0;
 $13 = $23;
 $355 = $13;
 ;HEAP32[$22+0>>2]=HEAP32[$355+0>>2]|0;HEAP32[$22+4>>2]=HEAP32[$355+4>>2]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$22+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$22+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$22+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$22+3>>0]|0;HEAP8[$18+4>>0]=HEAP8[$22+4>>0]|0;HEAP8[$18+5>>0]=HEAP8[$22+5>>0]|0;HEAP8[$18+6>>0]=HEAP8[$22+6>>0]|0;HEAP8[$18+7>>0]=HEAP8[$22+7>>0]|0;
 $16 = $352;
 HEAP32[$17>>2] = $354;
 $356 = $16;
 $15 = $17;
 $357 = $15;
 $358 = HEAP32[$357>>2]|0;
 HEAP32[$356>>2] = $358;
 $359 = (($356) + 4|0);
 $14 = $18;
 $360 = $14;
 ;HEAP32[$359+0>>2]=HEAP32[$360+0>>2]|0;HEAP32[$359+4>>2]=HEAP32[$360+4>>2]|0;
 $52 = $85;
 $361 = $52;
 $50 = $361;
 $51 = 0;
 $362 = $50;
 $49 = $362;
 $363 = $49;
 $48 = $363;
 $364 = $48;
 $365 = HEAP32[$364>>2]|0;
 $__tmp$i$i2$i = $365;
 $366 = $51;
 $31 = $362;
 $367 = $31;
 $30 = $367;
 $368 = $30;
 HEAP32[$368>>2] = $366;
 $369 = $__tmp$i$i2$i;
 $370 = ($369|0)!=(0|0);
 if ($370) {
  $29 = $362;
  $371 = $29;
  $28 = $371;
  $372 = $28;
  $373 = (($372) + 4|0);
  $374 = $__tmp$i$i2$i;
  $46 = $373;
  $47 = $374;
  $375 = $46;
  $376 = (($375) + 4|0);
  $377 = HEAP8[$376>>0]|0;
  $378 = $377&1;
  if ($378) {
   $379 = HEAP32[$375>>2]|0;
   $380 = $47;
   $381 = (($380) + 16|0);
   $45 = $381;
   $382 = $45;
   $35 = $379;
   $36 = $382;
   $383 = $35;
   $384 = $36;
   ;HEAP8[$34+0>>0]=HEAP8[$37+0>>0]|0;
   $32 = $383;
   $33 = $384;
  }
  $385 = $47;
  $386 = ($385|0)!=(0|0);
  if ($386) {
   $387 = HEAP32[$375>>2]|0;
   $388 = $47;
   $42 = $387;
   $43 = $388;
   $44 = 1;
   $389 = $42;
   $390 = $43;
   $391 = $44;
   $39 = $389;
   $40 = $390;
   $41 = $391;
   $392 = $40;
   $38 = $392;
   $393 = $38;
   __ZdlPv($393);
  }
 }
 $89 = $256;
 $394 = $89;
 $87 = $255;
 $88 = $394;
 $395 = $87;
 $396 = $88;
 HEAP32[$395>>2] = $396;
 ;HEAP8[$114+0>>0]=HEAP8[$255+0>>0]|0;HEAP8[$114+1>>0]=HEAP8[$255+1>>0]|0;HEAP8[$114+2>>0]=HEAP8[$255+2>>0]|0;HEAP8[$114+3>>0]=HEAP8[$255+3>>0]|0;
 $112 = $agg$result;
 $397 = $112;
 $111 = $114;
 $398 = $111;
 $399 = HEAP32[$398>>2]|0;
 $94 = $399;
 $400 = $94;
 $93 = $400;
 $401 = $93;
 $92 = $401;
 $402 = $92;
 $403 = HEAP32[$402>>2]|0;
 $__t$i$i = $403;
 $91 = $400;
 $404 = $91;
 $90 = $404;
 $405 = $90;
 HEAP32[$405>>2] = 0;
 $406 = $__t$i$i;
 $95 = $114;
 $407 = $95;
 $408 = HEAP32[$407>>2]|0;
 $98 = $408;
 $409 = $98;
 $97 = $409;
 $410 = $97;
 $96 = $410;
 $411 = $96;
 $412 = (($411) + 4|0);
 $99 = $412;
 $413 = $99;
 ;HEAP32[$113+0>>2]=HEAP32[$413+0>>2]|0;HEAP32[$113+4>>2]=HEAP32[$413+4>>2]|0;
 ;HEAP8[$110+0>>0]=HEAP8[$113+0>>0]|0;HEAP8[$110+1>>0]=HEAP8[$113+1>>0]|0;HEAP8[$110+2>>0]=HEAP8[$113+2>>0]|0;HEAP8[$110+3>>0]=HEAP8[$113+3>>0]|0;HEAP8[$110+4>>0]=HEAP8[$113+4>>0]|0;HEAP8[$110+5>>0]=HEAP8[$113+5>>0]|0;HEAP8[$110+6>>0]=HEAP8[$113+6>>0]|0;HEAP8[$110+7>>0]=HEAP8[$113+7>>0]|0;
 $107 = $397;
 HEAP32[$108>>2] = $406;
 $414 = $107;
 $106 = $108;
 $415 = $106;
 $416 = HEAP32[$415>>2]|0;
 $100 = $110;
 $417 = $100;
 ;HEAP32[$109+0>>2]=HEAP32[$417+0>>2]|0;HEAP32[$109+4>>2]=HEAP32[$417+4>>2]|0;
 ;HEAP8[$105+0>>0]=HEAP8[$109+0>>0]|0;HEAP8[$105+1>>0]=HEAP8[$109+1>>0]|0;HEAP8[$105+2>>0]=HEAP8[$109+2>>0]|0;HEAP8[$105+3>>0]=HEAP8[$109+3>>0]|0;HEAP8[$105+4>>0]=HEAP8[$109+4>>0]|0;HEAP8[$105+5>>0]=HEAP8[$109+5>>0]|0;HEAP8[$105+6>>0]=HEAP8[$109+6>>0]|0;HEAP8[$105+7>>0]=HEAP8[$109+7>>0]|0;
 $103 = $414;
 HEAP32[$104>>2] = $416;
 $418 = $103;
 $102 = $104;
 $419 = $102;
 $420 = HEAP32[$419>>2]|0;
 HEAP32[$418>>2] = $420;
 $421 = (($418) + 4|0);
 $101 = $105;
 $422 = $101;
 ;HEAP32[$421+0>>2]=HEAP32[$422+0>>2]|0;HEAP32[$421+4>>2]=HEAP32[$422+4>>2]|0;
 $142 = $256;
 $423 = $142;
 $140 = $423;
 $141 = 0;
 $424 = $140;
 $139 = $424;
 $425 = $139;
 $138 = $425;
 $426 = $138;
 $427 = HEAP32[$426>>2]|0;
 $__tmp$i$i12 = $427;
 $428 = $141;
 $121 = $424;
 $429 = $121;
 $120 = $429;
 $430 = $120;
 HEAP32[$430>>2] = $428;
 $431 = $__tmp$i$i12;
 $432 = ($431|0)!=(0|0);
 if ($432) {
  $119 = $424;
  $433 = $119;
  $118 = $433;
  $434 = $118;
  $435 = (($434) + 4|0);
  $436 = $__tmp$i$i12;
  $136 = $435;
  $137 = $436;
  $437 = $136;
  $438 = (($437) + 4|0);
  $439 = HEAP8[$438>>0]|0;
  $440 = $439&1;
  if ($440) {
   $441 = HEAP32[$437>>2]|0;
   $442 = $137;
   $443 = (($442) + 16|0);
   $135 = $443;
   $444 = $135;
   $125 = $441;
   $126 = $444;
   $445 = $125;
   $446 = $126;
   ;HEAP8[$124+0>>0]=HEAP8[$127+0>>0]|0;
   $122 = $445;
   $123 = $446;
  }
  $447 = $137;
  $448 = ($447|0)!=(0|0);
  if ($448) {
   $449 = HEAP32[$437>>2]|0;
   $450 = $137;
   $132 = $449;
   $133 = $450;
   $134 = 1;
   $451 = $132;
   $452 = $133;
   $453 = $134;
   $129 = $451;
   $130 = $452;
   $131 = $453;
   $454 = $130;
   $128 = $454;
   $455 = $128;
   __ZdlPv($455);
  }
 }
 $257 = 1;
 $168 = $__h;
 $456 = $168;
 $166 = $456;
 $167 = 0;
 $457 = $166;
 $165 = $457;
 $458 = $165;
 $164 = $458;
 $459 = $164;
 $460 = HEAP32[$459>>2]|0;
 $__tmp$i$i7 = $460;
 $461 = $167;
 $147 = $457;
 $462 = $147;
 $146 = $462;
 $463 = $146;
 HEAP32[$463>>2] = $461;
 $464 = $__tmp$i$i7;
 $465 = ($464|0)!=(0|0);
 if (!($465)) {
  STACKTOP = sp;return;
 }
 $145 = $457;
 $466 = $145;
 $144 = $466;
 $467 = $144;
 $468 = (($467) + 4|0);
 $469 = $__tmp$i$i7;
 $162 = $468;
 $163 = $469;
 $470 = $162;
 $471 = (($470) + 4|0);
 $472 = HEAP8[$471>>0]|0;
 $473 = $472&1;
 if ($473) {
  $474 = HEAP32[$470>>2]|0;
  $475 = $163;
  $476 = (($475) + 16|0);
  $161 = $476;
  $477 = $161;
  $151 = $474;
  $152 = $477;
  $478 = $151;
  $479 = $152;
  ;HEAP8[$150+0>>0]=HEAP8[$153+0>>0]|0;
  $148 = $478;
  $149 = $479;
 }
 $480 = $163;
 $481 = ($480|0)!=(0|0);
 if ($481) {
  $482 = HEAP32[$470>>2]|0;
  $483 = $163;
  $158 = $482;
  $159 = $483;
  $160 = 1;
  $484 = $158;
  $485 = $159;
  $486 = $160;
  $155 = $484;
  $156 = $485;
  $157 = $486;
  $487 = $156;
  $154 = $487;
  $488 = $154;
  __ZdlPv($488);
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSD_SD_($this,$__parent,$__child,$__new_node) {
 $this = $this|0;
 $__parent = $__parent|0;
 $__child = $__child|0;
 $__new_node = $__new_node|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 32|0;
 $7 = sp + 72|0;
 $22 = sp + 4|0;
 $27 = sp + 28|0;
 $28 = sp + 92|0;
 $29 = sp + 36|0;
 $23 = $this;
 $24 = $__parent;
 $25 = $__child;
 $26 = $__new_node;
 $30 = $23;
 $20 = $22;
 $21 = -1;
 $31 = $20;
 HEAP32[$31>>2] = 0;
 $32 = HEAP32[$22>>2]|0;
 HEAP32[$27>>2] = $32;
 $16 = $27;
 $33 = $26;
 HEAP32[$33>>2] = 0;
 $0 = $2;
 $1 = -1;
 $34 = $0;
 HEAP32[$34>>2] = 0;
 $35 = HEAP32[$2>>2]|0;
 HEAP32[$28>>2] = $35;
 $3 = $28;
 $36 = $26;
 $37 = (($36) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = $24;
 $39 = $26;
 $40 = (($39) + 8|0);
 HEAP32[$40>>2] = $38;
 $41 = $26;
 $42 = $25;
 HEAP32[$42>>2] = $41;
 $4 = $30;
 $43 = $4;
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$44>>2]|0;
 $5 = $7;
 $6 = -1;
 $46 = $5;
 HEAP32[$46>>2] = 0;
 $47 = HEAP32[$7>>2]|0;
 HEAP32[$29>>2] = $47;
 $8 = $29;
 $48 = ($45|0)!=(0|0);
 if ($48) {
  $9 = $30;
  $49 = $9;
  $50 = HEAP32[$49>>2]|0;
  $51 = HEAP32[$50>>2]|0;
  $10 = $30;
  $52 = $10;
  HEAP32[$52>>2] = $51;
 }
 $15 = $30;
 $53 = $15;
 $54 = (($53) + 4|0);
 $14 = $54;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $11 = $57;
 $58 = $11;
 $59 = HEAP32[$58>>2]|0;
 $60 = $25;
 $61 = HEAP32[$60>>2]|0;
 __ZNSt3__127__tree_balance_after_insertIPNS_16__tree_node_baseIPvEEEEvT_S5_($59,$61);
 $19 = $30;
 $62 = $19;
 $63 = (($62) + 8|0);
 $18 = $63;
 $64 = $18;
 $17 = $64;
 $65 = $17;
 $66 = HEAP32[$65>>2]|0;
 $67 = (($66) + 1)|0;
 HEAP32[$65>>2] = $67;
 STACKTOP = sp;return;
}
function __ZNSt3__113__rotate_leftINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($agg$result,$__first,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $__n$i$i = 0, $__tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 56|0;
 $8 = sp + 176|0;
 $11 = sp + 16|0;
 $13 = sp + 24|0;
 $15 = sp;
 $22 = sp + 8|0;
 $23 = sp + 104|0;
 $24 = sp + 108|0;
 $25 = sp + 112|0;
 $26 = sp + 48|0;
 $27 = sp + 40|0;
 $28 = sp + 32|0;
 $__tmp = sp + 160|0;
 $32 = sp + 64|0;
 $33 = sp + 128|0;
 $34 = sp + 140|0;
 $35 = sp + 144|0;
 $31 = $__first;
 $36 = $31;
 $37 = HEAP32[$36>>2]|0;
 $0 = $37;
 $38 = $0;
 $39 = HEAP32[$38>>2]|0;
 HEAP32[$__tmp>>2] = $39;
 ;HEAP32[$33+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP8[$11+0>>0]=HEAP8[$33+0>>0]|0;HEAP8[$11+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$11+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$11+3>>0]=HEAP8[$33+3>>0]|0;
 $9 = 1;
 $10 = 0;
 $40 = $9;
 $6 = $11;
 $7 = $40;
 $41 = $6;
 $42 = $7;
 ;HEAP8[$5+0>>0]=HEAP8[$8+0>>0]|0;
 $3 = $41;
 $4 = $42;
 $43 = $3;
 $44 = $4;
 $1 = $43;
 $2 = $44;
 $45 = $1;
 $46 = $2;
 $47 = HEAP32[$45>>2]|0;
 $48 = (($47) + ($46<<2)|0);
 HEAP32[$45>>2] = $48;
 ;HEAP32[$32+0>>2]=HEAP32[$11+0>>2]|0;
 ;HEAP32[$34+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP32[$35+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP8[$28+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$28+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$28+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$28+3>>0]=HEAP8[$32+3>>0]|0;
 ;HEAP8[$27+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$27+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$27+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$27+3>>0]=HEAP8[$34+3>>0]|0;
 ;HEAP8[$26+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$26+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$26+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$26+3>>0]=HEAP8[$35+3>>0]|0;
 ;HEAP32[$23+0>>2]=HEAP32[$28+0>>2]|0;
 ;HEAP8[$22+0>>0]=HEAP8[$23+0>>0]|0;HEAP8[$22+1>>0]=HEAP8[$23+1>>0]|0;HEAP8[$22+2>>0]=HEAP8[$23+2>>0]|0;HEAP8[$22+3>>0]=HEAP8[$23+3>>0]|0;
 $21 = $22;
 $49 = $21;
 $50 = HEAP32[$49>>2]|0;
 ;HEAP32[$24+0>>2]=HEAP32[$27+0>>2]|0;
 ;HEAP8[$13+0>>0]=HEAP8[$24+0>>0]|0;HEAP8[$13+1>>0]=HEAP8[$24+1>>0]|0;HEAP8[$13+2>>0]=HEAP8[$24+2>>0]|0;HEAP8[$13+3>>0]=HEAP8[$24+3>>0]|0;
 $12 = $13;
 $51 = $12;
 $52 = HEAP32[$51>>2]|0;
 ;HEAP32[$25+0>>2]=HEAP32[$26+0>>2]|0;
 ;HEAP8[$15+0>>0]=HEAP8[$25+0>>0]|0;HEAP8[$15+1>>0]=HEAP8[$25+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[$25+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[$25+3>>0]|0;
 $14 = $15;
 $53 = $14;
 $54 = HEAP32[$53>>2]|0;
 $16 = $50;
 $17 = $52;
 $18 = $54;
 $55 = $17;
 $56 = $16;
 $57 = $55;
 $58 = $56;
 $59 = (($57) - ($58))|0;
 $60 = (($59|0) / 4)&-1;
 $__n$i$i = $60;
 $61 = $18;
 $62 = $16;
 $63 = $__n$i$i;
 $64 = $63<<2;
 _memmove(($61|0),($62|0),($64|0))|0;
 $65 = $18;
 $66 = $__n$i$i;
 $67 = (($65) + ($66<<2)|0);
 $19 = $agg$result;
 $20 = $67;
 $68 = $19;
 $69 = $20;
 HEAP32[$68>>2] = $69;
 $29 = $__tmp;
 $70 = $29;
 $71 = HEAP32[$70>>2]|0;
 $30 = $agg$result;
 $72 = $30;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$73>>2] = $71;
 STACKTOP = sp;return;
}
function __ZNSt3__114__rotate_rightINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_($agg$result,$__first,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $__lm1 = 0, $__n$i$i = 0, $__tmp = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 56|0;
 $5 = sp + 48|0;
 $12 = sp + 16|0;
 $13 = sp + 72|0;
 $14 = sp + 128|0;
 $15 = sp + 76|0;
 $16 = sp + 24|0;
 $17 = sp;
 $18 = sp + 8|0;
 $25 = sp + 40|0;
 $28 = sp + 180|0;
 $31 = sp + 32|0;
 $__lm1 = sp + 136|0;
 $32 = sp + 88|0;
 $__tmp = sp + 144|0;
 $33 = sp + 172|0;
 $34 = sp + 84|0;
 $35 = sp + 176|0;
 ;HEAP32[$32+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP8[$31+0>>0]=HEAP8[$32+0>>0]|0;HEAP8[$31+1>>0]=HEAP8[$32+1>>0]|0;HEAP8[$31+2>>0]=HEAP8[$32+2>>0]|0;HEAP8[$31+3>>0]=HEAP8[$32+3>>0]|0;
 $29 = 1;
 $30 = 0;
 $36 = $29;
 $37 = (0 - ($36))|0;
 $26 = $31;
 $27 = $37;
 $38 = $26;
 $39 = $27;
 ;HEAP8[$25+0>>0]=HEAP8[$28+0>>0]|0;
 $23 = $38;
 $24 = $39;
 $40 = $23;
 $41 = $24;
 $21 = $40;
 $22 = $41;
 $42 = $21;
 $43 = $22;
 $44 = HEAP32[$42>>2]|0;
 $45 = (($44) + ($43<<2)|0);
 HEAP32[$42>>2] = $45;
 ;HEAP32[$__lm1+0>>2]=HEAP32[$31+0>>2]|0;
 $0 = $__lm1;
 $46 = $0;
 $47 = HEAP32[$46>>2]|0;
 $1 = $47;
 $48 = $1;
 $49 = HEAP32[$48>>2]|0;
 HEAP32[$__tmp>>2] = $49;
 ;HEAP32[$33+0>>2]=HEAP32[$__first+0>>2]|0;
 ;HEAP32[$34+0>>2]=HEAP32[$__lm1+0>>2]|0;
 ;HEAP32[$35+0>>2]=HEAP32[$__last+0>>2]|0;
 ;HEAP8[$18+0>>0]=HEAP8[$33+0>>0]|0;HEAP8[$18+1>>0]=HEAP8[$33+1>>0]|0;HEAP8[$18+2>>0]=HEAP8[$33+2>>0]|0;HEAP8[$18+3>>0]=HEAP8[$33+3>>0]|0;
 ;HEAP8[$17+0>>0]=HEAP8[$34+0>>0]|0;HEAP8[$17+1>>0]=HEAP8[$34+1>>0]|0;HEAP8[$17+2>>0]=HEAP8[$34+2>>0]|0;HEAP8[$17+3>>0]=HEAP8[$34+3>>0]|0;
 ;HEAP8[$16+0>>0]=HEAP8[$35+0>>0]|0;HEAP8[$16+1>>0]=HEAP8[$35+1>>0]|0;HEAP8[$16+2>>0]=HEAP8[$35+2>>0]|0;HEAP8[$16+3>>0]=HEAP8[$35+3>>0]|0;
 ;HEAP32[$13+0>>2]=HEAP32[$18+0>>2]|0;
 ;HEAP8[$12+0>>0]=HEAP8[$13+0>>0]|0;HEAP8[$12+1>>0]=HEAP8[$13+1>>0]|0;HEAP8[$12+2>>0]=HEAP8[$13+2>>0]|0;HEAP8[$12+3>>0]=HEAP8[$13+3>>0]|0;
 $11 = $12;
 $50 = $11;
 $51 = HEAP32[$50>>2]|0;
 ;HEAP32[$14+0>>2]=HEAP32[$17+0>>2]|0;
 ;HEAP8[$3+0>>0]=HEAP8[$14+0>>0]|0;HEAP8[$3+1>>0]=HEAP8[$14+1>>0]|0;HEAP8[$3+2>>0]=HEAP8[$14+2>>0]|0;HEAP8[$3+3>>0]=HEAP8[$14+3>>0]|0;
 $2 = $3;
 $52 = $2;
 $53 = HEAP32[$52>>2]|0;
 ;HEAP32[$15+0>>2]=HEAP32[$16+0>>2]|0;
 ;HEAP8[$5+0>>0]=HEAP8[$15+0>>0]|0;HEAP8[$5+1>>0]=HEAP8[$15+1>>0]|0;HEAP8[$5+2>>0]=HEAP8[$15+2>>0]|0;HEAP8[$5+3>>0]=HEAP8[$15+3>>0]|0;
 $4 = $5;
 $54 = $4;
 $55 = HEAP32[$54>>2]|0;
 $6 = $51;
 $7 = $53;
 $8 = $55;
 $56 = $7;
 $57 = $6;
 $58 = $56;
 $59 = $57;
 $60 = (($58) - ($59))|0;
 $61 = (($60|0) / 4)&-1;
 $__n$i$i = $61;
 $62 = $__n$i$i;
 $63 = $8;
 $64 = (0 - ($62))|0;
 $65 = (($63) + ($64<<2)|0);
 $8 = $65;
 $66 = $8;
 $67 = $6;
 $68 = $__n$i$i;
 $69 = $68<<2;
 _memmove(($66|0),($67|0),($69|0))|0;
 $70 = $8;
 $9 = $agg$result;
 $10 = $70;
 $71 = $9;
 $72 = $10;
 HEAP32[$71>>2] = $72;
 $19 = $__tmp;
 $73 = $19;
 $74 = HEAP32[$73>>2]|0;
 $20 = $__first;
 $75 = $20;
 $76 = HEAP32[$75>>2]|0;
 HEAP32[$76>>2] = $74;
 STACKTOP = sp;return;
}
function __ZNSt3__112__rotate_gcdINS_11__wrap_iterIPP8MyVertexEEEET_S6_S6_S6_($agg$result,$__first,$__middle,$__last) {
 $agg$result = $agg$result|0;
 $__first = $__first|0;
 $__middle = $__middle|0;
 $__last = $__last|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__d = 0, $__g = 0, $__m1 = 0, $__m2 = 0, $__p = 0, $__p1 = 0, $__p2 = 0, $__t = 0, $__t$i = 0, $__t$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i$i = sp + 36|0;
 $19 = sp + 8|0;
 $20 = sp;
 $21 = sp + 16|0;
 $70 = sp + 292|0;
 $71 = sp + 24|0;
 $72 = sp + 300|0;
 $73 = sp + 136|0;
 $__p = sp + 284|0;
 $__t = sp + 140|0;
 $__p1 = sp + 316|0;
 $__p2 = sp + 144|0;
 $74 = sp + 132|0;
 $68 = $__middle;
 $69 = $__first;
 $75 = $68;
 $67 = $75;
 $76 = $67;
 $77 = HEAP32[$76>>2]|0;
 $78 = $69;
 $66 = $78;
 $79 = $66;
 $80 = HEAP32[$79>>2]|0;
 $81 = $77;
 $82 = $80;
 $83 = (($81) - ($82))|0;
 $84 = (($83|0) / 4)&-1;
 $__m1 = $84;
 $2 = $__last;
 $3 = $__middle;
 $85 = $2;
 $1 = $85;
 $86 = $1;
 $87 = HEAP32[$86>>2]|0;
 $88 = $3;
 $0 = $88;
 $89 = $0;
 $90 = HEAP32[$89>>2]|0;
 $91 = $87;
 $92 = $90;
 $93 = (($91) - ($92))|0;
 $94 = (($93|0) / 4)&-1;
 $__m2 = $94;
 $95 = $__m1;
 $96 = $__m2;
 $97 = ($95|0)==($96|0);
 if ($97) {
  ;HEAP32[$70+0>>2]=HEAP32[$__first+0>>2]|0;
  ;HEAP32[$71+0>>2]=HEAP32[$__middle+0>>2]|0;
  ;HEAP32[$72+0>>2]=HEAP32[$__middle+0>>2]|0;
  ;HEAP8[$21+0>>0]=HEAP8[$70+0>>0]|0;HEAP8[$21+1>>0]=HEAP8[$70+1>>0]|0;HEAP8[$21+2>>0]=HEAP8[$70+2>>0]|0;HEAP8[$21+3>>0]=HEAP8[$70+3>>0]|0;
  ;HEAP8[$20+0>>0]=HEAP8[$71+0>>0]|0;HEAP8[$20+1>>0]=HEAP8[$71+1>>0]|0;HEAP8[$20+2>>0]=HEAP8[$71+2>>0]|0;HEAP8[$20+3>>0]=HEAP8[$71+3>>0]|0;
  ;HEAP8[$19+0>>0]=HEAP8[$72+0>>0]|0;HEAP8[$19+1>>0]=HEAP8[$72+1>>0]|0;HEAP8[$19+2>>0]=HEAP8[$72+2>>0]|0;HEAP8[$19+3>>0]=HEAP8[$72+3>>0]|0;
  while(1) {
   $17 = $21;
   $18 = $20;
   $98 = $17;
   $99 = $18;
   $15 = $98;
   $16 = $99;
   $100 = $15;
   $14 = $100;
   $101 = $14;
   $102 = HEAP32[$101>>2]|0;
   $103 = $16;
   $13 = $103;
   $104 = $13;
   $105 = HEAP32[$104>>2]|0;
   $106 = ($102|0)==($105|0);
   $107 = $106 ^ 1;
   if (!($107)) {
    break;
   }
   $4 = $21;
   $108 = $4;
   $109 = HEAP32[$108>>2]|0;
   $5 = $19;
   $110 = $5;
   $111 = HEAP32[$110>>2]|0;
   $9 = $109;
   $10 = $111;
   $112 = $9;
   $8 = $112;
   $113 = $8;
   $114 = HEAP32[$113>>2]|0;
   HEAP32[$__t$i$i>>2] = $114;
   $115 = $10;
   $6 = $115;
   $116 = $6;
   $117 = HEAP32[$116>>2]|0;
   $118 = $9;
   HEAP32[$118>>2] = $117;
   $7 = $__t$i$i;
   $119 = $7;
   $120 = HEAP32[$119>>2]|0;
   $121 = $10;
   HEAP32[$121>>2] = $120;
   $11 = $21;
   $122 = $11;
   $123 = HEAP32[$122>>2]|0;
   $124 = (($123) + 4|0);
   HEAP32[$122>>2] = $124;
   $12 = $19;
   $125 = $12;
   $126 = HEAP32[$125>>2]|0;
   $127 = (($126) + 4|0);
   HEAP32[$125>>2] = $127;
  }
  ;HEAP32[$73+0>>2]=HEAP32[$19+0>>2]|0;
  ;HEAP32[$agg$result+0>>2]=HEAP32[$__middle+0>>2]|0;
  STACKTOP = sp;return;
 }
 $128 = $__m1;
 $129 = $__m2;
 $22 = $128;
 $23 = $129;
 while(1) {
  $130 = $22;
  $131 = $23;
  $132 = (($130|0) % ($131|0))&-1;
  $__t$i = $132;
  $133 = $23;
  $22 = $133;
  $134 = $__t$i;
  $23 = $134;
  $135 = $23;
  $136 = ($135|0)!=(0);
  if (!($136)) {
   break;
  }
 }
 $137 = $22;
 $__g = $137;
 $138 = $__g;
 $26 = $__first;
 $27 = $138;
 $139 = $26;
 ;HEAP32[$__p+0>>2]=HEAP32[$139+0>>2]|0;
 $140 = $27;
 $24 = $__p;
 $25 = $140;
 $141 = $24;
 $142 = $25;
 $143 = HEAP32[$141>>2]|0;
 $144 = (($143) + ($142<<2)|0);
 HEAP32[$141>>2] = $144;
 while(1) {
  $32 = $__p;
  $33 = $__first;
  $145 = $32;
  $146 = $33;
  $30 = $145;
  $31 = $146;
  $147 = $30;
  $29 = $147;
  $148 = $29;
  $149 = HEAP32[$148>>2]|0;
  $150 = $31;
  $28 = $150;
  $151 = $28;
  $152 = HEAP32[$151>>2]|0;
  $153 = ($149|0)==($152|0);
  $154 = $153 ^ 1;
  if (!($154)) {
   break;
  }
  $34 = $__p;
  $155 = $34;
  $156 = HEAP32[$155>>2]|0;
  $157 = (($156) + -4|0);
  HEAP32[$155>>2] = $157;
  $35 = $155;
  $158 = $35;
  $159 = HEAP32[$158>>2]|0;
  $36 = $159;
  $160 = $36;
  $161 = HEAP32[$160>>2]|0;
  HEAP32[$__t>>2] = $161;
  ;HEAP32[$__p1+0>>2]=HEAP32[$__p+0>>2]|0;
  $162 = $__m1;
  $39 = $__p1;
  $40 = $162;
  $163 = $39;
  ;HEAP32[$__p2+0>>2]=HEAP32[$163+0>>2]|0;
  $164 = $40;
  $37 = $__p2;
  $38 = $164;
  $165 = $37;
  $166 = $38;
  $167 = HEAP32[$165>>2]|0;
  $168 = (($167) + ($166<<2)|0);
  HEAP32[$165>>2] = $168;
  while(1) {
   $41 = $__p2;
   $169 = $41;
   $170 = HEAP32[$169>>2]|0;
   $42 = $170;
   $171 = $42;
   $172 = HEAP32[$171>>2]|0;
   $43 = $__p1;
   $173 = $43;
   $174 = HEAP32[$173>>2]|0;
   HEAP32[$174>>2] = $172;
   ;HEAP32[$__p1+0>>2]=HEAP32[$__p2+0>>2]|0;
   $46 = $__last;
   $47 = $__p2;
   $175 = $46;
   $45 = $175;
   $176 = $45;
   $177 = HEAP32[$176>>2]|0;
   $178 = $47;
   $44 = $178;
   $179 = $44;
   $180 = HEAP32[$179>>2]|0;
   $181 = $177;
   $182 = $180;
   $183 = (($181) - ($182))|0;
   $184 = (($183|0) / 4)&-1;
   $__d = $184;
   $185 = $__m1;
   $186 = $__d;
   $187 = ($185|0)<($186|0);
   if ($187) {
    $188 = $__m1;
    $48 = $__p2;
    $49 = $188;
    $189 = $48;
    $190 = $49;
    $191 = HEAP32[$189>>2]|0;
    $192 = (($191) + ($190<<2)|0);
    HEAP32[$189>>2] = $192;
   } else {
    $193 = $__m1;
    $194 = $__d;
    $195 = (($193) - ($194))|0;
    $52 = $__first;
    $53 = $195;
    $196 = $52;
    ;HEAP32[$74+0>>2]=HEAP32[$196+0>>2]|0;
    $197 = $53;
    $50 = $74;
    $51 = $197;
    $198 = $50;
    $199 = $51;
    $200 = HEAP32[$198>>2]|0;
    $201 = (($200) + ($199<<2)|0);
    HEAP32[$198>>2] = $201;
    ;HEAP32[$__p2+0>>2]=HEAP32[$74+0>>2]|0;
   }
   $58 = $__p2;
   $59 = $__p;
   $202 = $58;
   $203 = $59;
   $56 = $202;
   $57 = $203;
   $204 = $56;
   $55 = $204;
   $205 = $55;
   $206 = HEAP32[$205>>2]|0;
   $207 = $57;
   $54 = $207;
   $208 = $54;
   $209 = HEAP32[$208>>2]|0;
   $210 = ($206|0)==($209|0);
   $211 = $210 ^ 1;
   if (!($211)) {
    break;
   }
  }
  $60 = $__t;
  $212 = $60;
  $213 = HEAP32[$212>>2]|0;
  $61 = $__p1;
  $214 = $61;
  $215 = HEAP32[$214>>2]|0;
  HEAP32[$215>>2] = $213;
 }
 $216 = $__m2;
 $64 = $__first;
 $65 = $216;
 $217 = $64;
 ;HEAP32[$agg$result+0>>2]=HEAP32[$217+0>>2]|0;
 $218 = $65;
 $62 = $agg$result;
 $63 = $218;
 $219 = $62;
 $220 = $63;
 $221 = HEAP32[$219>>2]|0;
 $222 = (($221) + ($220<<2)|0);
 HEAP32[$219>>2] = $222;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point3IfE4NormEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = +HEAPF32[$1>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 * $3;
 $5 = (($1) + 4|0);
 $6 = +HEAPF32[$5>>2];
 $7 = (($1) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $6 * $8;
 $10 = $4 + $9;
 $11 = (($1) + 8|0);
 $12 = +HEAPF32[$11>>2];
 $13 = (($1) + 8|0);
 $14 = +HEAPF32[$13>>2];
 $15 = $12 * $14;
 $16 = $10 + $15;
 $17 = (+__ZN3vcg4math4SqrtEf($16));
 STACKTOP = sp;return (+$17);
}
function __ZNK3vcg6Point3IfEmlERKS1_($this,$p) {
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0.0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0.0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = +HEAPF32[$2>>2];
 $4 = $1;
 $5 = +HEAPF32[$4>>2];
 $6 = $3 * $5;
 $7 = (($2) + 4|0);
 $8 = +HEAPF32[$7>>2];
 $9 = $1;
 $10 = (($9) + 4|0);
 $11 = +HEAPF32[$10>>2];
 $12 = $8 * $11;
 $13 = $6 + $12;
 $14 = (($2) + 8|0);
 $15 = +HEAPF32[$14>>2];
 $16 = $1;
 $17 = (($16) + 8|0);
 $18 = +HEAPF32[$17>>2];
 $19 = $15 * $18;
 $20 = $13 + $19;
 STACKTOP = sp;return (+$20);
}
function __ZNK3vcg6Point3IfEeoERKS1_($agg$result,$this,$p) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $p;
 $2 = $0;
 $3 = (($2) + 4|0);
 $4 = +HEAPF32[$3>>2];
 $5 = $1;
 $6 = (($5) + 8|0);
 $7 = +HEAPF32[$6>>2];
 $8 = $4 * $7;
 $9 = (($2) + 8|0);
 $10 = +HEAPF32[$9>>2];
 $11 = $1;
 $12 = (($11) + 4|0);
 $13 = +HEAPF32[$12>>2];
 $14 = $10 * $13;
 $15 = $8 - $14;
 $16 = (($2) + 8|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $1;
 $19 = +HEAPF32[$18>>2];
 $20 = $17 * $19;
 $21 = +HEAPF32[$2>>2];
 $22 = $1;
 $23 = (($22) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $21 * $24;
 $26 = $20 - $25;
 $27 = +HEAPF32[$2>>2];
 $28 = $1;
 $29 = (($28) + 4|0);
 $30 = +HEAPF32[$29>>2];
 $31 = $27 * $30;
 $32 = (($2) + 4|0);
 $33 = +HEAPF32[$32>>2];
 $34 = $1;
 $35 = +HEAPF32[$34>>2];
 $36 = $33 * $35;
 $37 = $31 - $36;
 __ZN3vcg6Point3IfEC2Efff($agg$result,$15,$26,$37);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE5clearEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp + 88|0;
 $27 = sp + 84|0;
 $24 = $this;
 $28 = $24;
 $23 = $28;
 $29 = $23;
 $22 = $29;
 $30 = $22;
 $31 = (($30) + 4|0);
 $21 = $31;
 $32 = $21;
 $20 = $32;
 $33 = $20;
 $19 = $33;
 $34 = $19;
 $18 = $34;
 $35 = $18;
 $36 = HEAP32[$35>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($28,$36);
 $2 = $28;
 $37 = $2;
 $38 = (($37) + 8|0);
 $1 = $38;
 $39 = $1;
 $0 = $39;
 $40 = $0;
 HEAP32[$40>>2] = 0;
 $7 = $28;
 $41 = $7;
 $42 = (($41) + 4|0);
 $6 = $42;
 $43 = $6;
 $5 = $43;
 $44 = $5;
 $4 = $44;
 $45 = $4;
 $3 = $45;
 $46 = $3;
 $8 = $28;
 $47 = $8;
 HEAP32[$47>>2] = $46;
 $9 = $11;
 $10 = -1;
 $48 = $9;
 HEAP32[$48>>2] = 0;
 $49 = HEAP32[$11>>2]|0;
 HEAP32[$27>>2] = $49;
 $12 = $27;
 $17 = $28;
 $50 = $17;
 $51 = (($50) + 4|0);
 $16 = $51;
 $52 = $16;
 $15 = $52;
 $53 = $15;
 $14 = $53;
 $54 = $14;
 $13 = $54;
 $55 = $13;
 HEAP32[$55>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($26,$35);
 $2 = $26;
 $36 = $2;
 $37 = (($36) + 4|0);
 $1 = $37;
 $38 = $1;
 $0 = $38;
 $39 = $0;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $3 = $42;
 $43 = $3;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $__na;
 $47 = $22;
 $14 = $46;
 $15 = $47;
 $16 = 1;
 $48 = $14;
 $49 = $15;
 $50 = $16;
 $11 = $48;
 $12 = $49;
 $13 = $50;
 $51 = $12;
 $10 = $51;
 $52 = $10;
 __ZdlPv($52);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE7destroyEPNS_11__tree_nodeIS4_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS6_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE5AllocERKi($this,$ns) {
 $this = $this|0;
 $ns = $ns|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $ns;
 $2 = $0;
 $3 = $1;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE5AllocERKi($2,$3);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE5AllocERKi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIiNS_9allocatorIiEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = (($18) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $26 = $25<<2;
  $3 = $26;
  $27 = $3;
  $28 = (__Znwj($27)|0);
  $29 = (($14) + 4|0);
  HEAP32[$29>>2] = $28;
  HEAP32[$14>>2] = $28;
  $30 = HEAP32[$14>>2]|0;
  $31 = $13;
  $32 = (($30) + ($31<<2)|0);
  $2 = $14;
  $33 = $2;
  $34 = (($33) + 8|0);
  $1 = $34;
  $35 = $1;
  $0 = $35;
  $36 = $0;
  HEAP32[$36>>2] = $32;
  __ZNKSt3__16vectorIiNS_9allocatorIiEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, $__annotator = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__annotator = sp + 36|0;
 $6 = $this;
 $7 = $__n;
 $8 = $6;
 $5 = $8;
 $9 = $5;
 $10 = (($9) + 8|0);
 $4 = $10;
 $11 = $4;
 $3 = $11;
 $12 = $3;
 $__a = $12;
 while(1) {
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator,$8,1);
  $13 = $__a;
  $14 = (($8) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $2 = $15;
  $16 = $2;
  $0 = $13;
  $1 = $16;
  $17 = $1;
  $18 = ($17|0)==(0|0);
  if (!($18)) {
   HEAP32[$17>>2] = 0;
  }
  $19 = (($8) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($20) + 4|0);
  HEAP32[$19>>2] = $21;
  $22 = $7;
  $23 = (($22) + -1)|0;
  $7 = $23;
  __ZNSt3__16vectorIiNS_9allocatorIiEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator);
  $24 = $7;
  $25 = ($24>>>0)>(0);
  if (!($25)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZN3vcg6Point4IfEC2Effff($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = +$nx;
 $ny = +$ny;
 $nz = +$nz;
 $nw = +$nw;
 var $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 HEAPF32[$5>>2] = $6;
 $7 = $2;
 $8 = (($5) + 4|0);
 HEAPF32[$8>>2] = $7;
 $9 = $3;
 $10 = (($5) + 8|0);
 HEAPF32[$10>>2] = $9;
 $11 = $4;
 $12 = (($5) + 12|0);
 HEAPF32[$12>>2] = $11;
 STACKTOP = sp;return;
}
function __ZNK3vcg6Point4IhEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1648|0),(1664|0),140,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg6Point4IhEC2Ehhhh($this,$nx,$ny,$nz,$nw) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 $nz = $nz|0;
 $nw = $nw|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $nz;
 $4 = $nw;
 $5 = $0;
 $6 = $1;
 HEAP8[$5>>0] = $6;
 $7 = $2;
 $8 = (($5) + 1|0);
 HEAP8[$8>>0] = $7;
 $9 = $3;
 $10 = (($5) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $4;
 $12 = (($5) + 3|0);
 HEAP8[$12>>0] = $11;
 STACKTOP = sp;return;
}
function __ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__len1 = 0, $__len2 = 0;
 var $__m1 = 0, $__m2 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $3;
  $2 = $15;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = $4;
  $2 = $24;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 $25 = $4;
 $26 = $__len2;
 $27 = (($26) - 1)|0;
 $28 = (0 - ($27))|0;
 $29 = (($25) + ($28)|0);
 $__s = $29;
 L9: while(1) {
  while(1) {
   $30 = $3;
   $31 = $__s;
   $32 = ($30|0)==($31|0);
   if ($32) {
    label = 8;
    break L9;
   }
   $34 = $7;
   $35 = $3;
   $36 = HEAP8[$35>>0]|0;
   $37 = $5;
   $38 = HEAP8[$37>>0]|0;
   $39 = (FUNCTION_TABLE_iii[$34 & 1023]($36,$38)|0);
   if ($39) {
    break;
   }
   $40 = $3;
   $41 = (($40) + 1|0);
   $3 = $41;
  }
  $42 = $3;
  $__m1 = $42;
  $43 = $5;
  $__m2 = $43;
  while(1) {
   $44 = $__m2;
   $45 = (($44) + 1|0);
   $__m2 = $45;
   $46 = $6;
   $47 = ($45|0)==($46|0);
   if ($47) {
    label = 14;
    break L9;
   }
   $49 = $__m1;
   $50 = (($49) + 1|0);
   $__m1 = $50;
   $51 = $7;
   $52 = $__m1;
   $53 = HEAP8[$52>>0]|0;
   $54 = $__m2;
   $55 = HEAP8[$54>>0]|0;
   $56 = (FUNCTION_TABLE_iii[$51 & 1023]($53,$55)|0);
   if (!($56)) {
    break;
   }
  }
  $57 = $3;
  $58 = (($57) + 1|0);
  $3 = $58;
 }
 if ((label|0) == 8) {
  $33 = $4;
  $2 = $33;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 else if ((label|0) == 14) {
  $48 = $3;
  $2 = $48;
  $59 = $2;
  STACKTOP = sp;return ($59|0);
 }
 return (0)|0;
}
function __ZNK3vcg6Point4IfEixEi($this,$i) {
 $this = $this|0;
 $i = $i|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $i;
 $2 = $0;
 $3 = $1;
 $4 = ($3|0)>=(0);
 if ($4) {
  $5 = $1;
  $6 = ($5|0)<(4);
  if ($6) {
   $7 = $1;
   $8 = (($2) + ($7<<2)|0);
   STACKTOP = sp;return ($8|0);
  }
 }
 ___assert_fail((1648|0),(1664|0),140,(1512|0));
 // unreachable;
 return (0)|0;
}
function __ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE1CEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 296|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE31__annotate_contiguous_containerEPKvS6_S6_S6_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9NormalAbsINS_6Point3IfEENS_8FaceBaseI11MyUsedTypesEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg14FaceTypeHolderI11MyUsedTypesE7DeallocEv($1);
 STACKTOP = sp;return;
}
function __ZN3vcg14FaceTypeHolderI11MyUsedTypesE7DeallocEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = (($25) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($33|0) / 12)&-1;
 $35 = (($22) + (($34*12)|0)|0);
 $6 = $16;
 $36 = $6;
 $37 = HEAP32[$36>>2]|0;
 $5 = $37;
 $38 = $5;
 $39 = $15;
 $40 = (($38) + (($39*12)|0)|0);
 $8 = $16;
 $41 = $8;
 $42 = HEAP32[$41>>2]|0;
 $7 = $42;
 $43 = $7;
 $9 = $16;
 $44 = $9;
 $45 = (($44) + 4|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = HEAP32[$44>>2]|0;
 $48 = $46;
 $49 = $47;
 $50 = (($48) - ($49))|0;
 $51 = (($50|0) / 12)&-1;
 $52 = (($43) + (($51*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($16,$19,$35,$40,$52);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_($__first1,$__last1,$__first2,$__last2,$__pred,$0,$1) {
 $__first1 = $__first1|0;
 $__last1 = $__last1|0;
 $__first2 = $__first2|0;
 $__last2 = $__last2|0;
 $__pred = $__pred|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__l1 = 0, $__l2 = 0, $__len1 = 0;
 var $__len2 = 0, $__m1 = 0, $__m2 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $__first1;
 $4 = $__last1;
 $5 = $__first2;
 $6 = $__last2;
 $7 = $__pred;
 $8 = $6;
 $9 = $5;
 $10 = $8;
 $11 = $9;
 $12 = (($10) - ($11))|0;
 $__len2 = $12;
 $13 = $__len2;
 $14 = ($13|0)==(0);
 if ($14) {
  $15 = $4;
  $2 = $15;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $16 = $4;
 $17 = $3;
 $18 = $16;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $__len1 = $20;
 $21 = $__len1;
 $22 = $__len2;
 $23 = ($21|0)<($22|0);
 if ($23) {
  $24 = $4;
  $2 = $24;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 $25 = $3;
 $26 = $__len2;
 $27 = (($26) - 1)|0;
 $28 = (($25) + ($27)|0);
 $__s = $28;
 $29 = $4;
 $__l1 = $29;
 $30 = $6;
 $__l2 = $30;
 $31 = $__l2;
 $32 = (($31) + -1|0);
 $__l2 = $32;
 L9: while(1) {
  while(1) {
   $33 = $__s;
   $34 = $__l1;
   $35 = ($33|0)==($34|0);
   if ($35) {
    label = 8;
    break L9;
   }
   $37 = $7;
   $38 = $__l1;
   $39 = (($38) + -1|0);
   $__l1 = $39;
   $40 = HEAP8[$39>>0]|0;
   $41 = $__l2;
   $42 = HEAP8[$41>>0]|0;
   $43 = (FUNCTION_TABLE_iii[$37 & 1023]($40,$42)|0);
   if ($43) {
    break;
   }
  }
  $44 = $__l1;
  $__m1 = $44;
  $45 = $__l2;
  $__m2 = $45;
  while(1) {
   $46 = $__m2;
   $47 = $5;
   $48 = ($46|0)==($47|0);
   if ($48) {
    label = 14;
    break L9;
   }
   $50 = $7;
   $51 = $__m1;
   $52 = (($51) + -1|0);
   $__m1 = $52;
   $53 = HEAP8[$52>>0]|0;
   $54 = $__m2;
   $55 = (($54) + -1|0);
   $__m2 = $55;
   $56 = HEAP8[$55>>0]|0;
   $57 = (FUNCTION_TABLE_iii[$50 & 1023]($53,$56)|0);
   if (!($57)) {
    break;
   }
  }
 }
 if ((label|0) == 8) {
  $36 = $4;
  $2 = $36;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 else if ((label|0) == 14) {
  $49 = $__m1;
  $2 = $49;
  $58 = $2;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_($__is,$__str,$__dlm) {
 $__is = $__is|0;
 $__str = $__str|0;
 $__dlm = $__dlm|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__ch = 0, $__err = 0, $__extr = 0, $__i = 0, $__m$i = 0, $__sen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $8 = sp + 225|0;
 $48 = sp + 226|0;
 $49 = sp + 227|0;
 $__sen = sp + 229|0;
 $51 = $__is;
 $52 = $__str;
 $53 = $__dlm;
 $56 = $51;
 __THREW__ = 0;
 invoke_viii(563,($__sen|0),($56|0),1);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 L1: do {
  if (!($58)) {
   $50 = $__sen;
   $59 = $50;
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&1;
   if ($61) {
    $62 = $52;
    $47 = $62;
    $63 = $47;
    $46 = $63;
    $41 = $63;
    $64 = $41;
    $40 = $64;
    $65 = $40;
    $39 = $65;
    $66 = $39;
    $67 = HEAP8[$66>>0]|0;
    $68 = $67&255;
    $69 = $68 & 1;
    $70 = ($69|0)!=(0);
    if ($70) {
     $29 = $63;
     $71 = $29;
     $28 = $71;
     $72 = $28;
     $27 = $72;
     $73 = $27;
     $74 = (($73) + 8|0);
     $75 = HEAP32[$74>>2]|0;
     HEAP8[$48>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($75,$48);
     $32 = $63;
     $33 = 0;
     $76 = $32;
     $77 = $33;
     $31 = $76;
     $78 = $31;
     $30 = $78;
     $79 = $30;
     $80 = (($79) + 4|0);
     HEAP32[$80>>2] = $77;
    } else {
     $38 = $63;
     $81 = $38;
     $37 = $81;
     $82 = $37;
     $36 = $82;
     $83 = $36;
     $84 = (($83) + 1|0);
     $35 = $84;
     $85 = $35;
     $34 = $85;
     $86 = $34;
     HEAP8[$49>>0] = 0;
     __ZNSt3__111char_traitsIcE6assignERcRKc($86,$49);
     $44 = $63;
     $45 = 0;
     $87 = $44;
     $88 = $45;
     $89 = $88 << 1;
     $90 = $89&255;
     $43 = $87;
     $91 = $43;
     $42 = $91;
     $92 = $42;
     HEAP8[$92>>0] = $90;
    }
    $__err = 0;
    $__extr = 0;
    while(1) {
     $93 = $51;
     $94 = HEAP32[$93>>2]|0;
     $95 = (($94) + -12|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($93) + ($96)|0);
     $26 = $97;
     $98 = $26;
     $25 = $98;
     $99 = $25;
     $100 = (($99) + 24|0);
     $101 = HEAP32[$100>>2]|0;
     $24 = $101;
     $102 = $24;
     $103 = (($102) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = (($102) + 16|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($104|0)==($106|0);
     if ($107) {
      $108 = HEAP32[$102>>2]|0;
      $109 = (($108) + 40|0);
      $110 = HEAP32[$109>>2]|0;
      __THREW__ = 0;
      $111 = (invoke_ii($110|0,($102|0))|0);
      $112 = __THREW__; __THREW__ = 0;
      $113 = $112&1;
      if ($113) {
       break L1;
      }
      $23 = $111;
     } else {
      $114 = (($102) + 12|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = (($115) + 1|0);
      HEAP32[$114>>2] = $116;
      $117 = HEAP8[$115>>0]|0;
      $118 = (__ZNSt3__111char_traitsIcE11to_int_typeEc($117)|0);
      $23 = $118;
     }
     $119 = $23;
     $__i = $119;
     $120 = $__i;
     $121 = (__ZNSt3__111char_traitsIcE3eofEv()|0);
     $122 = (__ZNSt3__111char_traitsIcE11eq_int_typeEii($120,$121)|0);
     if ($122) {
      label = 16;
      break;
     }
     $136 = $__extr;
     $137 = (($136) + 1)|0;
     $__extr = $137;
     $138 = $__i;
     $139 = (__ZNSt3__111char_traitsIcE12to_char_typeEi($138)|0);
     $__ch = $139;
     $140 = $__ch;
     $141 = $53;
     $142 = (__ZNSt3__111char_traitsIcE2eqEcc($140,$141)|0);
     if ($142) {
      label = 22;
      break;
     }
     $143 = $52;
     $144 = $__ch;
     __THREW__ = 0;
     invoke_vii(539,($143|0),($144|0));
     $145 = __THREW__; __THREW__ = 0;
     $146 = $145&1;
     if ($146) {
      break L1;
     }
     $147 = $52;
     $22 = $147;
     $148 = $22;
     $21 = $148;
     $149 = $21;
     $20 = $149;
     $150 = $20;
     $19 = $150;
     $151 = $19;
     $152 = HEAP8[$151>>0]|0;
     $153 = $152&255;
     $154 = $153 & 1;
     $155 = ($154|0)!=(0);
     if ($155) {
      $15 = $148;
      $156 = $15;
      $14 = $156;
      $157 = $14;
      $13 = $157;
      $158 = $13;
      $159 = (($158) + 4|0);
      $160 = HEAP32[$159>>2]|0;
      $177 = $160;
     } else {
      $18 = $148;
      $161 = $18;
      $17 = $161;
      $162 = $17;
      $16 = $162;
      $163 = $16;
      $164 = HEAP8[$163>>0]|0;
      $165 = $164&255;
      $166 = $165 >> 1;
      $177 = $166;
     }
     $167 = $52;
     $12 = $167;
     $168 = $12;
     $11 = $168;
     $169 = $11;
     $10 = $169;
     $170 = $10;
     $9 = $170;
     $171 = $9;
     $7 = $171;
     $172 = $7;
     ;HEAP8[$6+0>>0]=HEAP8[$8+0>>0]|0;
     $5 = $172;
     $173 = $5;
     $4 = $173;
     $__m$i = -1;
     $174 = $__m$i;
     $175 = (($174) - 16)|0;
     $176 = ($177|0)==($175|0);
     if ($176) {
      label = 28;
      break;
     }
    }
    if ((label|0) == 16) {
     $123 = $__err;
     $124 = $123 | 2;
     $__err = $124;
    }
    else if ((label|0) == 22) {
    }
    else if ((label|0) == 28) {
     $178 = $__err;
     $179 = $178 | 4;
     $__err = $179;
    }
    $180 = $__extr;
    $181 = ($180|0)==(0);
    if ($181) {
     $182 = $__err;
     $183 = $182 | 4;
     $__err = $183;
    }
    $184 = $51;
    $185 = HEAP32[$184>>2]|0;
    $186 = (($185) + -12|0);
    $187 = HEAP32[$186>>2]|0;
    $188 = (($184) + ($187)|0);
    $189 = $__err;
    $2 = $188;
    $3 = $189;
    $190 = $2;
    $191 = $3;
    $0 = $190;
    $1 = $191;
    $192 = $0;
    $193 = (($192) + 16|0);
    $194 = HEAP32[$193>>2]|0;
    $195 = $1;
    $196 = $194 | $195;
    __THREW__ = 0;
    invoke_vii(461,($192|0),($196|0));
    $197 = __THREW__; __THREW__ = 0;
    $198 = $197&1;
    if ($198) {
     break;
    }
   }
   $135 = $51;
   STACKTOP = sp;return ($135|0);
  }
 } while(0);
 $125 = ___cxa_find_matching_catch(0|0)|0;
 $126 = tempRet0;
 $54 = $125;
 $55 = $126;
 $127 = $54;
 (___cxa_begin_catch(($127|0))|0);
 $128 = $51;
 $129 = HEAP32[$128>>2]|0;
 $130 = (($129) + -12|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = (($128) + ($131)|0);
 __THREW__ = 0;
 invoke_vi(463,($132|0));
 $133 = __THREW__; __THREW__ = 0;
 $134 = $133&1;
 if (!($134)) {
  ___cxa_end_catch();
  $135 = $51;
  STACKTOP = sp;return ($135|0);
 }
 $199 = ___cxa_find_matching_catch()|0;
 $200 = tempRet0;
 $54 = $199;
 $55 = $200;
 __THREW__ = 0;
 invoke_v(464);
 $201 = __THREW__; __THREW__ = 0;
 $202 = $201&1;
 if ($202) {
  $205 = ___cxa_find_matching_catch(0|0)|0;
  $206 = tempRet0;
  ___clang_call_terminate($205);
  // unreachable;
 }
 $203 = $54;
 $204 = $55;
 ___resumeException($203|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotatorC2ERKS8_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_($this,$__x) {
 $this = $this|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__cap$i = 0, $__ms$i = 0;
 var $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $11 = sp;
 $14 = sp + 156|0;
 $22 = sp + 68|0;
 $23 = sp + 16|0;
 $__v = sp + 72|0;
 $28 = $this;
 $29 = $__x;
 $32 = $28;
 $27 = $32;
 $33 = $27;
 $34 = (($33) + 8|0);
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $__a = $36;
 $24 = $32;
 $37 = $24;
 $38 = (($37) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = HEAP32[$37>>2]|0;
 $41 = $39;
 $42 = $40;
 $43 = (($41) - ($42))|0;
 $44 = (($43|0) / 12)&-1;
 $45 = (($44) + 1)|0;
 $21 = $32;
 HEAP32[$22>>2] = $45;
 $46 = $21;
 $47 = (__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($46)|0);
 $__ms$i = $47;
 $48 = HEAP32[$22>>2]|0;
 $49 = $__ms$i;
 $50 = ($48>>>0)>($49>>>0);
 if ($50) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($46);
  // unreachable;
 }
 $19 = $46;
 $51 = $19;
 $18 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = (($53) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $57 = HEAP32[$56>>2]|0;
 $58 = HEAP32[$52>>2]|0;
 $59 = $57;
 $60 = $58;
 $61 = (($59) - ($60))|0;
 $62 = (($61|0) / 12)&-1;
 $__cap$i = $62;
 $63 = $__cap$i;
 $64 = $__ms$i;
 $65 = (($64>>>0) / 2)&-1;
 $66 = ($63>>>0)>=($65>>>0);
 if ($66) {
  $67 = $__ms$i;
  $20 = $67;
 } else {
  $68 = $__cap$i;
  $69 = $68<<1;
  HEAP32[$23>>2] = $69;
  $12 = $23;
  $13 = $22;
  $70 = $12;
  $71 = $13;
  ;HEAP8[$11+0>>0]=HEAP8[$14+0>>0]|0;
  $9 = $70;
  $10 = $71;
  $72 = $9;
  $73 = $10;
  $6 = $11;
  $7 = $72;
  $8 = $73;
  $74 = $7;
  $75 = HEAP32[$74>>2]|0;
  $76 = $8;
  $77 = HEAP32[$76>>2]|0;
  $78 = ($75>>>0)<($77>>>0);
  if ($78) {
   $79 = $10;
   $82 = $79;
  } else {
   $80 = $9;
   $82 = $80;
  }
  $81 = HEAP32[$82>>2]|0;
  $20 = $81;
 }
 $83 = $20;
 $5 = $32;
 $84 = $5;
 $85 = (($84) + 4|0);
 $86 = HEAP32[$85>>2]|0;
 $87 = HEAP32[$84>>2]|0;
 $88 = $86;
 $89 = $87;
 $90 = (($88) - ($89))|0;
 $91 = (($90|0) / 12)&-1;
 $92 = $__a;
 __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($__v,$83,$91,$92);
 $93 = $__a;
 $94 = (($__v) + 8|0);
 $95 = HEAP32[$94>>2]|0;
 $4 = $95;
 $96 = $4;
 $97 = $29;
 $3 = $97;
 $98 = $3;
 $0 = $93;
 $1 = $96;
 $2 = $98;
 $99 = $1;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 12;
 } else {
  $101 = $2;
  __THREW__ = 0;
  invoke_vii(503,($99|0),($101|0));
  $102 = __THREW__; __THREW__ = 0;
  $103 = $102&1;
  if (!($103)) {
   label = 12;
  }
 }
 if ((label|0) == 12) {
  $104 = (($__v) + 8|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = (($105) + 12|0);
  HEAP32[$104>>2] = $106;
  __THREW__ = 0;
  invoke_vii(564,($32|0),($__v|0));
  $107 = __THREW__; __THREW__ = 0;
  $108 = $107&1;
  if (!($108)) {
   __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($__v);
   STACKTOP = sp;return;
  }
 }
 $109 = ___cxa_find_matching_catch()|0;
 $110 = tempRet0;
 $30 = $109;
 $31 = $110;
 __THREW__ = 0;
 invoke_vi(565,($__v|0));
 $111 = __THREW__; __THREW__ = 0;
 $112 = $111&1;
 if ($112) {
  $115 = ___cxa_find_matching_catch(0|0)|0;
  $116 = tempRet0;
  ___clang_call_terminate($115);
  // unreachable;
 }
 $113 = $30;
 $114 = $31;
 ___resumeException($113|0);
 // unreachable;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEEC2EjjS8_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 132|0;
 $8 = sp + 16|0;
 $22 = sp + 68|0;
 $29 = sp + 100|0;
 $34 = sp + 124|0;
 $35 = sp + 8|0;
 $30 = $this;
 $31 = $__cap;
 $32 = $__start;
 $33 = $__a;
 $36 = $30;
 $37 = (($36) + 12|0);
 $27 = $29;
 $28 = -1;
 $38 = $27;
 HEAP32[$38>>2] = 0;
 $39 = HEAP32[$29>>2]|0;
 HEAP32[$34>>2] = $39;
 $13 = $34;
 $40 = $33;
 $7 = $37;
 HEAP32[$8>>2] = 0;
 $9 = $40;
 $41 = $7;
 $6 = $8;
 $42 = $6;
 $43 = HEAP32[$42>>2]|0;
 $44 = $9;
 $0 = $44;
 $45 = $0;
 $3 = $41;
 HEAP32[$4>>2] = $43;
 $5 = $45;
 $46 = $3;
 $2 = $4;
 $47 = $2;
 $48 = HEAP32[$47>>2]|0;
 HEAP32[$46>>2] = $48;
 $49 = (($46) + 4|0);
 $50 = $5;
 $1 = $50;
 $51 = $1;
 HEAP32[$49>>2] = $51;
 $52 = $31;
 $53 = ($52|0)!=(0);
 if ($53) {
  $12 = $36;
  $54 = $12;
  $55 = (($54) + 12|0);
  $11 = $55;
  $56 = $11;
  $10 = $56;
  $57 = $10;
  $58 = (($57) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $31;
  $18 = $59;
  $19 = $60;
  $61 = $18;
  $62 = $19;
  $15 = $61;
  $16 = $62;
  $17 = 0;
  $63 = $16;
  $64 = ($63*12)|0;
  $14 = $64;
  $65 = $14;
  $66 = (__Znwj($65)|0);
  $69 = $66;
 } else {
  $20 = $22;
  $21 = -1;
  $67 = $20;
  HEAP32[$67>>2] = 0;
  $68 = HEAP32[$22>>2]|0;
  HEAP32[$35>>2] = $68;
  $23 = $35;
  $69 = 0;
 }
 HEAP32[$36>>2] = $69;
 $70 = HEAP32[$36>>2]|0;
 $71 = $32;
 $72 = (($70) + (($71*12)|0)|0);
 $73 = (($36) + 8|0);
 HEAP32[$73>>2] = $72;
 $74 = (($36) + 4|0);
 HEAP32[$74>>2] = $72;
 $75 = HEAP32[$36>>2]|0;
 $76 = $31;
 $77 = (($75) + (($76*12)|0)|0);
 $26 = $36;
 $78 = $26;
 $79 = (($78) + 12|0);
 $25 = $79;
 $80 = $25;
 $24 = $80;
 $81 = $24;
 HEAP32[$81>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 116|0;
 $__t$i1 = sp + 136|0;
 $__t$i = sp + 76|0;
 $36 = $this;
 $37 = $__v;
 $38 = $36;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($38);
 $35 = $38;
 $39 = $35;
 $40 = (($39) + 8|0);
 $34 = $40;
 $41 = $34;
 $33 = $41;
 $42 = $33;
 $43 = HEAP32[$38>>2]|0;
 $44 = (($38) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $37;
 $47 = (($46) + 4|0);
 $28 = $42;
 $29 = $43;
 $30 = $45;
 $31 = $47;
 while(1) {
  $48 = $30;
  $49 = $29;
  $50 = ($48|0)!=($49|0);
  if (!($50)) {
   break;
  }
  $51 = $28;
  $52 = $31;
  $53 = HEAP32[$52>>2]|0;
  $54 = (($53) + -12|0);
  $27 = $54;
  $55 = $27;
  $56 = $30;
  $57 = (($56) + -12|0);
  $30 = $57;
  $23 = $57;
  $58 = $23;
  $22 = $58;
  $59 = $22;
  $24 = $51;
  $25 = $55;
  $26 = $59;
  $60 = $25;
  $61 = ($60|0)==(0|0);
  if (!($61)) {
   $62 = $26;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($60,$62);
  }
  $63 = $31;
  $64 = HEAP32[$63>>2]|0;
  $65 = (($64) + -12|0);
  HEAP32[$63>>2] = $65;
 }
 $66 = $37;
 $67 = (($66) + 4|0);
 $20 = $38;
 $21 = $67;
 $68 = $20;
 $19 = $68;
 $69 = $19;
 $70 = HEAP32[$69>>2]|0;
 HEAP32[$__t$i>>2] = $70;
 $71 = $21;
 $17 = $71;
 $72 = $17;
 $73 = HEAP32[$72>>2]|0;
 $74 = $20;
 HEAP32[$74>>2] = $73;
 $18 = $__t$i;
 $75 = $18;
 $76 = HEAP32[$75>>2]|0;
 $77 = $21;
 HEAP32[$77>>2] = $76;
 $78 = (($38) + 4|0);
 $79 = $37;
 $80 = (($79) + 8|0);
 $3 = $78;
 $4 = $80;
 $81 = $3;
 $2 = $81;
 $82 = $2;
 $83 = HEAP32[$82>>2]|0;
 HEAP32[$__t$i2>>2] = $83;
 $84 = $4;
 $0 = $84;
 $85 = $0;
 $86 = HEAP32[$85>>2]|0;
 $87 = $3;
 HEAP32[$87>>2] = $86;
 $1 = $__t$i2;
 $88 = $1;
 $89 = HEAP32[$88>>2]|0;
 $90 = $4;
 HEAP32[$90>>2] = $89;
 $7 = $38;
 $91 = $7;
 $92 = (($91) + 8|0);
 $6 = $92;
 $93 = $6;
 $5 = $93;
 $94 = $5;
 $95 = $37;
 $10 = $95;
 $96 = $10;
 $97 = (($96) + 12|0);
 $9 = $97;
 $98 = $9;
 $8 = $98;
 $99 = $8;
 $14 = $94;
 $15 = $99;
 $100 = $14;
 $13 = $100;
 $101 = $13;
 $102 = HEAP32[$101>>2]|0;
 HEAP32[$__t$i1>>2] = $102;
 $103 = $15;
 $11 = $103;
 $104 = $11;
 $105 = HEAP32[$104>>2]|0;
 $106 = $14;
 HEAP32[$106>>2] = $105;
 $12 = $__t$i1;
 $107 = $12;
 $108 = HEAP32[$107>>2]|0;
 $109 = $15;
 HEAP32[$109>>2] = $108;
 $110 = $37;
 $111 = (($110) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $37;
 HEAP32[$113>>2] = $112;
 $16 = $38;
 $114 = $16;
 $115 = (($114) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = HEAP32[$114>>2]|0;
 $118 = $116;
 $119 = $117;
 $120 = (($118) - ($119))|0;
 $121 = (($120|0) / 12)&-1;
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($38,$121);
 $32 = $38;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $17 = sp;
 $20 = sp + 132|0;
 $28 = sp + 8|0;
 $31 = sp + 133|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = (($35) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28+0>>0]=HEAP8[$31+0>>0]|0;
 $24 = $38;
 $25 = $39;
 $40 = $24;
 while(1) {
  $41 = $25;
  $42 = (($40) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $23 = $40;
  $45 = $23;
  $46 = (($45) + 12|0);
  $22 = $46;
  $47 = $22;
  $21 = $47;
  $48 = $21;
  $49 = (($48) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($40) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = (($52) + -12|0);
  HEAP32[$51>>2] = $53;
  $14 = $53;
  $54 = $14;
  $18 = $50;
  $19 = $54;
  $55 = $18;
  $56 = $19;
  ;HEAP8[$17+0>>0]=HEAP8[$20+0>>0]|0;
  $15 = $55;
  $16 = $56;
  $57 = $16;
  __THREW__ = 0;
  invoke_vi(396,($57|0));
  $58 = __THREW__; __THREW__ = 0;
  $59 = $58&1;
  if ($59) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 5) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  $26 = $60;
  $27 = $61;
  $62 = $26;
  ___cxa_call_unexpected(($62|0));
  // unreachable;
 }
 $63 = HEAP32[$34>>2]|0;
 $64 = ($63|0)!=(0|0);
 if (!($64)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $65 = $13;
 $66 = (($65) + 12|0);
 $12 = $66;
 $67 = $12;
 $11 = $67;
 $68 = $11;
 $69 = (($68) + 4|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = HEAP32[$34>>2]|0;
 $10 = $34;
 $72 = $10;
 $9 = $72;
 $73 = $9;
 $74 = (($73) + 12|0);
 $8 = $74;
 $75 = $8;
 $7 = $75;
 $76 = $7;
 $77 = HEAP32[$76>>2]|0;
 $78 = HEAP32[$72>>2]|0;
 $79 = $77;
 $80 = $78;
 $81 = (($79) - ($80))|0;
 $82 = (($81|0) / 12)&-1;
 $4 = $70;
 $5 = $71;
 $6 = $82;
 $83 = $4;
 $84 = $5;
 $85 = $6;
 $1 = $83;
 $2 = $84;
 $3 = $85;
 $86 = $2;
 $0 = $86;
 $87 = $0;
 __ZdlPv($87);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $7 = $20;
 $43 = $7;
 $44 = (($43) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($49|0) / 12)&-1;
 $51 = (($42) + (($50*12)|0)|0);
 $9 = $20;
 $52 = $9;
 $53 = HEAP32[$52>>2]|0;
 $8 = $53;
 $54 = $8;
 $14 = $20;
 $55 = $14;
 $13 = $55;
 $56 = $13;
 $12 = $56;
 $57 = $12;
 $58 = (($57) + 8|0);
 $11 = $58;
 $59 = $11;
 $10 = $59;
 $60 = $10;
 $61 = HEAP32[$60>>2]|0;
 $62 = HEAP32[$56>>2]|0;
 $63 = $61;
 $64 = $62;
 $65 = (($63) - ($64))|0;
 $66 = (($65|0) / 12)&-1;
 $67 = (($54) + (($66*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$51,$67);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = (($29) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($37|0) / 12)&-1;
 $39 = (($26) + (($38*12)|0)|0);
 $6 = $20;
 $40 = $6;
 $41 = HEAP32[$40>>2]|0;
 $5 = $41;
 $42 = $5;
 $11 = $20;
 $43 = $11;
 $10 = $43;
 $44 = $10;
 $9 = $44;
 $45 = $9;
 $46 = (($45) + 8|0);
 $8 = $46;
 $47 = $8;
 $7 = $47;
 $48 = $7;
 $49 = HEAP32[$48>>2]|0;
 $50 = HEAP32[$44>>2]|0;
 $51 = $49;
 $52 = $50;
 $53 = (($51) - ($52))|0;
 $54 = (($53|0) / 12)&-1;
 $55 = (($42) + (($54*12)|0)|0);
 $13 = $20;
 $56 = $13;
 $57 = HEAP32[$56>>2]|0;
 $12 = $57;
 $58 = $12;
 $59 = $19;
 $60 = (($58) + (($59*12)|0)|0);
 __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE31__annotate_contiguous_containerEPKvSA_SA_SA_($20,$23,$39,$55,$60);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 8|0;
 $4 = sp + 84|0;
 $10 = sp;
 $13 = sp + 85|0;
 $18 = sp + 44|0;
 $19 = sp + 28|0;
 $17 = $this;
 $22 = $17;
 $16 = $22;
 $23 = $16;
 $24 = (($23) + 8|0);
 $15 = $24;
 $25 = $15;
 $14 = $25;
 $26 = $14;
 $3 = $26;
 $27 = $3;
 ;HEAP8[$2+0>>0]=HEAP8[$4+0>>0]|0;
 $1 = $27;
 $28 = $1;
 $0 = $28;
 HEAP32[$18>>2] = 357913941;
 $29 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $29;
 $11 = $18;
 $12 = $19;
 $30 = $11;
 $31 = $12;
 ;HEAP8[$10+0>>0]=HEAP8[$13+0>>0]|0;
 $8 = $30;
 $9 = $31;
 $32 = $9;
 $33 = $8;
 $5 = $10;
 $6 = $32;
 $7 = $33;
 $34 = $6;
 $35 = HEAP32[$34>>2]|0;
 $36 = $7;
 $37 = HEAP32[$36>>2]|0;
 $38 = ($35>>>0)<($37>>>0);
 if ($38) {
  $39 = $9;
  $42 = $39;
 } else {
  $40 = $8;
  $42 = $40;
 }
 $41 = HEAP32[$42>>2]|0;
 STACKTOP = sp;return ($41|0);
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $132 = $this;
 $133 = $__s;
 $134 = $132;
 $135 = (($134) + 32|0);
 $136 = $133;
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($135,$136)|0);
 $137 = (($134) + 44|0);
 HEAP32[$137>>2] = 0;
 $138 = (($134) + 48|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = $139 & 8;
 $141 = ($140|0)!=(0);
 if ($141) {
  $142 = (($134) + 32|0);
  $131 = $142;
  $143 = $131;
  $130 = $143;
  $144 = $130;
  $129 = $144;
  $145 = $129;
  $128 = $145;
  $146 = $128;
  $127 = $146;
  $147 = $127;
  $148 = HEAP8[$147>>0]|0;
  $149 = $148&255;
  $150 = $149 & 1;
  $151 = ($150|0)!=(0);
  if ($151) {
   $121 = $144;
   $152 = $121;
   $120 = $152;
   $153 = $120;
   $119 = $153;
   $154 = $119;
   $155 = (($154) + 8|0);
   $156 = HEAP32[$155>>2]|0;
   $163 = $156;
  } else {
   $126 = $144;
   $157 = $126;
   $125 = $157;
   $158 = $125;
   $124 = $158;
   $159 = $124;
   $160 = (($159) + 1|0);
   $123 = $160;
   $161 = $123;
   $122 = $161;
   $162 = $122;
   $163 = $162;
  }
  $118 = $163;
  $164 = $118;
  $165 = (($134) + 32|0);
  $72 = $165;
  $166 = $72;
  $71 = $166;
  $167 = $71;
  $70 = $167;
  $168 = $70;
  $69 = $168;
  $169 = $69;
  $170 = HEAP8[$169>>0]|0;
  $171 = $170&255;
  $172 = $171 & 1;
  $173 = ($172|0)!=(0);
  if ($173) {
   $65 = $166;
   $174 = $65;
   $64 = $174;
   $175 = $64;
   $63 = $175;
   $176 = $63;
   $177 = (($176) + 4|0);
   $178 = HEAP32[$177>>2]|0;
   $186 = $178;
  } else {
   $68 = $166;
   $179 = $68;
   $67 = $179;
   $180 = $67;
   $66 = $180;
   $181 = $66;
   $182 = HEAP8[$181>>0]|0;
   $183 = $182&255;
   $184 = $183 >> 1;
   $186 = $184;
  }
  $185 = (($164) + ($186)|0);
  $187 = (($134) + 44|0);
  HEAP32[$187>>2] = $185;
  $188 = (($134) + 32|0);
  $13 = $188;
  $189 = $13;
  $12 = $189;
  $190 = $12;
  $11 = $190;
  $191 = $11;
  $10 = $191;
  $192 = $10;
  $9 = $192;
  $193 = $9;
  $194 = HEAP8[$193>>0]|0;
  $195 = $194&255;
  $196 = $195 & 1;
  $197 = ($196|0)!=(0);
  if ($197) {
   $3 = $190;
   $198 = $3;
   $2 = $198;
   $199 = $2;
   $1 = $199;
   $200 = $1;
   $201 = (($200) + 8|0);
   $202 = HEAP32[$201>>2]|0;
   $209 = $202;
  } else {
   $8 = $190;
   $203 = $8;
   $7 = $203;
   $204 = $7;
   $6 = $204;
   $205 = $6;
   $206 = (($205) + 1|0);
   $5 = $206;
   $207 = $5;
   $4 = $207;
   $208 = $4;
   $209 = $208;
  }
  $0 = $209;
  $210 = $0;
  $211 = (($134) + 32|0);
  $27 = $211;
  $212 = $27;
  $26 = $212;
  $213 = $26;
  $25 = $213;
  $214 = $25;
  $24 = $214;
  $215 = $24;
  $23 = $215;
  $216 = $23;
  $217 = HEAP8[$216>>0]|0;
  $218 = $217&255;
  $219 = $218 & 1;
  $220 = ($219|0)!=(0);
  if ($220) {
   $17 = $213;
   $221 = $17;
   $16 = $221;
   $222 = $16;
   $15 = $222;
   $223 = $15;
   $224 = (($223) + 8|0);
   $225 = HEAP32[$224>>2]|0;
   $232 = $225;
  } else {
   $22 = $213;
   $226 = $22;
   $21 = $226;
   $227 = $21;
   $20 = $227;
   $228 = $20;
   $229 = (($228) + 1|0);
   $19 = $229;
   $230 = $19;
   $18 = $230;
   $231 = $18;
   $232 = $231;
  }
  $14 = $232;
  $233 = $14;
  $234 = (($134) + 44|0);
  $235 = HEAP32[$234>>2]|0;
  $28 = $134;
  $29 = $210;
  $30 = $233;
  $31 = $235;
  $236 = $28;
  $237 = $29;
  $238 = (($236) + 8|0);
  HEAP32[$238>>2] = $237;
  $239 = $30;
  $240 = (($236) + 12|0);
  HEAP32[$240>>2] = $239;
  $241 = $31;
  $242 = (($236) + 16|0);
  HEAP32[$242>>2] = $241;
 }
 $243 = (($134) + 48|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = $244 & 16;
 $246 = ($245|0)!=(0);
 if (!($246)) {
  STACKTOP = sp;return;
 }
 $247 = (($134) + 32|0);
 $41 = $247;
 $248 = $41;
 $40 = $248;
 $249 = $40;
 $39 = $249;
 $250 = $39;
 $38 = $250;
 $251 = $38;
 $252 = HEAP8[$251>>0]|0;
 $253 = $252&255;
 $254 = $253 & 1;
 $255 = ($254|0)!=(0);
 if ($255) {
  $34 = $248;
  $256 = $34;
  $33 = $256;
  $257 = $33;
  $32 = $257;
  $258 = $32;
  $259 = (($258) + 4|0);
  $260 = HEAP32[$259>>2]|0;
  $267 = $260;
 } else {
  $37 = $248;
  $261 = $37;
  $36 = $261;
  $262 = $36;
  $35 = $262;
  $263 = $35;
  $264 = HEAP8[$263>>0]|0;
  $265 = $264&255;
  $266 = $265 >> 1;
  $267 = $266;
 }
 $__sz = $267;
 $268 = (($134) + 32|0);
 $55 = $268;
 $269 = $55;
 $54 = $269;
 $270 = $54;
 $53 = $270;
 $271 = $53;
 $52 = $271;
 $272 = $52;
 $51 = $272;
 $273 = $51;
 $274 = HEAP8[$273>>0]|0;
 $275 = $274&255;
 $276 = $275 & 1;
 $277 = ($276|0)!=(0);
 if ($277) {
  $45 = $270;
  $278 = $45;
  $44 = $278;
  $279 = $44;
  $43 = $279;
  $280 = $43;
  $281 = (($280) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  $289 = $282;
 } else {
  $50 = $270;
  $283 = $50;
  $49 = $283;
  $284 = $49;
  $48 = $284;
  $285 = $48;
  $286 = (($285) + 1|0);
  $47 = $286;
  $287 = $47;
  $46 = $287;
  $288 = $46;
  $289 = $288;
 }
 $42 = $289;
 $290 = $42;
 $291 = $__sz;
 $292 = (($290) + ($291)|0);
 $293 = (($134) + 44|0);
 HEAP32[$293>>2] = $292;
 $294 = (($134) + 32|0);
 $295 = (($134) + 32|0);
 $62 = $295;
 $296 = $62;
 $61 = $296;
 $297 = $61;
 $60 = $297;
 $298 = $60;
 $59 = $298;
 $299 = $59;
 $300 = HEAP8[$299>>0]|0;
 $301 = $300&255;
 $302 = $301 & 1;
 $303 = ($302|0)!=(0);
 if ($303) {
  $58 = $296;
  $304 = $58;
  $57 = $304;
  $305 = $57;
  $56 = $305;
  $306 = $56;
  $307 = HEAP32[$306>>2]|0;
  $308 = $307 & -2;
  $310 = $308;
 } else {
  $310 = 11;
 }
 $309 = (($310) - 1)|0;
 $73 = $294;
 $74 = $309;
 $311 = $73;
 $312 = $74;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($311,$312,0);
 $313 = (($134) + 32|0);
 $88 = $313;
 $314 = $88;
 $87 = $314;
 $315 = $87;
 $86 = $315;
 $316 = $86;
 $85 = $316;
 $317 = $85;
 $84 = $317;
 $318 = $84;
 $319 = HEAP8[$318>>0]|0;
 $320 = $319&255;
 $321 = $320 & 1;
 $322 = ($321|0)!=(0);
 if ($322) {
  $78 = $315;
  $323 = $78;
  $77 = $323;
  $324 = $77;
  $76 = $324;
  $325 = $76;
  $326 = (($325) + 8|0);
  $327 = HEAP32[$326>>2]|0;
  $334 = $327;
 } else {
  $83 = $315;
  $328 = $83;
  $82 = $328;
  $329 = $82;
  $81 = $329;
  $330 = $81;
  $331 = (($330) + 1|0);
  $80 = $331;
  $332 = $80;
  $79 = $332;
  $333 = $79;
  $334 = $333;
 }
 $75 = $334;
 $335 = $75;
 $336 = (($134) + 32|0);
 $102 = $336;
 $337 = $102;
 $101 = $337;
 $338 = $101;
 $100 = $338;
 $339 = $100;
 $99 = $339;
 $340 = $99;
 $98 = $340;
 $341 = $98;
 $342 = HEAP8[$341>>0]|0;
 $343 = $342&255;
 $344 = $343 & 1;
 $345 = ($344|0)!=(0);
 if ($345) {
  $92 = $338;
  $346 = $92;
  $91 = $346;
  $347 = $91;
  $90 = $347;
  $348 = $90;
  $349 = (($348) + 8|0);
  $350 = HEAP32[$349>>2]|0;
  $357 = $350;
 } else {
  $97 = $338;
  $351 = $97;
  $96 = $351;
  $352 = $96;
  $95 = $352;
  $353 = $95;
  $354 = (($353) + 1|0);
  $94 = $354;
  $355 = $94;
  $93 = $355;
  $356 = $93;
  $357 = $356;
 }
 $89 = $357;
 $358 = $89;
 $359 = (($134) + 32|0);
 $112 = $359;
 $360 = $112;
 $111 = $360;
 $361 = $111;
 $110 = $361;
 $362 = $110;
 $109 = $362;
 $363 = $109;
 $364 = HEAP8[$363>>0]|0;
 $365 = $364&255;
 $366 = $365 & 1;
 $367 = ($366|0)!=(0);
 if ($367) {
  $105 = $360;
  $368 = $105;
  $104 = $368;
  $369 = $104;
  $103 = $369;
  $370 = $103;
  $371 = (($370) + 4|0);
  $372 = HEAP32[$371>>2]|0;
  $380 = $372;
 } else {
  $108 = $360;
  $373 = $108;
  $107 = $373;
  $374 = $107;
  $106 = $374;
  $375 = $106;
  $376 = HEAP8[$375>>0]|0;
  $377 = $376&255;
  $378 = $377 >> 1;
  $380 = $378;
 }
 $379 = (($358) + ($380)|0);
 $113 = $134;
 $114 = $335;
 $115 = $379;
 $381 = $113;
 $382 = $114;
 $383 = (($381) + 24|0);
 HEAP32[$383>>2] = $382;
 $384 = (($381) + 20|0);
 HEAP32[$384>>2] = $382;
 $385 = $115;
 $386 = (($381) + 28|0);
 HEAP32[$386>>2] = $385;
 $387 = (($134) + 48|0);
 $388 = HEAP32[$387>>2]|0;
 $389 = $388 & 3;
 $390 = ($389|0)!=(0);
 if ($390) {
  $391 = $__sz;
  $116 = $134;
  $117 = $391;
  $392 = $116;
  $393 = $117;
  $394 = (($392) + 24|0);
  $395 = HEAP32[$394>>2]|0;
  $396 = (($395) + ($393)|0);
  HEAP32[$394>>2] = $396;
 }
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __THREW__ = 0;
 invoke_vi(507,($3|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 do {
  if ($5) {
   $39 = ___cxa_find_matching_catch()|0;
   $40 = tempRet0;
   $1 = $39;
   $2 = $40;
   $41 = (($3) + 164|0);
   __THREW__ = 0;
   invoke_vi(566,($41|0));
   $42 = __THREW__; __THREW__ = 0;
   $43 = $42&1;
   if (!($43)) {
    label = 18;
   }
  } else {
   $6 = (($3) + 164|0);
   __THREW__ = 0;
   invoke_vi(566,($6|0));
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $44 = ___cxa_find_matching_catch()|0;
    $45 = tempRet0;
    $1 = $44;
    $2 = $45;
    label = 18;
    break;
   }
   $9 = (($3) + 152|0);
   __THREW__ = 0;
   invoke_vi(567,($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if ($11) {
    $46 = ___cxa_find_matching_catch()|0;
    $47 = tempRet0;
    $1 = $46;
    $2 = $47;
    label = 21;
    break;
   }
   $12 = (($3) + 140|0);
   __THREW__ = 0;
   invoke_vi(567,($12|0));
   $13 = __THREW__; __THREW__ = 0;
   $14 = $13&1;
   if ($14) {
    $51 = ___cxa_find_matching_catch()|0;
    $52 = tempRet0;
    $1 = $51;
    $2 = $52;
    label = 24;
    break;
   }
   $15 = (($3) + 128|0);
   __THREW__ = 0;
   invoke_vi(567,($15|0));
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $56 = ___cxa_find_matching_catch()|0;
    $57 = tempRet0;
    $1 = $56;
    $2 = $57;
    label = 27;
    break;
   }
   $18 = (($3) + 116|0);
   __THREW__ = 0;
   invoke_vi(567,($18|0));
   $19 = __THREW__; __THREW__ = 0;
   $20 = $19&1;
   if ($20) {
    $61 = ___cxa_find_matching_catch()|0;
    $62 = tempRet0;
    $1 = $61;
    $2 = $62;
    label = 30;
    break;
   }
   $21 = (($3) + 100|0);
   __THREW__ = 0;
   invoke_vi(537,($21|0));
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    $66 = ___cxa_find_matching_catch()|0;
    $67 = tempRet0;
    $1 = $66;
    $2 = $67;
    label = 33;
    break;
   }
   $24 = (($3) + 88|0);
   __THREW__ = 0;
   invoke_vi(537,($24|0));
   $25 = __THREW__; __THREW__ = 0;
   $26 = $25&1;
   if ($26) {
    $71 = ___cxa_find_matching_catch()|0;
    $72 = tempRet0;
    $1 = $71;
    $2 = $72;
    label = 36;
    break;
   }
   $27 = (($3) + 64|0);
   __THREW__ = 0;
   invoke_vi(568,($27|0));
   $28 = __THREW__; __THREW__ = 0;
   $29 = $28&1;
   if ($29) {
    $76 = ___cxa_find_matching_catch()|0;
    $77 = tempRet0;
    $1 = $76;
    $2 = $77;
    label = 39;
    break;
   }
   $30 = (($3) + 48|0);
   __THREW__ = 0;
   invoke_vi(569,($30|0));
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $81 = ___cxa_find_matching_catch()|0;
    $82 = tempRet0;
    $1 = $81;
    $2 = $82;
    label = 42;
    break;
   }
   $33 = (($3) + 32|0);
   __THREW__ = 0;
   invoke_vi(570,($33|0));
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $86 = ___cxa_find_matching_catch()|0;
    $87 = tempRet0;
    $1 = $86;
    $2 = $87;
    label = 45;
    break;
   }
   $36 = (($3) + 16|0);
   __THREW__ = 0;
   invoke_vi(571,($36|0));
   $37 = __THREW__; __THREW__ = 0;
   $38 = $37&1;
   if ($38) {
    $91 = ___cxa_find_matching_catch()|0;
    $92 = tempRet0;
    $1 = $91;
    $2 = $92;
    label = 47;
    break;
   } else {
    __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED2Ev($3);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 18) {
  $48 = (($3) + 152|0);
  __THREW__ = 0;
  invoke_vi(567,($48|0));
  $49 = __THREW__; __THREW__ = 0;
  $50 = $49&1;
  if (!($50)) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  $53 = (($3) + 140|0);
  __THREW__ = 0;
  invoke_vi(567,($53|0));
  $54 = __THREW__; __THREW__ = 0;
  $55 = $54&1;
  if (!($55)) {
   label = 24;
  }
 }
 if ((label|0) == 24) {
  $58 = (($3) + 128|0);
  __THREW__ = 0;
  invoke_vi(567,($58|0));
  $59 = __THREW__; __THREW__ = 0;
  $60 = $59&1;
  if (!($60)) {
   label = 27;
  }
 }
 if ((label|0) == 27) {
  $63 = (($3) + 116|0);
  __THREW__ = 0;
  invoke_vi(567,($63|0));
  $64 = __THREW__; __THREW__ = 0;
  $65 = $64&1;
  if (!($65)) {
   label = 30;
  }
 }
 if ((label|0) == 30) {
  $68 = (($3) + 100|0);
  __THREW__ = 0;
  invoke_vi(537,($68|0));
  $69 = __THREW__; __THREW__ = 0;
  $70 = $69&1;
  if (!($70)) {
   label = 33;
  }
 }
 if ((label|0) == 33) {
  $73 = (($3) + 88|0);
  __THREW__ = 0;
  invoke_vi(537,($73|0));
  $74 = __THREW__; __THREW__ = 0;
  $75 = $74&1;
  if (!($75)) {
   label = 36;
  }
 }
 if ((label|0) == 36) {
  $78 = (($3) + 64|0);
  __THREW__ = 0;
  invoke_vi(568,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if (!($80)) {
   label = 39;
  }
 }
 if ((label|0) == 39) {
  $83 = (($3) + 48|0);
  __THREW__ = 0;
  invoke_vi(569,($83|0));
  $84 = __THREW__; __THREW__ = 0;
  $85 = $84&1;
  if (!($85)) {
   label = 42;
  }
 }
 if ((label|0) == 42) {
  $88 = (($3) + 32|0);
  __THREW__ = 0;
  invoke_vi(570,($88|0));
  $89 = __THREW__; __THREW__ = 0;
  $90 = $89&1;
  if (!($90)) {
   label = 45;
  }
 }
 if ((label|0) == 45) {
  $93 = (($3) + 16|0);
  __THREW__ = 0;
  invoke_vi(571,($93|0));
  $94 = __THREW__; __THREW__ = 0;
  $95 = $94&1;
  if (!($95)) {
   label = 47;
  }
 }
 if ((label|0) == 47) {
  __THREW__ = 0;
  invoke_vi(572,($3|0));
  $96 = __THREW__; __THREW__ = 0;
  $97 = $96&1;
  if (!($97)) {
   $98 = $1;
   $99 = $2;
   ___resumeException($98|0);
   // unreachable;
  }
 }
 $100 = ___cxa_find_matching_catch(0|0)|0;
 $101 = tempRet0;
 ___clang_call_terminate($100);
 // unreachable;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 56|0);
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED2Ev($2);
 STACKTOP = sp;return;
}
function __ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg4Box3IfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6MyFaceNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI6MyEdgeNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseI8MyVertexNS_9allocatorIS1_EEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI8MyVertexNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -36|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 36)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6MyEdgeNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseI6MyFaceNS_9allocatorIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -44|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $70 = (($69|0) / 44)&-1;
 $25 = $58;
 $26 = $59;
 $27 = $70;
 $71 = $25;
 $72 = $26;
 $73 = $27;
 $22 = $71;
 $23 = $72;
 $24 = $73;
 $74 = $23;
 $21 = $74;
 $75 = $21;
 __ZdlPv($75);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp;
 $6 = sp + 128|0;
 $30 = sp + 4|0;
 $32 = sp + 12|0;
 $31 = $this;
 $33 = $31;
 $34 = HEAP32[$33>>2]|0;
 $28 = $30;
 $29 = -1;
 $35 = $28;
 HEAP32[$35>>2] = 0;
 $36 = HEAP32[$30>>2]|0;
 HEAP32[$32>>2] = $36;
 $20 = $32;
 $37 = ($34|0)!=(0|0);
 if (!($37)) {
  STACKTOP = sp;return;
 }
 $12 = $33;
 $38 = $12;
 $39 = HEAP32[$38>>2]|0;
 $10 = $38;
 $11 = $39;
 $40 = $10;
 while(1) {
  $41 = $11;
  $42 = (($40) + 4|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $9 = $40;
  $45 = $9;
  $46 = (($45) + 8|0);
  $8 = $46;
  $47 = $8;
  $7 = $47;
  $48 = $7;
  $49 = (($40) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($50) + -1|0);
  HEAP32[$49>>2] = $51;
  $0 = $51;
  $52 = $0;
  $4 = $48;
  $5 = $52;
  $53 = $4;
  $54 = $5;
  ;HEAP8[$3+0>>0]=HEAP8[$6+0>>0]|0;
  $1 = $53;
  $2 = $54;
 }
 $15 = $33;
 $55 = $15;
 $56 = (($55) + 8|0);
 $14 = $56;
 $57 = $14;
 $13 = $57;
 $58 = $13;
 $59 = HEAP32[$33>>2]|0;
 $19 = $33;
 $60 = $19;
 $18 = $60;
 $61 = $18;
 $62 = (($61) + 8|0);
 $17 = $62;
 $63 = $17;
 $16 = $63;
 $64 = $16;
 $65 = HEAP32[$64>>2]|0;
 $66 = HEAP32[$60>>2]|0;
 $67 = $65;
 $68 = $66;
 $69 = (($67) - ($68))|0;
 $25 = $58;
 $26 = $59;
 $27 = $69;
 $70 = $25;
 $71 = $26;
 $72 = $27;
 $22 = $70;
 $23 = $71;
 $24 = $72;
 $73 = $23;
 $21 = $73;
 $74 = $21;
 __ZdlPv($74);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = $this;
 $7 = $6;
 $5 = $7;
 $8 = $5;
 $4 = $8;
 $9 = $4;
 $10 = (($9) + 4|0);
 $3 = $10;
 $11 = $3;
 $2 = $11;
 $12 = $2;
 $1 = $12;
 $13 = $1;
 $0 = $13;
 $14 = $0;
 $15 = HEAP32[$14>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($7,$15);
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($this,$__nd) {
 $this = $this|0;
 $__nd = $__nd|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__na = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp;
 $9 = sp + 104|0;
 $20 = sp + 68|0;
 $25 = sp + 92|0;
 $21 = $this;
 $22 = $__nd;
 $26 = $21;
 $27 = $22;
 $18 = $20;
 $19 = -1;
 $28 = $18;
 HEAP32[$28>>2] = 0;
 $29 = HEAP32[$20>>2]|0;
 HEAP32[$25>>2] = $29;
 $17 = $25;
 $30 = ($27|0)!=(0|0);
 if (!($30)) {
  STACKTOP = sp;return;
 }
 $31 = $22;
 $32 = HEAP32[$31>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($26,$32);
 $33 = $22;
 $34 = (($33) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE7destroyEPNS_11__tree_nodeIS2_PvEE($26,$35);
 $3 = $26;
 $36 = $3;
 $37 = (($36) + 4|0);
 $2 = $37;
 $38 = $2;
 $1 = $38;
 $39 = $1;
 $__na = $39;
 $40 = $__na;
 $41 = $22;
 $42 = (($41) + 16|0);
 $0 = $42;
 $43 = $0;
 $7 = $40;
 $8 = $43;
 $44 = $7;
 $45 = $8;
 ;HEAP8[$6+0>>0]=HEAP8[$9+0>>0]|0;
 $4 = $44;
 $5 = $45;
 $46 = $5;
 __THREW__ = 0;
 invoke_vi(473,($46|0));
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  $23 = $56;
  $24 = $57;
  $58 = $23;
  ___cxa_call_unexpected(($58|0));
  // unreachable;
 }
 $49 = $__na;
 $50 = $22;
 $14 = $49;
 $15 = $50;
 $16 = 1;
 $51 = $14;
 $52 = $15;
 $53 = $16;
 $11 = $51;
 $12 = $52;
 $13 = $53;
 $54 = $12;
 $10 = $54;
 $55 = $10;
 __ZdlPv($55);
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfED2Ev($1);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 640|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp + 628|0;
 $3 = sp + 629|0;
 $5 = sp + 630|0;
 $7 = sp + 631|0;
 $10 = sp + 24|0;
 $14 = sp + 40|0;
 $18 = sp + 52|0;
 $23 = sp + 72|0;
 $26 = sp + 84|0;
 $29 = sp + 96|0;
 $30 = sp + 100|0;
 $31 = sp + 548|0;
 $35 = sp + 116|0;
 $39 = sp + 132|0;
 $43 = sp + 148|0;
 $48 = sp + 168|0;
 $51 = sp + 180|0;
 $54 = sp + 192|0;
 $55 = sp + 196|0;
 $56 = sp + 200|0;
 $60 = sp + 216|0;
 $64 = sp + 228|0;
 $68 = sp + 244|0;
 $73 = sp + 584|0;
 $76 = sp + 608|0;
 $79 = sp + 288|0;
 $80 = sp + 624|0;
 $81 = sp + 296|0;
 $85 = sp + 312|0;
 $89 = sp + 328|0;
 $93 = sp + 344|0;
 $98 = sp + 364|0;
 $101 = sp + 376|0;
 $104 = sp + 388|0;
 $105 = sp + 392|0;
 $106 = sp + 396|0;
 $110 = sp + 412|0;
 $114 = sp + 428|0;
 $118 = sp + 444|0;
 $123 = sp + 464|0;
 $126 = sp + 476|0;
 $129 = sp + 484|0;
 $130 = sp + 488|0;
 $131 = sp + 492|0;
 $135 = sp + 508|0;
 $139 = sp + 524|0;
 $143 = sp + 20|0;
 $148 = sp + 12|0;
 $151 = sp + 572|0;
 $154 = sp + 264|0;
 $155 = sp + 580|0;
 $156 = sp + 284|0;
 $158 = $this;
 $161 = $158;
 $157 = $161;
 $162 = $157;
 $153 = $162;
 $163 = $153;
 $152 = $163;
 $133 = $135;
 $134 = -1;
 $164 = $133;
 HEAP32[$164>>2] = 0;
 $165 = HEAP32[$135>>2]|0;
 HEAP32[$154>>2] = $165;
 $136 = $154;
 HEAP32[$163>>2] = 0;
 $166 = (($163) + 4|0);
 $137 = $139;
 $138 = -1;
 $167 = $137;
 HEAP32[$167>>2] = 0;
 $168 = HEAP32[$139>>2]|0;
 HEAP32[$155>>2] = $168;
 $140 = $155;
 HEAP32[$166>>2] = 0;
 $169 = (($163) + 8|0);
 $141 = $143;
 $142 = -1;
 $170 = $141;
 HEAP32[$170>>2] = 0;
 $171 = HEAP32[$143>>2]|0;
 HEAP32[$156>>2] = $171;
 $144 = $156;
 $150 = $169;
 HEAP32[$151>>2] = 0;
 $172 = $150;
 $149 = $151;
 $173 = $149;
 $174 = HEAP32[$173>>2]|0;
 $147 = $172;
 HEAP32[$148>>2] = $174;
 $175 = $147;
 $146 = $175;
 $145 = $148;
 $176 = $145;
 $177 = HEAP32[$176>>2]|0;
 HEAP32[$175>>2] = $177;
 $178 = (($161) + 16|0);
 $132 = $178;
 $179 = $132;
 $128 = $179;
 $180 = $128;
 $127 = $180;
 $108 = $110;
 $109 = -1;
 $181 = $108;
 HEAP32[$181>>2] = 0;
 $182 = HEAP32[$110>>2]|0;
 HEAP32[$129>>2] = $182;
 $111 = $129;
 HEAP32[$180>>2] = 0;
 $183 = (($180) + 4|0);
 $112 = $114;
 $113 = -1;
 $184 = $112;
 HEAP32[$184>>2] = 0;
 $185 = HEAP32[$114>>2]|0;
 HEAP32[$130>>2] = $185;
 $115 = $130;
 HEAP32[$183>>2] = 0;
 $186 = (($180) + 8|0);
 $116 = $118;
 $117 = -1;
 $187 = $116;
 HEAP32[$187>>2] = 0;
 $188 = HEAP32[$118>>2]|0;
 HEAP32[$131>>2] = $188;
 $119 = $131;
 $125 = $186;
 HEAP32[$126>>2] = 0;
 $189 = $125;
 $124 = $126;
 $190 = $124;
 $191 = HEAP32[$190>>2]|0;
 $122 = $189;
 HEAP32[$123>>2] = $191;
 $192 = $122;
 $121 = $192;
 $120 = $123;
 $193 = $120;
 $194 = HEAP32[$193>>2]|0;
 HEAP32[$192>>2] = $194;
 $195 = (($161) + 32|0);
 $107 = $195;
 $196 = $107;
 $103 = $196;
 $197 = $103;
 $102 = $197;
 $83 = $85;
 $84 = -1;
 $198 = $83;
 HEAP32[$198>>2] = 0;
 $199 = HEAP32[$85>>2]|0;
 HEAP32[$104>>2] = $199;
 $86 = $104;
 HEAP32[$197>>2] = 0;
 $200 = (($197) + 4|0);
 $87 = $89;
 $88 = -1;
 $201 = $87;
 HEAP32[$201>>2] = 0;
 $202 = HEAP32[$89>>2]|0;
 HEAP32[$105>>2] = $202;
 $90 = $105;
 HEAP32[$200>>2] = 0;
 $203 = (($197) + 8|0);
 $91 = $93;
 $92 = -1;
 $204 = $91;
 HEAP32[$204>>2] = 0;
 $205 = HEAP32[$93>>2]|0;
 HEAP32[$106>>2] = $205;
 $94 = $106;
 $100 = $203;
 HEAP32[$101>>2] = 0;
 $206 = $100;
 $99 = $101;
 $207 = $99;
 $208 = HEAP32[$207>>2]|0;
 $97 = $206;
 HEAP32[$98>>2] = $208;
 $209 = $97;
 $96 = $209;
 $95 = $98;
 $210 = $95;
 $211 = HEAP32[$210>>2]|0;
 HEAP32[$209>>2] = $211;
 $212 = (($161) + 48|0);
 $82 = $212;
 $213 = $82;
 $78 = $213;
 $214 = $78;
 $77 = $214;
 $58 = $60;
 $59 = -1;
 $215 = $58;
 HEAP32[$215>>2] = 0;
 $216 = HEAP32[$60>>2]|0;
 HEAP32[$79>>2] = $216;
 $61 = $79;
 HEAP32[$214>>2] = 0;
 $217 = (($214) + 4|0);
 $62 = $64;
 $63 = -1;
 $218 = $62;
 HEAP32[$218>>2] = 0;
 $219 = HEAP32[$64>>2]|0;
 HEAP32[$80>>2] = $219;
 $65 = $80;
 HEAP32[$217>>2] = 0;
 $220 = (($214) + 8|0);
 $66 = $68;
 $67 = -1;
 $221 = $66;
 HEAP32[$221>>2] = 0;
 $222 = HEAP32[$68>>2]|0;
 HEAP32[$81>>2] = $222;
 $69 = $81;
 $75 = $220;
 HEAP32[$76>>2] = 0;
 $223 = $75;
 $74 = $76;
 $224 = $74;
 $225 = HEAP32[$224>>2]|0;
 $72 = $223;
 HEAP32[$73>>2] = $225;
 $226 = $72;
 $71 = $226;
 $70 = $73;
 $227 = $70;
 $228 = HEAP32[$227>>2]|0;
 HEAP32[$226>>2] = $228;
 $229 = (($161) + 64|0);
 __THREW__ = 0;
 invoke_vi(573,($229|0));
 $230 = __THREW__; __THREW__ = 0;
 $231 = $230&1;
 do {
  if ($231) {
   $290 = ___cxa_find_matching_catch()|0;
   $291 = tempRet0;
   $159 = $290;
   $160 = $291;
  } else {
   $232 = (($161) + 88|0);
   $57 = $232;
   $233 = $57;
   $53 = $233;
   $234 = $53;
   $52 = $234;
   $33 = $35;
   $34 = -1;
   $235 = $33;
   HEAP32[$235>>2] = 0;
   $236 = HEAP32[$35>>2]|0;
   HEAP32[$54>>2] = $236;
   $36 = $54;
   HEAP32[$234>>2] = 0;
   $237 = (($234) + 4|0);
   $37 = $39;
   $38 = -1;
   $238 = $37;
   HEAP32[$238>>2] = 0;
   $239 = HEAP32[$39>>2]|0;
   HEAP32[$55>>2] = $239;
   $40 = $55;
   HEAP32[$237>>2] = 0;
   $240 = (($234) + 8|0);
   $41 = $43;
   $42 = -1;
   $241 = $41;
   HEAP32[$241>>2] = 0;
   $242 = HEAP32[$43>>2]|0;
   HEAP32[$56>>2] = $242;
   $44 = $56;
   $50 = $240;
   HEAP32[$51>>2] = 0;
   $243 = $50;
   $49 = $51;
   $244 = $49;
   $245 = HEAP32[$244>>2]|0;
   $47 = $243;
   HEAP32[$48>>2] = $245;
   $246 = $47;
   $46 = $246;
   $45 = $48;
   $247 = $45;
   $248 = HEAP32[$247>>2]|0;
   HEAP32[$246>>2] = $248;
   $249 = (($161) + 100|0);
   $32 = $249;
   $250 = $32;
   $28 = $250;
   $251 = $28;
   $27 = $251;
   $8 = $10;
   $9 = -1;
   $252 = $8;
   HEAP32[$252>>2] = 0;
   $253 = HEAP32[$10>>2]|0;
   HEAP32[$29>>2] = $253;
   $11 = $29;
   HEAP32[$251>>2] = 0;
   $254 = (($251) + 4|0);
   $12 = $14;
   $13 = -1;
   $255 = $12;
   HEAP32[$255>>2] = 0;
   $256 = HEAP32[$14>>2]|0;
   HEAP32[$30>>2] = $256;
   $15 = $30;
   HEAP32[$254>>2] = 0;
   $257 = (($251) + 8|0);
   $16 = $18;
   $17 = -1;
   $258 = $16;
   HEAP32[$258>>2] = 0;
   $259 = HEAP32[$18>>2]|0;
   HEAP32[$31>>2] = $259;
   $19 = $31;
   $25 = $257;
   HEAP32[$26>>2] = 0;
   $260 = $25;
   $24 = $26;
   $261 = $24;
   $262 = HEAP32[$261>>2]|0;
   $22 = $260;
   HEAP32[$23>>2] = $262;
   $263 = $22;
   $21 = $263;
   $20 = $23;
   $264 = $20;
   $265 = HEAP32[$264>>2]|0;
   HEAP32[$263>>2] = $265;
   $266 = (($161) + 116|0);
   $6 = $266;
   $267 = $6;
   __THREW__ = 0;
   invoke_vii(574,($267|0),($7|0));
   $268 = __THREW__; __THREW__ = 0;
   $269 = $268&1;
   do {
    if ($269) {
     $292 = ___cxa_find_matching_catch()|0;
     $293 = tempRet0;
     $159 = $292;
     $160 = $293;
    } else {
     $270 = (($161) + 128|0);
     $4 = $270;
     $271 = $4;
     __THREW__ = 0;
     invoke_vii(574,($271|0),($5|0));
     $272 = __THREW__; __THREW__ = 0;
     $273 = $272&1;
     do {
      if ($273) {
       $294 = ___cxa_find_matching_catch()|0;
       $295 = tempRet0;
       $159 = $294;
       $160 = $295;
      } else {
       $274 = (($161) + 140|0);
       $2 = $274;
       $275 = $2;
       __THREW__ = 0;
       invoke_vii(574,($275|0),($3|0));
       $276 = __THREW__; __THREW__ = 0;
       $277 = $276&1;
       do {
        if ($277) {
         $296 = ___cxa_find_matching_catch()|0;
         $297 = tempRet0;
         $159 = $296;
         $160 = $297;
        } else {
         $278 = (($161) + 152|0);
         $0 = $278;
         $279 = $0;
         __THREW__ = 0;
         invoke_vii(574,($279|0),($1|0));
         $280 = __THREW__; __THREW__ = 0;
         $281 = $280&1;
         do {
          if ($281) {
           $298 = ___cxa_find_matching_catch()|0;
           $299 = tempRet0;
           $159 = $298;
           $160 = $299;
          } else {
           $282 = (($161) + 164|0);
           __THREW__ = 0;
           invoke_vi(575,($282|0));
           $283 = __THREW__; __THREW__ = 0;
           $284 = $283&1;
           do {
            if ($284) {
             $300 = ___cxa_find_matching_catch()|0;
             $301 = tempRet0;
             $159 = $300;
             $160 = $301;
            } else {
             $285 = (($161) + 296|0);
             __THREW__ = 0;
             invoke_vi(536,($285|0));
             $286 = __THREW__; __THREW__ = 0;
             $287 = $286&1;
             if (!($287)) {
              __THREW__ = 0;
              invoke_vi(507,($161|0));
              $288 = __THREW__; __THREW__ = 0;
              $289 = $288&1;
              if (!($289)) {
               STACKTOP = sp;return;
              }
             }
             $302 = ___cxa_find_matching_catch()|0;
             $303 = tempRet0;
             $159 = $302;
             $160 = $303;
             __THREW__ = 0;
             invoke_vi(566,($282|0));
             $304 = __THREW__; __THREW__ = 0;
             $305 = $304&1;
             if ($305) {
              $330 = ___cxa_find_matching_catch(0|0)|0;
              $331 = tempRet0;
              ___clang_call_terminate($330);
              // unreachable;
             } else {
              break;
             }
            }
           } while(0);
           __THREW__ = 0;
           invoke_vi(567,($278|0));
           $306 = __THREW__; __THREW__ = 0;
           $307 = $306&1;
           if ($307) {
            $330 = ___cxa_find_matching_catch(0|0)|0;
            $331 = tempRet0;
            ___clang_call_terminate($330);
            // unreachable;
           } else {
            break;
           }
          }
         } while(0);
         __THREW__ = 0;
         invoke_vi(567,($274|0));
         $308 = __THREW__; __THREW__ = 0;
         $309 = $308&1;
         if ($309) {
          $330 = ___cxa_find_matching_catch(0|0)|0;
          $331 = tempRet0;
          ___clang_call_terminate($330);
          // unreachable;
         } else {
          break;
         }
        }
       } while(0);
       __THREW__ = 0;
       invoke_vi(567,($270|0));
       $310 = __THREW__; __THREW__ = 0;
       $311 = $310&1;
       if ($311) {
        $330 = ___cxa_find_matching_catch(0|0)|0;
        $331 = tempRet0;
        ___clang_call_terminate($330);
        // unreachable;
       } else {
        break;
       }
      }
     } while(0);
     __THREW__ = 0;
     invoke_vi(567,($266|0));
     $312 = __THREW__; __THREW__ = 0;
     $313 = $312&1;
     if ($313) {
      $330 = ___cxa_find_matching_catch(0|0)|0;
      $331 = tempRet0;
      ___clang_call_terminate($330);
      // unreachable;
     } else {
      break;
     }
    }
   } while(0);
   __THREW__ = 0;
   invoke_vi(537,($249|0));
   $314 = __THREW__; __THREW__ = 0;
   $315 = $314&1;
   if ($315) {
    $330 = ___cxa_find_matching_catch(0|0)|0;
    $331 = tempRet0;
    ___clang_call_terminate($330);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(537,($232|0));
   $316 = __THREW__; __THREW__ = 0;
   $317 = $316&1;
   if ($317) {
    $330 = ___cxa_find_matching_catch(0|0)|0;
    $331 = tempRet0;
    ___clang_call_terminate($330);
    // unreachable;
   }
   __THREW__ = 0;
   invoke_vi(568,($229|0));
   $318 = __THREW__; __THREW__ = 0;
   $319 = $318&1;
   if ($319) {
    $330 = ___cxa_find_matching_catch(0|0)|0;
    $331 = tempRet0;
    ___clang_call_terminate($330);
    // unreachable;
   } else {
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi(569,($212|0));
 $320 = __THREW__; __THREW__ = 0;
 $321 = $320&1;
 if ($321) {
  $330 = ___cxa_find_matching_catch(0|0)|0;
  $331 = tempRet0;
  ___clang_call_terminate($330);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(570,($195|0));
 $322 = __THREW__; __THREW__ = 0;
 $323 = $322&1;
 if ($323) {
  $330 = ___cxa_find_matching_catch(0|0)|0;
  $331 = tempRet0;
  ___clang_call_terminate($330);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(571,($178|0));
 $324 = __THREW__; __THREW__ = 0;
 $325 = $324&1;
 if ($325) {
  $330 = ___cxa_find_matching_catch(0|0)|0;
  $331 = tempRet0;
  ___clang_call_terminate($330);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(572,($161|0));
 $326 = __THREW__; __THREW__ = 0;
 $327 = $326&1;
 if ($327) {
  $330 = ___cxa_find_matching_catch(0|0)|0;
  $331 = tempRet0;
  ___clang_call_terminate($330);
  // unreachable;
 }
 $328 = $159;
 $329 = $160;
 ___resumeException($328|0);
 // unreachable;
}
function __ZN3vcg4Box3IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg6Point3IfEC2Ev($1);
 $2 = (($1) + 12|0);
 __ZN3vcg6Point3IfEC2Ev($2);
 $3 = (__ZN3vcg6Point3IfE1XEv($1)|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = (($1) + 12|0);
 $5 = (__ZN3vcg6Point3IfE1XEv($4)|0);
 HEAPF32[$5>>2] = -1.0;
 $6 = (__ZN3vcg6Point3IfE1YEv($1)|0);
 HEAPF32[$6>>2] = 1.0;
 $7 = (($1) + 12|0);
 $8 = (__ZN3vcg6Point3IfE1YEv($7)|0);
 HEAPF32[$8>>2] = -1.0;
 $9 = (__ZN3vcg6Point3IfE1ZEv($1)|0);
 HEAPF32[$9>>2] = 1.0;
 $10 = (($1) + 12|0);
 $11 = (__ZN3vcg6Point3IfE1ZEv($10)|0);
 HEAPF32[$11>>2] = -1.0;
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN3vcg6CameraIfEC2Ev($3);
 $4 = (($3) + 56|0);
 __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC2Ev($4);
 $5 = (($3) + 56|0);
 __THREW__ = 0;
 invoke_vi(576,($5|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ___cxa_find_matching_catch()|0;
 $9 = tempRet0;
 $1 = $8;
 $2 = $9;
 __THREW__ = 0;
 invoke_vi(577,($4|0));
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 $12 = $1;
 $13 = $2;
 ___resumeException($12|0);
 // unreachable;
}
function __ZN3vcg6CameraIfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 HEAPF32[$1>>2] = 0.0;
 $2 = (($1) + 4|0);
 __ZN3vcg6Point2IiEC2Eii($2,0,0);
 $3 = (($1) + 12|0);
 __ZN3vcg6Point2IfEC2Eff($3,0.0,0.0);
 $4 = (($1) + 20|0);
 __ZN3vcg6Point2IfEC2Eff($4,0.0,0.0);
 $5 = (($1) + 28|0);
 __ZN3vcg6Point2IfEC2Eff($5,0.0,0.0);
 $6 = (($1) + 52|0);
 HEAP32[$6>>2] = 0;
 $7 = (($1) + 36|0);
 $8 = (($7) + 12|0);
 HEAPF32[$8>>2] = 0.0;
 $9 = (($1) + 36|0);
 $10 = (($9) + 8|0);
 HEAPF32[$10>>2] = 0.0;
 $11 = (($1) + 36|0);
 $12 = (($11) + 4|0);
 HEAPF32[$12>>2] = 0.0;
 $13 = (($1) + 36|0);
 HEAPF32[$13>>2] = 0.0;
 STACKTOP = sp;return;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_EC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 __ZN3vcg8Matrix44IfEC2Ev($3);
 $4 = (($3) + 64|0);
 __THREW__ = 0;
 invoke_vi(578,($4|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $7 = ___cxa_find_matching_catch()|0;
 $8 = tempRet0;
 $1 = $7;
 $2 = $8;
 __THREW__ = 0;
 invoke_vi(579,($3|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $13 = ___cxa_find_matching_catch(0|0)|0;
  $14 = tempRet0;
  ___clang_call_terminate($13);
  // unreachable;
 }
 $11 = $1;
 $12 = $2;
 ___resumeException($11|0);
 // unreachable;
}
function __ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_E11SetIdentityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = sp;
 $0 = $this;
 $2 = $0;
 __ZN3vcg8Matrix44IfE11SetIdentityEv($2);
 $3 = (($2) + 64|0);
 __ZN3vcg6Point3IfEC2Efff($1,0.0,0.0,0.0);
 (__ZN3vcg6Point3IfEaSERKS1_($3,$1)|0);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE11SetIdentityEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZN3vcg8Matrix44IfE11SetDiagonalEf($1,1.0);
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE11SetDiagonalEf($this,$k) {
 $this = $this|0;
 $k = +$k;
 var $0 = 0, $1 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $k;
 $2 = $0;
 __ZN3vcg8Matrix44IfE7SetZeroEv($2);
 $3 = $1;
 $4 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,0,0)|0);
 HEAPF32[$4>>2] = $3;
 $5 = $1;
 $6 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,1,1)|0);
 HEAPF32[$6>>2] = $5;
 $7 = $1;
 $8 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,2,2)|0);
 HEAPF32[$8>>2] = $7;
 $9 = (__ZN3vcg8Matrix44IfE9ElementAtEii($2,3,3)|0);
 HEAPF32[$9>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE7SetZeroEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 dest=$1+0|0; stop=dest+64|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 STACKTOP = sp;return;
}
function __ZN3vcg8Matrix44IfE9ElementAtEii($this,$row,$col) {
 $this = $this|0;
 $row = $row|0;
 $col = $col|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $row;
 $2 = $col;
 $3 = $0;
 $4 = $1;
 $5 = ($4|0)>=(0);
 if (!($5)) {
  ___assert_fail((7656|0),(7680|0),249,(7760|0));
  // unreachable;
 }
 $6 = $1;
 $7 = ($6|0)<(4);
 if (!($7)) {
  ___assert_fail((7656|0),(7680|0),249,(7760|0));
  // unreachable;
 }
 $8 = $2;
 $9 = ($8|0)>=(0);
 if (!($9)) {
  ___assert_fail((7776|0),(7680|0),250,(7760|0));
  // unreachable;
 }
 $10 = $2;
 $11 = ($10|0)<(4);
 if ($11) {
  $12 = $1;
  $13 = $12 << 2;
  $14 = $2;
  $15 = (($13) + ($14))|0;
  $16 = (($3) + ($15<<2)|0);
  STACKTOP = sp;return ($16|0);
 } else {
  ___assert_fail((7776|0),(7680|0),250,(7760|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZN3vcg8Matrix44IfEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point2IiEC2Eii($this,$nx,$ny) {
 $this = $this|0;
 $nx = $nx|0;
 $ny = $ny|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $nx;
 $2 = $ny;
 $3 = $0;
 $4 = $1;
 HEAP32[$3>>2] = $4;
 $5 = $2;
 $6 = (($3) + 4|0);
 HEAP32[$6>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_($this,$__comp) {
 $this = $this|0;
 $__comp = $__comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp + 72|0;
 $5 = sp + 8|0;
 $8 = sp + 68|0;
 $9 = sp + 93|0;
 $10 = sp;
 $23 = sp + 92|0;
 $21 = $this;
 $22 = $__comp;
 $24 = $21;
 $25 = (($24) + 4|0);
 $20 = $25;
 $26 = $20;
 $19 = $26;
 $27 = $19;
 $18 = $27;
 $17 = $27;
 $28 = $17;
 HEAP32[$28>>2] = 0;
 $29 = (($24) + 8|0);
 ;HEAP8[$10+0>>0]=HEAP8[$23+0>>0]|0;
 $7 = $29;
 HEAP32[$8>>2] = 0;
 $30 = $7;
 $6 = $8;
 $31 = $6;
 $32 = HEAP32[$31>>2]|0;
 $0 = $10;
 ;HEAP8[$5+0>>0]=HEAP8[$9+0>>0]|0;
 $3 = $30;
 HEAP32[$4>>2] = $32;
 $33 = $3;
 $2 = $5;
 $1 = $4;
 $34 = $1;
 $35 = HEAP32[$34>>2]|0;
 HEAP32[$33>>2] = $35;
 $15 = $24;
 $36 = $15;
 $37 = (($36) + 4|0);
 $14 = $37;
 $38 = $14;
 $13 = $38;
 $39 = $13;
 $12 = $39;
 $40 = $12;
 $11 = $40;
 $41 = $11;
 $16 = $24;
 $42 = $16;
 HEAP32[$42>>2] = $41;
 STACKTOP = sp;return;
}
function __ZN3vcg6Point3IfE1XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZN3vcg6Point3IfE1YEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 4|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN3vcg6Point3IfE1ZEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = (($1) + 8|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum$i = 0, $$sum$i1 = 0, $$sum$i11 = 0, $$sum$i9 = 0, $$sum1$i = 0, $$sum1$i10 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[_stdin>>2]|0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(8512,$0,8568);
 HEAP32[7800>>2] = ((9776 + 12|0));
 HEAP32[((7800 + 8|0))>>2] = ((9776 + 32|0));
 HEAP32[((7800 + 4|0))>>2] = 0;
 $1 = HEAP32[9776>>2]|0;
 $2 = (7800 + ($1)|0);
 __THREW__ = 0;
 invoke_vii(393,($2|0),(8512|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch()|0;
  $6 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((7800 + 8|0)));
  ___resumeException($5|0);
  // unreachable;
 }
 $$sum$i = (($1) + 72)|0;
 $7 = (7800 + ($$sum$i)|0);
 HEAP32[$7>>2] = 0;
 $$sum1$i = (($1) + 76)|0;
 $8 = (7800 + ($$sum1$i)|0);
 HEAP32[$8>>2] = -1;
 $9 = HEAP32[_stdout>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8616,$9,((8568 + 8|0)));
 HEAP32[7888>>2] = ((9856 + 12|0));
 HEAP32[((7888 + 4|0))>>2] = ((9856 + 32|0));
 $10 = HEAP32[9856>>2]|0;
 $11 = (7888 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(393,($11|0),(8616|0));
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((7888 + 4|0)));
  ___resumeException($14|0);
  // unreachable;
 }
 $$sum$i1 = (($10) + 72)|0;
 $16 = (7888 + ($$sum$i1)|0);
 HEAP32[$16>>2] = 0;
 $$sum1$i2 = (($10) + 76)|0;
 $17 = (7888 + ($$sum1$i2)|0);
 HEAP32[$17>>2] = -1;
 $18 = HEAP32[_stderr>>2]|0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(8664,$18,((8568 + 16|0)));
 HEAP32[7976>>2] = ((9856 + 12|0));
 HEAP32[((7976 + 4|0))>>2] = ((9856 + 32|0));
 $19 = (7976 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(393,($19|0),(8664|0));
 $20 = __THREW__; __THREW__ = 0;
 $21 = $20&1;
 if ($21) {
  $22 = ___cxa_find_matching_catch()|0;
  $23 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((7976 + 4|0)));
  ___resumeException($22|0);
  // unreachable;
 }
 $24 = (7976 + ($$sum$i1)|0);
 HEAP32[$24>>2] = 0;
 $25 = (7976 + ($$sum1$i2)|0);
 HEAP32[$25>>2] = -1;
 $26 = HEAP32[7976>>2]|0;
 $27 = (($26) + -12|0);
 $28 = HEAP32[$27>>2]|0;
 $$sum = (($28) + 24)|0;
 $29 = (7976 + ($$sum)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[8064>>2] = ((9856 + 12|0));
 HEAP32[((8064 + 4|0))>>2] = ((9856 + 32|0));
 $31 = (8064 + ($10)|0);
 __THREW__ = 0;
 invoke_vii(393,($31|0),($30|0));
 $32 = __THREW__; __THREW__ = 0;
 $33 = $32&1;
 if ($33) {
  $34 = ___cxa_find_matching_catch()|0;
  $35 = tempRet0;
  __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev(((8064 + 4|0)));
  ___resumeException($34|0);
  // unreachable;
 }
 $36 = (8064 + ($$sum$i1)|0);
 HEAP32[$36>>2] = 0;
 $37 = (8064 + ($$sum1$i2)|0);
 HEAP32[$37>>2] = -1;
 $38 = HEAP32[7800>>2]|0;
 $39 = (($38) + -12|0);
 $40 = HEAP32[$39>>2]|0;
 $$sum19 = (($40) + 72)|0;
 $41 = (7800 + ($$sum19)|0);
 HEAP32[$41>>2] = 7888;
 $42 = HEAP32[7976>>2]|0;
 $43 = (($42) + -12|0);
 $44 = HEAP32[$43>>2]|0;
 $$sum20 = (($44) + 4)|0;
 $45 = (7976 + ($$sum20)|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 | 8192;
 HEAP32[$45>>2] = $47;
 $48 = HEAP32[7976>>2]|0;
 $49 = (($48) + -12|0);
 $50 = HEAP32[$49>>2]|0;
 $$sum21 = (($50) + 72)|0;
 $51 = (7976 + ($$sum21)|0);
 HEAP32[$51>>2] = 7888;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(8712,$0,((8568 + 24|0)));
 HEAP32[8152>>2] = ((9816 + 12|0));
 HEAP32[((8152 + 8|0))>>2] = ((9816 + 32|0));
 HEAP32[((8152 + 4|0))>>2] = 0;
 $52 = HEAP32[9816>>2]|0;
 $53 = (8152 + ($52)|0);
 __THREW__ = 0;
 invoke_vii(393,($53|0),(8712|0));
 $54 = __THREW__; __THREW__ = 0;
 $55 = $54&1;
 if ($55) {
  $56 = ___cxa_find_matching_catch()|0;
  $57 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((8152 + 8|0)));
  ___resumeException($56|0);
  // unreachable;
 }
 $$sum$i9 = (($52) + 72)|0;
 $58 = (8152 + ($$sum$i9)|0);
 HEAP32[$58>>2] = 0;
 $$sum1$i10 = (($52) + 76)|0;
 $59 = (8152 + ($$sum1$i10)|0);
 HEAP32[$59>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8768,$9,((8568 + 32|0)));
 HEAP32[8240>>2] = ((9896 + 12|0));
 HEAP32[((8240 + 4|0))>>2] = ((9896 + 32|0));
 $60 = HEAP32[9896>>2]|0;
 $61 = (8240 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(393,($61|0),(8768|0));
 $62 = __THREW__; __THREW__ = 0;
 $63 = $62&1;
 if ($63) {
  $64 = ___cxa_find_matching_catch()|0;
  $65 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((8240 + 4|0)));
  ___resumeException($64|0);
  // unreachable;
 }
 $$sum$i11 = (($60) + 72)|0;
 $66 = (8240 + ($$sum$i11)|0);
 HEAP32[$66>>2] = 0;
 $$sum1$i12 = (($60) + 76)|0;
 $67 = (8240 + ($$sum1$i12)|0);
 HEAP32[$67>>2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(8816,$18,((8568 + 40|0)));
 HEAP32[8328>>2] = ((9896 + 12|0));
 HEAP32[((8328 + 4|0))>>2] = ((9896 + 32|0));
 $68 = (8328 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(393,($68|0),(8816|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch()|0;
  $72 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((8328 + 4|0)));
  ___resumeException($71|0);
  // unreachable;
 }
 $73 = (8328 + ($$sum$i11)|0);
 HEAP32[$73>>2] = 0;
 $74 = (8328 + ($$sum1$i12)|0);
 HEAP32[$74>>2] = -1;
 $75 = HEAP32[8328>>2]|0;
 $76 = (($75) + -12|0);
 $77 = HEAP32[$76>>2]|0;
 $$sum22 = (($77) + 24)|0;
 $78 = (8328 + ($$sum22)|0);
 $79 = HEAP32[$78>>2]|0;
 HEAP32[8416>>2] = ((9896 + 12|0));
 HEAP32[((8416 + 4|0))>>2] = ((9896 + 32|0));
 $80 = (8416 + ($60)|0);
 __THREW__ = 0;
 invoke_vii(393,($80|0),($79|0));
 $81 = __THREW__; __THREW__ = 0;
 $82 = $81&1;
 if ($82) {
  $83 = ___cxa_find_matching_catch()|0;
  $84 = tempRet0;
  __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev(((8416 + 4|0)));
  ___resumeException($83|0);
  // unreachable;
 } else {
  $85 = (8416 + ($$sum$i11)|0);
  HEAP32[$85>>2] = 0;
  $86 = (8416 + ($$sum1$i12)|0);
  HEAP32[$86>>2] = -1;
  $87 = HEAP32[8152>>2]|0;
  $88 = (($87) + -12|0);
  $89 = HEAP32[$88>>2]|0;
  $$sum23 = (($89) + 72)|0;
  $90 = (8152 + ($$sum23)|0);
  HEAP32[$90>>2] = 8240;
  $91 = HEAP32[8328>>2]|0;
  $92 = (($91) + -12|0);
  $93 = HEAP32[$92>>2]|0;
  $$sum24 = (($93) + 4)|0;
  $94 = (8328 + ($$sum24)|0);
  $95 = HEAP32[$94>>2]|0;
  $96 = $95 | 8192;
  HEAP32[$94>>2] = $96;
  $97 = HEAP32[8328>>2]|0;
  $98 = (($97) + -12|0);
  $99 = HEAP32[$98>>2]|0;
  $$sum25 = (($99) + 72)|0;
  $100 = (8328 + ($$sum25)|0);
  HEAP32[$100>>2] = 8240;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 (invoke_ii(580,(7888|0))|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  (invoke_ii(580,(8064|0))|0);
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   __THREW__ = 0;
   (invoke_ii(581,(8240|0))|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if (!($5)) {
    __THREW__ = 0;
    (invoke_ii(581,(8416|0))|0);
    $6 = __THREW__; __THREW__ = 0;
    $7 = $6&1;
    if (!($7)) {
     STACKTOP = sp;return;
    }
   }
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+1)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;HEAP32[$0>>2] = (($1+-1)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$this>>2]|0;
 $4 = (($3) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 FUNCTION_TABLE_vi[$5 & 1023]($this);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20864 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(582,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20888 + 8|0));
 $0 = (($this) + 4|0);
 $1 = HEAP8[$msg>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($msg) + 1|0);
  $7 = $6;
 } else {
  $4 = (($msg) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 __THREW__ = 0;
 invoke_vii(582,($0|0),($7|0));
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $10 = ___cxa_find_matching_catch()|0;
  $11 = tempRet0;
  ___resumeException($10|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt13runtime_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20888 + 8|0));
 $0 = (($this) + 4|0);
 __THREW__ = 0;
 invoke_vii(582,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__114error_category23default_error_conditionEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$agg$result>>2] = $ev;
 $0 = (($agg$result) + 4|0);
 HEAP32[$0>>2] = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_viii[$3 & 1023]($0,$this,$code);
 $4 = (($0) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($condition) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5|0)==($7|0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = HEAP32[$0>>2]|0;
 $10 = HEAP32[$condition>>2]|0;
 $11 = ($9|0)==($10|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition) {
 $this = $this|0;
 $code = $code|0;
 $condition = $condition|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($code) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $3 = HEAP32[$code>>2]|0;
 $4 = ($3|0)==($condition|0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strerror(($ev|0))|0);
 $1 = (_strlen(($0|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,$0,$1);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$ec,$what_arg) {
 $agg$result = $agg$result|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = HEAP32[$ec>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
  ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
  STACKTOP = sp;return;
 }
 $3 = HEAP8[$what_arg>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $8 = $3&255;
  $9 = $8 >>> 1;
  $11 = $9;
 } else {
  $6 = (($what_arg) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $7;
 }
 $10 = ($11|0)==(0);
 if ($10) {
  $17 = $1;
 } else {
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg,9376)|0);
  $$pre = HEAP32[$ec>>2]|0;
  $17 = $$pre;
 }
 $12 = (($ec) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 24|0);
 $16 = HEAP32[$15>>2]|0;
 FUNCTION_TABLE_viii[$16 & 1023]($0,$13,$17);
 $18 = HEAP8[$0>>0]|0;
 $19 = $18 & 1;
 $20 = ($19<<24>>24)==(0);
 if ($20) {
  $25 = (($0) + 1|0);
  $26 = $18&255;
  $27 = $26 >>> 1;
  $28 = $25;$29 = $27;
 } else {
  $21 = (($0) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($0) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $28 = $22;$29 = $24;
 }
 __THREW__ = 0;
 (invoke_iiii(392,($what_arg|0),($28|0),($29|0))|0);
 $30 = __THREW__; __THREW__ = 0;
 $31 = $30&1;
 if ($31) {
  $32 = ___cxa_find_matching_catch()|0;
  $33 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  ___resumeException($32|0);
  // unreachable;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 ;HEAP32[$agg$result+0>>2]=HEAP32[$what_arg+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$what_arg+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$what_arg+8>>2]|0;
 ;HEAP32[$what_arg+0>>2]=0|0;HEAP32[$what_arg+4>>2]=0|0;HEAP32[$what_arg+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$ec,$what_arg) {
 $this = $this|0;
 $ec = $ec|0;
 $what_arg = $what_arg|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 12|0;
 $1 = sp;
 $2 = (_strlen(($what_arg|0))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1,$what_arg,$2);
 __THREW__ = 0;
 invoke_viii(583,($0|0),($ec|0),($1|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $18 = ___cxa_find_matching_catch()|0;
  $19 = tempRet0;
  $$0 = $19;$$01 = $18;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  ___resumeException($$01|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(584,($this|0),($0|0));
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  HEAP32[$this>>2] = ((9384 + 8|0));
  $7 = (($this) + 8|0);
  $8 = $ec;
  $9 = $8;
  $10 = HEAP32[$9>>2]|0;
  $11 = (($8) + 4)|0;
  $12 = $11;
  $13 = HEAP32[$12>>2]|0;
  $14 = $7;
  $15 = $14;
  HEAP32[$15>>2] = $10;
  $16 = (($14) + 4)|0;
  $17 = $16;
  HEAP32[$17>>2] = $13;
  STACKTOP = sp;return;
 }
 $20 = ___cxa_find_matching_catch()|0;
 $21 = tempRet0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 $$0 = $21;$$01 = $20;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg,$func) {
 $flag = $flag|0;
 $arg = $arg|0;
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 (_pthread_mutex_lock((9528|0))|0);
 $0 = HEAP32[$flag>>2]|0;
 $1 = ($0|0)==(1);
 if ($1) {
  while(1) {
   (_pthread_cond_wait((9552|0),(9528|0))|0);
   $2 = HEAP32[$flag>>2]|0;
   $3 = ($2|0)==(1);
   if (!($3)) {
    break;
   }
  }
 }
 $4 = HEAP32[$flag>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  (_pthread_mutex_unlock((9528|0))|0);
  STACKTOP = sp;return;
 }
 HEAP32[$flag>>2] = 1;
 __THREW__ = 0;
 (invoke_ii(585,(9528|0))|0);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  __THREW__ = 0;
  invoke_vi($func|0,($arg|0));
  $8 = __THREW__; __THREW__ = 0;
  $9 = $8&1;
  if (!($9)) {
   __THREW__ = 0;
   (invoke_ii(586,(9528|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    HEAP32[$flag>>2] = -1;
    __THREW__ = 0;
    (invoke_ii(585,(9528|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_ii(587,(9552|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $16 = ___cxa_find_matching_catch(0|0)|0;
 $17 = tempRet0;
 (___cxa_begin_catch(($16|0))|0);
 __THREW__ = 0;
 (invoke_ii(586,(9528|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if (!($19)) {
  HEAP32[$flag>>2] = 0;
  __THREW__ = 0;
  (invoke_ii(585,(9528|0))|0);
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if (!($21)) {
   __THREW__ = 0;
   (invoke_ii(587,(9552|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if (!($23)) {
    __THREW__ = 0;
    invoke_v(588);
    $24 = __THREW__; __THREW__ = 0;
    $25 = $24&1;
    if (!($25)) {
     // unreachable;
    }
   }
  }
 }
 $26 = ___cxa_find_matching_catch()|0;
 $27 = tempRet0;
 __THREW__ = 0;
 invoke_v(464);
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $30 = ___cxa_find_matching_catch(0|0)|0;
  $31 = tempRet0;
  ___clang_call_terminate($30);
  // unreachable;
 } else {
  ___resumeException($26|0);
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(589,($0|0),(9600|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((20944 + 8|0));
  ___cxa_throw(($0|0),(20992|0),(352|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(589,($0|0),(9600|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((21008 + 8|0));
  ___cxa_throw(($0|0),(21056|0),(352|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this+0>>2]=HEAP32[$__str+0>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
  STACKTOP = sp;return;
 } else {
  $3 = (($__str) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__str) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(11);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = (($this) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = (($this) + 4|0);
  HEAP32[$10>>2] = $__n;
  $__p$0 = $7;
 }
 _memset(($__p$0|0),($__c|0),($__n|0))|0;
 $11 = (($__p$0) + ($__n)|0);
 HEAP8[$11>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__str) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__pos>>>0);
 if ($7) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 }
 if ($2) {
  $11 = (($__str) + 1|0);
  $13 = $11;
 } else {
  $9 = (($__str) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $13 = $10;
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($8) - ($__pos))|0;
 $15 = ($14>>>0)<($__n>>>0);
 $16 = $15 ? $14 : $__n;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$12,$16);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==($__str|0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$__str>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $8 = (($__str) + 1|0);
  $9 = $1&255;
  $10 = $9 >>> 1;
  $11 = $8;$12 = $10;
 } else {
  $4 = (($__str) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (($__str) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $11 = $5;$12 = $7;
 }
 (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$11,$12)|0);
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 10;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 1|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 _memmove(($14|0),($__s|0),($__n|0))|0;
 $15 = (($14) + ($__n)|0);
 HEAP8[$15>>0] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($this) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8>>>0)<($__n>>>0);
 if ($7) {
  $9 = (($__n) - ($8))|0;
  (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$9,$__c)|0);
  STACKTOP = sp;return;
 }
 if ($2) {
  $14 = ((($this) + ($__n)|0) + 1|0);
  HEAP8[$14>>0] = 0;
  $15 = $__n << 1;
  $16 = $15&255;
  HEAP8[$this>>0] = $16;
  STACKTOP = sp;return;
 } else {
  $10 = (($this) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($__n)|0);
  HEAP8[$12>>0] = 0;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $__n;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($this|0);
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $15 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $15 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $16 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $16 = $11;
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($__n>>>0);
 if ($17) {
  $18 = (($__n) - ($15))|0;
  $19 = (($18) + ($16))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $8;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 _memset(($26|0),($__c|0),($__n|0))|0;
 $28 = (($16) + ($__n))|0;
 $29 = HEAP8[$this>>0]|0;
 $30 = $29 & 1;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  $33 = $28 << 1;
  $34 = $33&255;
  HEAP8[$this>>0] = $34;
 } else {
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $28;
 }
 $35 = (($27) + ($28)|0);
 HEAP8[$35>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0;
 var $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $21 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(10);
 do {
  if ($23) {
   $24 = (($this) + 1|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $42 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = (($21) + 1)|0;
   if ($27) {
    $29 = (__Znwj($28)|0);
    $__new_data$0 = $29;
   } else {
    __THREW__ = 0;
    $30 = (invoke_ii(469,($28|0))|0);
    $31 = __THREW__; __THREW__ = 0;
    $32 = $31&1;
    if ($32) {
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     (___cxa_begin_catch(($33|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $__new_data$0 = $30;
    }
   }
   $35 = HEAP8[$this>>0]|0;
   $36 = $35 & 1;
   $37 = ($36<<24>>24)==(0);
   if ($37) {
    $40 = (($this) + 1|0);
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 0;
    break;
   } else {
    $38 = (($this) + 8|0);
    $39 = HEAP32[$38>>2]|0;
    $42 = $35;$__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $41 = $42 & 1;
 $43 = ($41<<24>>24)==(0);
 if ($43) {
  $46 = $42&255;
  $47 = $46 >>> 1;
  $49 = $47;
 } else {
  $44 = (($this) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $49 = $45;
 }
 $48 = (($49) + 1)|0;
 _memcpy(($__new_data$1|0),($__p$0|0),($48|0))|0;
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $50 = (($21) + 1)|0;
  $51 = $50 | 1;
  HEAP32[$this>>2] = $51;
  $52 = (($this) + 4|0);
  HEAP32[$52>>2] = $15;
  $53 = (($this) + 8|0);
  HEAP32[$53>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $54 = $15 << 1;
  $55 = $54&255;
  HEAP8[$this>>0] = $55;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($__s|0))|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 10;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 1|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0)|0);
  HEAP8[$__p$0>>0] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D)|0);
  HEAP8[$22>>0] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $14 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $14 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $15 = $12;
 } else {
  $9 = (($this) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $15 = $10;
 }
 $13 = (($14) - ($15))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($14))|0;
  $34 = (($33) + ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$14,$34,$15,$15,0,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 $17 = ($__n|0)==(0);
 if ($17) {
  STACKTOP = sp;return ($this|0);
 }
 $18 = $7 & 1;
 $19 = ($18<<24>>24)==(0);
 if ($19) {
  $22 = (($this) + 1|0);
  $24 = $22;
 } else {
  $20 = (($this) + 8|0);
  $21 = HEAP32[$20>>2]|0;
  $24 = $21;
 }
 $23 = (($24) + ($15)|0);
 _memcpy(($23|0),($__s|0),($__n|0))|0;
 $25 = (($15) + ($__n))|0;
 $26 = HEAP8[$this>>0]|0;
 $27 = $26 & 1;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $30 = $25 << 1;
  $31 = $30&255;
  HEAP8[$this>>0] = $31;
 } else {
  $29 = (($this) + 4|0);
  HEAP32[$29>>2] = $25;
 }
 $32 = (($24) + ($25)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = ($__n_add|0)==(0);
 if (!($20)) {
  $21 = (($17) + ($__n_copy)|0);
  _memcpy(($21|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $22 = (($__old_sz) - ($__n_del))|0;
 $23 = ($22|0)==($__n_copy|0);
 if (!($23)) {
  $24 = (($22) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $25 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $26 = (($19) + ($$sum1)|0);
  _memcpy(($25|0),($26|0),($24|0))|0;
 }
 $27 = ($__old_cap|0)==(10);
 if ($27) {
  $28 = (($this) + 8|0);
  HEAP32[$28>>2] = $17;
  $29 = $16 | 1;
  HEAP32[$this>>2] = $29;
  $30 = (($22) + ($__n_add))|0;
  $31 = (($this) + 4|0);
  HEAP32[$31>>2] = $30;
  $32 = (($17) + ($30)|0);
  HEAP8[$32>>0] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $28 = (($this) + 8|0);
 HEAP32[$28>>2] = $17;
 $29 = $16 | 1;
 HEAP32[$this>>2] = $29;
 $30 = (($22) + ($__n_add))|0;
 $31 = (($this) + 4|0);
 HEAP32[$31>>2] = $30;
 $32 = (($17) + ($30)|0);
 HEAP8[$32>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 1|0);
  $19 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $19 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  if ($13) {
   $16 = 11;
  } else {
   $14 = (($12) + 16)|0;
   $15 = $14 & -16;
   $16 = $15;
  }
 } else {
  $16 = -17;
 }
 $17 = (__Znwj($16)|0);
 $18 = ($__n_copy|0)==(0);
 if (!($18)) {
  _memcpy(($17|0),($19|0),($__n_copy|0))|0;
 }
 $20 = (($__old_sz) - ($__n_del))|0;
 $21 = ($20|0)==($__n_copy|0);
 if (!($21)) {
  $22 = (($20) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $23 = (($17) + ($$sum)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $24 = (($19) + ($$sum1)|0);
  _memcpy(($23|0),($24|0),($22|0))|0;
 }
 $25 = ($__old_cap|0)==(10);
 if ($25) {
  $26 = (($this) + 8|0);
  HEAP32[$26>>2] = $17;
  $27 = $16 | 1;
  HEAP32[$this>>2] = $27;
  STACKTOP = sp;return;
 }
 __ZdlPv($19);
 $26 = (($this) + 8|0);
 HEAP32[$26>>2] = $17;
 $27 = $16 | 1;
 HEAP32[$this>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4findEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($this) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $11 = $9;$13 = $7;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($this) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $11 = $6;$13 = $4;
 }
 $10 = ($11>>>0)>($__pos>>>0);
 if (!($10)) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $12 = (($13) + ($__pos)|0);
 $14 = (($11) - ($__pos))|0;
 $15 = $__c&255;
 $16 = (_memchr($12,$15,$14)|0);
 $17 = ($16|0)==(0|0);
 if ($17) {
  $$0$i = -1;
  STACKTOP = sp;return ($$0$i|0);
 }
 $18 = $16;
 $19 = $13;
 $20 = (($18) - ($19))|0;
 $$0$i = $20;
 STACKTOP = sp;return ($$0$i|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(2);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__sz;
  $__p$0 = $8;
 }
 (_wmemcpy($__p$0,$__s,$__sz)|0);
 $12 = (($__p$0) + ($__sz<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__n>>>0)<(2);
 if ($1) {
  $2 = $__n << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = (($this) + 4|0);
  $__p$0 = $4;
 } else {
  $5 = (($__n) + 4)|0;
  $6 = $5 & -4;
  $7 = $6 << 2;
  $8 = (__Znwj($7)|0);
  $9 = (($this) + 8|0);
  HEAP32[$9>>2] = $8;
  $10 = $6 | 1;
  HEAP32[$this>>2] = $10;
  $11 = (($this) + 4|0);
  HEAP32[$11>>2] = $__n;
  $__p$0 = $8;
 }
 (_wmemset($__p$0,$__c,$__n)|0);
 $12 = (($__p$0) + ($__n<<2)|0);
 HEAP32[$12>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 __ZdlPv($4);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = 1;$9 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $7 = $phitmp$i;$9 = $5;
 }
 $6 = ($7>>>0)<($__n>>>0);
 $8 = $9 & 1;
 $10 = ($8<<24>>24)==(0);
 if ($6) {
  if ($10) {
   $24 = $9&255;
   $25 = $24 >>> 1;
   $27 = $25;
  } else {
   $22 = (($this) + 4|0);
   $23 = HEAP32[$22>>2]|0;
   $27 = $23;
  }
  $26 = (($__n) - ($7))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$7,$26,$27,0,$27,$__n,$__s);
  STACKTOP = sp;return ($this|0);
 }
 if ($10) {
  $13 = (($this) + 4|0);
  $14 = $13;
 } else {
  $11 = (($this) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $14 = $12;
 }
 (_wmemmove($14,$__s,$__n)|0);
 $15 = (($14) + ($__n<<2)|0);
 HEAP32[$15>>2] = 0;
 $16 = HEAP8[$this>>0]|0;
 $17 = $16 & 1;
 $18 = ($17<<24>>24)==(0);
 if ($18) {
  $20 = $__n << 1;
  $21 = $20&255;
  HEAP8[$this>>0] = $21;
  STACKTOP = sp;return ($this|0);
 } else {
  $19 = (($this) + 4|0);
  HEAP32[$19>>2] = $__n;
  STACKTOP = sp;return ($this|0);
 }
 return (0)|0;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $$sink = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0;
 var $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0, $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(1073741807);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 1;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $15 = $13;
 } else {
  $10 = (($this) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $15 = $11;
 }
 $14 = ($15>>>0)>($__res_arg>>>0);
 $16 = $14 ? $15 : $__res_arg;
 $17 = ($16>>>0)<(2);
 if ($17) {
  $21 = 1;
 } else {
  $18 = (($16) + 4)|0;
  $19 = $18 & -4;
  $phitmp$i2 = (($19) + -1)|0;
  $21 = $phitmp$i2;
 }
 $20 = ($21|0)==($22|0);
 if ($20) {
  STACKTOP = sp;return;
 }
 $23 = ($21|0)==(1);
 do {
  if ($23) {
   $24 = (($this) + 4|0);
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $43 = $8;$__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
  } else {
   $27 = ($21>>>0)>($22>>>0);
   $28 = $21 << 2;
   $29 = (($28) + 4)|0;
   if ($27) {
    $30 = (__Znwj($29)|0);
    $$sink = $30;
   } else {
    __THREW__ = 0;
    $31 = (invoke_ii(469,($29|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     $34 = ___cxa_find_matching_catch(0|0)|0;
     $35 = tempRet0;
     (___cxa_begin_catch(($34|0))|0);
     ___cxa_end_catch();
     STACKTOP = sp;return;
    } else {
     $$sink = $31;
    }
   }
   $36 = HEAP8[$this>>0]|0;
   $37 = $36 & 1;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $41 = (($this) + 4|0);
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $41;$__was_long$0$off0 = 0;
    break;
   } else {
    $39 = (($this) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $43 = $36;$__new_data$1 = $$sink;$__now_long$0$off0 = 1;$__p$0 = $40;$__was_long$0$off0 = 1;
    break;
   }
  }
 } while(0);
 $42 = $43 & 1;
 $44 = ($42<<24>>24)==(0);
 if ($44) {
  $47 = $43&255;
  $48 = $47 >>> 1;
  $50 = $48;
 } else {
  $45 = (($this) + 4|0);
  $46 = HEAP32[$45>>2]|0;
  $50 = $46;
 }
 $49 = (($50) + 1)|0;
 (_wmemcpy($__new_data$1,$__p$0,$49)|0);
 if ($__was_long$0$off0) {
  __ZdlPv($__p$0);
 }
 if ($__now_long$0$off0) {
  $51 = (($21) + 1)|0;
  $52 = $51 | 1;
  HEAP32[$this>>2] = $52;
  $53 = (($this) + 4|0);
  HEAP32[$53>>2] = $15;
  $54 = (($this) + 8|0);
  HEAP32[$54>>2] = $__new_data$1;
  STACKTOP = sp;return;
 } else {
  $55 = $15 << 1;
  $56 = $55&255;
  HEAP8[$this>>0] = $56;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__cap$0 = 0, $__p$0 = 0, $__p$0$sum$pre = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)!=(0);
 if ($2) {
  $5 = HEAP32[$this>>2]|0;
  $6 = $5 & -2;
  $7 = (($6) + -1)|0;
  $8 = (($this) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $__cap$0 = $7;$__sz$0 = $9;
 } else {
  $3 = $0&255;
  $4 = $3 >>> 1;
  $__cap$0 = 1;$__sz$0 = $4;
 }
 $10 = ($__sz$0|0)==($__cap$0|0);
 if ($10) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__cap$0,1,$__cap$0,$__cap$0,0,0);
  $11 = HEAP8[$this>>0]|0;
  $12 = $11 & 1;
  $13 = ($12<<24>>24)==(0);
  if ($13) {
   label = 7;
  } else {
   label = 8;
  }
 } else {
  if ($2) {
   label = 8;
  } else {
   label = 7;
  }
 }
 if ((label|0) == 7) {
  $14 = (($this) + 4|0);
  $15 = $__sz$0 << 1;
  $16 = (($15) + 2)|0;
  $17 = $16&255;
  HEAP8[$this>>0] = $17;
  $__p$0$sum$pre = (($__sz$0) + 1)|0;
  $$pn = $14;$__p$0$sum$pre$phiZZZ2D = $__p$0$sum$pre;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  $18 = (($this) + 8|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($__sz$0) + 1)|0;
  $21 = (($this) + 4|0);
  HEAP32[$21>>2] = $20;
  $$pn = $19;$__p$0$sum$pre$phiZZZ2D = $20;
  $__p$0 = (($$pn) + ($__sz$0<<2)|0);
  HEAP32[$__p$0>>2] = $__c;
  $22 = (($$pn) + ($__p$0$sum$pre$phiZZZ2D<<2)|0);
  HEAP32[$22>>2] = 0;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741806 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy<<2)|0);
  (_wmemcpy($22,$__p_new_stuff,$__n_add)|0);
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $26 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $27 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($26,$27,$25)|0);
 }
 $28 = ($__old_cap|0)==(1);
 if ($28) {
  $29 = (($this) + 8|0);
  HEAP32[$29>>2] = $18;
  $30 = $17 | 1;
  HEAP32[$this>>2] = $30;
  $31 = (($23) + ($__n_add))|0;
  $32 = (($this) + 4|0);
  HEAP32[$32>>2] = $31;
  $33 = (($18) + ($31<<2)|0);
  HEAP32[$33>>2] = 0;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $29 = (($this) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 $31 = (($23) + ($__n_add))|0;
 $32 = (($this) + 4|0);
 HEAP32[$32>>2] = $31;
 $33 = (($18) + ($31<<2)|0);
 HEAP32[$33>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (1073741807 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = (($this) + 4|0);
  $20 = $7;
 } else {
  $5 = (($this) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(536870887);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(2);
  if ($13) {
   $17 = 2;
  } else {
   $14 = (($12) + 4)|0;
   $15 = $14 & -4;
   $17 = $15;
  }
 } else {
  $17 = 1073741807;
 }
 $16 = $17 << 2;
 $18 = (__Znwj($16)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  (_wmemcpy($18,$20,$__n_copy)|0);
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $$sum = (($__n_add) + ($__n_copy))|0;
  $24 = (($18) + ($$sum<<2)|0);
  $$sum1 = (($__n_del) + ($__n_copy))|0;
  $25 = (($20) + ($$sum1<<2)|0);
  (_wmemcpy($24,$25,$23)|0);
 }
 $26 = ($__old_cap|0)==(1);
 if ($26) {
  $27 = (($this) + 8|0);
  HEAP32[$27>>2] = $18;
  $28 = $17 | 1;
  HEAP32[$this>>2] = $28;
  STACKTOP = sp;return;
 }
 __ZdlPv($20);
 $27 = (($this) + 8|0);
 HEAP32[$27>>2] = $18;
 $28 = $17 | 1;
 HEAP32[$this>>2] = $28;
 STACKTOP = sp;return;
}
function __ZNSt3__19to_stringEi($agg$result,$val) {
 $agg$result = $agg$result|0;
 $val = $val|0;
 var $$ = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available$0$i = 0, $available$0$ph$i = 0, $available$1$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 4|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($0|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($3|0);
  // unreachable;
 }
 $5 = HEAP8[$0>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $available$0$ph$i = $11;
 } else {
  $8 = (($0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $available$0$ph$i = $9;
 }
 $12 = (($0) + 1|0);
 $13 = (($0) + 8|0);
 $15 = $5;$available$0$i = $available$0$ph$i;
 while(1) {
  $14 = $15 & 1;
  $16 = ($14<<24>>24)==(0);
  $17 = HEAP32[$13>>2]|0;
  $$ = $16 ? $12 : $17;
  $18 = (($available$0$i) + 1)|0;
  HEAP32[$vararg_buffer>>2] = $val;
  $19 = (_snprintf($$,$18,9616,$vararg_buffer)|0);
  $20 = ($19|0)>(-1);
  if ($20) {
   $21 = ($19>>>0)>($available$0$i>>>0);
   if ($21) {
    $available$1$i = $19;
   } else {
    break;
   }
  } else {
   $24 = $available$0$i << 1;
   $25 = $24 | 1;
   $available$1$i = $25;
  }
  __THREW__ = 0;
  invoke_viii(540,($0|0),($available$1$i|0),0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 14;
   break;
  }
  $$pre$i = HEAP8[$0>>0]|0;
  $15 = $$pre$i;$available$0$i = $available$1$i;
 }
 if ((label|0) == 14) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $lpad$phi$index = $28;$lpad$phi$index2 = $29;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(540,($0|0),($19|0),0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if (!($23)) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  STACKTOP = sp;return;
 }
 $30 = ___cxa_find_matching_catch()|0;
 $31 = tempRet0;
 $lpad$phi$index = $30;$lpad$phi$index2 = $31;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__19to_stringEf($agg$result,$val) {
 $agg$result = $agg$result|0;
 $val = +$val;
 var $$ = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available$0$i = 0, $available$0$ph$i = 0, $available$1$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($0|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($3|0);
  // unreachable;
 }
 $5 = HEAP8[$0>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $available$0$ph$i = $11;
 } else {
  $8 = (($0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $available$0$ph$i = $9;
 }
 $12 = (($0) + 1|0);
 $13 = $val;
 $14 = (($0) + 8|0);
 $16 = $5;$available$0$i = $available$0$ph$i;
 while(1) {
  $15 = $16 & 1;
  $17 = ($15<<24>>24)==(0);
  $18 = HEAP32[$14>>2]|0;
  $$ = $17 ? $12 : $18;
  $19 = (($available$0$i) + 1)|0;
  HEAPF64[tempDoublePtr>>3]=$13;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $20 = (_snprintf($$,$19,9624,$vararg_buffer)|0);
  $21 = ($20|0)>(-1);
  if ($21) {
   $22 = ($20>>>0)>($available$0$i>>>0);
   if ($22) {
    $available$1$i = $20;
   } else {
    break;
   }
  } else {
   $25 = $available$0$i << 1;
   $26 = $25 | 1;
   $available$1$i = $26;
  }
  __THREW__ = 0;
  invoke_viii(540,($0|0),($available$1$i|0),0);
  $27 = __THREW__; __THREW__ = 0;
  $28 = $27&1;
  if ($28) {
   label = 14;
   break;
  }
  $$pre$i = HEAP8[$0>>0]|0;
  $16 = $$pre$i;$available$0$i = $available$1$i;
 }
 if ((label|0) == 14) {
  $29 = ___cxa_find_matching_catch()|0;
  $30 = tempRet0;
  $lpad$phi$index = $29;$lpad$phi$index2 = $30;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(540,($0|0),($20|0),0);
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if (!($24)) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  STACKTOP = sp;return;
 }
 $31 = ___cxa_find_matching_catch()|0;
 $32 = tempRet0;
 $lpad$phi$index = $31;$lpad$phi$index2 = $32;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__19to_stringEd($agg$result,$val) {
 $agg$result = $agg$result|0;
 $val = +$val;
 var $$ = 0, $$pre$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $available$0$i = 0, $available$0$ph$i = 0, $available$1$i = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = sp + 8|0;
 ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($0|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($3|0);
  // unreachable;
 }
 $5 = HEAP8[$0>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $available$0$ph$i = $11;
 } else {
  $8 = (($0) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $available$0$ph$i = $9;
 }
 $12 = (($0) + 1|0);
 $13 = (($0) + 8|0);
 $15 = $5;$available$0$i = $available$0$ph$i;
 while(1) {
  $14 = $15 & 1;
  $16 = ($14<<24>>24)==(0);
  $17 = HEAP32[$13>>2]|0;
  $$ = $16 ? $12 : $17;
  $18 = (($available$0$i) + 1)|0;
  HEAPF64[tempDoublePtr>>3]=$val;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $19 = (_snprintf($$,$18,9624,$vararg_buffer)|0);
  $20 = ($19|0)>(-1);
  if ($20) {
   $21 = ($19>>>0)>($available$0$i>>>0);
   if ($21) {
    $available$1$i = $19;
   } else {
    break;
   }
  } else {
   $24 = $available$0$i << 1;
   $25 = $24 | 1;
   $available$1$i = $25;
  }
  __THREW__ = 0;
  invoke_viii(540,($0|0),($available$1$i|0),0);
  $26 = __THREW__; __THREW__ = 0;
  $27 = $26&1;
  if ($27) {
   label = 14;
   break;
  }
  $$pre$i = HEAP8[$0>>0]|0;
  $15 = $$pre$i;$available$0$i = $available$1$i;
 }
 if ((label|0) == 14) {
  $28 = ___cxa_find_matching_catch()|0;
  $29 = tempRet0;
  $lpad$phi$index = $28;$lpad$phi$index2 = $29;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_viii(540,($0|0),($19|0),0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if (!($23)) {
  ;HEAP32[$agg$result+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$agg$result+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$agg$result+8>>2]=HEAP32[$0+8>>2]|0;
  ;HEAP32[$0+0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
  STACKTOP = sp;return;
 }
 $30 = ___cxa_find_matching_catch()|0;
 $31 = tempRet0;
 $lpad$phi$index = $30;$lpad$phi$index2 = $31;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($0);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__18ios_base5clearEj($this,$state) {
 $this = $this|0;
 $state = $state|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = (($this) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $5 = $state | 1;
  $6 = (($this) + 16|0);
  HEAP32[$6>>2] = $5;
 } else {
  $4 = (($this) + 16|0);
  HEAP32[$4>>2] = $state;
 }
 $7 = $3&1;
 $8 = $7 | $state;
 $9 = (($this) + 20|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $8 & $10;
 $12 = ($11|0)==(0);
 if ($12) {
  STACKTOP = sp;return;
 }
 $13 = (___cxa_allocate_exception(16)|0);
 (__ZNSt3__117iostream_categoryEv()|0);
 $14 = $0;
 $15 = $14;
 HEAP32[$15>>2] = 1;
 $16 = (($14) + 4)|0;
 $17 = $16;
 HEAP32[$17>>2] = (9992);
 __THREW__ = 0;
 invoke_viii(590,($13|0),(10048|0),($0|0));
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  ___cxa_free_exception(($13|0));
  ___resumeException($20|0);
  // unreachable;
 } else {
  ___cxa_throw(($13|0),(10096|0),(96|0));
  // unreachable;
 }
}
function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((10032 + 8|0));
 __THREW__ = 0;
 invoke_vii(591,($this|0),0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if ($1) {
  $11 = ___cxa_find_matching_catch(0|0)|0;
  $12 = tempRet0;
  ___clang_call_terminate($11);
  // unreachable;
 } else {
  $2 = (($this) + 28|0);
  __ZNSt3__16localeD2Ev($2);
  $3 = (($this) + 32|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  $5 = (($this) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  _free($6);
  $7 = (($this) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  _free($8);
  $9 = (($this) + 60|0);
  $10 = HEAP32[$9>>2]|0;
  _free($10);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this,$ev) {
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 }
 $3 = (($this) + 32|0);
 $4 = (($this) + 36|0);
 $i$01 = $1;
 while(1) {
  $5 = (($i$01) + -1)|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($5<<2)|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$4>>2]|0;
  $10 = (($9) + ($5<<2)|0);
  $11 = HEAP32[$10>>2]|0;
  FUNCTION_TABLE_viii[$8 & 1023]($ev,$this,$11);
  $12 = ($5|0)==(0);
  if ($12) {
   break;
  } else {
   $i$01 = $5;
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__18ios_base6getlocEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 28|0);
 __ZNSt3__16localeC2ERKS0_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base4initEPv($this,$sb) {
 $this = $this|0;
 $sb = $sb|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $not$ = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 $0 = (($this) + 24|0);
 HEAP32[$0>>2] = $sb;
 $not$ = ($sb|0)==(0|0);
 $1 = $not$&1;
 $2 = (($this) + 16|0);
 HEAP32[$2>>2] = $1;
 $3 = (($this) + 20|0);
 HEAP32[$3>>2] = 0;
 $4 = (($this) + 4|0);
 HEAP32[$4>>2] = 4098;
 $5 = (($this) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = (($this) + 8|0);
 HEAP32[$6>>2] = 6;
 $7 = (($this) + 32|0);
 $8 = (($this) + 28|0);
 dest=$7+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 __ZNSt3__16localeC2Ev($8);
 STACKTOP = sp;return;
}
function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9648 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9648 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9648 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9648 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0;
 var $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 1|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP8[$3>>0]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 8;
    break;
   }
   $13 = $11&255;
   $storemerge = $13;
  }
  HEAP8[$$01>>0] = $storemerge;
  $14 = (($__i$02) + 1)|0;
  $15 = (($$01) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$01 = $15;$__i$02 = $14;
  } else {
   $__i$0$lcssa = $14;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 1|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP8[$6>>0]|0;
 $9 = $8&255;
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0;
 var $__i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP8[$$02>>0]|0;
   $7 = (($3) + 1|0);
   HEAP32[$1>>2] = $7;
   HEAP8[$3>>0] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP8[$$02>>0]|0;
   $12 = $11&255;
   $13 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$12)|0);
   $14 = ($13|0)==(-1);
   if ($14) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $15 = (($$02) + 1|0);
  $16 = (($__i$01) + 1)|0;
  $17 = ($16|0)<($__n|0);
  if ($17) {
   $$02 = $15;$__i$01 = $16;
  } else {
   $__i$0$lcssa = $16;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9712 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9712 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9712 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((9712 + 8|0));
 $0 = (($this) + 4|0);
 __ZNSt3__16localeC2Ev($0);
 $1 = (($this) + 8|0);
 ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1) {
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($this|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result,$this,$0,$1,$2,$3) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = $agg$result;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($agg$result) + 8|0);
 $9 = $8;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 $11 = (($9) + 4)|0;
 $12 = $11;
 HEAP32[$12>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result,$this,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $agg$result;
 $3 = $2;
 HEAP32[$3>>2] = 0;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 0;
 $6 = (($agg$result) + 8|0);
 $7 = $6;
 $8 = $7;
 HEAP32[$8>>2] = -1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = -1;
 STACKTOP = sp;return;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 12|0);
 $2 = (($this) + 16|0);
 $$01 = $__s;$__i$02 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = (($3) + 4|0);
   HEAP32[$1>>2] = $6;
   $7 = HEAP32[$3>>2]|0;
   $storemerge = $7;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 40|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (FUNCTION_TABLE_ii[$10 & 1023]($this)|0);
   $12 = ($11|0)==(-1);
   if ($12) {
    $__i$0$lcssa = $__i$02;
    label = 7;
    break;
   } else {
    $storemerge = $11;
   }
  }
  HEAP32[$$01>>2] = $storemerge;
  $13 = (($__i$02) + 1)|0;
  $14 = (($$01) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$01 = $14;$__i$02 = $13;
  } else {
   $__i$0$lcssa = $13;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 36|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $4 = ($3|0)==(-1);
 if ($4) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) + 4|0);
 HEAP32[$5>>2] = $7;
 $8 = HEAP32[$6>>2]|0;
 $$0 = $8;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)>(0);
 if (!($0)) {
  $__i$0$lcssa = 0;
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 $1 = (($this) + 24|0);
 $2 = (($this) + 28|0);
 $$02 = $__s;$__i$01 = 0;
 while(1) {
  $3 = HEAP32[$1>>2]|0;
  $4 = HEAP32[$2>>2]|0;
  $5 = ($3>>>0)<($4>>>0);
  if ($5) {
   $6 = HEAP32[$$02>>2]|0;
   $7 = (($3) + 4|0);
   HEAP32[$1>>2] = $7;
   HEAP32[$3>>2] = $6;
  } else {
   $8 = HEAP32[$this>>2]|0;
   $9 = (($8) + 52|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = HEAP32[$$02>>2]|0;
   $12 = (FUNCTION_TABLE_iii[$10 & 1023]($this,$11)|0);
   $13 = ($12|0)==(-1);
   if ($13) {
    $__i$0$lcssa = $__i$01;
    label = 7;
    break;
   }
  }
  $14 = (($$02) + 4|0);
  $15 = (($__i$01) + 1)|0;
  $16 = ($15|0)<($__n|0);
  if ($16) {
   $$02 = $14;$__i$01 = $15;
  } else {
   $__i$0$lcssa = $15;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($__i$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0) {
 $this = $this|0;
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return -1;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED2Ev($this,$vtt) {
 $this = $this|0;
 $vtt = $vtt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var $$ = 0, $$0$i$i = 0, $$sum = 0, $$sum$i = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $isascii1$i = 0, $or$cond = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP8[$this>>0] = 0;
 $1 = HEAP32[$__is>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__is) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  $94 = (($__is) + ($3)|0);
  $95 = $5 | 4;
  __ZNSt3__18ios_base5clearEj($94,$95);
  STACKTOP = sp;return;
 }
 $$sum13 = (($3) + 72)|0;
 $7 = (($__is) + ($$sum13)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 do {
  if (!($__noskipws)) {
   $10 = HEAP32[$__is>>2]|0;
   $11 = (($10) + -12|0);
   $12 = HEAP32[$11>>2]|0;
   $$sum14 = (($12) + 4)|0;
   $13 = (($__is) + ($$sum14)|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = $14 & 4096;
   $16 = ($15|0)==(0);
   if (!($16)) {
    $$sum15 = (($12) + 28)|0;
    $17 = (($__is) + ($$sum15)|0);
    __ZNSt3__16localeC2ERKS0_($0,$17);
    __THREW__ = 0;
    $18 = (invoke_iii(458,($0|0),(12416|0))|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     __ZNSt3__16localeD2Ev($0);
     ___resumeException($59|0);
     // unreachable;
    }
    __ZNSt3__16localeD2Ev($0);
    $21 = HEAP32[$__is>>2]|0;
    $22 = (($21) + -12|0);
    $23 = HEAP32[$22>>2]|0;
    $$sum$i = (($23) + 24)|0;
    $24 = (($__is) + ($$sum$i)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (($18) + 8|0);
    $28 = $25;
    while(1) {
     $27 = ($28|0)==(0|0);
     if ($27) {
      break;
     }
     $29 = (($28) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($28) + 16|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($30|0)==($32|0);
     if ($33) {
      $34 = HEAP32[$28>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
      $38 = ($37|0)==(-1);
      $$ = $38 ? 0 : $28;
      $39 = ($$|0)==(0|0);
      if ($39) {
       break;
      } else {
       $41 = $$;
      }
     } else {
      $41 = $28;
     }
     $40 = (($41) + 12|0);
     $42 = HEAP32[$40>>2]|0;
     $43 = (($41) + 16|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = ($42|0)==($44|0);
     if ($45) {
      $46 = HEAP32[$41>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = (FUNCTION_TABLE_ii[$48 & 1023]($41)|0);
      $$0$i$i = $49;
     } else {
      $50 = HEAP8[$42>>0]|0;
      $51 = $50&255;
      $$0$i$i = $51;
     }
     $52 = $$0$i$i&255;
     $isascii1$i = ($52<<24>>24)>(-1);
     if (!($isascii1$i)) {
      label = 20;
      break;
     }
     $sext = $$0$i$i << 24;
     $53 = $sext >> 24;
     $54 = HEAP32[$26>>2]|0;
     $55 = (($54) + ($53<<1)|0);
     $56 = HEAP16[$55>>1]|0;
     $57 = $56 & 8192;
     $58 = ($57<<16>>16)==(0);
     if ($58) {
      label = 20;
      break;
     }
     $61 = HEAP32[$40>>2]|0;
     $62 = HEAP32[$43>>2]|0;
     $63 = ($61|0)==($62|0);
     if ($63) {
      $64 = HEAP32[$41>>2]|0;
      $65 = (($64) + 40|0);
      $66 = HEAP32[$65>>2]|0;
      (FUNCTION_TABLE_ii[$66 & 1023]($41)|0);
      $28 = $41;
      continue;
     } else {
      $67 = (($61) + 1|0);
      HEAP32[$40>>2] = $67;
      $28 = $41;
      continue;
     }
    }
    if ((label|0) == 20) {
     $68 = ($41|0)==(0|0);
     if (!($68)) {
      $69 = (($41) + 12|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = (($41) + 16|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($70|0)==($72|0);
      if (!($73)) {
       break;
      }
      $74 = HEAP32[$41>>2]|0;
      $75 = (($74) + 36|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = (FUNCTION_TABLE_ii[$76 & 1023]($41)|0);
      $78 = ($77|0)==(-1);
      $79 = ($41|0)==(0|0);
      $or$cond = $78 | $79;
      if (!($or$cond)) {
       break;
      }
     }
    }
    $80 = HEAP32[$__is>>2]|0;
    $81 = (($80) + -12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = (($__is) + ($82)|0);
    $$sum17 = (($82) + 16)|0;
    $84 = (($__is) + ($$sum17)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $85 | 6;
    __ZNSt3__18ios_base5clearEj($83,$86);
   }
  }
 } while(0);
 $87 = HEAP32[$__is>>2]|0;
 $88 = (($87) + -12|0);
 $89 = HEAP32[$88>>2]|0;
 $$sum16 = (($89) + 16)|0;
 $90 = (($__is) + ($$sum16)|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = ($91|0)==(0);
 $93 = $92&1;
 HEAP8[$this>>0] = $93;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b($this,$__is,$__noskipws) {
 $this = $this|0;
 $__is = $__is|0;
 $__noskipws = $__noskipws|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC2ERS3_b($this,$__is,$__noskipws);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(592,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(461,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(463,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(464);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 | 1;
 HEAP32[$0>>2] = $2;
 $3 = (($this) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  STACKTOP = sp;return;
 } else {
  ___cxa_rethrow();
  // unreachable;
 }
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 8)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this|0;
 var $$0 = 0, $$sum = 0, $$sum1 = 0, $$sum2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__s = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 24)|0;
 $3 = (($this) + ($$sum)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return ($this|0);
 }
 __THREW__ = 0;
 invoke_vii(593,($__s|0),($this|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 L4: do {
  if ($7) {
   $31 = ___cxa_find_matching_catch(0|0)|0;
   $32 = tempRet0;
   $$0 = $31;
  } else {
   $8 = HEAP8[$__s>>0]|0;
   $9 = ($8<<24>>24)==(0);
   do {
    if (!($9)) {
     $10 = HEAP32[$this>>2]|0;
     $11 = (($10) + -12|0);
     $12 = HEAP32[$11>>2]|0;
     $$sum1 = (($12) + 24)|0;
     $13 = (($this) + ($$sum1)|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = (($15) + 24|0);
     $17 = HEAP32[$16>>2]|0;
     __THREW__ = 0;
     $18 = (invoke_ii($17|0,($14|0))|0);
     $19 = __THREW__; __THREW__ = 0;
     $20 = $19&1;
     if (!($20)) {
      $21 = ($18|0)==(-1);
      if (!($21)) {
       break;
      }
      $22 = HEAP32[$this>>2]|0;
      $23 = (($22) + -12|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = (($this) + ($24)|0);
      $$sum2 = (($24) + 16)|0;
      $26 = (($this) + ($$sum2)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = $27 | 1;
      __THREW__ = 0;
      invoke_vii(461,($25|0),($28|0));
      $29 = __THREW__; __THREW__ = 0;
      $30 = $29&1;
      if (!($30)) {
       break;
      }
     }
     $33 = ___cxa_find_matching_catch(0|0)|0;
     $34 = tempRet0;
     __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
     $$0 = $33;
     break L4;
    }
   } while(0);
   __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
   STACKTOP = sp;return ($this|0);
  }
 } while(0);
 (___cxa_begin_catch(($$0|0))|0);
 $35 = HEAP32[$this>>2]|0;
 $36 = (($35) + -12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($this) + ($37)|0);
 __THREW__ = 0;
 invoke_vi(463,($38|0));
 $39 = __THREW__; __THREW__ = 0;
 $40 = $39&1;
 if (!($40)) {
  ___cxa_end_catch();
  STACKTOP = sp;return ($this|0);
 }
 $41 = ___cxa_find_matching_catch()|0;
 $42 = tempRet0;
 __THREW__ = 0;
 invoke_v(464);
 $43 = __THREW__; __THREW__ = 0;
 $44 = $43&1;
 if ($44) {
  $45 = ___cxa_find_matching_catch(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 } else {
  ___resumeException($41|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this,$__os);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(461,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(464);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 __ZNSt3__18ios_baseD2Ev($0);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($this) + ($2)|0);
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($3);
 STACKTOP = sp;return;
}
function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this|0;
 var $$sum = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -12|0);
 $2 = HEAP32[$1>>2]|0;
 $$sum = (($2) + 4)|0;
 $3 = (($this) + ($$sum)|0);
 __ZNSt3__18ios_baseD2Ev($3);
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this,$__os) {
 $this = $this|0;
 $__os = $__os|0;
 var $$sum = 0, $$sum1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$this>>0] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = $__os;
 $1 = HEAP32[$__os>>2]|0;
 $2 = (($1) + -12|0);
 $3 = HEAP32[$2>>2]|0;
 $$sum = (($3) + 16)|0;
 $4 = (($__os) + ($$sum)|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($3) + 72)|0;
 $7 = (($__os) + ($$sum1)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  (__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8)|0);
 }
 HEAP8[$this>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this|0;
 var $$sum = 0, $$sum1 = 0, $$sum2 = 0, $$sum3 = 0, $$sum4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + -12|0);
 $4 = HEAP32[$3>>2]|0;
 $$sum = (($4) + 24)|0;
 $5 = (($1) + ($$sum)|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $$sum1 = (($4) + 16)|0;
 $8 = (($1) + ($$sum1)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $$sum2 = (($4) + 4)|0;
 $11 = (($1) + ($$sum2)|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 & 8192;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 $15 = (__ZSt18uncaught_exceptionv()|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = HEAP32[$0>>2]|0;
 $17 = HEAP32[$16>>2]|0;
 $18 = (($17) + -12|0);
 $19 = HEAP32[$18>>2]|0;
 $$sum3 = (($19) + 24)|0;
 $20 = (($16) + ($$sum3)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 __THREW__ = 0;
 $25 = (invoke_ii($24|0,($21|0))|0);
 $26 = __THREW__; __THREW__ = 0;
 $27 = $26&1;
 if (!($27)) {
  $28 = ($25|0)==(-1);
  if (!($28)) {
   STACKTOP = sp;return;
  }
  $29 = HEAP32[$0>>2]|0;
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + -12|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (($29) + ($32)|0);
  $$sum4 = (($32) + 16)|0;
  $34 = (($29) + ($$sum4)|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 1;
  __THREW__ = 0;
  invoke_vii(461,($33|0),($36|0));
  $37 = __THREW__; __THREW__ = 0;
  $38 = $37&1;
  if (!($38)) {
   STACKTOP = sp;return;
  }
 }
 $39 = ___cxa_find_matching_catch(0|0)|0;
 $40 = tempRet0;
 (___cxa_begin_catch(($39|0))|0);
 __THREW__ = 0;
 invoke_v(464);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (9936|0);
}
function __ZNKSt3__119__iostream_category7messageEi($agg$result,$this,$ev) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $ev = $ev|0;
 var $0 = 0, $1 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($ev|0)!=(1);
 $1 = ($ev|0)<(257);
 $or$cond = $0 & $1;
 if ($or$cond) {
  __ZNKSt3__112__do_message7messageEi($agg$result,$this,$ev);
  STACKTOP = sp;return;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,9952,35);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__117iostream_categoryEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[10000>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if ($1) {
  $2 = (___cxa_guard_acquire((10000|0))|0);
  $3 = ($2|0)==(0);
  if (!($3)) {
   HEAP32[9992>>2] = ((10688 + 8|0));
   (___cxa_atexit((100|0),(9992|0),(___dso_handle|0))|0);
   ___cxa_guard_release((10000|0));
  }
 }
 STACKTOP = sp;return (9992|0);
}
function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this,$msg,$ec) {
 $this = $this|0;
 $msg = $msg|0;
 $ec = $ec|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tmpcast$byval_copy = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmpcast$byval_copy = sp + 8|0;
 $0 = sp;
 $1 = $ec;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (($1) + 4)|0;
 $5 = $4;
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = $7;
 HEAP32[$8>>2] = $3;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = $6;
 ;HEAP32[$tmpcast$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;HEAP32[$tmpcast$byval_copy+4>>2]=HEAP32[$0+4>>2]|0;
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this,$tmpcast$byval_copy,$msg);
 HEAP32[$this>>2] = ((10008 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112system_errorD2Ev($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP8[$$024>>0]|0;
    $3 = HEAP8[$$015>>0]|0;
    $4 = ($2<<24>>24)<($3<<24>>24);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3<<24>>24)<($2<<24>>24);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 1|0);
    $7 = (($$015) + 1|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP8[$__p$01>>0]|0;
  $3 = $2 << 24 >> 24;
  $4 = (($3) + ($1))|0;
  $5 = $4 & -268435456;
  $6 = $5 >>> 24;
  $7 = $6 | $5;
  $8 = $7 ^ $4;
  $9 = (($__p$01) + 1|0);
  $10 = ($9|0)==($__hi|0);
  if ($10) {
   $__h$0$lcssa = $8;
   break;
  } else {
   $__h$02 = $8;$__p$01 = $9;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2) {
 $this = $this|0;
 $__lo1 = $__lo1|0;
 $__hi1 = $__hi1|0;
 $__lo2 = $__lo2|0;
 $__hi2 = $__hi2|0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo2|0)==($__hi2|0);
 L1: do {
  if ($0) {
   $$02$lcssa = $__lo1;
   label = 6;
  } else {
   $$015 = $__lo2;$$024 = $__lo1;
   while(1) {
    $1 = ($$024|0)==($__hi1|0);
    if ($1) {
     $$0 = -1;
     break L1;
    }
    $2 = HEAP32[$$024>>2]|0;
    $3 = HEAP32[$$015>>2]|0;
    $4 = ($2|0)<($3|0);
    if ($4) {
     $$0 = -1;
     break L1;
    }
    $5 = ($3|0)<($2|0);
    if ($5) {
     $$0 = 1;
     break L1;
    }
    $6 = (($$024) + 4|0);
    $7 = (($$015) + 4|0);
    $8 = ($7|0)==($__hi2|0);
    if ($8) {
     $$02$lcssa = $6;
     label = 6;
     break;
    } else {
     $$015 = $7;$$024 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 6) {
  $9 = ($$02$lcssa|0)!=($__hi1|0);
  $10 = $9&1;
  $$0 = $10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result,$this,$__lo,$__hi) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result,$__lo,$__hi);
 STACKTOP = sp;return;
}
function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi) {
 $this = $this|0;
 $__lo = $__lo|0;
 $__hi = $__hi|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__lo|0)==($__hi|0);
 if ($0) {
  $__h$0$lcssa = 0;
  STACKTOP = sp;return ($__h$0$lcssa|0);
 } else {
  $__h$02 = 0;$__p$01 = $__lo;
 }
 while(1) {
  $1 = $__h$02 << 4;
  $2 = HEAP32[$__p$01>>2]|0;
  $3 = (($2) + ($1))|0;
  $4 = $3 & -268435456;
  $5 = $4 >>> 24;
  $6 = $5 | $4;
  $7 = $6 ^ $3;
  $8 = (($__p$01) + 4|0);
  $9 = ($8|0)==($__hi|0);
  if ($9) {
   $__h$0$lcssa = $7;
   break;
  } else {
   $__h$02 = $7;$__p$01 = $8;
  }
 }
 STACKTOP = sp;return ($__h$0$lcssa|0);
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(458,($3|0),(12416|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(458,($4|0),(12560|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(594,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($59);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($44);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $$pre34 = 0, $$pre36 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0;
 var $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i24 = 0, $tmp$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 208|0;
 $__grouping = sp + 188|0;
 $0 = sp + 200|0;
 $__buf = sp + 8|0;
 $__a_end = sp + 4|0;
 $__g = sp + 24|0;
 $__g_end = sp + 184|0;
 $__dc = sp + 204|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(457,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(458,($0|0),(12416|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(10928|0),(((10928 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(540,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 39;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre36 = (($__buf) + 8|0);
      $$pre$phi35Z2D = $19;$$pre$phi37Z2D = $$pre36;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre34 = (($__buf) + 1|0);
      $$pre$phi35Z2D = $$pre34;$$pre$phi37Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i8 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i8|0)==(0|0);
      if ($22) {
       $36 = 0;
      } else {
       $23 = (($$pre$i$i$i8) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i8) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i8>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i8|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 38;
         break;
        }
        $34 = ($31|0)==(-1);
        if ($34) {
         HEAP32[$__b>>2] = 0;
         $36 = 0;
        } else {
         $36 = $$pre$i$i$i8;
        }
       } else {
        $36 = $$pre$i$i$i8;
       }
      }
      $35 = ($36|0)==(0|0);
      $37 = HEAP32[$__e>>2]|0;
      $38 = ($37|0)==(0|0);
      do {
       if ($38) {
        label = 20;
       } else {
        $39 = (($37) + 12|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = (($37) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = ($40|0)==($42|0);
        if (!($43)) {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
        $44 = HEAP32[$37>>2]|0;
        $45 = (($44) + 36|0);
        $46 = HEAP32[$45>>2]|0;
        __THREW__ = 0;
        $47 = (invoke_ii($46|0,($37|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 38;
         break L14;
        }
        $50 = ($47|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 20;
         break;
        } else {
         if ($35) {
          $168 = $37;
          break;
         } else {
          $$pre$i2$i$i = $37;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 20) {
       label = 0;
       if ($35) {
        $$pre$i2$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(540,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 38;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i24 = (($74) + -1)|0;
        $75 = $phitmp$i24;
       }
       __THREW__ = 0;
       invoke_viii(540,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 38;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi35Z2D;
       } else {
        $81 = HEAP32[$$pre$phi37Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($36) + 12|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = (($36) + 16|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if ($98) {
       $99 = HEAP32[$36>>2]|0;
       $100 = (($99) + 36|0);
       $101 = HEAP32[$100>>2]|0;
       __THREW__ = 0;
       $102 = (invoke_ii($101|0,($36|0))|0);
       $103 = __THREW__; __THREW__ = 0;
       $104 = $103&1;
       if ($104) {
        label = 38;
        break;
       } else {
        $$0$i$i = $102;
       }
      } else {
       $105 = HEAP8[$95>>0]|0;
       $106 = $105&255;
       $$0$i$i = $106;
      }
      $107 = $$0$i$i&255;
      $108 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($107,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $109 = ($108|0)==(0);
      if (!($109)) {
       $$pre$i2$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $110 = HEAP32[$94>>2]|0;
      $111 = HEAP32[$96>>2]|0;
      $112 = ($110|0)==($111|0);
      if ($112) {
       $113 = HEAP32[$36>>2]|0;
       $114 = (($113) + 40|0);
       $115 = HEAP32[$114>>2]|0;
       __THREW__ = 0;
       (invoke_ii($115|0,($36|0))|0);
       $116 = __THREW__; __THREW__ = 0;
       $117 = $116&1;
       if ($117) {
        label = 38;
        break;
       } else {
        $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $118 = (($110) + 1|0);
       HEAP32[$94>>2] = $118;
       $$pre$i$i$i8 = $36;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 38) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $119 = HEAP32[$__a_end>>2]|0;
     $120 = $119;
     $121 = $__a$2;
     $122 = (($120) - ($121))|0;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($122|0),0);
     $123 = __THREW__; __THREW__ = 0;
     $124 = $123&1;
     if ($124) {
      label = 39;
     } else {
      $125 = HEAP8[$__buf>>0]|0;
      $126 = $125 & 1;
      $127 = ($126<<24>>24)==(0);
      if ($127) {
       $132 = $$pre$phi35Z2D;
      } else {
       $128 = HEAP32[$$pre$phi37Z2D>>2]|0;
       $132 = $128;
      }
      __THREW__ = 0;
      $129 = (invoke_i(595)|0);
      $130 = __THREW__; __THREW__ = 0;
      $131 = $130&1;
      if ($131) {
       label = 39;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $133 = (invoke_iiiii(596,($132|0),($129|0),(10968|0),($vararg_buffer|0))|0);
       $134 = __THREW__; __THREW__ = 0;
       $135 = $134&1;
       if ($135) {
        label = 39;
       } else {
        $136 = ($133|0)==(1);
        if (!($136)) {
         HEAP32[$__err>>2] = 4;
        }
        $137 = ($36|0)==(0|0);
        if ($137) {
         $151 = 0;
        } else {
         $138 = (($36) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($36) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if ($142) {
          $143 = HEAP32[$36>>2]|0;
          $144 = (($143) + 36|0);
          $145 = HEAP32[$144>>2]|0;
          __THREW__ = 0;
          $146 = (invoke_ii($145|0,($36|0))|0);
          $147 = __THREW__; __THREW__ = 0;
          $148 = $147&1;
          if ($148) {
           label = 39;
           break;
          }
          $149 = ($146|0)==(-1);
          if ($149) {
           HEAP32[$__b>>2] = 0;
           $151 = 0;
          } else {
           $151 = $36;
          }
         } else {
          $151 = $36;
         }
        }
        $150 = ($151|0)==(0|0);
        $152 = ($$pre$i2$i$i|0)==(0|0);
        do {
         if ($152) {
          label = 66;
         } else {
          $153 = (($$pre$i2$i$i) + 12|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = (($$pre$i2$i$i) + 16|0);
          $156 = HEAP32[$155>>2]|0;
          $157 = ($154|0)==($156|0);
          if (!($157)) {
           if (!($150)) {
            break;
           }
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
          $158 = HEAP32[$$pre$i2$i$i>>2]|0;
          $159 = (($158) + 36|0);
          $160 = HEAP32[$159>>2]|0;
          __THREW__ = 0;
          $161 = (invoke_ii($160|0,($$pre$i2$i$i|0))|0);
          $162 = __THREW__; __THREW__ = 0;
          $163 = $162&1;
          if ($163) {
           label = 39;
           break L8;
          }
          $164 = ($161|0)==(-1);
          if ($164) {
           HEAP32[$__e>>2] = 0;
           label = 66;
           break;
          }
          $165 = ($$pre$i2$i$i|0)==(0|0);
          $tmp$i$i = $150 ^ $165;
          if ($tmp$i$i) {
           HEAP32[$agg$result>>2] = $151;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 66) {
         if (!($150)) {
          HEAP32[$agg$result>>2] = $151;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $166 = HEAP32[$__err>>2]|0;
        $167 = $166 | 2;
        HEAP32[$__err>>2] = $167;
        HEAP32[$agg$result>>2] = $151;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 39) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 24|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==($__ct<<24>>24);
   if (!($4)) {
    $5 = (($__atoms) + 25|0);
    $6 = HEAP8[$5>>0]|0;
    $7 = ($6<<24>>24)==($__ct<<24>>24);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 26|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP8[$$01$i>>0]|0;
  $31 = ($30<<24>>24)==($__ct<<24>>24);
  $29 = (($$01$i) + 1|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = ($34|0)>(23);
 if ($35) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $36 = ($34|0)<($__base|0);
  if (!($36)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 16)) {
  $37 = ($34|0)<(22);
  if (!($37)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = $0;
   $39 = $__a;
   $40 = (($38) - ($39))|0;
   $41 = ($40|0)<(3);
   if (!($41)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $42 = (($0) + -1|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==(48);
   if (!($44)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $45 = (10928 + ($34)|0);
   $46 = HEAP8[$45>>0]|0;
   $47 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $47;
   HEAP8[$0>>0] = $46;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $48 = (10928 + ($34)|0);
 $49 = HEAP8[$48>>0]|0;
 $50 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $50;
 HEAP8[$0>>0] = $49;
 $51 = HEAP32[$__dc>>2]|0;
 $52 = (($51) + 1)|0;
 HEAP32[$__dc>>2] = $52;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__16__clocEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12312>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((12312|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    $4 = (invoke_iiii(597,2147483647,(12320|0),(0|0))|0);
    $5 = __THREW__; __THREW__ = 0;
    $6 = $5&1;
    if ($6) {
     $8 = ___cxa_find_matching_catch()|0;
     $9 = tempRet0;
     ___cxa_guard_abort((12312|0));
     ___resumeException($8|0);
     // unreachable;
    } else {
     HEAP32[12304>>2] = $4;
     ___cxa_guard_release((12312|0));
     break;
    }
   }
  }
 } while(0);
 $7 = HEAP32[12304>>2]|0;
 STACKTOP = sp;return ($7|0);
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__lv = 0, $__names = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy2 = sp + 56|0;
 $$byval_copy1 = sp + 36|0;
 $$byval_copy = sp;
 $__lv = sp + 48|0;
 $0 = sp + 52|0;
 $1 = sp + 60|0;
 $2 = sp + 32|0;
 $3 = sp + 44|0;
 $4 = sp + 40|0;
 $__names = sp + 8|0;
 $5 = sp + 4|0;
 $6 = (($__iob) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$__lv>>2] = -1;
  $10 = HEAP32[$this>>2]|0;
  $11 = (($10) + 16|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$__b>>2]|0;
  HEAP32[$1>>2] = $13;
  $14 = HEAP32[$__e>>2]|0;
  HEAP32[$2>>2] = $14;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$2+0>>2]|0;
  FUNCTION_TABLE_viiiiiii[$12 & 1023]($0,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__lv);
  $15 = HEAP32[$0>>2]|0;
  HEAP32[$__b>>2] = $15;
  $16 = HEAP32[$__lv>>2]|0;
  if ((($16|0) == 1)) {
   HEAP8[$__v>>0] = 1;
  } else if ((($16|0) == 0)) {
   HEAP8[$__v>>0] = 0;
  } else {
   HEAP8[$__v>>0] = 1;
   HEAP32[$__err>>2] = 4;
  }
  HEAP32[$agg$result>>2] = $15;
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($3,$__iob);
 __THREW__ = 0;
 $17 = (invoke_iii(458,($3|0),(12408|0))|0);
 $18 = __THREW__; __THREW__ = 0;
 $19 = $18&1;
 if ($19) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$3>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  $$0 = $45;$$01 = $46;
  ___resumeException($$0|0);
  // unreachable;
 }
 $20 = HEAP32[$3>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($20)|0);
 __ZNKSt3__18ios_base6getlocEv($4,$__iob);
 __THREW__ = 0;
 $21 = (invoke_iii(458,($4|0),(12568|0))|0);
 $22 = __THREW__; __THREW__ = 0;
 $23 = $22&1;
 if ($23) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $50 = HEAP32[$4>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($50)|0);
  $$0 = $48;$$01 = $49;
  ___resumeException($$0|0);
  // unreachable;
 }
 $24 = HEAP32[$4>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($24)|0);
 $25 = HEAP32[$21>>2]|0;
 $26 = (($25) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 __THREW__ = 0;
 invoke_vii($27|0,($__names|0),($21|0));
 $28 = __THREW__; __THREW__ = 0;
 $29 = $28&1;
 if ($29) {
  $$02 = $__names;
 } else {
  $30 = (($__names) + 12|0);
  $31 = HEAP32[$21>>2]|0;
  $32 = (($31) + 28|0);
  $33 = HEAP32[$32>>2]|0;
  __THREW__ = 0;
  invoke_vii($33|0,($30|0),($21|0));
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if ($35) {
   $$02 = $30;
  } else {
   $36 = HEAP32[$__e>>2]|0;
   HEAP32[$5>>2] = $36;
   $37 = (($__names) + 24|0);
   __THREW__ = 0;
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   $38 = (invoke_iiiiiiii(598,($__b|0),($$byval_copy2|0),($__names|0),($37|0),($17|0),($__err|0),1)|0);
   $39 = __THREW__; __THREW__ = 0;
   $40 = $39&1;
   if ($40) {
    $57 = ___cxa_find_matching_catch()|0;
    $58 = tempRet0;
    $59 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($59);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    $$0 = $57;$$01 = $58;
    ___resumeException($$0|0);
    // unreachable;
   } else {
    $41 = ($38|0)==($__names|0);
    $42 = $41&1;
    HEAP8[$__v>>0] = $42;
    $43 = HEAP32[$__b>>2]|0;
    HEAP32[$agg$result>>2] = $43;
    $44 = (($__names) + 12|0);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($44);
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
    STACKTOP = sp;return;
   }
  }
 }
 $51 = ___cxa_find_matching_catch()|0;
 $52 = tempRet0;
 $53 = ($__names|0)==($$02|0);
 if ($53) {
  $$0 = $51;$$01 = $52;
  ___resumeException($$0|0);
  // unreachable;
 } else {
  $55 = $$02;
 }
 while(1) {
  $54 = (($55) + -12|0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($54);
  $56 = ($54|0)==($__names|0);
  if ($56) {
   $$0 = $51;$$01 = $52;
   break;
  } else {
   $55 = $54;
  }
 }
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__v);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$01 = 0, $$pre = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $$pre37 = 0, $$pre39 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i28 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $__atoms = sp + 200|0;
 $__grouping = sp + 188|0;
 $0 = sp + 8|0;
 $__buf = sp + 176|0;
 $__a_end = sp + 4|0;
 $__g = sp + 16|0;
 $__g_end = sp + 304|0;
 $__dc = sp + 308|0;
 ;HEAP32[$__grouping+0>>2]=0|0;HEAP32[$__grouping+4>>2]=0|0;HEAP32[$__grouping+8>>2]=0|0;
 __THREW__ = 0;
 invoke_vii(457,($0|0),($__iob|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $85 = ___cxa_find_matching_catch()|0;
  $86 = tempRet0;
  $$0 = $85;$$01 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($$0|0);
  // unreachable;
 }
 __THREW__ = 0;
 $3 = (invoke_iii(458,($0|0),(12408|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if (!($5)) {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + 48|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($8|0,($3|0),(10928|0),(((10928 + 26|0))|0),($__atoms|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
   ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viii(540,($__buf|0),10,0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   L8: do {
    if ($13) {
     label = 40;
    } else {
     $14 = HEAP8[$__buf>>0]|0;
     $15 = $14 & 1;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      $19 = (($__buf) + 1|0);
      $$pre39 = (($__buf) + 8|0);
      $$pre$phi38Z2D = $19;$$pre$phi40Z2D = $$pre39;$20 = $19;
     } else {
      $17 = (($__buf) + 8|0);
      $18 = HEAP32[$17>>2]|0;
      $$pre37 = (($__buf) + 1|0);
      $$pre$phi38Z2D = $$pre37;$$pre$phi40Z2D = $17;$20 = $18;
     }
     HEAP32[$__a_end>>2] = $20;
     HEAP32[$__g_end>>2] = $__g;
     HEAP32[$__dc>>2] = 0;
     $21 = (($__buf) + 4|0);
     $$pre = HEAP32[$__b>>2]|0;
     $$pre$i$i$i9 = $$pre;$__a$0 = $20;
     L14: while(1) {
      $22 = ($$pre$i$i$i9|0)==(0|0);
      if ($22) {
       $167 = 1;$95 = 0;
      } else {
       $23 = (($$pre$i$i$i9) + 12|0);
       $24 = HEAP32[$23>>2]|0;
       $25 = (($$pre$i$i$i9) + 16|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($24|0)==($26|0);
       if ($27) {
        $28 = HEAP32[$$pre$i$i$i9>>2]|0;
        $29 = (($28) + 36|0);
        $30 = HEAP32[$29>>2]|0;
        __THREW__ = 0;
        $31 = (invoke_ii($30|0,($$pre$i$i$i9|0))|0);
        $32 = __THREW__; __THREW__ = 0;
        $33 = $32&1;
        if ($33) {
         label = 39;
         break;
        } else {
         $$0$i$i$i$i7 = $31;
        }
       } else {
        $34 = HEAP32[$24>>2]|0;
        $$0$i$i$i$i7 = $34;
       }
       $35 = ($$0$i$i$i$i7|0)==(-1);
       if ($35) {
        HEAP32[$__b>>2] = 0;
        $167 = 1;$95 = 0;
       } else {
        $167 = 0;$95 = $$pre$i$i$i9;
       }
      }
      $36 = HEAP32[$__e>>2]|0;
      $37 = ($36|0)==(0|0);
      do {
       if ($37) {
        label = 21;
       } else {
        $38 = (($36) + 12|0);
        $39 = HEAP32[$38>>2]|0;
        $40 = (($36) + 16|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($39|0)==($41|0);
        if ($42) {
         $43 = HEAP32[$36>>2]|0;
         $44 = (($43) + 36|0);
         $45 = HEAP32[$44>>2]|0;
         __THREW__ = 0;
         $46 = (invoke_ii($45|0,($36|0))|0);
         $47 = __THREW__; __THREW__ = 0;
         $48 = $47&1;
         if ($48) {
          label = 39;
          break L14;
         } else {
          $$0$i$i1$i$i13 = $46;
         }
        } else {
         $49 = HEAP32[$39>>2]|0;
         $$0$i$i1$i$i13 = $49;
        }
        $50 = ($$0$i$i1$i$i13|0)==(-1);
        if ($50) {
         HEAP32[$__e>>2] = 0;
         label = 21;
         break;
        } else {
         if ($167) {
          $168 = $36;
          break;
         } else {
          $$pre$i3$i$i = $36;$__a$2 = $__a$0;
          break L14;
         }
        }
       }
      } while(0);
      if ((label|0) == 21) {
       label = 0;
       if ($167) {
        $$pre$i3$i$i = 0;$__a$2 = $__a$0;
        break;
       } else {
        $168 = 0;
       }
      }
      $51 = HEAP32[$__a_end>>2]|0;
      $52 = HEAP8[$__buf>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $56 = $52&255;
       $57 = $56 >>> 1;
       $59 = $57;
      } else {
       $55 = HEAP32[$21>>2]|0;
       $59 = $55;
      }
      $58 = (($__a$0) + ($59)|0);
      $60 = ($51|0)==($58|0);
      if ($60) {
       if ($54) {
        $62 = $52&255;
        $63 = $62 >>> 1;
        $64 = $52&255;
        $65 = $64 >>> 1;
        $67 = $65;$84 = $63;
       } else {
        $61 = HEAP32[$21>>2]|0;
        $67 = $61;$84 = $61;
       }
       $66 = $67 << 1;
       __THREW__ = 0;
       invoke_viii(540,($__buf|0),($66|0),0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        label = 39;
        break;
       }
       $70 = HEAP8[$__buf>>0]|0;
       $71 = $70 & 1;
       $72 = ($71<<24>>24)==(0);
       if ($72) {
        $75 = 10;
       } else {
        $73 = HEAP32[$__buf>>2]|0;
        $74 = $73 & -2;
        $phitmp$i28 = (($74) + -1)|0;
        $75 = $phitmp$i28;
       }
       __THREW__ = 0;
       invoke_viii(540,($__buf|0),($75|0),0);
       $76 = __THREW__; __THREW__ = 0;
       $77 = $76&1;
       if ($77) {
        label = 39;
        break;
       }
       $78 = HEAP8[$__buf>>0]|0;
       $79 = $78 & 1;
       $80 = ($79<<24>>24)==(0);
       if ($80) {
        $83 = $$pre$phi38Z2D;
       } else {
        $81 = HEAP32[$$pre$phi40Z2D>>2]|0;
        $83 = $81;
       }
       $82 = (($83) + ($84)|0);
       HEAP32[$__a_end>>2] = $82;
       $__a$1 = $83;
      } else {
       $__a$1 = $__a$0;
      }
      $94 = (($95) + 12|0);
      $96 = HEAP32[$94>>2]|0;
      $97 = (($95) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$95>>2]|0;
       $101 = (($100) + 36|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($95|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 39;
        break;
       } else {
        $$0$i$i = $103;
       }
      } else {
       $106 = HEAP32[$96>>2]|0;
       $$0$i$i = $106;
      }
      $107 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,16,$__a$1,$__a_end,$__dc,0,$__grouping,$__g,$__g_end,$__atoms)|0);
      $108 = ($107|0)==(0);
      if (!($108)) {
       $$pre$i3$i$i = $168;$__a$2 = $__a$1;
       break;
      }
      $109 = HEAP32[$94>>2]|0;
      $110 = HEAP32[$97>>2]|0;
      $111 = ($109|0)==($110|0);
      if ($111) {
       $112 = HEAP32[$95>>2]|0;
       $113 = (($112) + 40|0);
       $114 = HEAP32[$113>>2]|0;
       __THREW__ = 0;
       (invoke_ii($114|0,($95|0))|0);
       $115 = __THREW__; __THREW__ = 0;
       $116 = $115&1;
       if ($116) {
        label = 39;
        break;
       } else {
        $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
        continue;
       }
      } else {
       $117 = (($109) + 4|0);
       HEAP32[$94>>2] = $117;
       $$pre$i$i$i9 = $95;$__a$0 = $__a$1;
       continue;
      }
     }
     if ((label|0) == 39) {
      $90 = ___cxa_find_matching_catch()|0;
      $91 = tempRet0;
      $lpad$phi$index = $90;$lpad$phi$index2 = $91;
      break;
     }
     $118 = HEAP32[$__a_end>>2]|0;
     $119 = $118;
     $120 = $__a$2;
     $121 = (($119) - ($120))|0;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($121|0),0);
     $122 = __THREW__; __THREW__ = 0;
     $123 = $122&1;
     if ($123) {
      label = 40;
     } else {
      $124 = HEAP8[$__buf>>0]|0;
      $125 = $124 & 1;
      $126 = ($125<<24>>24)==(0);
      if ($126) {
       $131 = $$pre$phi38Z2D;
      } else {
       $127 = HEAP32[$$pre$phi40Z2D>>2]|0;
       $131 = $127;
      }
      __THREW__ = 0;
      $128 = (invoke_i(595)|0);
      $129 = __THREW__; __THREW__ = 0;
      $130 = $129&1;
      if ($130) {
       label = 40;
      } else {
       __THREW__ = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $132 = (invoke_iiiii(596,($131|0),($128|0),(10968|0),($vararg_buffer|0))|0);
       $133 = __THREW__; __THREW__ = 0;
       $134 = $133&1;
       if ($134) {
        label = 40;
       } else {
        $135 = ($132|0)==(1);
        if (!($135)) {
         HEAP32[$__err>>2] = 4;
        }
        $136 = ($95|0)==(0|0);
        if ($136) {
         $166 = 0;$169 = 1;
        } else {
         $137 = (($95) + 12|0);
         $138 = HEAP32[$137>>2]|0;
         $139 = (($95) + 16|0);
         $140 = HEAP32[$139>>2]|0;
         $141 = ($138|0)==($140|0);
         if ($141) {
          $142 = HEAP32[$95>>2]|0;
          $143 = (($142) + 36|0);
          $144 = HEAP32[$143>>2]|0;
          __THREW__ = 0;
          $145 = (invoke_ii($144|0,($95|0))|0);
          $146 = __THREW__; __THREW__ = 0;
          $147 = $146&1;
          if ($147) {
           label = 40;
           break;
          } else {
           $$0$i$i$i$i = $145;
          }
         } else {
          $148 = HEAP32[$138>>2]|0;
          $$0$i$i$i$i = $148;
         }
         $149 = ($$0$i$i$i$i|0)==(-1);
         if ($149) {
          HEAP32[$__b>>2] = 0;
          $166 = 0;$169 = 1;
         } else {
          $166 = $95;$169 = 0;
         }
        }
        $150 = ($$pre$i3$i$i|0)==(0|0);
        do {
         if ($150) {
          label = 68;
         } else {
          $151 = (($$pre$i3$i$i) + 12|0);
          $152 = HEAP32[$151>>2]|0;
          $153 = (($$pre$i3$i$i) + 16|0);
          $154 = HEAP32[$153>>2]|0;
          $155 = ($152|0)==($154|0);
          if ($155) {
           $156 = HEAP32[$$pre$i3$i$i>>2]|0;
           $157 = (($156) + 36|0);
           $158 = HEAP32[$157>>2]|0;
           __THREW__ = 0;
           $159 = (invoke_ii($158|0,($$pre$i3$i$i|0))|0);
           $160 = __THREW__; __THREW__ = 0;
           $161 = $160&1;
           if ($161) {
            label = 40;
            break L8;
           } else {
            $$0$i$i1$i$i = $159;
           }
          } else {
           $162 = HEAP32[$152>>2]|0;
           $$0$i$i1$i$i = $162;
          }
          $163 = ($$0$i$i1$i$i|0)==(-1);
          if ($163) {
           HEAP32[$__e>>2] = 0;
           label = 68;
           break;
          }
          if ($169) {
           HEAP32[$agg$result>>2] = $166;
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
           __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
           STACKTOP = sp;return;
          }
         }
        } while(0);
        if ((label|0) == 68) {
         if (!($169)) {
          HEAP32[$agg$result>>2] = $166;
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
          __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
          STACKTOP = sp;return;
         }
        }
        $164 = HEAP32[$__err>>2]|0;
        $165 = $164 | 2;
        HEAP32[$__err>>2] = $165;
        HEAP32[$agg$result>>2] = $166;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        STACKTOP = sp;return;
       }
      }
     }
    }
   } while(0);
   if ((label|0) == 40) {
    $92 = ___cxa_find_matching_catch()|0;
    $93 = tempRet0;
    $lpad$phi$index = $92;$lpad$phi$index2 = $93;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
   $$0 = $lpad$phi$index;$$01 = $lpad$phi$index2;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
   ___resumeException($$0|0);
   // unreachable;
  }
 }
 $87 = ___cxa_find_matching_catch()|0;
 $88 = tempRet0;
 $89 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($89)|0);
 $$0 = $87;$$01 = $88;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($$0|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms) {
 $__ct = $__ct|0;
 $__base = $__base|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__dc = $__dc|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__a_end>>2]|0;
 $1 = ($0|0)==($__a|0);
 do {
  if ($1) {
   $2 = (($__atoms) + 96|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)==($__ct|0);
   if (!($4)) {
    $5 = (($__atoms) + 100|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==($__ct|0);
    if (!($7)) {
     break;
    }
   }
   $8 = $4 ? 43 : 45;
   $9 = (($__a) + 1|0);
   HEAP32[$__a_end>>2] = $9;
   HEAP8[$__a>>0] = $8;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $10 = HEAP8[$__grouping>>0]|0;
 $11 = $10 & 1;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $15 = $10&255;
  $16 = $15 >>> 1;
  $18 = $16;
 } else {
  $13 = (($__grouping) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $18 = $14;
 }
 $17 = ($18|0)!=(0);
 $19 = ($__ct|0)==($__thousands_sep|0);
 $or$cond = $17 & $19;
 if ($or$cond) {
  $20 = HEAP32[$__g_end>>2]|0;
  $21 = $20;
  $22 = $__g;
  $23 = (($21) - ($22))|0;
  $24 = ($23|0)<(160);
  if (!($24)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $25 = HEAP32[$__dc>>2]|0;
  $26 = (($20) + 4|0);
  HEAP32[$__g_end>>2] = $26;
  HEAP32[$20>>2] = $25;
  HEAP32[$__dc>>2] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $27 = (($__atoms) + 104|0);
 $$01$i = $__atoms;
 while(1) {
  $30 = HEAP32[$$01$i>>2]|0;
  $31 = ($30|0)==($__ct|0);
  $29 = (($$01$i) + 4|0);
  if ($31) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $28 = ($29|0)==($27|0);
  if ($28) {
   $$0$lcssa$i = $27;
   break;
  } else {
   $$01$i = $29;
  }
 }
 $32 = $$0$lcssa$i;
 $33 = $__atoms;
 $34 = (($32) - ($33))|0;
 $35 = $34 >> 2;
 $36 = ($34|0)>(92);
 if ($36) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 if ((($__base|0) == 16)) {
  $38 = ($34|0)<(88);
  if (!($38)) {
   if ($1) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $39 = $0;
   $40 = $__a;
   $41 = (($39) - ($40))|0;
   $42 = ($41|0)<(3);
   if (!($42)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $43 = (($0) + -1|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(48);
   if (!($45)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__dc>>2] = 0;
   $46 = (10928 + ($35)|0);
   $47 = HEAP8[$46>>0]|0;
   $48 = (($0) + 1|0);
   HEAP32[$__a_end>>2] = $48;
   HEAP8[$0>>0] = $47;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 } else if ((($__base|0) == 10) | (($__base|0) == 8)) {
  $37 = ($35|0)<($__base|0);
  if (!($37)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $49 = (10928 + ($35)|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = (($0) + 1|0);
 HEAP32[$__a_end>>2] = $51;
 HEAP8[$0>>0] = $50;
 $52 = HEAP32[$__dc>>2]|0;
 $53 = (($52) + 1)|0;
 HEAP32[$__dc>>2] = $53;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(458,($__loc|0),(12416|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(10928|0),(((10928 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(458,($__loc|0),(12560|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__thousands_sep>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(458,($__loc|0),(12416|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(10928|0),(((10928 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(458,($__loc|0),(12560|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP8[$__decimal_point>>0] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP8[$__thousands_sep>>0] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct<<24>>24)==($__decimal_point<<24>>24);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct<<24>>24)==($__thousands_sep<<24>>24);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 32|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP8[$$01$i>>0]|0;
  $44 = ($43<<24>>24)==($__ct<<24>>24);
  $42 = (($$01$i) + 1|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = ($47|0)>(31);
 if ($48) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $49 = (10928 + ($47)|0);
 $50 = HEAP8[$49>>0]|0;
 if ((($47|0) == 23) | (($47|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
  $62 = HEAP32[$__a_end>>2]|0;
  $63 = (($62) + 1|0);
  HEAP32[$__a_end>>2] = $63;
  HEAP8[$62>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($47|0) == 24) | (($47|0) == 25)) {
  $51 = HEAP32[$__a_end>>2]|0;
  $52 = ($51|0)==($__a|0);
  if (!($52)) {
   $53 = (($51) + -1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 & 95;
   $57 = HEAP8[$__exp>>0]|0;
   $58 = $57&255;
   $59 = $58 & 127;
   $60 = ($56|0)==($59|0);
   if (!($60)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $61 = (($51) + 1|0);
  HEAP32[$__a_end>>2] = $61;
  HEAP8[$51>>0] = $50;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $64 = $50&255;
  $65 = $64 & 95;
  $66 = HEAP8[$__exp>>0]|0;
  $67 = $66 << 24 >> 24;
  $68 = ($65|0)==($67|0);
  if ($68) {
   $69 = $65 | 128;
   $70 = $69&255;
   HEAP8[$__exp>>0] = $70;
   $71 = HEAP8[$__in_units>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if (!($72)) {
    HEAP8[$__in_units>>0] = 0;
    $73 = HEAP8[$__grouping>>0]|0;
    $74 = $73 & 1;
    $75 = ($74<<24>>24)==(0);
    if ($75) {
     $78 = $73&255;
     $79 = $78 >>> 1;
     $81 = $79;
    } else {
     $76 = (($__grouping) + 4|0);
     $77 = HEAP32[$76>>2]|0;
     $81 = $77;
    }
    $80 = ($81|0)==(0);
    if (!($80)) {
     $82 = HEAP32[$__g_end>>2]|0;
     $83 = $82;
     $84 = $__g;
     $85 = (($83) - ($84))|0;
     $86 = ($85|0)<(160);
     if ($86) {
      $87 = HEAP32[$__dc>>2]|0;
      $88 = (($82) + 4|0);
      HEAP32[$__g_end>>2] = $88;
      HEAP32[$82>>2] = $87;
     }
    }
   }
  }
  $89 = HEAP32[$__a_end>>2]|0;
  $90 = (($89) + 1|0);
  HEAP32[$__a_end>>2] = $90;
  HEAP8[$89>>0] = $50;
  $91 = ($47|0)>(21);
  if ($91) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $92 = HEAP32[$__dc>>2]|0;
  $93 = (($92) + 1)|0;
  HEAP32[$__dc>>2] = $93;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result,$__iob,$__atoms,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(458,($__loc|0),(12408|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(10928|0),(((10928 + 26|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(458,($__loc|0),(12568|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__thousands_sep>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     invoke_vii($19|0,($agg$result|0),($8|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if (!($21)) {
      $22 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($22)|0);
      STACKTOP = sp;return;
     }
    }
   }
  }
 }
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $25 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($25)|0);
 ___resumeException($23|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result,$__iob,$__atoms,$__decimal_point,$__thousands_sep) {
 $agg$result = $agg$result|0;
 $__iob = $__iob|0;
 $__atoms = $__atoms|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__loc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $0 = (invoke_iii(458,($__loc|0),(12408|0))|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if (!($2)) {
  $3 = HEAP32[$0>>2]|0;
  $4 = (($3) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiiii($5|0,($0|0),(10928|0),(((10928 + 32|0))|0),($__atoms|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   __THREW__ = 0;
   $8 = (invoke_iii(458,($__loc|0),(12568|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if (!($10)) {
    $11 = HEAP32[$8>>2]|0;
    $12 = (($11) + 12|0);
    $13 = HEAP32[$12>>2]|0;
    __THREW__ = 0;
    $14 = (invoke_ii($13|0,($8|0))|0);
    $15 = __THREW__; __THREW__ = 0;
    $16 = $15&1;
    if (!($16)) {
     HEAP32[$__decimal_point>>2] = $14;
     $17 = HEAP32[$8>>2]|0;
     $18 = (($17) + 16|0);
     $19 = HEAP32[$18>>2]|0;
     __THREW__ = 0;
     $20 = (invoke_ii($19|0,($8|0))|0);
     $21 = __THREW__; __THREW__ = 0;
     $22 = $21&1;
     if (!($22)) {
      HEAP32[$__thousands_sep>>2] = $20;
      $23 = HEAP32[$8>>2]|0;
      $24 = (($23) + 20|0);
      $25 = HEAP32[$24>>2]|0;
      __THREW__ = 0;
      invoke_vii($25|0,($agg$result|0),($8|0));
      $26 = __THREW__; __THREW__ = 0;
      $27 = $26&1;
      if (!($27)) {
       $28 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($28)|0);
       STACKTOP = sp;return;
      }
     }
    }
   }
  }
 }
 $29 = ___cxa_find_matching_catch()|0;
 $30 = tempRet0;
 $31 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($31)|0);
 ___resumeException($29|0);
 // unreachable;
}
function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms) {
 $__ct = $__ct|0;
 $__in_units = $__in_units|0;
 $__exp = $__exp|0;
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__decimal_point = $__decimal_point|0;
 $__thousands_sep = $__thousands_sep|0;
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__dc = $__dc|0;
 $__atoms = $__atoms|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__ct|0)==($__decimal_point|0);
 if ($0) {
  $1 = HEAP8[$__in_units>>0]|0;
  $2 = ($1<<24>>24)==(0);
  if ($2) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP8[$__in_units>>0] = 0;
  $3 = HEAP32[$__a_end>>2]|0;
  $4 = (($3) + 1|0);
  HEAP32[$__a_end>>2] = $4;
  HEAP8[$3>>0] = 46;
  $5 = HEAP8[$__grouping>>0]|0;
  $6 = $5 & 1;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   $10 = $5&255;
   $11 = $10 >>> 1;
   $13 = $11;
  } else {
   $8 = (($__grouping) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   $13 = $9;
  }
  $12 = ($13|0)==(0);
  if ($12) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $14 = HEAP32[$__g_end>>2]|0;
  $15 = $14;
  $16 = $__g;
  $17 = (($15) - ($16))|0;
  $18 = ($17|0)<(160);
  if (!($18)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $19 = HEAP32[$__dc>>2]|0;
  $20 = (($14) + 4|0);
  HEAP32[$__g_end>>2] = $20;
  HEAP32[$14>>2] = $19;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ($__ct|0)==($__thousands_sep|0);
 if ($21) {
  $22 = HEAP8[$__grouping>>0]|0;
  $23 = $22 & 1;
  $24 = ($23<<24>>24)==(0);
  if ($24) {
   $27 = $22&255;
   $28 = $27 >>> 1;
   $30 = $28;
  } else {
   $25 = (($__grouping) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $30 = $26;
  }
  $29 = ($30|0)==(0);
  if (!($29)) {
   $31 = HEAP8[$__in_units>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if ($32) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[$__g_end>>2]|0;
   $34 = $33;
   $35 = $__g;
   $36 = (($34) - ($35))|0;
   $37 = ($36|0)<(160);
   if (!($37)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $38 = HEAP32[$__dc>>2]|0;
   $39 = (($33) + 4|0);
   HEAP32[$__g_end>>2] = $39;
   HEAP32[$33>>2] = $38;
   HEAP32[$__dc>>2] = 0;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $40 = (($__atoms) + 128|0);
 $$01$i = $__atoms;
 while(1) {
  $43 = HEAP32[$$01$i>>2]|0;
  $44 = ($43|0)==($__ct|0);
  $42 = (($$01$i) + 4|0);
  if ($44) {
   $$0$lcssa$i = $$01$i;
   break;
  }
  $41 = ($42|0)==($40|0);
  if ($41) {
   $$0$lcssa$i = $40;
   break;
  } else {
   $$01$i = $42;
  }
 }
 $45 = $$0$lcssa$i;
 $46 = $__atoms;
 $47 = (($45) - ($46))|0;
 $48 = $47 >> 2;
 $49 = ($47|0)>(124);
 if ($49) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $50 = (10928 + ($48)|0);
 $51 = HEAP8[$50>>0]|0;
 if ((($48|0) == 24) | (($48|0) == 25)) {
  $52 = HEAP32[$__a_end>>2]|0;
  $53 = ($52|0)==($__a|0);
  if (!($53)) {
   $54 = (($52) + -1|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56 & 95;
   $58 = HEAP8[$__exp>>0]|0;
   $59 = $58&255;
   $60 = $59 & 127;
   $61 = ($57|0)==($60|0);
   if (!($61)) {
    $$0 = -1;
    STACKTOP = sp;return ($$0|0);
   }
  }
  $62 = (($52) + 1|0);
  HEAP32[$__a_end>>2] = $62;
  HEAP8[$52>>0] = $51;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else if ((($48|0) == 23) | (($48|0) == 22)) {
  HEAP8[$__exp>>0] = 80;
 } else {
  $63 = $51&255;
  $64 = $63 & 95;
  $65 = HEAP8[$__exp>>0]|0;
  $66 = $65 << 24 >> 24;
  $67 = ($64|0)==($66|0);
  if ($67) {
   $68 = $64 | 128;
   $69 = $68&255;
   HEAP8[$__exp>>0] = $69;
   $70 = HEAP8[$__in_units>>0]|0;
   $71 = ($70<<24>>24)==(0);
   if (!($71)) {
    HEAP8[$__in_units>>0] = 0;
    $72 = HEAP8[$__grouping>>0]|0;
    $73 = $72 & 1;
    $74 = ($73<<24>>24)==(0);
    if ($74) {
     $77 = $72&255;
     $78 = $77 >>> 1;
     $80 = $78;
    } else {
     $75 = (($__grouping) + 4|0);
     $76 = HEAP32[$75>>2]|0;
     $80 = $76;
    }
    $79 = ($80|0)==(0);
    if (!($79)) {
     $81 = HEAP32[$__g_end>>2]|0;
     $82 = $81;
     $83 = $__g;
     $84 = (($82) - ($83))|0;
     $85 = ($84|0)<(160);
     if ($85) {
      $86 = HEAP32[$__dc>>2]|0;
      $87 = (($81) + 4|0);
      HEAP32[$__g_end>>2] = $87;
      HEAP32[$81>>2] = $86;
     }
    }
   }
  }
 }
 $88 = HEAP32[$__a_end>>2]|0;
 $89 = (($88) + 1|0);
 HEAP32[$__a_end>>2] = $89;
 HEAP8[$88>>0] = $51;
 $90 = ($47|0)>(84);
 if ($90) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $91 = HEAP32[$__dc>>2]|0;
 $92 = (($91) + 1)|0;
 HEAP32[$__dc>>2] = $92;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $$pre3 = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(458,($1|0),(12560|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $57 = ___cxa_find_matching_catch()|0;
  $58 = tempRet0;
  $59 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($59)|0);
  $$0 = $57;$$01 = $58;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 1|0);
  $$pre5 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $25;$$pre$phi6Z2D = $$pre5;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre3 = (($__nm) + 1|0);
  $$ph = $24;$$pre$phi4Z2D = $$pre3;$$pre$phi6Z2D = $23;
 }
 $26 = (($__nm) + 4|0);
 $28 = $20;$38 = $$ph;
 L17: while(1) {
  $27 = $28 & 1;
  $29 = ($27<<24>>24)==(0);
  if ($29) {
   $32 = $28&255;
   $33 = $32 >>> 1;
   $35 = $$pre$phi4Z2D;$36 = $33;
  } else {
   $30 = HEAP32[$$pre$phi6Z2D>>2]|0;
   $31 = HEAP32[$26>>2]|0;
   $35 = $30;$36 = $31;
  }
  $34 = (($35) + ($36)|0);
  $37 = ($38|0)==($34|0);
  if ($37) {
   label = 24;
   break;
  }
  $39 = HEAP8[$38>>0]|0;
  $40 = HEAP32[$__s>>2]|0;
  $41 = ($40|0)==(0|0);
  do {
   if (!($41)) {
    $42 = (($40) + 24|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (($40) + 28|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($43|0)==($45|0);
    if (!($46)) {
     $47 = (($43) + 1|0);
     HEAP32[$42>>2] = $47;
     HEAP8[$43>>0] = $39;
     break;
    }
    $48 = HEAP32[$40>>2]|0;
    $49 = (($48) + 52|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = $39&255;
    __THREW__ = 0;
    $52 = (invoke_iii($50|0,($40|0),($51|0))|0);
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     label = 23;
     break L17;
    }
    $55 = ($52|0)==(-1);
    if ($55) {
     HEAP32[$__s>>2] = 0;
    }
   }
  } while(0);
  $56 = (($38) + 1|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $28 = $$pre;$38 = $56;
 }
 if ((label|0) == 23) {
  $60 = ___cxa_find_matching_catch()|0;
  $61 = tempRet0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  $$0 = $60;$$01 = $61;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $62 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $62;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11208+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,11112,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(599,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp,$__len,$__signd,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__signd = $__signd|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1$ph = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1$ph = $5;
 }
 $6 = HEAP8[$__len>>0]|0;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $$1$lcssa = $$1$ph;
 } else {
  $$012 = $__len;$$13 = $$1$ph;$10 = $6;
  while(1) {
   $8 = (($$012) + 1|0);
   $9 = (($$13) + 1|0);
   HEAP8[$$13>>0] = $10;
   $11 = HEAP8[$8>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    $$1$lcssa = $9;
    break;
   } else {
    $$012 = $8;$$13 = $9;$10 = $11;
   }
  }
 }
 $13 = $__flags & 74;
 if ((($13|0) == 8)) {
  $14 = $__flags & 16384;
  $15 = ($14|0)==(0);
  if ($15) {
   HEAP8[$$1$lcssa>>0] = 120;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 88;
   STACKTOP = sp;return;
  }
 } else if ((($13|0) == 64)) {
  HEAP8[$$1$lcssa>>0] = 111;
  STACKTOP = sp;return;
 } else {
  if ($__signd) {
   HEAP8[$$1$lcssa>>0] = 100;
   STACKTOP = sp;return;
  } else {
   HEAP8[$$1$lcssa>>0] = 117;
   STACKTOP = sp;return;
  }
 }
}
function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb,$__ne,$__iob) {
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__iob = $__iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 176;
 do {
  if ((($2|0) == 16)) {
   $3 = HEAP8[$__nb>>0]|0;
   if ((($3<<24>>24) == 43) | (($3<<24>>24) == 45)) {
    $4 = (($__nb) + 1|0);
    $$0 = $4;
    break;
   }
   $5 = $__ne;
   $6 = $__nb;
   $7 = (($5) - ($6))|0;
   $8 = ($7|0)>(1);
   $9 = ($3<<24>>24)==(48);
   $or$cond = $8 & $9;
   if ($or$cond) {
    $10 = (($__nb) + 1|0);
    $11 = HEAP8[$10>>0]|0;
    if ((($11<<24>>24) == 88) | (($11<<24>>24) == 120)) {
     $12 = (($__nb) + 2|0);
     $$0 = $12;
    } else {
     label = 7;
    }
   } else {
    label = 7;
   }
  } else if ((($2|0) == 32)) {
   $$0 = $__ne;
  } else {
   label = 7;
  }
 } while(0);
 if ((label|0) == 7) {
  $$0 = $__nb;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$12 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12416)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12560)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 32|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21)|0);
    HEAP32[$__oe>>2] = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 28|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 1|0);
    HEAP32[$__oe>>2] = $36;
    HEAP8[$35>>0] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 28|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 1|0);
      HEAP32[$__oe>>2] = $52;
      HEAP8[$51>>0] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 28|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 1|0);
      HEAP32[$__oe>>2] = $62;
      HEAP8[$61>>0] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$09 = 0;$__dg$010 = 0;$__p$011 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$010)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$12 = $84 ? $79 : $89;
        $90 = (($$12) + ($__dg$010)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$09|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 1|0);
         HEAP32[$__oe>>2] = $95;
         HEAP8[$94>>0] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$010>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$010))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$09;$__dg$1 = $__dg$010;
        }
       }
       $106 = HEAP8[$__p$011>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 28|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 1|0);
       HEAP32[$__oe>>2] = $114;
       HEAP8[$113>>0] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$011) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$09 = $115;$__dg$010 = $__dg$1;$__p$011 = $116;
       } else {
        break L26;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120)|0);
    $122 = HEAP32[$__oe>>2]|0;
    $123 = ($121|0)==($122|0);
    if (!($123)) {
     $124 = (($122) + -1|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP8[$$012$i$i>>0]|0;
       $127 = HEAP8[$128>>0]|0;
       HEAP8[$$012$i$i>>0] = $127;
       HEAP8[$128>>0] = $126;
       $129 = (($$012$i$i) + 1|0);
       $130 = (($128) + -1|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        break;
       }
      }
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $133 = HEAP32[$__oe>>2]|0;
  $storemerge = $133;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 } else {
  $134 = $__np;
  $135 = $__nb;
  $136 = (($134) - ($135))|0;
  $137 = (($__ob) + ($136)|0);
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 58|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,11120,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(599,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 24|0;
 $__nar = sp + 32|0;
 $__o = sp + 44|0;
 $__op = sp + 16|0;
 $__oe = sp + 4|0;
 $0 = sp + 8|0;
 $1 = sp + 12|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11208+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,11112,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(599,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp + 8|0;
 $__fmt = sp;
 $__nar = sp + 36|0;
 $__o = sp + 59|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 20|0;
 $3 = sp + 24|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,11120,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(599,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 68|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 88|0;
 $__nb = sp + 84|0;
 $__o = sp + 118|0;
 $__op = sp + 60|0;
 $__oe = sp + 80|0;
 $0 = sp + 76|0;
 $1 = sp + 64|0;
 $2 = sp + 72|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,11128,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(595)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(600,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(595)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(600,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$69 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(601);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$69 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $40 = $$pre9;$69 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 1;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(601);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $88 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $52 = $$pre10;$63 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(457,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $88 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(602,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $74 = ___cxa_find_matching_catch()|0;
     $75 = tempRet0;
     $76 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($76)|0);
     $$0 = $74;$$01 = $75;$78 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(460,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $88 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if (!($62)) {
      __THREW__ = 0;
      invoke_vi(603,($63|0));
      $64 = __THREW__; __THREW__ = 0;
      $65 = $64&1;
      if ($65) {
       $66 = ___cxa_find_matching_catch(0|0)|0;
       $67 = tempRet0;
       ___clang_call_terminate($66);
       // unreachable;
      }
     }
     $68 = ($69|0)==(0|0);
     if ($68) {
      STACKTOP = sp;return;
     }
     __THREW__ = 0;
     invoke_vi(603,($69|0));
     $70 = __THREW__; __THREW__ = 0;
     $71 = $70&1;
     if ($71) {
      $72 = ___cxa_find_matching_catch(0|0)|0;
      $73 = tempRet0;
      ___clang_call_terminate($72);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$78 = $88;
 }
 $77 = ($78|0)==(0|0);
 if (!($77)) {
  __THREW__ = 0;
  invoke_vi(603,($78|0));
  $79 = __THREW__; __THREW__ = 0;
  $80 = $79&1;
  if ($80) {
   $81 = ___cxa_find_matching_catch(0|0)|0;
   $82 = tempRet0;
   ___clang_call_terminate($81);
   // unreachable;
  }
 }
 $83 = ($69|0)==(0|0);
 if ($83) {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(603,($69|0));
 $84 = __THREW__; __THREW__ = 0;
 $85 = $84&1;
 if ($85) {
  $86 = ___cxa_find_matching_catch(0|0)|0;
  $87 = tempRet0;
  ___clang_call_terminate($86);
  // unreachable;
 } else {
  $$127 = $$01;$$18 = $$0;
  ___resumeException($$18|0);
  // unreachable;
 }
}
function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp,$__len,$__flags) {
 $__fmtp = $__fmtp|0;
 $__len = $__len|0;
 $__flags = $__flags|0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $specify_precision$0$off0$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__flags & 2048;
 $1 = ($0|0)==(0);
 if ($1) {
  $$0 = $__fmtp;
 } else {
  $2 = (($__fmtp) + 1|0);
  HEAP8[$__fmtp>>0] = 43;
  $$0 = $2;
 }
 $3 = $__flags & 1024;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = $$0;
 } else {
  $5 = (($$0) + 1|0);
  HEAP8[$$0>>0] = 35;
  $$1 = $5;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6|0)==(260);
 if ($8) {
  $$2$ph = $$1;$specify_precision$0$off0$ph = 0;
 } else {
  $9 = (($$1) + 1|0);
  HEAP8[$$1>>0] = 46;
  $10 = (($$1) + 2|0);
  HEAP8[$9>>0] = 42;
  $$2$ph = $10;$specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len>>0]|0;
 $12 = ($11<<24>>24)==(0);
 if ($12) {
  $$2$lcssa = $$2$ph;
 } else {
  $$012 = $__len;$$23 = $$2$ph;$15 = $11;
  while(1) {
   $13 = (($$012) + 1|0);
   $14 = (($$23) + 1|0);
   HEAP8[$$23>>0] = $15;
   $16 = HEAP8[$13>>0]|0;
   $17 = ($16<<24>>24)==(0);
   if ($17) {
    $$2$lcssa = $14;
    break;
   } else {
    $$012 = $13;$$23 = $14;$15 = $16;
   }
  }
 }
 do {
  if ((($6|0) == 4)) {
   $18 = $7 & 1;
   $19 = ($18|0)==(0);
   if ($19) {
    HEAP8[$$2$lcssa>>0] = 102;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 70;
    break;
   }
  } else if ((($6|0) == 256)) {
   $20 = $7 & 1;
   $21 = ($20|0)==(0);
   if ($21) {
    HEAP8[$$2$lcssa>>0] = 101;
    break;
   } else {
    HEAP8[$$2$lcssa>>0] = 69;
    break;
   }
  } else {
   $22 = $7 & 1;
   $23 = ($22|0)!=(0);
   if ($8) {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 65;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 97;
     break;
    }
   } else {
    if ($23) {
     HEAP8[$$2$lcssa>>0] = 71;
     break;
    } else {
     HEAP8[$$2$lcssa>>0] = 103;
     break;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($specify_precision$0$off0$ph|0);
}
function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$47 = 0, $$__dg$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$018 = 0, $__dc$1 = 0, $__dg$019 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$214 = 0, $__nf$3 = 0, $__ns$034 = 0, $__ns$126 = 0, $__ns$2 = 0, $__p$020 = 0, $lpad$phi$index = 0;
 var $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12416)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12560)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 1|0);
   HEAP32[$__oe>>2] = $14;
   HEAP8[$13>>0] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 28|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 1|0);
       HEAP32[$__oe>>2] = $41;
       HEAP8[$40>>0] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 28|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 1|0);
       HEAP32[$__oe>>2] = $51;
       HEAP8[$50>>0] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$034 = $42;
        while(1) {
         $55 = HEAP8[$__ns$034>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(595)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(604,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$034) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$034;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$034 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$126 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$126>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(595)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(605,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$126) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$126;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$126 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 32|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92)|0);
    HEAP32[$__oe>>2] = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L43: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$018 = 0;$__dg$019 = 0;$__p$020 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$019)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$47 = $116 ? $111 : $121;
        $122 = (($$47) + ($__dg$019)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$018|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 1|0);
         HEAP32[$__oe>>2] = $127;
         HEAP8[$126>>0] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$019>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$019))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
        }
       } else {
        $__dc$1 = $__dc$018;$__dg$1 = $__dg$019;
       }
       $138 = HEAP8[$__p$020>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 28|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 1|0);
       HEAP32[$__oe>>2] = $146;
       HEAP8[$145>>0] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$020) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$018 = $147;$__dg$019 = $__dg$1;$__p$020 = $148;
       } else {
        break L43;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152)|0);
    $154 = HEAP32[$__oe>>2]|0;
    $155 = ($153|0)==($154|0);
    if (!($155)) {
     $156 = (($154) + -1|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP8[$$012$i$i7>>0]|0;
       $159 = HEAP8[$160>>0]|0;
       HEAP8[$$012$i$i7>>0] = $159;
       HEAP8[$160>>0] = $158;
       $161 = (($$012$i$i7) + 1|0);
       $162 = (($160) + -1|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        break;
       }
      }
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L63: do {
    if ($164) {
     $__nf$214 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$214>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 51;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 28|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 1|0);
      HEAP32[$__oe>>2] = $183;
      HEAP8[$182>>0] = $179;
      $184 = (($__nf$214) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$214 = $184;
      } else {
       $__nf$3 = $184;
       break L63;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 51) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 1|0);
      HEAP32[$__oe>>2] = $174;
      HEAP8[$173>>0] = $170;
      $175 = (($__nf$214) + 1|0);
      $__nf$3 = $175;
      break;
     }
    } else {
     $__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$__oe>>2]|0;
   $187 = HEAP32[$0>>2]|0;
   $188 = (($187) + 32|0);
   $189 = HEAP32[$188>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($189|0,($0|0),($__nf$3|0),($__ne|0),($186|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$127 = 0, $$18 = 0, $$byval_copy = 0, $$pre = 0, $$pre10 = 0, $$pre9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0;
 var $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 60|0;
 $vararg_buffer9 = sp + 16|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 80|0;
 $__nb = sp + 76|0;
 $__o = sp + 110|0;
 $__op = sp + 52|0;
 $__oe = sp + 72|0;
 $0 = sp + 68|0;
 $1 = sp + 56|0;
 $2 = sp + 64|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,11136,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(595)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(600,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(595)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(600,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$61 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(601);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$61 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$127 = $26;$$18 = $25;
   ___resumeException($$18|0);
   // unreachable;
  } else {
   $$pre9 = HEAP32[$__nb>>2]|0;
   $38 = $$pre9;$61 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$60 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 1;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(601);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $66 = 0;
    label = 19;
   } else {
    $$pre10 = HEAP32[$__nb>>2]|0;
    $50 = $$pre10;$60 = 0;$__ob$0 = 0;
    label = 20;
   }
  } else {
   $50 = $38;$60 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(457,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $66 = $60;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(602,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $64 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($64)|0);
     $$0 = $62;$$01 = $63;$65 = $60;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(460,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $66 = $60;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$agg$result>>2] = $59;
     _free($60);
     _free($61);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$65 = $66;
 }
 _free($65);
 _free($61);
 $$127 = $$01;$$18 = $$0;
 ___resumeException($$18|0);
 // unreachable;
}
function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 12|0;
 $vararg_buffer = sp;
 $__fmt = sp + 54|0;
 $__nar = sp + 60|0;
 $__o = sp + 16|0;
 $0 = sp + 4|0;
 $1 = sp + 8|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11216+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11216+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11216+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11216+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11216+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11216+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(458,($0|0),(12416|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i = 0, $$01 = 0, $$byval_copy = 0, $$ph = 0, $$pre = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $$pre2 = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $__nm = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $0 = sp + 16|0;
 $1 = sp + 12|0;
 $__nm = sp;
 $2 = (($__iob) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = HEAP32[$this>>2]|0;
  $7 = (($6) + 24|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$__s>>2]|0;
  HEAP32[$0>>2] = $9;
  $10 = $__v&1;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
  FUNCTION_TABLE_viiiiii[$8 & 1023]($agg$result,$this,$$byval_copy,$__iob,$__fl,$10);
  STACKTOP = sp;return;
 }
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $11 = (invoke_iii(458,($1|0),(12568|0))|0);
 $12 = __THREW__; __THREW__ = 0;
 $13 = $12&1;
 if ($13) {
  $55 = ___cxa_find_matching_catch()|0;
  $56 = tempRet0;
  $57 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($57)|0);
  $$0 = $55;$$01 = $56;
  ___resumeException($$0|0);
  // unreachable;
 }
 $14 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($14)|0);
 $15 = HEAP32[$11>>2]|0;
 if ($__v) {
  $16 = (($15) + 24|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($__nm,$11);
 } else {
  $18 = (($15) + 28|0);
  $19 = HEAP32[$18>>2]|0;
  FUNCTION_TABLE_vii[$19 & 1023]($__nm,$11);
 }
 $20 = HEAP8[$__nm>>0]|0;
 $21 = $20 & 1;
 $22 = ($21<<24>>24)==(0);
 if ($22) {
  $25 = (($__nm) + 4|0);
  $$pre3 = (($__nm) + 8|0);
  $$ph = $25;$$pre$phi4Z2D = $$pre3;$$pre$phiZ2D = $25;
 } else {
  $23 = (($__nm) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $$pre2 = (($__nm) + 4|0);
  $$ph = $24;$$pre$phi4Z2D = $23;$$pre$phiZ2D = $$pre2;
 }
 $27 = $20;$37 = $$ph;
 while(1) {
  $26 = $27 & 1;
  $28 = ($26<<24>>24)==(0);
  if ($28) {
   $31 = $27&255;
   $32 = $31 >>> 1;
   $34 = $$pre$phiZ2D;$35 = $32;
  } else {
   $29 = HEAP32[$$pre$phi4Z2D>>2]|0;
   $30 = HEAP32[$$pre$phiZ2D>>2]|0;
   $34 = $29;$35 = $30;
  }
  $33 = (($34) + ($35<<2)|0);
  $36 = ($37|0)==($33|0);
  if ($36) {
   label = 24;
   break;
  }
  $38 = HEAP32[$37>>2]|0;
  $39 = HEAP32[$__s>>2]|0;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   $41 = (($39) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($39) + 28|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($42|0)==($44|0);
   if ($45) {
    $46 = HEAP32[$39>>2]|0;
    $47 = (($46) + 52|0);
    $48 = HEAP32[$47>>2]|0;
    __THREW__ = 0;
    $49 = (invoke_iii($48|0,($39|0),($38|0))|0);
    $50 = __THREW__; __THREW__ = 0;
    $51 = $50&1;
    if ($51) {
     label = 23;
     break;
    } else {
     $$0$i$i = $49;
    }
   } else {
    $52 = (($42) + 4|0);
    HEAP32[$41>>2] = $52;
    HEAP32[$42>>2] = $38;
    $$0$i$i = $38;
   }
   $53 = ($$0$i$i|0)==(-1);
   if ($53) {
    HEAP32[$__s>>2] = 0;
   }
  }
  $54 = (($37) + 4|0);
  $$pre = HEAP8[$__nm>>0]|0;
  $27 = $$pre;$37 = $54;
 }
 if ((label|0) == 23) {
  $58 = ___cxa_find_matching_catch()|0;
  $59 = tempRet0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  $$0 = $58;$$01 = $59;
  ___resumeException($$0|0);
  // unreachable;
 }
 else if ((label|0) == 24) {
  $60 = HEAP32[$__s>>2]|0;
  HEAP32[$agg$result>>2] = $60;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11208+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,11112,1,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(606,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i5 = 0, $$11 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12408)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12568)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 $5 = HEAP8[$__grouping>>0]|0;
 $6 = $5 & 1;
 $7 = ($6<<24>>24)==(0);
 if ($7) {
  $10 = $5&255;
  $11 = $10 >>> 1;
  $13 = $11;
 } else {
  $8 = (($__grouping) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $13 = $9;
 }
 $12 = ($13|0)==(0);
 do {
  if ($12) {
   $14 = HEAP32[$0>>2]|0;
   $15 = (($14) + 48|0);
   $16 = HEAP32[$15>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($16|0,($0|0),($__nb|0),($__ne|0),($__ob|0))|0);
   $17 = __THREW__; __THREW__ = 0;
   $18 = $17&1;
   if ($18) {
    label = 8;
   } else {
    $19 = $__ne;
    $20 = $__nb;
    $21 = (($19) - ($20))|0;
    $22 = (($__ob) + ($21<<2)|0);
    HEAP32[$__oe>>2] = $22;
    $137 = $22;
   }
  } else {
   HEAP32[$__oe>>2] = $__ob;
   $27 = HEAP8[$__nb>>0]|0;
   if ((($27<<24>>24) == 43) | (($27<<24>>24) == 45)) {
    $28 = HEAP32[$0>>2]|0;
    $29 = (($28) + 44|0);
    $30 = HEAP32[$29>>2]|0;
    __THREW__ = 0;
    $31 = (invoke_iii($30|0,($0|0),($27|0))|0);
    $32 = __THREW__; __THREW__ = 0;
    $33 = $32&1;
    if ($33) {
     label = 8;
     break;
    }
    $34 = (($__nb) + 1|0);
    $35 = HEAP32[$__oe>>2]|0;
    $36 = (($35) + 4|0);
    HEAP32[$__oe>>2] = $36;
    HEAP32[$35>>2] = $31;
    $__nf$0 = $34;
   } else {
    $__nf$0 = $__nb;
   }
   $37 = $__ne;
   $38 = $__nf$0;
   $39 = (($37) - ($38))|0;
   $40 = ($39|0)>(1);
   if ($40) {
    $41 = HEAP8[$__nf$0>>0]|0;
    $42 = ($41<<24>>24)==(48);
    if ($42) {
     $43 = (($__nf$0) + 1|0);
     $44 = HEAP8[$43>>0]|0;
     if ((($44<<24>>24) == 88) | (($44<<24>>24) == 120)) {
      $45 = HEAP32[$0>>2]|0;
      $46 = (($45) + 44|0);
      $47 = HEAP32[$46>>2]|0;
      __THREW__ = 0;
      $48 = (invoke_iii($47|0,($0|0),48)|0);
      $49 = __THREW__; __THREW__ = 0;
      $50 = $49&1;
      if ($50) {
       label = 8;
       break;
      }
      $51 = HEAP32[$__oe>>2]|0;
      $52 = (($51) + 4|0);
      HEAP32[$__oe>>2] = $52;
      HEAP32[$51>>2] = $48;
      $53 = HEAP8[$43>>0]|0;
      $54 = HEAP32[$0>>2]|0;
      $55 = (($54) + 44|0);
      $56 = HEAP32[$55>>2]|0;
      __THREW__ = 0;
      $57 = (invoke_iii($56|0,($0|0),($53|0))|0);
      $58 = __THREW__; __THREW__ = 0;
      $59 = $58&1;
      if ($59) {
       label = 8;
       break;
      }
      $60 = (($__nf$0) + 2|0);
      $61 = HEAP32[$__oe>>2]|0;
      $62 = (($61) + 4|0);
      HEAP32[$__oe>>2] = $62;
      HEAP32[$61>>2] = $57;
      $__nf$1 = $60;
     } else {
      $__nf$1 = $__nf$0;
     }
    } else {
     $__nf$1 = $__nf$0;
    }
   } else {
    $__nf$1 = $__nf$0;
   }
   $63 = ($__nf$1|0)==($__ne|0);
   if (!($63)) {
    $64 = (($__ne) + -1|0);
    $65 = ($64>>>0)>($__nf$1>>>0);
    if ($65) {
     $$012$i$i5 = $__nf$1;$68 = $64;
     while(1) {
      $66 = HEAP8[$$012$i$i5>>0]|0;
      $67 = HEAP8[$68>>0]|0;
      HEAP8[$$012$i$i5>>0] = $67;
      HEAP8[$68>>0] = $66;
      $69 = (($$012$i$i5) + 1|0);
      $70 = (($68) + -1|0);
      $71 = ($69>>>0)<($70>>>0);
      if ($71) {
       $$012$i$i5 = $69;$68 = $70;
      } else {
       break;
      }
     }
    }
   }
   $72 = HEAP32[$1>>2]|0;
   $73 = (($72) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   __THREW__ = 0;
   $75 = (invoke_ii($74|0,($1|0))|0);
   $76 = __THREW__; __THREW__ = 0;
   $77 = $76&1;
   if ($77) {
    label = 8;
   } else {
    $78 = ($__nf$1>>>0)<($__ne>>>0);
    L26: do {
     if ($78) {
      $79 = (($__grouping) + 1|0);
      $80 = (($__grouping) + 4|0);
      $81 = (($__grouping) + 8|0);
      $__dc$08 = 0;$__dg$09 = 0;$__p$010 = $__nf$1;
      while(1) {
       $82 = HEAP8[$__grouping>>0]|0;
       $83 = $82 & 1;
       $84 = ($83<<24>>24)==(0);
       $85 = HEAP32[$81>>2]|0;
       $$ = $84 ? $79 : $85;
       $86 = (($$) + ($__dg$09)|0);
       $87 = HEAP8[$86>>0]|0;
       $88 = ($87<<24>>24)==(0);
       if ($88) {
        $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
       } else {
        $89 = HEAP32[$81>>2]|0;
        $$11 = $84 ? $79 : $89;
        $90 = (($$11) + ($__dg$09)|0);
        $91 = HEAP8[$90>>0]|0;
        $92 = $91 << 24 >> 24;
        $93 = ($__dc$08|0)==($92|0);
        if ($93) {
         $94 = HEAP32[$__oe>>2]|0;
         $95 = (($94) + 4|0);
         HEAP32[$__oe>>2] = $95;
         HEAP32[$94>>2] = $75;
         $96 = HEAP8[$__grouping>>0]|0;
         $97 = $96 & 1;
         $98 = ($97<<24>>24)==(0);
         if ($98) {
          $100 = $96&255;
          $101 = $100 >>> 1;
          $103 = $101;
         } else {
          $99 = HEAP32[$80>>2]|0;
          $103 = $99;
         }
         $102 = (($103) + -1)|0;
         $104 = ($__dg$09>>>0)<($102>>>0);
         $105 = $104&1;
         $$__dg$0 = (($105) + ($__dg$09))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$08;$__dg$1 = $__dg$09;
        }
       }
       $106 = HEAP8[$__p$010>>0]|0;
       $107 = HEAP32[$0>>2]|0;
       $108 = (($107) + 44|0);
       $109 = HEAP32[$108>>2]|0;
       __THREW__ = 0;
       $110 = (invoke_iii($109|0,($0|0),($106|0))|0);
       $111 = __THREW__; __THREW__ = 0;
       $112 = $111&1;
       if ($112) {
        break;
       }
       $113 = HEAP32[$__oe>>2]|0;
       $114 = (($113) + 4|0);
       HEAP32[$__oe>>2] = $114;
       HEAP32[$113>>2] = $110;
       $115 = (($__dc$1) + 1)|0;
       $116 = (($__p$010) + 1|0);
       $117 = ($116>>>0)<($__ne>>>0);
       if ($117) {
        $__dc$08 = $115;$__dg$09 = $__dg$1;$__p$010 = $116;
       } else {
        $123 = $114;
        break L26;
       }
      }
      $23 = ___cxa_find_matching_catch()|0;
      $24 = tempRet0;
      $lpad$phi$index = $23;$lpad$phi$index2 = $24;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $123 = $$pre;
     }
    } while(0);
    $118 = $__nf$1;
    $119 = $__nb;
    $120 = (($118) - ($119))|0;
    $121 = (($__ob) + ($120<<2)|0);
    $122 = ($121|0)==($123|0);
    if ($122) {
     $137 = $123;
    } else {
     $124 = (($123) + -4|0);
     $125 = ($124>>>0)>($121>>>0);
     if ($125) {
      $$012$i$i = $121;$128 = $124;
      while(1) {
       $126 = HEAP32[$$012$i$i>>2]|0;
       $127 = HEAP32[$128>>2]|0;
       HEAP32[$$012$i$i>>2] = $127;
       HEAP32[$128>>2] = $126;
       $129 = (($$012$i$i) + 4|0);
       $130 = (($128) + -4|0);
       $131 = ($129>>>0)<($130>>>0);
       if ($131) {
        $$012$i$i = $129;$128 = $130;
       } else {
        $137 = $123;
        break;
       }
      }
     } else {
      $137 = $123;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 8) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $lpad$phi$index = $25;$lpad$phi$index2 = $26;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $132 = ($__np|0)==($__ne|0);
 if ($132) {
  $storemerge = $137;
  HEAP32[$__op>>2] = $storemerge;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
  STACKTOP = sp;return;
 }
 $133 = $__np;
 $134 = $__nb;
 $135 = (($133) - ($134))|0;
 $136 = (($__ob) + ($135<<2)|0);
 $storemerge = $136;
 HEAP32[$__op>>2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;return;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 200|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,11120,1,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,22,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(606,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $vararg_buffer = sp;
 $__fmt = sp + 108|0;
 $__nar = sp + 116|0;
 $__o = sp + 24|0;
 $__op = sp + 4|0;
 $__oe = sp + 20|0;
 $0 = sp + 12|0;
 $1 = sp + 16|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11208+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11208+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11208+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11208+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11208+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11208+5>>0]|0;
 $2 = (($__fmt) + 1|0);
 $3 = (($__iob) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($2,11112,0,$4);
 $5 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $6 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,12,$5,$__fmt,$vararg_buffer)|0);
 $7 = (($__nar) + ($6)|0);
 $8 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$7,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(606,($__nar|0),($8|0),($7|0),($__o|0),($__op|0),($__oe|0),($0|0));
 $9 = __THREW__; __THREW__ = 0;
 $10 = $9&1;
 if ($10) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 } else {
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  $12 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $12;
  $13 = HEAP32[$__op>>2]|0;
  $14 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$13,$14,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result,$this,$__s,$__iob,$__fl,$0,$1) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $vararg_buffer = sp;
 $__fmt = sp + 8|0;
 $__nar = sp + 208|0;
 $__o = sp + 36|0;
 $__op = sp + 16|0;
 $__oe = sp + 28|0;
 $2 = sp + 24|0;
 $3 = sp + 32|0;
 $4 = $__fmt;
 $5 = $4;
 HEAP32[$5>>2] = 37;
 $6 = (($4) + 4)|0;
 $7 = $6;
 HEAP32[$7>>2] = 0;
 $8 = (($__fmt) + 1|0);
 $9 = (($__iob) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($8,11120,0,$10);
 $11 = (__ZNSt3__16__clocEv()|0);
 $12 = $vararg_buffer;
 $13 = $12;
 HEAP32[$13>>2] = $0;
 $14 = (($12) + 4)|0;
 $15 = $14;
 HEAP32[$15>>2] = $1;
 $16 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,23,$11,$__fmt,$vararg_buffer)|0);
 $17 = (($__nar) + ($16)|0);
 $18 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$17,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($2,$__iob);
 __THREW__ = 0;
 invoke_viiiiiii(606,($__nar|0),($18|0),($17|0),($__o|0),($__op|0),($__oe|0),($2|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $25 = ___cxa_find_matching_catch()|0;
  $26 = tempRet0;
  $27 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($27)|0);
  ___resumeException($25|0);
  // unreachable;
 } else {
  $21 = HEAP32[$2>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($21)|0);
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$3>>2] = $22;
  $23 = HEAP32[$__op>>2]|0;
  $24 = HEAP32[$__oe>>2]|0;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$3+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$23,$24,$__iob,$__fl);
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $__fmt = 0;
 var $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 296|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 48|0;
 $vararg_buffer2 = sp + 24|0;
 $vararg_buffer = sp + 32|0;
 $__fmt = sp;
 $__nar = sp + 316|0;
 $__nb = sp + 312|0;
 $__o = sp + 68|0;
 $__op = sp + 64|0;
 $__oe = sp + 60|0;
 $0 = sp + 304|0;
 $1 = sp + 300|0;
 $2 = sp + 308|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,11128,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(595)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(600,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(595)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     $30 = (($__iob) + 8|0);
     $31 = HEAP32[$30>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer9>>2] = $31;
     $vararg_ptr12 = (($vararg_buffer9) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr12>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr12+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $32 = (invoke_iiiii(600,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $33 = __THREW__; __THREW__ = 0;
     $34 = $33&1;
     if (!($34)) {
      $__nc$1 = $32;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $35 = HEAP32[$__nb>>2]|0;
    $36 = ($35|0)==(0|0);
    if (!($36)) {
     $40 = $35;$64 = $35;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(601);
    $37 = __THREW__; __THREW__ = 0;
    $38 = $37&1;
    if (!($38)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $40 = $$pre;$64 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $40 = $$pre7;$64 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $39 = (($40) + ($__nc$2)|0);
 $41 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($40,$39,$__iob)|0);
 $42 = ($40|0)==($__nar|0);
 if ($42) {
  $52 = $__nar;$63 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $43 = $__nc$2 << 3;
  $44 = (_malloc($43)|0);
  $45 = ($44|0)==(0|0);
  if ($45) {
   __THREW__ = 0;
   invoke_v(601);
   $46 = __THREW__; __THREW__ = 0;
   $47 = $46&1;
   if ($47) {
    $70 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $52 = $$pre8;$63 = $44;$__ob$0 = $44;
    label = 20;
   }
  } else {
   $52 = $40;$63 = $44;$__ob$0 = $44;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(457,($0|0),($__iob|0));
   $50 = __THREW__; __THREW__ = 0;
   $51 = $50&1;
   if ($51) {
    $70 = $63;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(607,($52|0),($41|0),($39|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $53 = __THREW__; __THREW__ = 0;
    $54 = $53&1;
    if ($54) {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $67 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($67)|0);
     $$0 = $65;$$01 = $66;$69 = $63;
     break;
    }
    $55 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($55)|0);
    $56 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $56;
    $57 = HEAP32[$__op>>2]|0;
    $58 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(608,($1|0),($$byval_copy|0),($__ob$0|0),($57|0),($58|0),($__iob|0),($__fl|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     $70 = $63;
     label = 19;
    } else {
     $61 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $61;
     HEAP32[$agg$result>>2] = $61;
     $62 = ($63|0)==(0|0);
     if ($62) {
      _free($64);
      STACKTOP = sp;return;
     }
     _free($63);
     _free($64);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $48 = ___cxa_find_matching_catch()|0;
  $49 = tempRet0;
  $$0 = $48;$$01 = $49;$69 = $70;
 }
 $68 = ($69|0)==(0|0);
 if (!($68)) {
  _free($69);
 }
 _free($64);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc) {
 $__nb = $__nb|0;
 $__np = $__np|0;
 $__ne = $__ne|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__loc = $__loc|0;
 var $$ = 0, $$012$i$i = 0, $$012$i$i7 = 0, $$46 = 0, $$__dg$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$017 = 0, $__dc$1 = 0, $__dg$018 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$213 = 0, $__nf$3 = 0, $__ns$033 = 0, $__ns$125 = 0, $__ns$2 = 0;
 var $__p$019 = 0, $lpad$phi$index = 0, $lpad$phi$index5 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__grouping = sp;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12408)|0);
 $1 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12568)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 FUNCTION_TABLE_vii[$4 & 1023]($__grouping,$1);
 HEAP32[$__oe>>2] = $__ob;
 $5 = HEAP8[$__nb>>0]|0;
 if ((($5<<24>>24) == 43) | (($5<<24>>24) == 45)) {
  $6 = HEAP32[$0>>2]|0;
  $7 = (($6) + 44|0);
  $8 = HEAP32[$7>>2]|0;
  __THREW__ = 0;
  $9 = (invoke_iii($8|0,($0|0),($5|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   $12 = (($__nb) + 1|0);
   $13 = HEAP32[$__oe>>2]|0;
   $14 = (($13) + 4|0);
   HEAP32[$__oe>>2] = $14;
   HEAP32[$13>>2] = $9;
   $__nf$0 = $12;
   label = 10;
  }
 } else {
  $__nf$0 = $__nb;
  label = 10;
 }
 L4: do {
  if ((label|0) == 10) {
   $25 = $__ne;
   $26 = $__nf$0;
   $27 = (($25) - ($26))|0;
   $28 = ($27|0)>(1);
   L6: do {
    if ($28) {
     $30 = HEAP8[$__nf$0>>0]|0;
     $31 = ($30<<24>>24)==(48);
     if ($31) {
      $32 = (($__nf$0) + 1|0);
      $33 = HEAP8[$32>>0]|0;
      if ((($33<<24>>24) == 88) | (($33<<24>>24) == 120)) {
       $34 = HEAP32[$0>>2]|0;
       $35 = (($34) + 44|0);
       $36 = HEAP32[$35>>2]|0;
       __THREW__ = 0;
       $37 = (invoke_iii($36|0,($0|0),48)|0);
       $38 = __THREW__; __THREW__ = 0;
       $39 = $38&1;
       if ($39) {
        break L4;
       }
       $40 = HEAP32[$__oe>>2]|0;
       $41 = (($40) + 4|0);
       HEAP32[$__oe>>2] = $41;
       HEAP32[$40>>2] = $37;
       $42 = (($__nf$0) + 2|0);
       $43 = HEAP8[$32>>0]|0;
       $44 = HEAP32[$0>>2]|0;
       $45 = (($44) + 44|0);
       $46 = HEAP32[$45>>2]|0;
       __THREW__ = 0;
       $47 = (invoke_iii($46|0,($0|0),($43|0))|0);
       $48 = __THREW__; __THREW__ = 0;
       $49 = $48&1;
       if ($49) {
        break L4;
       }
       $50 = HEAP32[$__oe>>2]|0;
       $51 = (($50) + 4|0);
       HEAP32[$__oe>>2] = $51;
       HEAP32[$50>>2] = $47;
       $52 = ($42>>>0)<($__ne>>>0);
       if ($52) {
        $__ns$033 = $42;
        while(1) {
         $55 = HEAP8[$__ns$033>>0]|0;
         __THREW__ = 0;
         $56 = (invoke_i(595)|0);
         $57 = __THREW__; __THREW__ = 0;
         $58 = $57&1;
         if ($58) {
          break;
         }
         $59 = $55 << 24 >> 24;
         __THREW__ = 0;
         $60 = (invoke_iii(604,($59|0),($56|0))|0);
         $61 = __THREW__; __THREW__ = 0;
         $62 = $61&1;
         if ($62) {
          break;
         }
         $63 = ($60|0)==(0);
         $54 = (($__ns$033) + 1|0);
         if ($63) {
          $__nf$1 = $42;$__ns$2 = $__ns$033;
          break L6;
         }
         $53 = ($54>>>0)<($__ne>>>0);
         if ($53) {
          $__ns$033 = $54;
         } else {
          $__nf$1 = $42;$__ns$2 = $54;
          break L6;
         }
        }
        $21 = ___cxa_find_matching_catch()|0;
        $22 = tempRet0;
        $lpad$phi$index = $21;$lpad$phi$index5 = $22;
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
        ___resumeException($lpad$phi$index|0);
        // unreachable;
       } else {
        $__nf$1 = $42;$__ns$2 = $42;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } while(0);
   L19: do {
    if ((label|0) == 11) {
     $29 = ($__nf$0>>>0)<($__ne>>>0);
     if ($29) {
      $__ns$125 = $__nf$0;
      while(1) {
       $66 = HEAP8[$__ns$125>>0]|0;
       __THREW__ = 0;
       $67 = (invoke_i(595)|0);
       $68 = __THREW__; __THREW__ = 0;
       $69 = $68&1;
       if ($69) {
        break;
       }
       $70 = $66 << 24 >> 24;
       __THREW__ = 0;
       $71 = (invoke_iii(605,($70|0),($67|0))|0);
       $72 = __THREW__; __THREW__ = 0;
       $73 = $72&1;
       if ($73) {
        break;
       }
       $74 = ($71|0)==(0);
       $65 = (($__ns$125) + 1|0);
       if ($74) {
        $__nf$1 = $__nf$0;$__ns$2 = $__ns$125;
        break L19;
       }
       $64 = ($65>>>0)<($__ne>>>0);
       if ($64) {
        $__ns$125 = $65;
       } else {
        $__nf$1 = $__nf$0;$__ns$2 = $65;
        break L19;
       }
      }
      $19 = ___cxa_find_matching_catch()|0;
      $20 = tempRet0;
      $lpad$phi$index = $19;$lpad$phi$index5 = $20;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $__nf$1 = $__nf$0;$__ns$2 = $__nf$0;
     }
    }
   } while(0);
   $75 = HEAP8[$__grouping>>0]|0;
   $76 = $75 & 1;
   $77 = ($76<<24>>24)==(0);
   if ($77) {
    $80 = $75&255;
    $81 = $80 >>> 1;
    $83 = $81;
   } else {
    $78 = (($__grouping) + 4|0);
    $79 = HEAP32[$78>>2]|0;
    $83 = $79;
   }
   $82 = ($83|0)==(0);
   if ($82) {
    $84 = HEAP32[$__oe>>2]|0;
    $85 = HEAP32[$0>>2]|0;
    $86 = (($85) + 48|0);
    $87 = HEAP32[$86>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($87|0,($0|0),($__nf$1|0),($__ns$2|0),($84|0))|0);
    $88 = __THREW__; __THREW__ = 0;
    $89 = $88&1;
    if ($89) {
     break;
    }
    $90 = $__ns$2;
    $91 = $__nf$1;
    $92 = (($90) - ($91))|0;
    $93 = HEAP32[$__oe>>2]|0;
    $94 = (($93) + ($92<<2)|0);
    HEAP32[$__oe>>2] = $94;
    $201 = $94;
   } else {
    $95 = ($__nf$1|0)==($__ns$2|0);
    if (!($95)) {
     $96 = (($__ns$2) + -1|0);
     $97 = ($96>>>0)>($__nf$1>>>0);
     if ($97) {
      $$012$i$i = $__nf$1;$100 = $96;
      while(1) {
       $98 = HEAP8[$$012$i$i>>0]|0;
       $99 = HEAP8[$100>>0]|0;
       HEAP8[$$012$i$i>>0] = $99;
       HEAP8[$100>>0] = $98;
       $101 = (($$012$i$i) + 1|0);
       $102 = (($100) + -1|0);
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $$012$i$i = $101;$100 = $102;
       } else {
        break;
       }
      }
     }
    }
    $104 = HEAP32[$1>>2]|0;
    $105 = (($104) + 16|0);
    $106 = HEAP32[$105>>2]|0;
    __THREW__ = 0;
    $107 = (invoke_ii($106|0,($1|0))|0);
    $108 = __THREW__; __THREW__ = 0;
    $109 = $108&1;
    if ($109) {
     break;
    }
    $110 = ($__nf$1>>>0)<($__ns$2>>>0);
    L41: do {
     if ($110) {
      $111 = (($__grouping) + 1|0);
      $112 = (($__grouping) + 4|0);
      $113 = (($__grouping) + 8|0);
      $__dc$017 = 0;$__dg$018 = 0;$__p$019 = $__nf$1;
      while(1) {
       $114 = HEAP8[$__grouping>>0]|0;
       $115 = $114 & 1;
       $116 = ($115<<24>>24)==(0);
       $117 = HEAP32[$113>>2]|0;
       $$ = $116 ? $111 : $117;
       $118 = (($$) + ($__dg$018)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($119<<24>>24)>(0);
       if ($120) {
        $121 = HEAP32[$113>>2]|0;
        $$46 = $116 ? $111 : $121;
        $122 = (($$46) + ($__dg$018)|0);
        $123 = HEAP8[$122>>0]|0;
        $124 = $123 << 24 >> 24;
        $125 = ($__dc$017|0)==($124|0);
        if ($125) {
         $126 = HEAP32[$__oe>>2]|0;
         $127 = (($126) + 4|0);
         HEAP32[$__oe>>2] = $127;
         HEAP32[$126>>2] = $107;
         $128 = HEAP8[$__grouping>>0]|0;
         $129 = $128 & 1;
         $130 = ($129<<24>>24)==(0);
         if ($130) {
          $132 = $128&255;
          $133 = $132 >>> 1;
          $135 = $133;
         } else {
          $131 = HEAP32[$112>>2]|0;
          $135 = $131;
         }
         $134 = (($135) + -1)|0;
         $136 = ($__dg$018>>>0)<($134>>>0);
         $137 = $136&1;
         $$__dg$0 = (($137) + ($__dg$018))|0;
         $__dc$1 = 0;$__dg$1 = $$__dg$0;
        } else {
         $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
        }
       } else {
        $__dc$1 = $__dc$017;$__dg$1 = $__dg$018;
       }
       $138 = HEAP8[$__p$019>>0]|0;
       $139 = HEAP32[$0>>2]|0;
       $140 = (($139) + 44|0);
       $141 = HEAP32[$140>>2]|0;
       __THREW__ = 0;
       $142 = (invoke_iii($141|0,($0|0),($138|0))|0);
       $143 = __THREW__; __THREW__ = 0;
       $144 = $143&1;
       if ($144) {
        break;
       }
       $145 = HEAP32[$__oe>>2]|0;
       $146 = (($145) + 4|0);
       HEAP32[$__oe>>2] = $146;
       HEAP32[$145>>2] = $142;
       $147 = (($__dc$1) + 1)|0;
       $148 = (($__p$019) + 1|0);
       $149 = ($148>>>0)<($__ns$2>>>0);
       if ($149) {
        $__dc$017 = $147;$__dg$018 = $__dg$1;$__p$019 = $148;
       } else {
        $155 = $146;
        break L41;
       }
      }
      $17 = ___cxa_find_matching_catch()|0;
      $18 = tempRet0;
      $lpad$phi$index = $17;$lpad$phi$index5 = $18;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     } else {
      $$pre = HEAP32[$__oe>>2]|0;
      $155 = $$pre;
     }
    } while(0);
    $150 = $__nf$1;
    $151 = $__nb;
    $152 = (($150) - ($151))|0;
    $153 = (($__ob) + ($152<<2)|0);
    $154 = ($153|0)==($155|0);
    if ($154) {
     $201 = $155;
    } else {
     $156 = (($155) + -4|0);
     $157 = ($156>>>0)>($153>>>0);
     if ($157) {
      $$012$i$i7 = $153;$160 = $156;
      while(1) {
       $158 = HEAP32[$$012$i$i7>>2]|0;
       $159 = HEAP32[$160>>2]|0;
       HEAP32[$$012$i$i7>>2] = $159;
       HEAP32[$160>>2] = $158;
       $161 = (($$012$i$i7) + 4|0);
       $162 = (($160) + -4|0);
       $163 = ($161>>>0)<($162>>>0);
       if ($163) {
        $$012$i$i7 = $161;$160 = $162;
       } else {
        $201 = $155;
        break;
       }
      }
     } else {
      $201 = $155;
     }
    }
   }
   $164 = ($__ns$2>>>0)<($__ne>>>0);
   L64: do {
    if ($164) {
     $__nf$213 = $__ns$2;
     while(1) {
      $165 = HEAP8[$__nf$213>>0]|0;
      $166 = ($165<<24>>24)==(46);
      if ($166) {
       label = 52;
       break;
      }
      $176 = HEAP32[$0>>2]|0;
      $177 = (($176) + 44|0);
      $178 = HEAP32[$177>>2]|0;
      __THREW__ = 0;
      $179 = (invoke_iii($178|0,($0|0),($165|0))|0);
      $180 = __THREW__; __THREW__ = 0;
      $181 = $180&1;
      if ($181) {
       label = 4;
       break;
      }
      $182 = HEAP32[$__oe>>2]|0;
      $183 = (($182) + 4|0);
      HEAP32[$__oe>>2] = $183;
      HEAP32[$182>>2] = $179;
      $184 = (($__nf$213) + 1|0);
      $185 = ($184>>>0)<($__ne>>>0);
      if ($185) {
       $__nf$213 = $184;
      } else {
       $189 = $183;$__nf$3 = $184;
       break L64;
      }
     }
     if ((label|0) == 4) {
      $15 = ___cxa_find_matching_catch()|0;
      $16 = tempRet0;
      $lpad$phi$index = $15;$lpad$phi$index5 = $16;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      ___resumeException($lpad$phi$index|0);
      // unreachable;
     }
     else if ((label|0) == 52) {
      $167 = HEAP32[$1>>2]|0;
      $168 = (($167) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      __THREW__ = 0;
      $170 = (invoke_ii($169|0,($1|0))|0);
      $171 = __THREW__; __THREW__ = 0;
      $172 = $171&1;
      if ($172) {
       break L4;
      }
      $173 = HEAP32[$__oe>>2]|0;
      $174 = (($173) + 4|0);
      HEAP32[$__oe>>2] = $174;
      HEAP32[$173>>2] = $170;
      $175 = (($__nf$213) + 1|0);
      $189 = $174;$__nf$3 = $175;
      break;
     }
    } else {
     $189 = $201;$__nf$3 = $__ns$2;
    }
   } while(0);
   $186 = HEAP32[$0>>2]|0;
   $187 = (($186) + 48|0);
   $188 = HEAP32[$187>>2]|0;
   __THREW__ = 0;
   (invoke_iiiii($188|0,($0|0),($__nf$3|0),($__ne|0),($189|0))|0);
   $190 = __THREW__; __THREW__ = 0;
   $191 = $190&1;
   if (!($191)) {
    $192 = $__nf$3;
    $193 = (($25) - ($192))|0;
    $194 = HEAP32[$__oe>>2]|0;
    $195 = (($194) + ($193<<2)|0);
    HEAP32[$__oe>>2] = $195;
    $196 = ($__np|0)==($__ne|0);
    if ($196) {
     $storemerge = $195;
     HEAP32[$__op>>2] = $storemerge;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
     STACKTOP = sp;return;
    }
    $197 = $__np;
    $198 = $__nb;
    $199 = (($197) - ($198))|0;
    $200 = (($__ob) + ($199<<2)|0);
    $storemerge = $200;
    HEAP32[$__op>>2] = $storemerge;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $23 = ___cxa_find_matching_catch()|0;
 $24 = tempRet0;
 $lpad$phi$index = $23;$lpad$phi$index5 = $24;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = +$__v;
 var $$0 = 0, $$01 = 0, $$125 = 0, $$16 = 0, $$byval_copy = 0, $$pre = 0, $$pre7 = 0, $$pre8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__nb = 0;
 var $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 288|0;
 $vararg_buffer9 = sp + 8|0;
 $vararg_buffer5 = sp + 40|0;
 $vararg_buffer2 = sp + 16|0;
 $vararg_buffer = sp + 24|0;
 $__fmt = sp;
 $__nar = sp + 308|0;
 $__nb = sp + 304|0;
 $__o = sp + 60|0;
 $__op = sp + 56|0;
 $__oe = sp + 52|0;
 $0 = sp + 296|0;
 $1 = sp + 292|0;
 $2 = sp + 300|0;
 $3 = $__fmt;
 $4 = $3;
 HEAP32[$4>>2] = 37;
 $5 = (($3) + 4)|0;
 $6 = $5;
 HEAP32[$6>>2] = 0;
 $7 = (($__fmt) + 1|0);
 $8 = (($__iob) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (__ZNSt3__114__num_put_base14__format_floatEPcPKcj($7,11136,$9)|0);
 HEAP32[$__nb>>2] = $__nar;
 $11 = (__ZNSt3__16__clocEv()|0);
 if ($10) {
  $12 = (($__iob) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr1+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $14 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer)|0);
  $__nc$0 = $14;
 } else {
  HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer2>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer2+4>>2]=HEAP32[tempDoublePtr+4>>2];
  $15 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,30,$11,$__fmt,$vararg_buffer2)|0);
  $__nc$0 = $15;
 }
 $16 = ($__nc$0|0)>(29);
 do {
  if ($16) {
   if ($10) {
    __THREW__ = 0;
    $17 = (invoke_i(595)|0);
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if (!($19)) {
     $20 = (($__iob) + 8|0);
     $21 = HEAP32[$20>>2]|0;
     __THREW__ = 0;
     HEAP32[$vararg_buffer5>>2] = $21;
     $vararg_ptr8 = (($vararg_buffer5) + 4|0);
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_ptr8>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_ptr8+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $22 = (invoke_iiiii(600,($__nb|0),($17|0),($__fmt|0),($vararg_buffer5|0))|0);
     $23 = __THREW__; __THREW__ = 0;
     $24 = $23&1;
     if (!($24)) {
      $__nc$1 = $22;
      label = 12;
     }
    }
   } else {
    __THREW__ = 0;
    $27 = (invoke_i(595)|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if (!($29)) {
     __THREW__ = 0;
     HEAPF64[tempDoublePtr>>3]=$__v;HEAP32[$vararg_buffer9>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer9+4>>2]=HEAP32[tempDoublePtr+4>>2];
     $30 = (invoke_iiiii(600,($__nb|0),($27|0),($__fmt|0),($vararg_buffer9|0))|0);
     $31 = __THREW__; __THREW__ = 0;
     $32 = $31&1;
     if (!($32)) {
      $__nc$1 = $30;
      label = 12;
     }
    }
   }
   if ((label|0) == 12) {
    $33 = HEAP32[$__nb>>2]|0;
    $34 = ($33|0)==(0|0);
    if (!($34)) {
     $38 = $33;$62 = $33;$__nc$2 = $__nc$1;
     break;
    }
    __THREW__ = 0;
    invoke_v(601);
    $35 = __THREW__; __THREW__ = 0;
    $36 = $35&1;
    if (!($36)) {
     $$pre = HEAP32[$__nb>>2]|0;
     $38 = $$pre;$62 = $$pre;$__nc$2 = $__nc$1;
     break;
    }
   }
   $25 = ___cxa_find_matching_catch()|0;
   $26 = tempRet0;
   $$125 = $26;$$16 = $25;
   ___resumeException($$16|0);
   // unreachable;
  } else {
   $$pre7 = HEAP32[$__nb>>2]|0;
   $38 = $$pre7;$62 = 0;$__nc$2 = $__nc$0;
  }
 } while(0);
 $37 = (($38) + ($__nc$2)|0);
 $39 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($38,$37,$__iob)|0);
 $40 = ($38|0)==($__nar|0);
 if ($40) {
  $50 = $__nar;$61 = 0;$__ob$0 = $__o;
  label = 20;
 } else {
  $41 = $__nc$2 << 3;
  $42 = (_malloc($41)|0);
  $43 = ($42|0)==(0|0);
  if ($43) {
   __THREW__ = 0;
   invoke_v(601);
   $44 = __THREW__; __THREW__ = 0;
   $45 = $44&1;
   if ($45) {
    $68 = 0;
    label = 19;
   } else {
    $$pre8 = HEAP32[$__nb>>2]|0;
    $50 = $$pre8;$61 = $42;$__ob$0 = $42;
    label = 20;
   }
  } else {
   $50 = $38;$61 = $42;$__ob$0 = $42;
   label = 20;
  }
 }
 do {
  if ((label|0) == 20) {
   __THREW__ = 0;
   invoke_vii(457,($0|0),($__iob|0));
   $48 = __THREW__; __THREW__ = 0;
   $49 = $48&1;
   if ($49) {
    $68 = $61;
    label = 19;
   } else {
    __THREW__ = 0;
    invoke_viiiiiii(607,($50|0),($39|0),($37|0),($__ob$0|0),($__op|0),($__oe|0),($0|0));
    $51 = __THREW__; __THREW__ = 0;
    $52 = $51&1;
    if ($52) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $65 = HEAP32[$0>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($65)|0);
     $$0 = $63;$$01 = $64;$67 = $61;
     break;
    }
    $53 = HEAP32[$0>>2]|0;
    (__ZNSt3__114__shared_count16__release_sharedEv($53)|0);
    $54 = HEAP32[$__s>>2]|0;
    HEAP32[$2>>2] = $54;
    $55 = HEAP32[$__op>>2]|0;
    $56 = HEAP32[$__oe>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
    invoke_viiiiiii(608,($1|0),($$byval_copy|0),($__ob$0|0),($55|0),($56|0),($__iob|0),($__fl|0));
    $57 = __THREW__; __THREW__ = 0;
    $58 = $57&1;
    if ($58) {
     $68 = $61;
     label = 19;
    } else {
     $59 = HEAP32[$1>>2]|0;
     HEAP32[$__s>>2] = $59;
     HEAP32[$agg$result>>2] = $59;
     $60 = ($61|0)==(0|0);
     if ($60) {
      _free($62);
      STACKTOP = sp;return;
     }
     _free($61);
     _free($62);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 if ((label|0) == 19) {
  $46 = ___cxa_find_matching_catch()|0;
  $47 = tempRet0;
  $$0 = $46;$$01 = $47;$67 = $68;
 }
 $66 = ($67|0)==(0|0);
 if (!($66)) {
  _free($67);
 }
 _free($62);
 $$125 = $$01;$$16 = $$0;
 ___resumeException($$16|0);
 // unreachable;
}
function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result,$this,$__s,$__iob,$__fl,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__v = $__v|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 160|0;
 $vararg_buffer = sp;
 $__fmt = sp + 164|0;
 $__nar = sp + 172|0;
 $__o = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp + 156|0;
 ;HEAP8[$__fmt+0>>0]=HEAP8[11216+0>>0]|0;HEAP8[$__fmt+1>>0]=HEAP8[11216+1>>0]|0;HEAP8[$__fmt+2>>0]=HEAP8[11216+2>>0]|0;HEAP8[$__fmt+3>>0]=HEAP8[11216+3>>0]|0;HEAP8[$__fmt+4>>0]=HEAP8[11216+4>>0]|0;HEAP8[$__fmt+5>>0]=HEAP8[11216+5>>0]|0;
 $2 = (__ZNSt3__16__clocEv()|0);
 HEAP32[$vararg_buffer>>2] = $__v;
 $3 = (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar,20,$2,$__fmt,$vararg_buffer)|0);
 $4 = (($__nar) + ($3)|0);
 $5 = (__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar,$4,$__iob)|0);
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $6 = (invoke_iii(458,($0|0),(12408|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $17 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
  ___resumeException($15|0);
  // unreachable;
 }
 $9 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($9)|0);
 $10 = HEAP32[$6>>2]|0;
 $11 = (($10) + 48|0);
 $12 = HEAP32[$11>>2]|0;
 (FUNCTION_TABLE_iiiii[$12 & 1023]($6,$__nar,$4,$__o)|0);
 $13 = (($__o) + ($3<<2)|0);
 $14 = ($5|0)==($4|0);
 if ($14) {
  $__op$0 = $13;
  $22 = HEAP32[$__s>>2]|0;
  HEAP32[$1>>2] = $22;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
  STACKTOP = sp;return;
 }
 $18 = $__nar;
 $19 = $5;
 $20 = (($19) - ($18))|0;
 $21 = (($__o) + ($20<<2)|0);
 $__op$0 = $21;
 $22 = HEAP32[$__s>>2]|0;
 HEAP32[$1>>2] = $22;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$$byval_copy,$__o,$__op$0,$13,$__iob,$__fl);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i22 = 0, $$0$ph$be = 0, $$0$ph35 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i13 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i17 = 0, $$pre$i2$i$i1737 = 0, $$pre$i2$i$i1738 = 0, $$pre36 = 0, $$pre36$pre = 0, $0 = 0, $1 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0;
 var $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0;
 var $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0;
 var $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $isascii1$i = 0, $isascii1$i1 = 0, $isascii1$i20 = 0, $sext = 0, $tmp$i$i19 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(458,($0|0),(12416|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $38 = ___cxa_find_matching_catch()|0;
  $39 = tempRet0;
  $40 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($40)|0);
  ___resumeException($38|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 62;
  } else {
   $9 = (($4) + 8|0);
   $$0$ph35 = $__fmtb;$$pre36 = 0;
   L6: while(1) {
    $11 = $$pre36;
    while(1) {
     $10 = ($11|0)==(0);
     if (!($10)) {
      label = 62;
      break L4;
     }
     $12 = HEAP32[$__b>>2]|0;
     $13 = ($12|0)==(0|0);
     if ($13) {
      $25 = 0;
     } else {
      $14 = (($12) + 12|0);
      $15 = HEAP32[$14>>2]|0;
      $16 = (($12) + 16|0);
      $17 = HEAP32[$16>>2]|0;
      $18 = ($15|0)==($17|0);
      if ($18) {
       $19 = HEAP32[$12>>2]|0;
       $20 = (($19) + 36|0);
       $21 = HEAP32[$20>>2]|0;
       $22 = (FUNCTION_TABLE_ii[$21 & 1023]($12)|0);
       $23 = ($22|0)==(-1);
       if ($23) {
        HEAP32[$__b>>2] = 0;
        $25 = 0;
       } else {
        $25 = $12;
       }
      } else {
       $25 = $12;
      }
     }
     $24 = ($25|0)==(0|0);
     $26 = HEAP32[$__e>>2]|0;
     $27 = ($26|0)==(0|0);
     do {
      if ($27) {
       label = 15;
      } else {
       $28 = (($26) + 12|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = (($26) + 16|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = ($29|0)==($31|0);
       if ($32) {
        $33 = HEAP32[$26>>2]|0;
        $34 = (($33) + 36|0);
        $35 = HEAP32[$34>>2]|0;
        $36 = (FUNCTION_TABLE_ii[$35 & 1023]($26)|0);
        $37 = ($36|0)==(-1);
        if ($37) {
         HEAP32[$__e>>2] = 0;
         label = 15;
         break;
        }
       }
       if ($24) {
        $64 = $26;
       } else {
        label = 16;
        break L6;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      if ($24) {
       label = 16;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $41 = HEAP8[$$0$ph35>>0]|0;
     $42 = HEAP32[$4>>2]|0;
     $43 = (($42) + 36|0);
     $44 = HEAP32[$43>>2]|0;
     $45 = (FUNCTION_TABLE_iiii[$44 & 1023]($4,$41,0)|0);
     $46 = ($45<<24>>24)==(37);
     if ($46) {
      label = 19;
      break;
     }
     $68 = HEAP8[$$0$ph35>>0]|0;
     $isascii1$i = ($68<<24>>24)>(-1);
     if ($isascii1$i) {
      $69 = $68 << 24 >> 24;
      $70 = HEAP32[$9>>2]|0;
      $71 = (($70) + ($69<<1)|0);
      $72 = HEAP16[$71>>1]|0;
      $73 = $72 & 8192;
      $74 = ($73<<16>>16)==(0);
      if (!($74)) {
       $$0$pn = $$0$ph35;
       label = 30;
       break;
      }
     }
     $133 = (($25) + 12|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = (($25) + 16|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($134|0)==($136|0);
     if ($137) {
      $138 = HEAP32[$25>>2]|0;
      $139 = (($138) + 36|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (FUNCTION_TABLE_ii[$140 & 1023]($25)|0);
      $$0$i$i22 = $141;
     } else {
      $142 = HEAP8[$134>>0]|0;
      $143 = $142&255;
      $$0$i$i22 = $143;
     }
     $144 = $$0$i$i22&255;
     $145 = HEAP32[$4>>2]|0;
     $146 = (($145) + 12|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (FUNCTION_TABLE_iii[$147 & 1023]($4,$144)|0);
     $149 = HEAP8[$$0$ph35>>0]|0;
     $150 = HEAP32[$4>>2]|0;
     $151 = (($150) + 12|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = (FUNCTION_TABLE_iii[$152 & 1023]($4,$149)|0);
     $154 = ($148<<24>>24)==($153<<24>>24);
     if ($154) {
      label = 57;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $11 = 4;
    }
    L34: do {
     if ((label|0) == 19) {
      label = 0;
      $47 = (($$0$ph35) + 1|0);
      $48 = ($47|0)==($__fmte|0);
      if ($48) {
       label = 20;
       break L6;
      }
      $49 = HEAP8[$47>>0]|0;
      $50 = HEAP32[$4>>2]|0;
      $51 = (($50) + 36|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($4,$49,0)|0);
      if ((($53<<24>>24) == 48) | (($53<<24>>24) == 69)) {
       $54 = (($$0$ph35) + 2|0);
       $55 = ($54|0)==($__fmte|0);
       if ($55) {
        label = 23;
        break L6;
       }
       $56 = HEAP8[$54>>0]|0;
       $57 = HEAP32[$4>>2]|0;
       $58 = (($57) + 36|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = (FUNCTION_TABLE_iiii[$59 & 1023]($4,$56,0)|0);
       $$1 = $54;$__cmd$0 = $60;$__opt$0 = $53;
      } else {
       $$1 = $47;$__cmd$0 = $53;$__opt$0 = 0;
      }
      $61 = HEAP32[$this>>2]|0;
      $62 = (($61) + 36|0);
      $63 = HEAP32[$62>>2]|0;
      HEAP32[$2>>2] = $25;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$63 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 1|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 30) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 1|0);
       $75 = ($$2|0)==($__fmte|0);
       if ($75) {
        $$2$lcssa = $__fmte;
        break;
       }
       $76 = HEAP8[$$2>>0]|0;
       $isascii1$i1 = ($76<<24>>24)>(-1);
       if (!($isascii1$i1)) {
        $$2$lcssa = $$2;
        break;
       }
       $77 = $76 << 24 >> 24;
       $78 = (($70) + ($77<<1)|0);
       $79 = HEAP16[$78>>1]|0;
       $80 = $79 & 8192;
       $81 = ($80<<16>>16)==(0);
       if ($81) {
        $$2$lcssa = $$2;
        break;
       } else {
        $$0$pn = $$2;
        label = 30;
       }
      }
      $$pre$i$i$i13 = $25;$$pre$i2$i$i17 = $64;$96 = $64;
      while(1) {
       $82 = ($$pre$i$i$i13|0)==(0|0);
       if ($82) {
        $94 = 0;
       } else {
        $83 = (($$pre$i$i$i13) + 12|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = (($$pre$i$i$i13) + 16|0);
        $86 = HEAP32[$85>>2]|0;
        $87 = ($84|0)==($86|0);
        if ($87) {
         $88 = HEAP32[$$pre$i$i$i13>>2]|0;
         $89 = (($88) + 36|0);
         $90 = HEAP32[$89>>2]|0;
         $91 = (FUNCTION_TABLE_ii[$90 & 1023]($$pre$i$i$i13)|0);
         $92 = ($91|0)==(-1);
         if ($92) {
          HEAP32[$__b>>2] = 0;
          $94 = 0;
         } else {
          $94 = $$pre$i$i$i13;
         }
        } else {
         $94 = $$pre$i$i$i13;
        }
       }
       $93 = ($94|0)==(0|0);
       $95 = ($96|0)==(0|0);
       do {
        if ($95) {
         $$pre$i2$i$i1738 = $$pre$i2$i$i17;
         label = 43;
        } else {
         $97 = (($96) + 12|0);
         $98 = HEAP32[$97>>2]|0;
         $99 = (($96) + 16|0);
         $100 = HEAP32[$99>>2]|0;
         $101 = ($98|0)==($100|0);
         if (!($101)) {
          if ($93) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $96;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
         $102 = HEAP32[$96>>2]|0;
         $103 = (($102) + 36|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = (FUNCTION_TABLE_ii[$104 & 1023]($96)|0);
         $106 = ($105|0)==(-1);
         if ($106) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i1738 = 0;
          label = 43;
          break;
         } else {
          $107 = ($$pre$i2$i$i17|0)==(0|0);
          $tmp$i$i19 = $93 ^ $107;
          if ($tmp$i$i19) {
           $$pre$i2$i$i1737 = $$pre$i2$i$i17;$190 = $$pre$i2$i$i17;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L34;
          }
         }
        }
       } while(0);
       if ((label|0) == 43) {
        label = 0;
        if ($93) {
         $$0$ph$be = $$2$lcssa;
         break L34;
        } else {
         $$pre$i2$i$i1737 = $$pre$i2$i$i1738;$190 = 0;
        }
       }
       $108 = (($94) + 12|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = (($94) + 16|0);
       $111 = HEAP32[$110>>2]|0;
       $112 = ($109|0)==($111|0);
       if ($112) {
        $113 = HEAP32[$94>>2]|0;
        $114 = (($113) + 36|0);
        $115 = HEAP32[$114>>2]|0;
        $116 = (FUNCTION_TABLE_ii[$115 & 1023]($94)|0);
        $$0$i$i = $116;
       } else {
        $117 = HEAP8[$109>>0]|0;
        $118 = $117&255;
        $$0$i$i = $118;
       }
       $119 = $$0$i$i&255;
       $isascii1$i20 = ($119<<24>>24)>(-1);
       if (!($isascii1$i20)) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $sext = $$0$i$i << 24;
       $120 = $sext >> 24;
       $121 = HEAP32[$9>>2]|0;
       $122 = (($121) + ($120<<1)|0);
       $123 = HEAP16[$122>>1]|0;
       $124 = $123 & 8192;
       $125 = ($124<<16>>16)==(0);
       if ($125) {
        $$0$ph$be = $$2$lcssa;
        break L34;
       }
       $126 = HEAP32[$108>>2]|0;
       $127 = HEAP32[$110>>2]|0;
       $128 = ($126|0)==($127|0);
       if ($128) {
        $129 = HEAP32[$94>>2]|0;
        $130 = (($129) + 40|0);
        $131 = HEAP32[$130>>2]|0;
        (FUNCTION_TABLE_ii[$131 & 1023]($94)|0);
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       } else {
        $132 = (($126) + 1|0);
        HEAP32[$108>>2] = $132;
        $$pre$i$i$i13 = $94;$$pre$i2$i$i17 = $$pre$i2$i$i1737;$96 = $190;
        continue;
       }
      }
     }
     else if ((label|0) == 57) {
      label = 0;
      $155 = HEAP32[$133>>2]|0;
      $156 = HEAP32[$135>>2]|0;
      $157 = ($155|0)==($156|0);
      if ($157) {
       $158 = HEAP32[$25>>2]|0;
       $159 = (($158) + 40|0);
       $160 = HEAP32[$159>>2]|0;
       (FUNCTION_TABLE_ii[$160 & 1023]($25)|0);
      } else {
       $161 = (($155) + 1|0);
       HEAP32[$133>>2] = $161;
      }
      $162 = (($$0$ph35) + 1|0);
      $$0$ph$be = $162;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 62;
     break L4;
    }
    $$pre36$pre = HEAP32[$__err>>2]|0;
    $$0$ph35 = $$0$ph$be;$$pre36 = $$pre36$pre;
   }
   if ((label|0) == 16) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
   else if ((label|0) == 23) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i4 = $25;
    break;
   }
  }
 } while(0);
 if ((label|0) == 62) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i4 = $$pre;
 }
 $163 = ($$pre$i$i$i4|0)==(0|0);
 if ($163) {
  $175 = 0;
 } else {
  $164 = (($$pre$i$i$i4) + 12|0);
  $165 = HEAP32[$164>>2]|0;
  $166 = (($$pre$i$i$i4) + 16|0);
  $167 = HEAP32[$166>>2]|0;
  $168 = ($165|0)==($167|0);
  if ($168) {
   $169 = HEAP32[$$pre$i$i$i4>>2]|0;
   $170 = (($169) + 36|0);
   $171 = HEAP32[$170>>2]|0;
   $172 = (FUNCTION_TABLE_ii[$171 & 1023]($$pre$i$i$i4)|0);
   $173 = ($172|0)==(-1);
   if ($173) {
    HEAP32[$__b>>2] = 0;
    $175 = 0;
   } else {
    $175 = $$pre$i$i$i4;
   }
  } else {
   $175 = $$pre$i$i$i4;
  }
 }
 $174 = ($175|0)==(0|0);
 $176 = HEAP32[$__e>>2]|0;
 $177 = ($176|0)==(0|0);
 do {
  if ($177) {
   label = 72;
  } else {
   $178 = (($176) + 12|0);
   $179 = HEAP32[$178>>2]|0;
   $180 = (($176) + 16|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ($179|0)==($181|0);
   if ($182) {
    $183 = HEAP32[$176>>2]|0;
    $184 = (($183) + 36|0);
    $185 = HEAP32[$184>>2]|0;
    $186 = (FUNCTION_TABLE_ii[$185 & 1023]($176)|0);
    $187 = ($186|0)==(-1);
    if ($187) {
     HEAP32[$__e>>2] = 0;
     label = 72;
     break;
    }
   }
   if ($174) {
    HEAP32[$agg$result>>2] = $175;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  if (!($174)) {
   HEAP32[$agg$result>>2] = $175;
   STACKTOP = sp;return;
  }
 }
 $188 = HEAP32[$__err>>2]|0;
 $189 = $188 | 2;
 HEAP32[$__err>>2] = $189;
 HEAP32[$agg$result>>2] = $175;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,11320,((11320 + 8|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 1|0);
  $17 = (($6) + 1|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12416|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12416|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12416|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 116|0;
 $$byval_copy29 = sp + 112|0;
 $$byval_copy28 = sp + 108|0;
 $$byval_copy27 = sp + 208|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 216|0;
 $$byval_copy22 = sp + 16|0;
 $$byval_copy21 = sp + 20|0;
 $$byval_copy20 = sp + 24|0;
 $$byval_copy19 = sp + 28|0;
 $$byval_copy18 = sp + 32|0;
 $$byval_copy17 = sp + 36|0;
 $$byval_copy16 = sp + 40|0;
 $$byval_copy15 = sp + 212|0;
 $$byval_copy14 = sp + 44|0;
 $$byval_copy13 = sp + 48|0;
 $$byval_copy12 = sp + 52|0;
 $$byval_copy11 = sp + 56|0;
 $$byval_copy10 = sp + 60|0;
 $$byval_copy9 = sp + 64|0;
 $$byval_copy8 = sp + 68|0;
 $$byval_copy7 = sp + 72|0;
 $$byval_copy6 = sp + 76|0;
 $$byval_copy5 = sp + 80|0;
 $$byval_copy4 = sp + 84|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 92|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 120|0;
 $7 = sp + 124|0;
 $8 = sp + 128|0;
 $9 = sp + 132|0;
 $10 = sp + 136|0;
 $11 = sp + 140|0;
 $12 = sp + 144|0;
 $13 = sp + 148|0;
 $14 = sp + 152|0;
 $15 = sp + 156|0;
 $16 = sp + 160|0;
 $17 = sp + 164|0;
 $18 = sp + 168|0;
 $19 = sp + 172|0;
 $20 = sp + 176|0;
 $21 = sp + 180|0;
 $22 = sp + 184|0;
 $23 = sp + 188|0;
 $24 = sp + 192|0;
 $25 = sp + 196|0;
 $26 = sp + 200|0;
 $27 = sp + 204|0;
 $28 = sp + 12|0;
 $29 = sp + 8|0;
 $30 = sp + 224|0;
 $31 = sp + 4|0;
 $32 = sp + 228|0;
 $33 = sp + 96|0;
 $34 = sp;
 $35 = sp + 220|0;
 $36 = sp + 100|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 104|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(458,($1|0),(12416|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,11328,((11328 + 8|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,11336,((11336 + 8|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,11360,((11360 + 5|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,11344,((11344 + 11|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,11368,((11368 + 8|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 1|0);
    $128 = (($117) + 1|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 1|0);
    $67 = (($56) + 1|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $isascii1$i = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__ct) + 8|0);
 L1: while(1) {
  $1 = HEAP32[$__b>>2]|0;
  $2 = ($1|0)==(0|0);
  do {
   if ($2) {
    $14 = 0;
   } else {
    $3 = (($1) + 12|0);
    $4 = HEAP32[$3>>2]|0;
    $5 = (($1) + 16|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($4|0)==($6|0);
    if ($7) {
     $8 = HEAP32[$1>>2]|0;
     $9 = (($8) + 36|0);
     $10 = HEAP32[$9>>2]|0;
     $11 = (FUNCTION_TABLE_ii[$10 & 1023]($1)|0);
     $12 = ($11|0)==(-1);
     if ($12) {
      HEAP32[$__b>>2] = 0;
      $14 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $14 = $$pre$i$i$i;
      break;
     }
    } else {
     $14 = $1;
    }
   }
  } while(0);
  $13 = ($14|0)==(0|0);
  $15 = HEAP32[$__e>>2]|0;
  $16 = ($15|0)==(0|0);
  do {
   if ($16) {
    label = 12;
   } else {
    $17 = (($15) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($15) + 16|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($18|0)==($20|0);
    if (!($21)) {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
    $22 = HEAP32[$15>>2]|0;
    $23 = (($22) + 36|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = (FUNCTION_TABLE_ii[$24 & 1023]($15)|0);
    $26 = ($25|0)==(-1);
    if ($26) {
     HEAP32[$__e>>2] = 0;
     label = 12;
     break;
    } else {
     if ($13) {
      $83 = $15;
      break;
     } else {
      $$pre$i2$i$i6 = $15;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 12) {
   label = 0;
   if ($13) {
    $$pre$i2$i$i6 = 0;
    break;
   } else {
    $83 = 0;
   }
  }
  $27 = HEAP32[$__b>>2]|0;
  $28 = (($27) + 12|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = (($27) + 16|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = ($29|0)==($31|0);
  if ($32) {
   $33 = HEAP32[$27>>2]|0;
   $34 = (($33) + 36|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (FUNCTION_TABLE_ii[$35 & 1023]($27)|0);
   $$0$i$i = $36;
  } else {
   $37 = HEAP8[$29>>0]|0;
   $38 = $37&255;
   $$0$i$i = $38;
  }
  $39 = $$0$i$i&255;
  $isascii1$i = ($39<<24>>24)>(-1);
  if (!($isascii1$i)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $sext = $$0$i$i << 24;
  $40 = $sext >> 24;
  $41 = HEAP32[$0>>2]|0;
  $42 = (($41) + ($40<<1)|0);
  $43 = HEAP16[$42>>1]|0;
  $44 = $43 & 8192;
  $45 = ($44<<16>>16)==(0);
  if ($45) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b>>2]|0;
  $47 = (($46) + 12|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = (($46) + 16|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ($48|0)==($50|0);
  if ($51) {
   $52 = HEAP32[$46>>2]|0;
   $53 = (($52) + 40|0);
   $54 = HEAP32[$53>>2]|0;
   (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
   continue;
  } else {
   $55 = (($48) + 1|0);
   HEAP32[$47>>2] = $55;
   continue;
  }
 }
 $56 = HEAP32[$__b>>2]|0;
 $57 = ($56|0)==(0|0);
 do {
  if ($57) {
   $69 = 0;
  } else {
   $58 = (($56) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($56) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$56>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($56)|0);
    $67 = ($66|0)==(-1);
    if ($67) {
     HEAP32[$__b>>2] = 0;
     $69 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $69 = $$pre$i$i$i2;
     break;
    }
   } else {
    $69 = $56;
   }
  }
 } while(0);
 $68 = ($69|0)==(0|0);
 $70 = ($$pre$i2$i$i6|0)==(0|0);
 do {
  if ($70) {
   label = 32;
  } else {
   $71 = (($$pre$i2$i$i6) + 12|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = (($$pre$i2$i$i6) + 16|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($72|0)==($74|0);
   if ($75) {
    $76 = HEAP32[$$pre$i2$i$i6>>2]|0;
    $77 = (($76) + 36|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = (FUNCTION_TABLE_ii[$78 & 1023]($$pre$i2$i$i6)|0);
    $80 = ($79|0)==(-1);
    if ($80) {
     HEAP32[$__e>>2] = 0;
     label = 32;
     break;
    }
   }
   if ($68) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 32) {
  if (!($68)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i2 = 0, $$pre$i2$i$i611 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $$pre$i2$i$i611 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $$pre$i2$i$i611 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $41 = HEAP32[$__ct>>2]|0;
 $42 = (($41) + 36|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($__ct,$40,0)|0);
 $45 = ($44<<24>>24)==(37);
 if (!($45)) {
  $46 = HEAP32[$__err>>2]|0;
  $47 = $46 | 4;
  HEAP32[$__err>>2] = $47;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$__b>>2]|0;
 $49 = (($48) + 12|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = (($48) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($50|0)==($52|0);
 if ($53) {
  $54 = HEAP32[$48>>2]|0;
  $55 = (($54) + 40|0);
  $56 = HEAP32[$55>>2]|0;
  (FUNCTION_TABLE_ii[$56 & 1023]($48)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $59 = $$pre;
 } else {
  $57 = (($50) + 1|0);
  HEAP32[$49>>2] = $57;
  $59 = $48;
 }
 $58 = ($59|0)==(0|0);
 do {
  if ($58) {
   $71 = 0;
  } else {
   $60 = (($59) + 12|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = (($59) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP32[$59>>2]|0;
    $66 = (($65) + 36|0);
    $67 = HEAP32[$66>>2]|0;
    $68 = (FUNCTION_TABLE_ii[$67 & 1023]($59)|0);
    $69 = ($68|0)==(-1);
    if ($69) {
     HEAP32[$__b>>2] = 0;
     $71 = 0;
     break;
    } else {
     $$pre$i$i$i2 = HEAP32[$__b>>2]|0;
     $71 = $$pre$i$i$i2;
     break;
    }
   } else {
    $71 = $59;
   }
  }
 } while(0);
 $70 = ($71|0)==(0|0);
 $72 = ($$pre$i2$i$i611|0)==(0|0);
 do {
  if ($72) {
   label = 31;
  } else {
   $73 = (($$pre$i2$i$i611) + 12|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = (($$pre$i2$i$i611) + 16|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($74|0)==($76|0);
   if ($77) {
    $78 = HEAP32[$$pre$i2$i$i611>>2]|0;
    $79 = (($78) + 36|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (FUNCTION_TABLE_ii[$80 & 1023]($$pre$i2$i$i611)|0);
    $82 = ($81|0)==(-1);
    if ($82) {
     HEAP32[$__e>>2] = 0;
     label = 31;
     break;
    }
   }
   if ($70) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 31) {
  if (!($70)) {
   STACKTOP = sp;return;
  }
 }
 $83 = HEAP32[$__err>>2]|0;
 $84 = $83 | 2;
 HEAP32[$__err>>2] = $84;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmtb,$__fmte) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmtb = $__fmtb|0;
 $__fmte = $__fmte|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i$i$i16 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i22 = 0, $$0$i$i1$i$i7 = 0, $$0$i$i13 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$1 = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre = 0, $$pre$i$i$i18 = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0;
 var $$pre$i3$i$i942 = 0, $$pre$i3$i$i943 = 0, $$pre41 = 0, $$pre41$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, $phitmp$i4$i$i10 = 0, $tmp$i$i12 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 20|0;
 $$byval_copy = sp + 16|0;
 $0 = sp + 12|0;
 $1 = sp + 8|0;
 $2 = sp + 4|0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $4 = (invoke_iii(458,($0|0),(12408|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if ($6) {
  $37 = ___cxa_find_matching_catch()|0;
  $38 = tempRet0;
  $39 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($39)|0);
  ___resumeException($37|0);
  // unreachable;
 }
 $7 = HEAP32[$0>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
 HEAP32[$__err>>2] = 0;
 $8 = ($__fmtb|0)==($__fmte|0);
 L4: do {
  if ($8) {
   label = 66;
  } else {
   $$0$ph40 = $__fmtb;$$pre41 = 0;
   L6: while(1) {
    $10 = $$pre41;
    while(1) {
     $9 = ($10|0)==(0);
     if (!($9)) {
      label = 66;
      break L4;
     }
     $11 = HEAP32[$__b>>2]|0;
     $12 = ($11|0)==(0|0);
     if ($12) {
      $183 = 1;$63 = 0;
     } else {
      $13 = (($11) + 12|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (($11) + 16|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($14|0)==($16|0);
      if ($17) {
       $18 = HEAP32[$11>>2]|0;
       $19 = (($18) + 36|0);
       $20 = HEAP32[$19>>2]|0;
       $21 = (FUNCTION_TABLE_ii[$20 & 1023]($11)|0);
       $$0$i$i$i$i = $21;
      } else {
       $22 = HEAP32[$14>>2]|0;
       $$0$i$i$i$i = $22;
      }
      $23 = ($$0$i$i$i$i|0)==(-1);
      if ($23) {
       HEAP32[$__b>>2] = 0;
       $183 = 1;$63 = 0;
      } else {
       $183 = 0;$63 = $11;
      }
     }
     $24 = HEAP32[$__e>>2]|0;
     $25 = ($24|0)==(0|0);
     do {
      if ($25) {
       label = 18;
      } else {
       $26 = (($24) + 12|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = (($24) + 16|0);
       $29 = HEAP32[$28>>2]|0;
       $30 = ($27|0)==($29|0);
       if ($30) {
        $31 = HEAP32[$24>>2]|0;
        $32 = (($31) + 36|0);
        $33 = HEAP32[$32>>2]|0;
        $34 = (FUNCTION_TABLE_ii[$33 & 1023]($24)|0);
        $$0$i$i1$i$i = $34;
       } else {
        $35 = HEAP32[$27>>2]|0;
        $$0$i$i1$i$i = $35;
       }
       $36 = ($$0$i$i1$i$i|0)==(-1);
       if ($36) {
        HEAP32[$__e>>2] = 0;
        label = 18;
        break;
       } else {
        if ($183) {
         $64 = $24;
         break;
        } else {
         label = 20;
         break L6;
        }
       }
      }
     } while(0);
     if ((label|0) == 18) {
      label = 0;
      if ($183) {
       label = 20;
       break L6;
      } else {
       $64 = 0;
      }
     }
     $40 = HEAP32[$$0$ph40>>2]|0;
     $41 = HEAP32[$4>>2]|0;
     $42 = (($41) + 52|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = (FUNCTION_TABLE_iiii[$43 & 1023]($4,$40,0)|0);
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      label = 23;
      break;
     }
     $68 = HEAP32[$$0$ph40>>2]|0;
     $69 = HEAP32[$4>>2]|0;
     $70 = (($69) + 12|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = (FUNCTION_TABLE_iiii[$71 & 1023]($4,8192,$68)|0);
     if ($72) {
      $$0$pn = $$0$ph40;
      label = 33;
      break;
     }
     $127 = (($63) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($63) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$63>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = (FUNCTION_TABLE_ii[$134 & 1023]($63)|0);
      $$0$i$i13 = $135;
     } else {
      $136 = HEAP32[$128>>2]|0;
      $$0$i$i13 = $136;
     }
     $137 = HEAP32[$4>>2]|0;
     $138 = (($137) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (FUNCTION_TABLE_iii[$139 & 1023]($4,$$0$i$i13)|0);
     $141 = HEAP32[$$0$ph40>>2]|0;
     $142 = HEAP32[$4>>2]|0;
     $143 = (($142) + 28|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = (FUNCTION_TABLE_iii[$144 & 1023]($4,$141)|0);
     $146 = ($140|0)==($145|0);
     if ($146) {
      label = 61;
      break;
     }
     HEAP32[$__err>>2] = 4;
     $10 = 4;
    }
    L38: do {
     if ((label|0) == 23) {
      label = 0;
      $46 = (($$0$ph40) + 4|0);
      $47 = ($46|0)==($__fmte|0);
      if ($47) {
       label = 24;
       break L6;
      }
      $48 = HEAP32[$46>>2]|0;
      $49 = HEAP32[$4>>2]|0;
      $50 = (($49) + 52|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = (FUNCTION_TABLE_iiii[$51 & 1023]($4,$48,0)|0);
      if ((($52<<24>>24) == 48) | (($52<<24>>24) == 69)) {
       $53 = (($$0$ph40) + 8|0);
       $54 = ($53|0)==($__fmte|0);
       if ($54) {
        label = 27;
        break L6;
       }
       $55 = HEAP32[$53>>2]|0;
       $56 = HEAP32[$4>>2]|0;
       $57 = (($56) + 52|0);
       $58 = HEAP32[$57>>2]|0;
       $59 = (FUNCTION_TABLE_iiii[$58 & 1023]($4,$55,0)|0);
       $$1 = $53;$__cmd$0 = $59;$__opt$0 = $52;
      } else {
       $$1 = $46;$__cmd$0 = $52;$__opt$0 = 0;
      }
      $60 = HEAP32[$this>>2]|0;
      $61 = (($60) + 36|0);
      $62 = HEAP32[$61>>2]|0;
      HEAP32[$2>>2] = $63;
      HEAP32[$3>>2] = $64;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
      ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
      FUNCTION_TABLE_viiiiiiiii[$62 & 255]($1,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$__cmd$0,$__opt$0);
      $65 = HEAP32[$1>>2]|0;
      HEAP32[$__b>>2] = $65;
      $66 = (($$1) + 4|0);
      $$0$ph$be = $66;
     }
     else if ((label|0) == 33) {
      while(1) {
       label = 0;
       $$2 = (($$0$pn) + 4|0);
       $73 = ($$2|0)==($__fmte|0);
       if ($73) {
        $$2$lcssa = $__fmte;
        break;
       }
       $74 = HEAP32[$$2>>2]|0;
       $75 = HEAP32[$4>>2]|0;
       $76 = (($75) + 12|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = (FUNCTION_TABLE_iiii[$77 & 1023]($4,8192,$74)|0);
       if ($78) {
        $$0$pn = $$2;
        label = 33;
       } else {
        $$2$lcssa = $$2;
        break;
       }
      }
      $$pre$i$i$i3 = $63;$$pre$i3$i$i9 = $64;$92 = $64;
      while(1) {
       $79 = ($$pre$i$i$i3|0)==(0|0);
       if ($79) {
        $104 = 1;$106 = 0;
       } else {
        $80 = (($$pre$i$i$i3) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($$pre$i$i$i3) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if ($84) {
         $85 = HEAP32[$$pre$i$i$i3>>2]|0;
         $86 = (($85) + 36|0);
         $87 = HEAP32[$86>>2]|0;
         $88 = (FUNCTION_TABLE_ii[$87 & 1023]($$pre$i$i$i3)|0);
         $$0$i$i$i$i1 = $88;
        } else {
         $89 = HEAP32[$81>>2]|0;
         $$0$i$i$i$i1 = $89;
        }
        $90 = ($$0$i$i$i$i1|0)==(-1);
        if ($90) {
         HEAP32[$__b>>2] = 0;
         $104 = 1;$106 = 0;
        } else {
         $104 = 0;$106 = $$pre$i$i$i3;
        }
       }
       $91 = ($92|0)==(0|0);
       do {
        if ($91) {
         $$pre$i3$i$i943 = $$pre$i3$i$i9;
         label = 48;
        } else {
         $93 = (($92) + 12|0);
         $94 = HEAP32[$93>>2]|0;
         $95 = (($92) + 16|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($94|0)==($96|0);
         if ($97) {
          $98 = HEAP32[$92>>2]|0;
          $99 = (($98) + 36|0);
          $100 = HEAP32[$99>>2]|0;
          $101 = (FUNCTION_TABLE_ii[$100 & 1023]($92)|0);
          $$0$i$i1$i$i7 = $101;
         } else {
          $102 = HEAP32[$94>>2]|0;
          $$0$i$i1$i$i7 = $102;
         }
         $103 = ($$0$i$i1$i$i7|0)==(-1);
         if ($103) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i943 = 0;
          label = 48;
          break;
         } else {
          $phitmp$i4$i$i10 = ($$pre$i3$i$i9|0)==(0|0);
          $tmp$i$i12 = $104 ^ $phitmp$i4$i$i10;
          if ($tmp$i$i12) {
           $$pre$i3$i$i942 = $$pre$i3$i$i9;$184 = $$pre$i3$i$i9;
           break;
          } else {
           $$0$ph$be = $$2$lcssa;
           break L38;
          }
         }
        }
       } while(0);
       if ((label|0) == 48) {
        label = 0;
        if ($104) {
         $$0$ph$be = $$2$lcssa;
         break L38;
        } else {
         $$pre$i3$i$i942 = $$pre$i3$i$i943;$184 = 0;
        }
       }
       $105 = (($106) + 12|0);
       $107 = HEAP32[$105>>2]|0;
       $108 = (($106) + 16|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($107|0)==($109|0);
       if ($110) {
        $111 = HEAP32[$106>>2]|0;
        $112 = (($111) + 36|0);
        $113 = HEAP32[$112>>2]|0;
        $114 = (FUNCTION_TABLE_ii[$113 & 1023]($106)|0);
        $$0$i$i = $114;
       } else {
        $115 = HEAP32[$107>>2]|0;
        $$0$i$i = $115;
       }
       $116 = HEAP32[$4>>2]|0;
       $117 = (($116) + 12|0);
       $118 = HEAP32[$117>>2]|0;
       $119 = (FUNCTION_TABLE_iiii[$118 & 1023]($4,8192,$$0$i$i)|0);
       if (!($119)) {
        $$0$ph$be = $$2$lcssa;
        break L38;
       }
       $120 = HEAP32[$105>>2]|0;
       $121 = HEAP32[$108>>2]|0;
       $122 = ($120|0)==($121|0);
       if ($122) {
        $123 = HEAP32[$106>>2]|0;
        $124 = (($123) + 40|0);
        $125 = HEAP32[$124>>2]|0;
        (FUNCTION_TABLE_ii[$125 & 1023]($106)|0);
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       } else {
        $126 = (($120) + 4|0);
        HEAP32[$105>>2] = $126;
        $$pre$i$i$i3 = $106;$$pre$i3$i$i9 = $$pre$i3$i$i942;$92 = $184;
        continue;
       }
      }
     }
     else if ((label|0) == 61) {
      label = 0;
      $147 = HEAP32[$127>>2]|0;
      $148 = HEAP32[$129>>2]|0;
      $149 = ($147|0)==($148|0);
      if ($149) {
       $150 = HEAP32[$63>>2]|0;
       $151 = (($150) + 40|0);
       $152 = HEAP32[$151>>2]|0;
       (FUNCTION_TABLE_ii[$152 & 1023]($63)|0);
      } else {
       $153 = (($147) + 4|0);
       HEAP32[$127>>2] = $153;
      }
      $154 = (($$0$ph40) + 4|0);
      $$0$ph$be = $154;
     }
    } while(0);
    $67 = ($$0$ph$be|0)==($__fmte|0);
    if ($67) {
     label = 66;
     break L4;
    }
    $$pre41$pre = HEAP32[$__err>>2]|0;
    $$0$ph40 = $$0$ph$be;$$pre41 = $$pre41$pre;
   }
   if ((label|0) == 20) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 24) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
   else if ((label|0) == 27) {
    HEAP32[$__err>>2] = 4;
    $$pre$i$i$i18 = $63;
    break;
   }
  }
 } while(0);
 if ((label|0) == 66) {
  $$pre = HEAP32[$__b>>2]|0;
  $$pre$i$i$i18 = $$pre;
 }
 $155 = ($$pre$i$i$i18|0)==(0|0);
 if ($155) {
  $182 = 0;$185 = 1;
 } else {
  $156 = (($$pre$i$i$i18) + 12|0);
  $157 = HEAP32[$156>>2]|0;
  $158 = (($$pre$i$i$i18) + 16|0);
  $159 = HEAP32[$158>>2]|0;
  $160 = ($157|0)==($159|0);
  if ($160) {
   $161 = HEAP32[$$pre$i$i$i18>>2]|0;
   $162 = (($161) + 36|0);
   $163 = HEAP32[$162>>2]|0;
   $164 = (FUNCTION_TABLE_ii[$163 & 1023]($$pre$i$i$i18)|0);
   $$0$i$i$i$i16 = $164;
  } else {
   $165 = HEAP32[$157>>2]|0;
   $$0$i$i$i$i16 = $165;
  }
  $166 = ($$0$i$i$i$i16|0)==(-1);
  if ($166) {
   HEAP32[$__b>>2] = 0;
   $182 = 0;$185 = 1;
  } else {
   $182 = $$pre$i$i$i18;$185 = 0;
  }
 }
 $167 = HEAP32[$__e>>2]|0;
 $168 = ($167|0)==(0|0);
 do {
  if ($168) {
   label = 79;
  } else {
   $169 = (($167) + 12|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = (($167) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($170|0)==($172|0);
   if ($173) {
    $174 = HEAP32[$167>>2]|0;
    $175 = (($174) + 36|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = (FUNCTION_TABLE_ii[$176 & 1023]($167)|0);
    $$0$i$i1$i$i22 = $177;
   } else {
    $178 = HEAP32[$170>>2]|0;
    $$0$i$i1$i$i22 = $178;
   }
   $179 = ($$0$i$i1$i$i22|0)==(-1);
   if ($179) {
    HEAP32[$__e>>2] = 0;
    label = 79;
    break;
   }
   if ($185) {
    HEAP32[$agg$result>>2] = $182;
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 79) {
  if (!($185)) {
   HEAP32[$agg$result>>2] = $182;
   STACKTOP = sp;return;
  }
 }
 $180 = HEAP32[$__err>>2]|0;
 $181 = $180 | 2;
 HEAP32[$__err>>2] = $181;
 HEAP32[$agg$result>>2] = $182;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $2;
 $3 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $3;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,11472,((11472 + 32|0)));
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy1 = sp + 12|0;
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (FUNCTION_TABLE_ii[$5 & 1023]($2)|0);
 $7 = HEAP32[$__b>>2]|0;
 HEAP32[$0>>2] = $7;
 $8 = HEAP32[$__e>>2]|0;
 HEAP32[$1>>2] = $8;
 $9 = HEAP8[$6>>0]|0;
 $10 = $9 & 1;
 $11 = ($10<<24>>24)==(0);
 if ($11) {
  $16 = (($6) + 4|0);
  $17 = (($6) + 4|0);
  $18 = $9&255;
  $19 = $18 >>> 1;
  $21 = $17;$22 = $19;$23 = $16;
 } else {
  $12 = (($6) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($6) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $21 = $13;$22 = $15;$23 = $13;
 }
 $20 = (($21) + ($22<<2)|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$1+0>>2]|0;
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result,$this,$$byval_copy,$$byval_copy1,$__iob,$__err,$__tm,$23,$20);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 24|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 1023]($1)|0);
 $5 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = (($4) + 168|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $7 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$4,$6,$__ct,$__err,0)|0);
 $8 = $7;
 $9 = $4;
 $10 = (($8) - ($9))|0;
 $11 = ($10|0)<(168);
 if (!($11)) {
  STACKTOP = sp;return;
 }
 $12 = (($10|0) / 12)&-1;
 $13 = (($12|0) % 7)&-1;
 HEAP32[$__w>>2] = $13;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 16|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $6;
 $7 = (($5) + 288|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $8 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$7,$__ct,$__err,0)|0);
 $9 = $8;
 $10 = $5;
 $11 = (($9) - ($10))|0;
 $12 = ($11|0)<(288);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = (($11|0) / 12)&-1;
 $14 = (($13|0) % 12)&-1;
 HEAP32[$__m>>2] = $14;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 8|0;
 $0 = sp + 4|0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0,$__iob);
 __THREW__ = 0;
 $2 = (invoke_iii(458,($0|0),(12408|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($11)|0);
  ___resumeException($9|0);
  // unreachable;
 } else {
  $5 = HEAP32[$0>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($5)|0);
  $6 = (($__tm) + 20|0);
  $7 = HEAP32[$__e>>2]|0;
  HEAP32[$1>>2] = $7;
  ;HEAP32[$$byval_copy+0>>2]=HEAP32[$1+0>>2]|0;
  __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$6,$__b,$$byval_copy,$__err,$2);
  $8 = HEAP32[$__b>>2]|0;
  HEAP32[$agg$result>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$ = 0, $$byval_copy = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__t$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = ($2|0)<(69);
 if ($6) {
  $7 = (($2) + 2000)|0;
  $__t$0 = $7;
 } else {
  $$off = (($2) + -69)|0;
  $8 = ($$off>>>0)<(31);
  $9 = (($2) + 1900)|0;
  $$ = $8 ? $9 : $2;
  $__t$0 = $$;
 }
 $10 = (($__t$0) + -1900)|0;
 HEAP32[$__y>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0;
 var $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy30 = sp + 116|0;
 $$byval_copy29 = sp + 112|0;
 $$byval_copy28 = sp + 108|0;
 $$byval_copy27 = sp + 208|0;
 $$byval_copy26 = sp + 260|0;
 $$byval_copy25 = sp + 268|0;
 $$byval_copy24 = sp + 252|0;
 $$byval_copy23 = sp + 216|0;
 $$byval_copy22 = sp + 16|0;
 $$byval_copy21 = sp + 20|0;
 $$byval_copy20 = sp + 24|0;
 $$byval_copy19 = sp + 28|0;
 $$byval_copy18 = sp + 32|0;
 $$byval_copy17 = sp + 36|0;
 $$byval_copy16 = sp + 40|0;
 $$byval_copy15 = sp + 212|0;
 $$byval_copy14 = sp + 44|0;
 $$byval_copy13 = sp + 48|0;
 $$byval_copy12 = sp + 52|0;
 $$byval_copy11 = sp + 56|0;
 $$byval_copy10 = sp + 60|0;
 $$byval_copy9 = sp + 64|0;
 $$byval_copy8 = sp + 68|0;
 $$byval_copy7 = sp + 72|0;
 $$byval_copy6 = sp + 76|0;
 $$byval_copy5 = sp + 80|0;
 $$byval_copy4 = sp + 84|0;
 $$byval_copy3 = sp + 88|0;
 $$byval_copy2 = sp + 92|0;
 $$byval_copy1 = sp + 232|0;
 $$byval_copy = sp + 240|0;
 $1 = sp + 248|0;
 $2 = sp + 256|0;
 $3 = sp + 264|0;
 $4 = sp + 272|0;
 $5 = sp + 276|0;
 $6 = sp + 120|0;
 $7 = sp + 124|0;
 $8 = sp + 128|0;
 $9 = sp + 132|0;
 $10 = sp + 136|0;
 $11 = sp + 140|0;
 $12 = sp + 144|0;
 $13 = sp + 148|0;
 $14 = sp + 152|0;
 $15 = sp + 156|0;
 $16 = sp + 160|0;
 $17 = sp + 164|0;
 $18 = sp + 168|0;
 $19 = sp + 172|0;
 $20 = sp + 176|0;
 $21 = sp + 180|0;
 $22 = sp + 184|0;
 $23 = sp + 188|0;
 $24 = sp + 192|0;
 $25 = sp + 196|0;
 $26 = sp + 200|0;
 $27 = sp + 204|0;
 $28 = sp + 12|0;
 $29 = sp + 8|0;
 $30 = sp + 224|0;
 $31 = sp + 4|0;
 $32 = sp + 228|0;
 $33 = sp + 96|0;
 $34 = sp;
 $35 = sp + 220|0;
 $36 = sp + 100|0;
 $37 = sp + 236|0;
 $38 = sp + 244|0;
 $39 = sp + 104|0;
 HEAP32[$__err>>2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1,$__iob);
 __THREW__ = 0;
 $40 = (invoke_iii(458,($1|0),(12408|0))|0);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $45 = ___cxa_find_matching_catch()|0;
  $46 = tempRet0;
  $47 = HEAP32[$1>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($47)|0);
  ___resumeException($45|0);
  // unreachable;
 }
 $43 = HEAP32[$1>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($43)|0);
 $44 = $__fmt << 24 >> 24;
 do {
  switch ($44|0) {
  case 99:  {
   $52 = (($this) + 8|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = (($53) + 12|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (FUNCTION_TABLE_ii[$55 & 1023]($52)|0);
   $57 = HEAP32[$__b>>2]|0;
   HEAP32[$5>>2] = $57;
   $58 = HEAP32[$__e>>2]|0;
   HEAP32[$6>>2] = $58;
   $59 = HEAP8[$56>>0]|0;
   $60 = $59 & 1;
   $61 = ($60<<24>>24)==(0);
   if ($61) {
    $66 = (($56) + 4|0);
    $67 = (($56) + 4|0);
    $68 = $59&255;
    $69 = $68 >>> 1;
    $71 = $67;$72 = $69;$73 = $66;
   } else {
    $62 = (($56) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($56) + 4|0);
    $65 = HEAP32[$64>>2]|0;
    $71 = $63;$72 = $65;$73 = $63;
   }
   $70 = (($71) + ($72<<2)|0);
   ;HEAP32[$$byval_copy2+0>>2]=HEAP32[$5+0>>2]|0;
   ;HEAP32[$$byval_copy3+0>>2]=HEAP32[$6+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$$byval_copy2,$$byval_copy3,$__iob,$__err,$__tm,$73,$70);
   $74 = HEAP32[$4>>2]|0;
   HEAP32[$__b>>2] = $74;
   break;
  }
  case 77:  {
   $91 = (($__tm) + 4|0);
   $92 = HEAP32[$__e>>2]|0;
   HEAP32[$18>>2] = $92;
   ;HEAP32[$$byval_copy13+0>>2]=HEAP32[$18+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$91,$__b,$$byval_copy13,$__err,$40);
   break;
  }
  case 116: case 110:  {
   $93 = HEAP32[$__e>>2]|0;
   HEAP32[$19>>2] = $93;
   ;HEAP32[$$byval_copy14+0>>2]=HEAP32[$19+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy14,$__err,$40);
   break;
  }
  case 104: case 66: case 98:  {
   $50 = (($__tm) + 16|0);
   $51 = HEAP32[$__e>>2]|0;
   HEAP32[$3>>2] = $51;
   ;HEAP32[$$byval_copy1+0>>2]=HEAP32[$3+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$50,$__b,$$byval_copy1,$__err,$40);
   break;
  }
  case 83:  {
   $102 = HEAP32[$__e>>2]|0;
   HEAP32[$27>>2] = $102;
   ;HEAP32[$$byval_copy20+0>>2]=HEAP32[$27+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__tm,$__b,$$byval_copy20,$__err,$40);
   break;
  }
  case 84:  {
   $103 = HEAP32[$__b>>2]|0;
   HEAP32[$29>>2] = $103;
   $104 = HEAP32[$__e>>2]|0;
   HEAP32[$30>>2] = $104;
   ;HEAP32[$$byval_copy21+0>>2]=HEAP32[$29+0>>2]|0;
   ;HEAP32[$$byval_copy22+0>>2]=HEAP32[$30+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28,$this,$$byval_copy21,$$byval_copy22,$__iob,$__err,$__tm,11640,((11640 + 32|0)));
   $105 = HEAP32[$28>>2]|0;
   HEAP32[$__b>>2] = $105;
   break;
  }
  case 119:  {
   $106 = (($__tm) + 24|0);
   $107 = HEAP32[$__e>>2]|0;
   HEAP32[$31>>2] = $107;
   ;HEAP32[$$byval_copy23+0>>2]=HEAP32[$31+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$106,$__b,$$byval_copy23,$__err,$40);
   break;
  }
  case 120:  {
   $108 = HEAP32[$this>>2]|0;
   $109 = (($108) + 20|0);
   $110 = HEAP32[$109>>2]|0;
   $111 = HEAP32[$__b>>2]|0;
   HEAP32[$32>>2] = $111;
   $112 = HEAP32[$__e>>2]|0;
   HEAP32[$33>>2] = $112;
   ;HEAP32[$$byval_copy24+0>>2]=HEAP32[$32+0>>2]|0;
   ;HEAP32[$$byval_copy25+0>>2]=HEAP32[$33+0>>2]|0;
   FUNCTION_TABLE_viiiiiii[$110 & 1023]($agg$result,$this,$$byval_copy24,$$byval_copy25,$__iob,$__err,$__tm);
   STACKTOP = sp;return;
   break;
  }
  case 88:  {
   $113 = (($this) + 8|0);
   $114 = HEAP32[$113>>2]|0;
   $115 = (($114) + 24|0);
   $116 = HEAP32[$115>>2]|0;
   $117 = (FUNCTION_TABLE_ii[$116 & 1023]($113)|0);
   $118 = HEAP32[$__b>>2]|0;
   HEAP32[$35>>2] = $118;
   $119 = HEAP32[$__e>>2]|0;
   HEAP32[$36>>2] = $119;
   $120 = HEAP8[$117>>0]|0;
   $121 = $120 & 1;
   $122 = ($121<<24>>24)==(0);
   if ($122) {
    $127 = (($117) + 4|0);
    $128 = (($117) + 4|0);
    $129 = $120&255;
    $130 = $129 >>> 1;
    $132 = $128;$133 = $130;$134 = $127;
   } else {
    $123 = (($117) + 8|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = (($117) + 4|0);
    $126 = HEAP32[$125>>2]|0;
    $132 = $124;$133 = $126;$134 = $124;
   }
   $131 = (($132) + ($133<<2)|0);
   ;HEAP32[$$byval_copy26+0>>2]=HEAP32[$35+0>>2]|0;
   ;HEAP32[$$byval_copy27+0>>2]=HEAP32[$36+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34,$this,$$byval_copy26,$$byval_copy27,$__iob,$__err,$__tm,$134,$131);
   $135 = HEAP32[$34>>2]|0;
   HEAP32[$__b>>2] = $135;
   break;
  }
  case 121:  {
   $136 = (($__tm) + 20|0);
   $137 = HEAP32[$__e>>2]|0;
   HEAP32[$37>>2] = $137;
   ;HEAP32[$$byval_copy28+0>>2]=HEAP32[$37+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this,$136,$__b,$$byval_copy28,$__err,$40);
   break;
  }
  case 89:  {
   $138 = (($__tm) + 20|0);
   $139 = HEAP32[$__e>>2]|0;
   HEAP32[$38>>2] = $139;
   ;HEAP32[$$byval_copy29+0>>2]=HEAP32[$38+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$138,$__b,$$byval_copy29,$__err,$40);
   break;
  }
  case 37:  {
   $140 = HEAP32[$__e>>2]|0;
   HEAP32[$39>>2] = $140;
   ;HEAP32[$$byval_copy30+0>>2]=HEAP32[$39+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$$byval_copy30,$__err,$40);
   break;
  }
  case 112:  {
   $94 = (($__tm) + 8|0);
   $95 = HEAP32[$__e>>2]|0;
   HEAP32[$20>>2] = $95;
   ;HEAP32[$$byval_copy15+0>>2]=HEAP32[$20+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$94,$__b,$$byval_copy15,$__err,$40);
   break;
  }
  case 82:  {
   $99 = HEAP32[$__b>>2]|0;
   HEAP32[$25>>2] = $99;
   $100 = HEAP32[$__e>>2]|0;
   HEAP32[$26>>2] = $100;
   ;HEAP32[$$byval_copy18+0>>2]=HEAP32[$25+0>>2]|0;
   ;HEAP32[$$byval_copy19+0>>2]=HEAP32[$26+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24,$this,$$byval_copy18,$$byval_copy19,$__iob,$__err,$__tm,11616,((11616 + 20|0)));
   $101 = HEAP32[$24>>2]|0;
   HEAP32[$__b>>2] = $101;
   break;
  }
  case 68:  {
   $77 = HEAP32[$__b>>2]|0;
   HEAP32[$9>>2] = $77;
   $78 = HEAP32[$__e>>2]|0;
   HEAP32[$10>>2] = $78;
   ;HEAP32[$$byval_copy5+0>>2]=HEAP32[$9+0>>2]|0;
   ;HEAP32[$$byval_copy6+0>>2]=HEAP32[$10+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8,$this,$$byval_copy5,$$byval_copy6,$__iob,$__err,$__tm,11504,((11504 + 32|0)));
   $79 = HEAP32[$8>>2]|0;
   HEAP32[$__b>>2] = $79;
   break;
  }
  case 70:  {
   $80 = HEAP32[$__b>>2]|0;
   HEAP32[$12>>2] = $80;
   $81 = HEAP32[$__e>>2]|0;
   HEAP32[$13>>2] = $81;
   ;HEAP32[$$byval_copy7+0>>2]=HEAP32[$12+0>>2]|0;
   ;HEAP32[$$byval_copy8+0>>2]=HEAP32[$13+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11,$this,$$byval_copy7,$$byval_copy8,$__iob,$__err,$__tm,11536,((11536 + 32|0)));
   $82 = HEAP32[$11>>2]|0;
   HEAP32[$__b>>2] = $82;
   break;
  }
  case 114:  {
   $96 = HEAP32[$__b>>2]|0;
   HEAP32[$22>>2] = $96;
   $97 = HEAP32[$__e>>2]|0;
   HEAP32[$23>>2] = $97;
   ;HEAP32[$$byval_copy16+0>>2]=HEAP32[$22+0>>2]|0;
   ;HEAP32[$$byval_copy17+0>>2]=HEAP32[$23+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21,$this,$$byval_copy16,$$byval_copy17,$__iob,$__err,$__tm,11568,((11568 + 44|0)));
   $98 = HEAP32[$21>>2]|0;
   HEAP32[$__b>>2] = $98;
   break;
  }
  case 106:  {
   $87 = (($__tm) + 28|0);
   $88 = HEAP32[$__e>>2]|0;
   HEAP32[$16>>2] = $88;
   ;HEAP32[$$byval_copy11+0>>2]=HEAP32[$16+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$87,$__b,$$byval_copy11,$__err,$40);
   break;
  }
  case 109:  {
   $89 = (($__tm) + 16|0);
   $90 = HEAP32[$__e>>2]|0;
   HEAP32[$17>>2] = $90;
   ;HEAP32[$$byval_copy12+0>>2]=HEAP32[$17+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$89,$__b,$$byval_copy12,$__err,$40);
   break;
  }
  case 72:  {
   $83 = (($__tm) + 8|0);
   $84 = HEAP32[$__e>>2]|0;
   HEAP32[$14>>2] = $84;
   ;HEAP32[$$byval_copy9+0>>2]=HEAP32[$14+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$83,$__b,$$byval_copy9,$__err,$40);
   break;
  }
  case 73:  {
   $85 = (($__tm) + 8|0);
   $86 = HEAP32[$__e>>2]|0;
   HEAP32[$15>>2] = $86;
   ;HEAP32[$$byval_copy10+0>>2]=HEAP32[$15+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$85,$__b,$$byval_copy10,$__err,$40);
   break;
  }
  case 101: case 100:  {
   $75 = (($__tm) + 12|0);
   $76 = HEAP32[$__e>>2]|0;
   HEAP32[$7>>2] = $76;
   ;HEAP32[$$byval_copy4+0>>2]=HEAP32[$7+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$75,$__b,$$byval_copy4,$__err,$40);
   break;
  }
  case 65: case 97:  {
   $48 = (($__tm) + 24|0);
   $49 = HEAP32[$__e>>2]|0;
   HEAP32[$2>>2] = $49;
   ;HEAP32[$$byval_copy+0>>2]=HEAP32[$2+0>>2]|0;
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this,$48,$__b,$$byval_copy,$__err,$40);
   break;
  }
  default: {
   $141 = HEAP32[$__err>>2]|0;
   $142 = $141 | 4;
   HEAP32[$__err>>2] = $142;
  }
  }
 } while(0);
 $143 = HEAP32[$__b>>2]|0;
 HEAP32[$agg$result>>2] = $143;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(32);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(24);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)>(0);
 $or$cond = $5 & $6;
 $7 = ($2|0)<(13);
 $or$cond3 = $or$cond & $7;
 if ($or$cond3) {
  HEAP32[$__h>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__d,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__d = $__d|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,3)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(366);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__d>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(13);
 $or$cond = $5 & $6;
 if ($or$cond) {
  $7 = (($2) + -1)|0;
  HEAP32[$__m>>2] = $7;
  STACKTOP = sp;return;
 } else {
  $8 = $3 | 4;
  HEAP32[$__err>>2] = $8;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__m,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__m = $__m|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(60);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__m>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 L1: while(1) {
  $0 = HEAP32[$__b>>2]|0;
  $1 = ($0|0)==(0|0);
  do {
   if ($1) {
    $78 = 1;
   } else {
    $2 = (($0) + 12|0);
    $3 = HEAP32[$2>>2]|0;
    $4 = (($0) + 16|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = ($3|0)==($5|0);
    if ($6) {
     $7 = HEAP32[$0>>2]|0;
     $8 = (($7) + 36|0);
     $9 = HEAP32[$8>>2]|0;
     $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
     $$0$i$i$i$i = $10;
    } else {
     $11 = HEAP32[$3>>2]|0;
     $$0$i$i$i$i = $11;
    }
    $12 = ($$0$i$i$i$i|0)==(-1);
    if ($12) {
     HEAP32[$__b>>2] = 0;
     $78 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $78 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $13 = HEAP32[$__e>>2]|0;
  $14 = ($13|0)==(0|0);
  do {
   if ($14) {
    label = 15;
   } else {
    $15 = (($13) + 12|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($13) + 16|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($16|0)==($18|0);
    if ($19) {
     $20 = HEAP32[$13>>2]|0;
     $21 = (($20) + 36|0);
     $22 = HEAP32[$21>>2]|0;
     $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
     $$0$i$i1$i$i = $23;
    } else {
     $24 = HEAP32[$16>>2]|0;
     $$0$i$i1$i$i = $24;
    }
    $25 = ($$0$i$i1$i$i|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 15;
     break;
    } else {
     if ($78) {
      $79 = $13;
      break;
     } else {
      $$pre$i3$i$i9 = $13;
      break L1;
     }
    }
   }
  } while(0);
  if ((label|0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else {
    $79 = 0;
   }
  }
  $26 = HEAP32[$__b>>2]|0;
  $27 = (($26) + 12|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($26) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($28|0)==($30|0);
  if ($31) {
   $32 = HEAP32[$26>>2]|0;
   $33 = (($32) + 36|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = (FUNCTION_TABLE_ii[$34 & 1023]($26)|0);
   $$0$i$i = $35;
  } else {
   $36 = HEAP32[$28>>2]|0;
   $$0$i$i = $36;
  }
  $37 = HEAP32[$__ct>>2]|0;
  $38 = (($37) + 12|0);
  $39 = HEAP32[$38>>2]|0;
  $40 = (FUNCTION_TABLE_iiii[$39 & 1023]($__ct,8192,$$0$i$i)|0);
  if (!($40)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b>>2]|0;
  $42 = (($41) + 12|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($41) + 16|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($43|0)==($45|0);
  if ($46) {
   $47 = HEAP32[$41>>2]|0;
   $48 = (($47) + 40|0);
   $49 = HEAP32[$48>>2]|0;
   (FUNCTION_TABLE_ii[$49 & 1023]($41)|0);
   continue;
  } else {
   $50 = (($43) + 4|0);
   HEAP32[$42>>2] = $50;
   continue;
  }
 }
 $51 = HEAP32[$__b>>2]|0;
 $52 = ($51|0)==(0|0);
 do {
  if ($52) {
   $80 = 1;
  } else {
   $53 = (($51) + 12|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = (($51) + 16|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ($54|0)==($56|0);
   if ($57) {
    $58 = HEAP32[$51>>2]|0;
    $59 = (($58) + 36|0);
    $60 = HEAP32[$59>>2]|0;
    $61 = (FUNCTION_TABLE_ii[$60 & 1023]($51)|0);
    $$0$i$i$i$i1 = $61;
   } else {
    $62 = HEAP32[$54>>2]|0;
    $$0$i$i$i$i1 = $62;
   }
   $63 = ($$0$i$i$i$i1|0)==(-1);
   if ($63) {
    HEAP32[$__b>>2] = 0;
    $80 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $80 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $64 = ($$pre$i3$i$i9|0)==(0|0);
 do {
  if ($64) {
   label = 37;
  } else {
   $65 = (($$pre$i3$i$i9) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = (($$pre$i3$i$i9) + 16|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($66|0)==($68|0);
   if ($69) {
    $70 = HEAP32[$$pre$i3$i$i9>>2]|0;
    $71 = (($70) + 36|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = (FUNCTION_TABLE_ii[$72 & 1023]($$pre$i3$i$i9)|0);
    $$0$i$i1$i$i7 = $73;
   } else {
    $74 = HEAP32[$66>>2]|0;
    $$0$i$i1$i$i7 = $74;
   }
   $75 = ($$0$i$i1$i$i7|0)==(-1);
   if ($75) {
    HEAP32[$__e>>2] = 0;
    label = 37;
    break;
   }
   if ($80) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 37) {
  if (!($80)) {
   STACKTOP = sp;return;
  }
 }
 $76 = HEAP32[$__err>>2]|0;
 $77 = $76 | 2;
 HEAP32[$__err>>2] = $77;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__h,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__h = $__h|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = (($this) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($1)|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 & 1;
 $8 = ($7<<24>>24)==(0);
 if ($8) {
  $11 = $6&255;
  $12 = $11 >>> 1;
  $24 = $12;
 } else {
  $9 = (($5) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $24 = $10;
 }
 $13 = (($5) + 12|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14 & 1;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  $19 = $14&255;
  $20 = $19 >>> 1;
  $22 = $20;
 } else {
  $17 = (($5) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $22 = $18;
 }
 $21 = (0 - ($22))|0;
 $23 = ($24|0)==($21|0);
 if ($23) {
  $25 = HEAP32[$__err>>2]|0;
  $26 = $25 | 4;
  HEAP32[$__err>>2] = $26;
  STACKTOP = sp;return;
 }
 $27 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $27;
 $28 = (($5) + 24|0);
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $29 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$$byval_copy,$5,$28,$__ct,$__err,0)|0);
 $30 = $29;
 $31 = $5;
 $32 = (($30) - ($31))|0;
 $33 = ($29|0)==($5|0);
 if ($33) {
  $34 = HEAP32[$__h>>2]|0;
  $35 = ($34|0)==(12);
  if ($35) {
   HEAP32[$__h>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $36 = ($32|0)==(12);
 if (!($36)) {
  STACKTOP = sp;return;
 }
 $37 = HEAP32[$__h>>2]|0;
 $38 = ($37|0)<(12);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = (($37) + 12)|0;
 HEAP32[$__h>>2] = $39;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__s,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__s = $__s|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,2)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(61);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__s>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__w,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__w = $__w|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,1)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 $6 = ($2|0)<(7);
 $or$cond = $5 & $6;
 if ($or$cond) {
  HEAP32[$__w>>2] = $2;
  STACKTOP = sp;return;
 } else {
  $7 = $3 | 4;
  HEAP32[$__err>>2] = $7;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this,$__y,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__y = $__y|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $0 = sp;
 $1 = HEAP32[$__e>>2]|0;
 HEAP32[$0>>2] = $1;
 ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
 $2 = (__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$$byval_copy,$__err,$__ct,4)|0);
 $3 = HEAP32[$__err>>2]|0;
 $4 = $3 & 4;
 $5 = ($4|0)==(0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (($2) + -1900)|0;
 HEAP32[$__y>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this,$__b,$__e,$__err,$__ct) {
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i3 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $83 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $83 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $83 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($83) {
     $$pre$i3$i$i915 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($83) {
   label = 16;
  } else {
   $$pre$i3$i$i915 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  STACKTOP = sp;return;
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 52|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,$$0$i$i,0)|0);
 $43 = ($42<<24>>24)==(37);
 if (!($43)) {
  $44 = HEAP32[$__err>>2]|0;
  $45 = $44 | 4;
  HEAP32[$__err>>2] = $45;
  STACKTOP = sp;return;
 }
 $46 = HEAP32[$__b>>2]|0;
 $47 = (($46) + 12|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = (($46) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ($48|0)==($50|0);
 if ($51) {
  $52 = HEAP32[$46>>2]|0;
  $53 = (($52) + 40|0);
  $54 = HEAP32[$53>>2]|0;
  (FUNCTION_TABLE_ii[$54 & 1023]($46)|0);
  $$pre = HEAP32[$__b>>2]|0;
  $57 = $$pre;
 } else {
  $55 = (($48) + 4|0);
  HEAP32[$47>>2] = $55;
  $57 = $46;
 }
 $56 = ($57|0)==(0|0);
 do {
  if ($56) {
   $84 = 1;
  } else {
   $58 = (($57) + 12|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = (($57) + 16|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($59|0)==($61|0);
   if ($62) {
    $63 = HEAP32[$57>>2]|0;
    $64 = (($63) + 36|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (FUNCTION_TABLE_ii[$65 & 1023]($57)|0);
    $$0$i$i$i$i1 = $66;
   } else {
    $67 = HEAP32[$59>>2]|0;
    $$0$i$i$i$i1 = $67;
   }
   $68 = ($$0$i$i$i$i1|0)==(-1);
   if ($68) {
    HEAP32[$__b>>2] = 0;
    $84 = 1;
    break;
   } else {
    $$pre$i$i$i3 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i4 = ($$pre$i$i$i3|0)==(0|0);
    $84 = $phitmp$i$i$i4;
    break;
   }
  }
 } while(0);
 $69 = ($$pre$i3$i$i915|0)==(0|0);
 do {
  if ($69) {
   label = 38;
  } else {
   $70 = (($$pre$i3$i$i915) + 12|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = (($$pre$i3$i$i915) + 16|0);
   $73 = HEAP32[$72>>2]|0;
   $74 = ($71|0)==($73|0);
   if ($74) {
    $75 = HEAP32[$$pre$i3$i$i915>>2]|0;
    $76 = (($75) + 36|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = (FUNCTION_TABLE_ii[$77 & 1023]($$pre$i3$i$i915)|0);
    $$0$i$i1$i$i7 = $78;
   } else {
    $79 = HEAP32[$71>>2]|0;
    $$0$i$i1$i$i7 = $79;
   }
   $80 = ($$0$i$i1$i$i7|0)==(-1);
   if ($80) {
    HEAP32[$__e>>2] = 0;
    label = 38;
    break;
   }
   if ($84) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 38) {
  if (!($84)) {
   STACKTOP = sp;return;
  }
 }
 $81 = HEAP32[$__err>>2]|0;
 $82 = $81 | 2;
 HEAP32[$__err>>2] = $82;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 __THREW__ = 0;
 $1 = (invoke_i(595)|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if (!($3)) {
  $4 = ($0|0)==($1|0);
  if ($4) {
   STACKTOP = sp;return;
  }
  $5 = HEAP32[$this>>2]|0;
  __THREW__ = 0;
  invoke_vi(609,($5|0));
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if (!($7)) {
   STACKTOP = sp;return;
  }
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 ___clang_call_terminate($8);
 // unreachable;
}
function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 4|0;
 $__ne = sp;
 $2 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $24 = $5;
  HEAP32[$agg$result>>2] = $24;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP8[$$01$i$i>>0]|0;
  $8 = ($9|0)==(0|0);
  do {
   if ($8) {
    $25 = 0;
   } else {
    $10 = (($9) + 24|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (($9) + 28|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11|0)==($13|0);
    if ($14) {
     $16 = HEAP32[$9>>2]|0;
     $17 = (($16) + 52|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = $7&255;
     $20 = (FUNCTION_TABLE_iii[$18 & 1023]($9,$19)|0);
     $21 = ($20|0)==(-1);
     $$$i = $21 ? 0 : $9;
     $25 = $$$i;
     break;
    } else {
     $15 = (($11) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = $7;
     $25 = $9;
     break;
    }
   }
  } while(0);
  $22 = (($$01$i$i) + 1|0);
  $23 = ($22|0)==($4|0);
  if ($23) {
   $24 = $25;
   break;
  } else {
   $$01$i$i = $22;$9 = $25;
  }
 }
 HEAP32[$agg$result>>2] = $24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nb,$__ne,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__nb = $__nb|0;
 $__ne = $__ne|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $fmt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $fmt = sp;
 HEAP8[$fmt>>0] = 37;
 $0 = (($fmt) + 1|0);
 HEAP8[$0>>0] = $__fmt;
 $1 = (($fmt) + 2|0);
 HEAP8[$1>>0] = $__mod;
 $2 = (($fmt) + 3|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__mod<<24>>24)==(0);
 if (!($3)) {
  HEAP8[$0>>0] = $__mod;
  HEAP8[$1>>0] = $__fmt;
 }
 $4 = HEAP32[$__ne>>2]|0;
 $5 = $4;
 $6 = $__nb;
 $7 = (($5) - ($6))|0;
 $8 = HEAP32[$this>>2]|0;
 $9 = (_strftime_l(($__nb|0),($7|0),($fmt|0),($__tm|0),($8|0))|0);
 $10 = (($__nb) + ($9)|0);
 HEAP32[$__ne>>2] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 __ZNSt3__110__time_putD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $0 = $0|0;
 $1 = $1|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $$$i = 0, $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__ne = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 8|0;
 $__ne = sp;
 $2 = (($__nar) + 400|0);
 HEAP32[$__ne>>2] = $2;
 $3 = (($this) + 8|0);
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($3,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $4 = HEAP32[$__ne>>2]|0;
 $5 = HEAP32[$__s>>2]|0;
 $6 = ($__nar|0)==($4|0);
 if ($6) {
  $23 = $5;
  HEAP32[$agg$result>>2] = $23;
  STACKTOP = sp;return;
 } else {
  $$01$i$i = $__nar;$9 = $5;
 }
 while(1) {
  $7 = HEAP32[$$01$i$i>>2]|0;
  $8 = ($9|0)==(0|0);
  if ($8) {
   $24 = 0;
  } else {
   $10 = (($9) + 24|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($9) + 28|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($11|0)==($13|0);
   if ($14) {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 52|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (FUNCTION_TABLE_iii[$17 & 1023]($9,$7)|0);
    $$0$i$i$i$i = $18;
   } else {
    $19 = (($11) + 4|0);
    HEAP32[$10>>2] = $19;
    HEAP32[$11>>2] = $7;
    $$0$i$i$i$i = $7;
   }
   $20 = ($$0$i$i$i$i|0)==(-1);
   $$$i = $20 ? 0 : $9;
   $24 = $$$i;
  }
  $21 = (($$01$i$i) + 4|0);
  $22 = ($21|0)==($4|0);
  if ($22) {
   $23 = $24;
   break;
  } else {
   $$01$i$i = $21;$9 = $24;
  }
 }
 HEAP32[$agg$result>>2] = $23;
 STACKTOP = sp;return;
}
function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this,$__wb,$__we,$__tm,$__fmt,$__mod) {
 $this = $this|0;
 $__wb = $__wb|0;
 $__we = $__we|0;
 $__tm = $__tm|0;
 $__fmt = $__fmt|0;
 $__mod = $__mod|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__nar = sp + 16|0;
 $__ne = sp + 12|0;
 $mb = sp;
 $__nb = sp + 8|0;
 $0 = (($__nar) + 100|0);
 HEAP32[$__ne>>2] = $0;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this,$__nar,$__ne,$__tm,$__fmt,$__mod);
 $1 = $mb;
 $2 = $1;
 HEAP32[$2>>2] = 0;
 $3 = (($1) + 4)|0;
 $4 = $3;
 HEAP32[$4>>2] = 0;
 HEAP32[$__nb>>2] = $__nar;
 $5 = HEAP32[$__we>>2]|0;
 $6 = $5;
 $7 = $__wb;
 $8 = (($6) - ($7))|0;
 $9 = $8 >> 2;
 $10 = HEAP32[$this>>2]|0;
 $11 = (_uselocale(($10|0))|0);
 __THREW__ = 0;
 $12 = (invoke_iiiii(610,($__wb|0),($__nb|0),($9|0),($mb|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 $14 = $13&1;
 if ($14) {
  $20 = ___cxa_find_matching_catch()|0;
  $21 = tempRet0;
  $22 = ($11|0)==(0|0);
  if ($22) {
   ___resumeException($20|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(611,($11|0))|0);
  $23 = __THREW__; __THREW__ = 0;
  $24 = $23&1;
  if ($24) {
   $25 = ___cxa_find_matching_catch(0|0)|0;
   $26 = tempRet0;
   ___clang_call_terminate($25);
   // unreachable;
  } else {
   ___resumeException($20|0);
   // unreachable;
  }
 }
 $15 = ($11|0)==(0|0);
 if (!($15)) {
  __THREW__ = 0;
  (invoke_ii(611,($11|0))|0);
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  if ($17) {
   $18 = ___cxa_find_matching_catch(0|0)|0;
   $19 = tempRet0;
   ___clang_call_terminate($18);
   // unreachable;
  }
 }
 $27 = ($12|0)==(-1);
 if ($27) {
  __ZNSt3__121__throw_runtime_errorEPKc(13296);
  // unreachable;
 } else {
  $28 = (($__wb) + ($12<<2)|0);
  HEAP32[$__we>>2] = $28;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 127;
}
function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 2147483647;
}
function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result,1,45);
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP8[$agg$result>>0]=67109634&255;HEAP8[$agg$result+1>>0]=(67109634>>8)&255;HEAP8[$agg$result+2>>0]=(67109634>>16)&255;HEAP8[$agg$result+3>>0]=67109634>>24;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$114 = 0, $$115 = 0, $$1212 = 0, $$1213 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 24|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 140|0;
 $__wb = sp + 8|0;
 $__wn = sp + 4|0;
 $__loc = sp + 20|0;
 $__neg = sp + 240|0;
 $0 = sp + 16|0;
 $__atoms = sp + 128|0;
 $__nbuf = sp + 28|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 612;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(457,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $32 = ___cxa_find_matching_catch()|0;
   $33 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$114 = $32;$$1212 = $33;$105 = 612;$106 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(458,($__loc|0),(12416|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L3: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(613,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 32|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(12032|0),(((12032 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(98);
       if ($24) {
        $25 = (($23) + 2)|0;
        $26 = (_malloc($25)|0);
        $27 = ($26|0)==(0|0);
        if ($27) {
         __THREW__ = 0;
         invoke_v(601);
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          $30 = ___cxa_find_matching_catch()|0;
          $31 = tempRet0;
          $$0 = $30;$$01 = $31;
          break;
         } else {
          $38 = 0;$__nc$0 = 0;
         }
        } else {
         $38 = $26;$__nc$0 = $26;
        }
       } else {
        $38 = 0;$__nc$0 = $__nbuf;
       }
       $39 = HEAP8[$__neg>>0]|0;
       $40 = ($39<<24>>24)==(0);
       if ($40) {
        $__nc$1 = $__nc$0;
       } else {
        $41 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $41;
       }
       $42 = ($20>>>0)<($19>>>0);
       if ($42) {
        $43 = (($__atoms) + 10|0);
        $44 = $__atoms;
        $__nc$27 = $__nc$1;$__w$08 = $20;
        while(1) {
         $45 = HEAP8[$__w$08>>0]|0;
         $$01$i = $__atoms;
         while(1) {
          $48 = HEAP8[$$01$i>>0]|0;
          $49 = ($48<<24>>24)==($45<<24>>24);
          $47 = (($$01$i) + 1|0);
          if ($49) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $46 = ($47|0)==($43|0);
          if ($46) {
           $$0$lcssa$i = $43;
           break;
          } else {
           $$01$i = $47;
          }
         }
         $50 = $$0$lcssa$i;
         $51 = (($50) - ($44))|0;
         $52 = (12032 + ($51)|0);
         $53 = HEAP8[$52>>0]|0;
         HEAP8[$__nc$27>>0] = $53;
         $54 = (($__w$08) + 1|0);
         $55 = (($__nc$27) + 1|0);
         $56 = HEAP32[$__wn>>2]|0;
         $57 = ($54>>>0)<($56>>>0);
         if ($57) {
          $__nc$27 = $55;$__w$08 = $54;
         } else {
          $__nc$2$lcssa = $55;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $58 = (_sscanf($__nbuf,12048,$vararg_buffer)|0);
       $59 = ($58|0)==(1);
       if (!($59)) {
        __THREW__ = 0;
        invoke_vi(614,(12056|0));
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         $36 = ___cxa_find_matching_catch()|0;
         $37 = tempRet0;
         _free($38);
         $$0 = $36;$$01 = $37;
         break;
        }
       }
       _free($38);
      }
      $62 = HEAP32[$__b>>2]|0;
      $63 = ($62|0)==(0|0);
      do {
       if ($63) {
        $77 = 0;
       } else {
        $64 = (($62) + 12|0);
        $65 = HEAP32[$64>>2]|0;
        $66 = (($62) + 16|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = ($65|0)==($67|0);
        if ($68) {
         $69 = HEAP32[$62>>2]|0;
         $70 = (($69) + 36|0);
         $71 = HEAP32[$70>>2]|0;
         __THREW__ = 0;
         $72 = (invoke_ii($71|0,($62|0))|0);
         $73 = __THREW__; __THREW__ = 0;
         $74 = $73&1;
         if ($74) {
          label = 11;
          break L3;
         }
         $75 = ($72|0)==(-1);
         if ($75) {
          HEAP32[$__b>>2] = 0;
          $77 = 0;
          break;
         } else {
          $$pre$i$i$i = HEAP32[$__b>>2]|0;
          $77 = $$pre$i$i$i;
          break;
         }
        } else {
         $77 = $62;
        }
       }
      } while(0);
      $76 = ($77|0)==(0|0);
      $78 = HEAP32[$__e>>2]|0;
      $79 = ($78|0)==(0|0);
      do {
       if ($79) {
        label = 36;
       } else {
        $80 = (($78) + 12|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($78) + 16|0);
        $83 = HEAP32[$82>>2]|0;
        $84 = ($81|0)==($83|0);
        if (!($84)) {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
        $85 = HEAP32[$78>>2]|0;
        $86 = (($85) + 36|0);
        $87 = HEAP32[$86>>2]|0;
        __THREW__ = 0;
        $88 = (invoke_ii($87|0,($78|0))|0);
        $89 = __THREW__; __THREW__ = 0;
        $90 = $89&1;
        if ($90) {
         label = 11;
         break L3;
        }
        $91 = ($88|0)==(-1);
        if ($91) {
         HEAP32[$__e>>2] = 0;
         label = 36;
         break;
        } else {
         if ($76) {
          break;
         } else {
          label = 38;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 36) {
       if ($76) {
        label = 38;
       }
      }
      if ((label|0) == 38) {
       $92 = HEAP32[$__err>>2]|0;
       $93 = $92 | 2;
       HEAP32[$__err>>2] = $93;
      }
      $94 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $94;
      $95 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($95)|0);
      $96 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $97 = ($96|0)==(0|0);
      if ($97) {
       STACKTOP = sp;return;
      }
      $98 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($98|0,($96|0));
      $99 = __THREW__; __THREW__ = 0;
      $100 = $99&1;
      if ($100) {
       $101 = ___cxa_find_matching_catch(0|0)|0;
       $102 = tempRet0;
       ___clang_call_terminate($101);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    $$0 = $34;$$01 = $35;
   }
   $103 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($103)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $104 = ($$pre|0)==(0|0);
   if ($104) {
    $$115 = $$0;$$1213 = $$01;
    ___resumeException($$115|0);
    // unreachable;
   } else {
    $$pre17 = HEAP32[$1>>2]|0;
    $$114 = $$0;$$1212 = $$01;$105 = $$pre17;$106 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($105|0,($106|0));
 $107 = __THREW__; __THREW__ = 0;
 $108 = $107&1;
 if ($108) {
  $109 = ___cxa_find_matching_catch(0|0)|0;
  $110 = tempRet0;
  ___clang_call_terminate($109);
  // unreachable;
 } else {
  $$115 = $$114;$$1213 = $$1212;
  ___resumeException($$115|0);
  // unreachable;
 }
}
function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i104 = 0, $$0$i$i111 = 0, $$0$i$i120 = 0, $$0$i$i130 = 0, $$0$i$i147 = 0, $$0$i$i33 = 0, $$0$i$i36 = 0, $$0$i$i49 = 0, $$0$i$i55 = 0, $$0$i$i58 = 0, $$0$i$i65 = 0, $$0$i$i84 = 0, $$0$i$i87 = 0, $$271 = 0, $$272 = 0, $$273 = 0, $$274 = 0;
 var $$275 = 0, $$276 = 0, $$277 = 0, $$278 = 0, $$279 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i134 = 0, $$pre$i$i$i151 = 0, $$pre$i$i$i23 = 0, $$pre$i$i$i39 = 0, $$pre$i$i$i70 = 0, $$pre$i$i$i94 = 0, $$pre$i2$i$i = 0, $$pre$i2$i$i138 = 0, $$pre$i2$i$i155 = 0, $$pre$i2$i$i155249 = 0, $$pre$i2$i$i155250 = 0, $$pre$i2$i$i261$ph = 0, $$pre$i2$i$i261269 = 0;
 var $$pre$i2$i$i43 = 0, $$pre$i2$i$i43240 = 0, $$pre$i2$i$i43242 = 0, $$pre$i2$i$i74 = 0, $$pre$i2$i$i74255$ph = 0, $$pre$i2$i$i74255266 = 0, $$pre$i2$i$i98 = 0, $$pre245 = 0, $$pre247 = 0, $$pre248 = 0, $$pre253 = 0, $$pre257 = 0, $$pre259 = 0, $$sum = 0, $$sum262 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0;
 var $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0;
 var $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0;
 var $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0;
 var $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0;
 var $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0;
 var $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0;
 var $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0;
 var $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0;
 var $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0;
 var $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0;
 var $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0;
 var $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0;
 var $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0;
 var $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0;
 var $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0;
 var $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0;
 var $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0;
 var $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0;
 var $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0;
 var $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0;
 var $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0;
 var $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0;
 var $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0;
 var $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0;
 var $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0;
 var $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0;
 var $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0;
 var $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0;
 var $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0;
 var $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0232 = 0, $__pat = 0, $__psn = 0, $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0234 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $isascii1$i = 0, $isascii1$i128 = 0, $isascii1$i161 = 0, $isascii1$i52 = 0, $isascii1$i63 = 0;
 var $lpad$phi$index = 0, $lpad$phi$index7 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $sext = 0, $sext199 = 0, $sext200 = 0, $sext201 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i100 = 0, $tmp$i$i140 = 0, $tmp$i$i157 = 0, $tmp$i$i45 = 0, $tmp$i$i76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 488|0;
 $__gbuf = sp + 24|0;
 $__gb = sp + 472|0;
 $__gn = sp + 440|0;
 $__ge = sp + 468|0;
 $__pat = sp + 480|0;
 $__dp = sp + 492|0;
 $__ts = sp + 493|0;
 $__grp = sp;
 $__sym = sp + 444|0;
 $__psn = sp + 12|0;
 $__nsn = sp + 456|0;
 $__spaces = sp + 424|0;
 $__fd = sp + 436|0;
 $__et = sp + 484|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 612;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(615,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $69 = ___cxa_find_matching_catch()|0;
   $70 = tempRet0;
   $lpad$phi$index = $69;$lpad$phi$index7 = $70;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__ct) + 8|0);
   $7 = (($__nsn) + 1|0);
   $8 = (($__nsn) + 4|0);
   $9 = (($__nsn) + 8|0);
   $10 = (($__psn) + 1|0);
   $11 = (($__psn) + 4|0);
   $12 = (($__psn) + 8|0);
   $13 = $__flags & 512;
   $14 = ($13|0)!=(0);
   $15 = (($__sym) + 1|0);
   $16 = (($__sym) + 8|0);
   $17 = (($__sym) + 4|0);
   $18 = (($__spaces) + 1|0);
   $19 = (($__spaces) + 8|0);
   $20 = (($__spaces) + 4|0);
   $21 = (($__pat) + 3|0);
   $22 = (($__grp) + 4|0);
   $876 = $__gbuf;$__p$0232 = 0;$__trailing_sign$0234 = 0;
   L3: while(1) {
    $23 = HEAP32[$__b>>2]|0;
    $24 = ($23|0)==(0|0);
    do {
     if ($24) {
      $38 = 0;
     } else {
      $25 = (($23) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = (($23) + 16|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($26|0)==($28|0);
      if ($29) {
       $30 = HEAP32[$23>>2]|0;
       $31 = (($30) + 36|0);
       $32 = HEAP32[$31>>2]|0;
       __THREW__ = 0;
       $33 = (invoke_ii($32|0,($23|0))|0);
       $34 = __THREW__; __THREW__ = 0;
       $35 = $34&1;
       if ($35) {
        label = 24;
        break L3;
       }
       $36 = ($33|0)==(-1);
       if ($36) {
        HEAP32[$__b>>2] = 0;
        $38 = 0;
        break;
       } else {
        $$pre$i$i$i23 = HEAP32[$__b>>2]|0;
        $38 = $$pre$i$i$i23;
        break;
       }
      } else {
       $38 = $23;
      }
     }
    } while(0);
    $37 = ($38|0)==(0|0);
    $39 = HEAP32[$__e>>2]|0;
    $40 = ($39|0)==(0|0);
    do {
     if ($40) {
      label = 15;
     } else {
      $41 = (($39) + 12|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = (($39) + 16|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)==($44|0);
      if (!($45)) {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L3;
       }
      }
      $46 = HEAP32[$39>>2]|0;
      $47 = (($46) + 36|0);
      $48 = HEAP32[$47>>2]|0;
      __THREW__ = 0;
      $49 = (invoke_ii($48|0,($39|0))|0);
      $50 = __THREW__; __THREW__ = 0;
      $51 = $50&1;
      if ($51) {
       label = 24;
       break L3;
      }
      $52 = ($49|0)==(-1);
      if ($52) {
       HEAP32[$__e>>2] = 0;
       label = 15;
       break;
      } else {
       if ($37) {
        $877 = $39;
        break;
       } else {
        $864 = $876;$878 = $39;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
        label = 280;
        break L3;
       }
      }
     }
    } while(0);
    if ((label|0) == 15) {
     label = 0;
     if ($37) {
      $864 = $876;$878 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
      label = 280;
      break;
     } else {
      $877 = 0;
     }
    }
    $53 = (($__pat) + ($__p$0232)|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54 << 24 >> 24;
    L25: do {
     switch ($55|0) {
     case 1:  {
      $cond = ($__p$0232|0)==(3);
      if ($cond) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L3;
      }
      $78 = HEAP32[$__b>>2]|0;
      $79 = (($78) + 12|0);
      $80 = HEAP32[$79>>2]|0;
      $81 = (($78) + 16|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($80|0)==($82|0);
      if ($83) {
       $84 = HEAP32[$78>>2]|0;
       $85 = (($84) + 36|0);
       $86 = HEAP32[$85>>2]|0;
       __THREW__ = 0;
       $87 = (invoke_ii($86|0,($78|0))|0);
       $88 = __THREW__; __THREW__ = 0;
       $89 = $88&1;
       if ($89) {
        label = 24;
        break L3;
       } else {
        $$0$i$i33 = $87;
       }
      } else {
       $90 = HEAP8[$80>>0]|0;
       $91 = $90&255;
       $$0$i$i33 = $91;
      }
      $92 = $$0$i$i33&255;
      $isascii1$i = ($92<<24>>24)>(-1);
      if (!($isascii1$i)) {
       label = 40;
       break L3;
      }
      $sext201 = $$0$i$i33 << 24;
      $93 = $sext201 >> 24;
      $94 = HEAP32[$6>>2]|0;
      $95 = (($94) + ($93<<1)|0);
      $96 = HEAP16[$95>>1]|0;
      $97 = $96 & 8192;
      $98 = ($97<<16>>16)==(0);
      if ($98) {
       label = 40;
       break L3;
      }
      $99 = HEAP32[$__b>>2]|0;
      $100 = (($99) + 12|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = (($99) + 16|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($101|0)==($103|0);
      if ($104) {
       $105 = HEAP32[$99>>2]|0;
       $106 = (($105) + 40|0);
       $107 = HEAP32[$106>>2]|0;
       __THREW__ = 0;
       $108 = (invoke_ii($107|0,($99|0))|0);
       $109 = __THREW__; __THREW__ = 0;
       $110 = $109&1;
       if ($110) {
        label = 24;
        break L3;
       } else {
        $$0$i$i36 = $108;
       }
      } else {
       $111 = (($101) + 1|0);
       HEAP32[$100>>2] = $111;
       $112 = HEAP8[$101>>0]|0;
       $113 = $112&255;
       $$0$i$i36 = $113;
      }
      $114 = $$0$i$i36&255;
      __THREW__ = 0;
      invoke_vii(539,($__spaces|0),($114|0));
      $115 = __THREW__; __THREW__ = 0;
      $116 = $115&1;
      if ($116) {
       label = 24;
       break L3;
      } else {
       label = 41;
      }
      break;
     }
     case 3:  {
      $190 = HEAP8[$__psn>>0]|0;
      $191 = $190 & 1;
      $192 = ($191<<24>>24)==(0);
      if ($192) {
       $194 = $190&255;
       $195 = $194 >>> 1;
       $205 = $195;
      } else {
       $193 = HEAP32[$11>>2]|0;
       $205 = $193;
      }
      $196 = HEAP8[$__nsn>>0]|0;
      $197 = $196 & 1;
      $198 = ($197<<24>>24)==(0);
      if ($198) {
       $200 = $196&255;
       $201 = $200 >>> 1;
       $203 = $201;
      } else {
       $199 = HEAP32[$8>>2]|0;
       $203 = $199;
      }
      $202 = (0 - ($203))|0;
      $204 = ($205|0)==($202|0);
      if ($204) {
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      } else {
       if ($192) {
        $207 = $190&255;
        $208 = $207 >>> 1;
        $210 = $208;
       } else {
        $206 = HEAP32[$11>>2]|0;
        $210 = $206;
       }
       $209 = ($210|0)==(0);
       if (!($209)) {
        if ($198) {
         $212 = $196&255;
         $213 = $212 >>> 1;
         $215 = $213;
        } else {
         $211 = HEAP32[$8>>2]|0;
         $215 = $211;
        }
        $214 = ($215|0)==(0);
        if (!($214)) {
         $297 = HEAP32[$__b>>2]|0;
         $298 = (($297) + 12|0);
         $299 = HEAP32[$298>>2]|0;
         $300 = (($297) + 16|0);
         $301 = HEAP32[$300>>2]|0;
         $302 = ($299|0)==($301|0);
         if ($302) {
          $303 = HEAP32[$297>>2]|0;
          $304 = (($303) + 36|0);
          $305 = HEAP32[$304>>2]|0;
          __THREW__ = 0;
          $306 = (invoke_ii($305|0,($297|0))|0);
          $307 = __THREW__; __THREW__ = 0;
          $308 = $307&1;
          if ($308) {
           label = 24;
           break L3;
          }
          $$pre247 = HEAP8[$__psn>>0]|0;
          $$0$i$i111 = $306;$313 = $$pre247;
         } else {
          $309 = HEAP8[$299>>0]|0;
          $310 = $309&255;
          $$0$i$i111 = $310;$313 = $190;
         }
         $311 = $$0$i$i111&255;
         $312 = $313 & 1;
         $314 = ($312<<24>>24)==(0);
         $315 = HEAP32[$12>>2]|0;
         $$272 = $314 ? $10 : $315;
         $316 = HEAP8[$$272>>0]|0;
         $317 = ($311<<24>>24)==($316<<24>>24);
         $318 = HEAP32[$__b>>2]|0;
         $319 = (($318) + 12|0);
         $320 = HEAP32[$319>>2]|0;
         $321 = (($318) + 16|0);
         $322 = HEAP32[$321>>2]|0;
         $323 = ($320|0)==($322|0);
         if ($317) {
          if ($323) {
           $324 = HEAP32[$318>>2]|0;
           $325 = (($324) + 40|0);
           $326 = HEAP32[$325>>2]|0;
           __THREW__ = 0;
           (invoke_ii($326|0,($318|0))|0);
           $327 = __THREW__; __THREW__ = 0;
           $328 = $327&1;
           if ($328) {
            label = 24;
            break L3;
           }
          } else {
           $329 = (($320) + 1|0);
           HEAP32[$319>>2] = $329;
          }
          $330 = HEAP8[$__psn>>0]|0;
          $331 = $330 & 1;
          $332 = ($331<<24>>24)==(0);
          if ($332) {
           $334 = $330&255;
           $335 = $334 >>> 1;
           $337 = $335;
          } else {
           $333 = HEAP32[$11>>2]|0;
           $337 = $333;
          }
          $336 = ($337>>>0)>(1);
          $__psn$__trailing_sign$09 = $336 ? $__psn : $__trailing_sign$0234;
          $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L25;
         }
         if ($323) {
          $338 = HEAP32[$318>>2]|0;
          $339 = (($338) + 36|0);
          $340 = HEAP32[$339>>2]|0;
          __THREW__ = 0;
          $341 = (invoke_ii($340|0,($318|0))|0);
          $342 = __THREW__; __THREW__ = 0;
          $343 = $342&1;
          if ($343) {
           label = 24;
           break L3;
          } else {
           $$0$i$i120 = $341;
          }
         } else {
          $344 = HEAP8[$320>>0]|0;
          $345 = $344&255;
          $$0$i$i120 = $345;
         }
         $346 = $$0$i$i120&255;
         $347 = HEAP8[$__nsn>>0]|0;
         $348 = $347 & 1;
         $349 = ($348<<24>>24)==(0);
         $350 = HEAP32[$9>>2]|0;
         $$273 = $349 ? $7 : $350;
         $351 = HEAP8[$$273>>0]|0;
         $352 = ($346<<24>>24)==($351<<24>>24);
         if (!($352)) {
          label = 132;
          break L3;
         }
         $353 = HEAP32[$__b>>2]|0;
         $354 = (($353) + 12|0);
         $355 = HEAP32[$354>>2]|0;
         $356 = (($353) + 16|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($355|0)==($357|0);
         if ($358) {
          $359 = HEAP32[$353>>2]|0;
          $360 = (($359) + 40|0);
          $361 = HEAP32[$360>>2]|0;
          __THREW__ = 0;
          (invoke_ii($361|0,($353|0))|0);
          $362 = __THREW__; __THREW__ = 0;
          $363 = $362&1;
          if ($363) {
           label = 24;
           break L3;
          }
         } else {
          $364 = (($355) + 1|0);
          HEAP32[$354>>2] = $364;
         }
         HEAP8[$__neg>>0] = 1;
         $365 = HEAP8[$__nsn>>0]|0;
         $366 = $365 & 1;
         $367 = ($366<<24>>24)==(0);
         if ($367) {
          $369 = $365&255;
          $370 = $369 >>> 1;
          $372 = $370;
         } else {
          $368 = HEAP32[$8>>2]|0;
          $372 = $368;
         }
         $371 = ($372>>>0)>(1);
         $__nsn$__trailing_sign$010 = $371 ? $__nsn : $__trailing_sign$0234;
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L25;
        }
       }
       if ($192) {
        $217 = $190&255;
        $218 = $217 >>> 1;
        $220 = $218;
       } else {
        $216 = HEAP32[$11>>2]|0;
        $220 = $216;
       }
       $219 = ($220|0)==(0);
       $221 = HEAP32[$__b>>2]|0;
       $222 = (($221) + 12|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (($221) + 16|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($223|0)==($225|0);
       if ($219) {
        if ($226) {
         $262 = HEAP32[$221>>2]|0;
         $263 = (($262) + 36|0);
         $264 = HEAP32[$263>>2]|0;
         __THREW__ = 0;
         $265 = (invoke_ii($264|0,($221|0))|0);
         $266 = __THREW__; __THREW__ = 0;
         $267 = $266&1;
         if ($267) {
          label = 24;
          break L3;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i104 = $265;$272 = $$pre;
        } else {
         $268 = HEAP8[$223>>0]|0;
         $269 = $268&255;
         $$0$i$i104 = $269;$272 = $196;
        }
        $270 = $$0$i$i104&255;
        $271 = $272 & 1;
        $273 = ($271<<24>>24)==(0);
        $274 = HEAP32[$9>>2]|0;
        $$271 = $273 ? $7 : $274;
        $275 = HEAP8[$$271>>0]|0;
        $276 = ($270<<24>>24)==($275<<24>>24);
        if (!($276)) {
         $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L25;
        }
        $277 = HEAP32[$__b>>2]|0;
        $278 = (($277) + 12|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = (($277) + 16|0);
        $281 = HEAP32[$280>>2]|0;
        $282 = ($279|0)==($281|0);
        if ($282) {
         $283 = HEAP32[$277>>2]|0;
         $284 = (($283) + 40|0);
         $285 = HEAP32[$284>>2]|0;
         __THREW__ = 0;
         (invoke_ii($285|0,($277|0))|0);
         $286 = __THREW__; __THREW__ = 0;
         $287 = $286&1;
         if ($287) {
          label = 24;
          break L3;
         }
        } else {
         $288 = (($279) + 1|0);
         HEAP32[$278>>2] = $288;
        }
        HEAP8[$__neg>>0] = 1;
        $289 = HEAP8[$__nsn>>0]|0;
        $290 = $289 & 1;
        $291 = ($290<<24>>24)==(0);
        if ($291) {
         $293 = $289&255;
         $294 = $293 >>> 1;
         $296 = $294;
        } else {
         $292 = HEAP32[$8>>2]|0;
         $296 = $292;
        }
        $295 = ($296>>>0)>(1);
        $__nsn$__trailing_sign$0 = $295 ? $__nsn : $__trailing_sign$0234;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L25;
       }
       if ($226) {
        $227 = HEAP32[$221>>2]|0;
        $228 = (($227) + 36|0);
        $229 = HEAP32[$228>>2]|0;
        __THREW__ = 0;
        $230 = (invoke_ii($229|0,($221|0))|0);
        $231 = __THREW__; __THREW__ = 0;
        $232 = $231&1;
        if ($232) {
         label = 24;
         break L3;
        }
        $$pre245 = HEAP8[$__psn>>0]|0;
        $$0$i$i84 = $230;$237 = $$pre245;
       } else {
        $233 = HEAP8[$223>>0]|0;
        $234 = $233&255;
        $$0$i$i84 = $234;$237 = $190;
       }
       $235 = $$0$i$i84&255;
       $236 = $237 & 1;
       $238 = ($236<<24>>24)==(0);
       $239 = HEAP32[$12>>2]|0;
       $$ = $238 ? $10 : $239;
       $240 = HEAP8[$$>>0]|0;
       $241 = ($235<<24>>24)==($240<<24>>24);
       if (!($241)) {
        HEAP8[$__neg>>0] = 1;
        $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L25;
       }
       $242 = HEAP32[$__b>>2]|0;
       $243 = (($242) + 12|0);
       $244 = HEAP32[$243>>2]|0;
       $245 = (($242) + 16|0);
       $246 = HEAP32[$245>>2]|0;
       $247 = ($244|0)==($246|0);
       if ($247) {
        $248 = HEAP32[$242>>2]|0;
        $249 = (($248) + 40|0);
        $250 = HEAP32[$249>>2]|0;
        __THREW__ = 0;
        (invoke_ii($250|0,($242|0))|0);
        $251 = __THREW__; __THREW__ = 0;
        $252 = $251&1;
        if ($252) {
         label = 24;
         break L3;
        }
       } else {
        $253 = (($244) + 1|0);
        HEAP32[$243>>2] = $253;
       }
       $254 = HEAP8[$__psn>>0]|0;
       $255 = $254 & 1;
       $256 = ($255<<24>>24)==(0);
       if ($256) {
        $258 = $254&255;
        $259 = $258 >>> 1;
        $261 = $259;
       } else {
        $257 = HEAP32[$11>>2]|0;
        $261 = $257;
       }
       $260 = ($261>>>0)>(1);
       $__psn$__trailing_sign$0 = $260 ? $__psn : $__trailing_sign$0234;
       $879 = $877;$880 = $876;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 2:  {
      $375 = ($__trailing_sign$0234|0)!=(0|0);
      $376 = ($__p$0232>>>0)<(2);
      $or$cond = $375 | $376;
      if (!($or$cond)) {
       $377 = ($__p$0232|0)==(2);
       if ($377) {
        $378 = HEAP8[$21>>0]|0;
        $379 = ($378<<24>>24)!=(0);
        $380 = $379;
       } else {
        $380 = 0;
       }
       $brmerge = $14 | $380;
       if (!($brmerge)) {
        $879 = $877;$880 = $876;$__trailing_sign$1 = 0;
        break L25;
       }
      }
      $381 = HEAP8[$__sym>>0]|0;
      $382 = $381 & 1;
      $383 = ($382<<24>>24)==(0);
      $384 = HEAP32[$16>>2]|0;
      $$274 = $383 ? $15 : $384;
      $385 = ($__p$0232|0)==(0);
      L133: do {
       if ($385) {
        $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
       } else {
        $386 = (($__p$0232) + -1)|0;
        $387 = (($__pat) + ($386)|0);
        $388 = HEAP8[$387>>0]|0;
        $switch = ($388&255)<(2);
        if ($switch) {
         $389 = $381&255;
         $390 = $389 >>> 1;
         $391 = HEAP32[$16>>2]|0;
         $392 = HEAP32[$17>>2]|0;
         $395 = $$274;
         while(1) {
          $$275 = $383 ? $15 : $391;
          $$276 = $383 ? $390 : $392;
          $393 = (($$275) + ($$276)|0);
          $394 = ($395|0)==($393|0);
          if ($394) {
           break;
          }
          $396 = HEAP8[$395>>0]|0;
          $isascii1$i161 = ($396<<24>>24)>(-1);
          if (!($isascii1$i161)) {
           break;
          }
          $397 = $396 << 24 >> 24;
          $398 = HEAP32[$6>>2]|0;
          $399 = (($398) + ($397<<1)|0);
          $400 = HEAP16[$399>>1]|0;
          $401 = $400 & 8192;
          $402 = ($401<<16>>16)==(0);
          $403 = (($395) + 1|0);
          if ($402) {
           break;
          } else {
           $395 = $403;
          }
         }
         $$277 = $383 ? $15 : $391;
         $404 = $395;
         $405 = $$277;
         $406 = (($404) - ($405))|0;
         $407 = HEAP8[$__spaces>>0]|0;
         $408 = $407 & 1;
         $409 = ($408<<24>>24)==(0);
         if ($409) {
          $411 = $407&255;
          $412 = $411 >>> 1;
          $414 = $412;
         } else {
          $410 = HEAP32[$20>>2]|0;
          $414 = $410;
         }
         $413 = ($406>>>0)>($414>>>0);
         L145: do {
          if (!($413)) {
           if ($409) {
            $418 = $407&255;
            $419 = $418 >>> 1;
            $$sum262 = (($419) - ($406))|0;
            $420 = ((($__spaces) + ($$sum262)|0) + 1|0);
            $421 = $407&255;
            $422 = $421 >>> 1;
            $424 = $18;$425 = $422;$427 = $420;
           } else {
            $415 = HEAP32[$19>>2]|0;
            $416 = HEAP32[$20>>2]|0;
            $$sum = (($416) - ($406))|0;
            $417 = (($415) + ($$sum)|0);
            $424 = $415;$425 = $416;$427 = $417;
           }
           $423 = (($424) + ($425)|0);
           $$278 = $383 ? $15 : $391;
           $426 = ($427|0)==($423|0);
           if ($426) {
            $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
            break L133;
           } else {
            $429 = $427;$431 = $$278;
           }
           while(1) {
            $428 = HEAP8[$429>>0]|0;
            $430 = HEAP8[$431>>0]|0;
            $432 = ($428<<24>>24)==($430<<24>>24);
            if (!($432)) {
             break L145;
            }
            $433 = (($429) + 1|0);
            $434 = (($431) + 1|0);
            $435 = ($433|0)==($423|0);
            if ($435) {
             $$pre$i2$i$i155 = $877;$437 = $381;$447 = $395;$465 = $877;
             break L133;
            } else {
             $429 = $433;$431 = $434;
            }
           }
          }
         } while(0);
         $$279 = $383 ? $15 : $391;
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$279;$465 = $877;
        } else {
         $$pre$i2$i$i155 = $877;$437 = $381;$447 = $$274;$465 = $877;
        }
       }
      } while(0);
      L155: while(1) {
       $436 = $437 & 1;
       $438 = ($436<<24>>24)==(0);
       if ($438) {
        $441 = $437&255;
        $442 = $441 >>> 1;
        $444 = $15;$445 = $442;
       } else {
        $439 = HEAP32[$16>>2]|0;
        $440 = HEAP32[$17>>2]|0;
        $444 = $439;$445 = $440;
       }
       $443 = (($444) + ($445)|0);
       $446 = ($447|0)==($443|0);
       if ($446) {
        $882 = $$pre$i2$i$i155;
        break;
       }
       $448 = HEAP32[$__b>>2]|0;
       $449 = ($448|0)==(0|0);
       do {
        if ($449) {
         $463 = 0;
        } else {
         $450 = (($448) + 12|0);
         $451 = HEAP32[$450>>2]|0;
         $452 = (($448) + 16|0);
         $453 = HEAP32[$452>>2]|0;
         $454 = ($451|0)==($453|0);
         if ($454) {
          $455 = HEAP32[$448>>2]|0;
          $456 = (($455) + 36|0);
          $457 = HEAP32[$456>>2]|0;
          __THREW__ = 0;
          $458 = (invoke_ii($457|0,($448|0))|0);
          $459 = __THREW__; __THREW__ = 0;
          $460 = $459&1;
          if ($460) {
           label = 22;
           break L3;
          }
          $461 = ($458|0)==(-1);
          if ($461) {
           HEAP32[$__b>>2] = 0;
           $463 = 0;
           break;
          } else {
           $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
           $463 = $$pre$i$i$i151;
           break;
          }
         } else {
          $463 = $448;
         }
        }
       } while(0);
       $462 = ($463|0)==(0|0);
       $464 = ($465|0)==(0|0);
       do {
        if ($464) {
         $$pre$i2$i$i155250 = $$pre$i2$i$i155;
         label = 170;
        } else {
         $466 = (($465) + 12|0);
         $467 = HEAP32[$466>>2]|0;
         $468 = (($465) + 16|0);
         $469 = HEAP32[$468>>2]|0;
         $470 = ($467|0)==($469|0);
         if (!($470)) {
          if ($462) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $465;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L155;
          }
         }
         $471 = HEAP32[$465>>2]|0;
         $472 = (($471) + 36|0);
         $473 = HEAP32[$472>>2]|0;
         __THREW__ = 0;
         $474 = (invoke_ii($473|0,($465|0))|0);
         $475 = __THREW__; __THREW__ = 0;
         $476 = $475&1;
         if ($476) {
          label = 22;
          break L3;
         }
         $477 = ($474|0)==(-1);
         if ($477) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i155250 = 0;
          label = 170;
          break;
         } else {
          $478 = ($$pre$i2$i$i155|0)==(0|0);
          $tmp$i$i157 = $462 ^ $478;
          if ($tmp$i$i157) {
           $$pre$i2$i$i155249 = $$pre$i2$i$i155;$883 = $$pre$i2$i$i155;
           break;
          } else {
           $882 = $$pre$i2$i$i155;
           break L155;
          }
         }
        }
       } while(0);
       if ((label|0) == 170) {
        label = 0;
        if ($462) {
         $882 = $$pre$i2$i$i155250;
         break;
        } else {
         $$pre$i2$i$i155249 = $$pre$i2$i$i155250;$883 = 0;
        }
       }
       $479 = HEAP32[$__b>>2]|0;
       $480 = (($479) + 12|0);
       $481 = HEAP32[$480>>2]|0;
       $482 = (($479) + 16|0);
       $483 = HEAP32[$482>>2]|0;
       $484 = ($481|0)==($483|0);
       if ($484) {
        $485 = HEAP32[$479>>2]|0;
        $486 = (($485) + 36|0);
        $487 = HEAP32[$486>>2]|0;
        __THREW__ = 0;
        $488 = (invoke_ii($487|0,($479|0))|0);
        $489 = __THREW__; __THREW__ = 0;
        $490 = $489&1;
        if ($490) {
         label = 22;
         break L3;
        } else {
         $$0$i$i147 = $488;
        }
       } else {
        $491 = HEAP8[$481>>0]|0;
        $492 = $491&255;
        $$0$i$i147 = $492;
       }
       $493 = $$0$i$i147&255;
       $494 = HEAP8[$447>>0]|0;
       $495 = ($493<<24>>24)==($494<<24>>24);
       if (!($495)) {
        $882 = $$pre$i2$i$i155249;
        break;
       }
       $496 = HEAP32[$__b>>2]|0;
       $497 = (($496) + 12|0);
       $498 = HEAP32[$497>>2]|0;
       $499 = (($496) + 16|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ($498|0)==($500|0);
       if ($501) {
        $502 = HEAP32[$496>>2]|0;
        $503 = (($502) + 40|0);
        $504 = HEAP32[$503>>2]|0;
        __THREW__ = 0;
        (invoke_ii($504|0,($496|0))|0);
        $505 = __THREW__; __THREW__ = 0;
        $506 = $505&1;
        if ($506) {
         label = 22;
         break L3;
        }
       } else {
        $507 = (($498) + 1|0);
        HEAP32[$497>>2] = $507;
       }
       $508 = (($447) + 1|0);
       $$pre248 = HEAP8[$__sym>>0]|0;
       $$pre$i2$i$i155 = $$pre$i2$i$i155249;$437 = $$pre248;$447 = $508;$465 = $883;
      }
      if ($14) {
       $509 = HEAP8[$__sym>>0]|0;
       $510 = $509 & 1;
       $511 = ($510<<24>>24)==(0);
       if ($511) {
        $514 = $509&255;
        $515 = $514 >>> 1;
        $517 = $15;$518 = $515;
       } else {
        $512 = HEAP32[$16>>2]|0;
        $513 = HEAP32[$17>>2]|0;
        $517 = $512;$518 = $513;
       }
       $516 = (($517) + ($518)|0);
       $519 = ($447|0)==($516|0);
       if ($519) {
        $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
       } else {
        label = 185;
        break L3;
       }
      } else {
       $879 = $882;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 4:  {
      $56 = HEAP8[$__ts>>0]|0;
      $$pre$i2$i$i138 = $877;$539 = $877;$594 = $876;$__ng$0 = 0;
      L198: while(1) {
       $522 = HEAP32[$__b>>2]|0;
       $523 = ($522|0)==(0|0);
       do {
        if ($523) {
         $537 = 0;
        } else {
         $524 = (($522) + 12|0);
         $525 = HEAP32[$524>>2]|0;
         $526 = (($522) + 16|0);
         $527 = HEAP32[$526>>2]|0;
         $528 = ($525|0)==($527|0);
         if ($528) {
          $529 = HEAP32[$522>>2]|0;
          $530 = (($529) + 36|0);
          $531 = HEAP32[$530>>2]|0;
          __THREW__ = 0;
          $532 = (invoke_ii($531|0,($522|0))|0);
          $533 = __THREW__; __THREW__ = 0;
          $534 = $533&1;
          if ($534) {
           label = 20;
           break L3;
          }
          $535 = ($532|0)==(-1);
          if ($535) {
           HEAP32[$__b>>2] = 0;
           $537 = 0;
           break;
          } else {
           $$pre$i$i$i134 = HEAP32[$__b>>2]|0;
           $537 = $$pre$i$i$i134;
           break;
          }
         } else {
          $537 = $522;
         }
        }
       } while(0);
       $536 = ($537|0)==(0|0);
       $538 = ($539|0)==(0|0);
       do {
        if ($538) {
         $884 = $$pre$i2$i$i138;
         label = 198;
        } else {
         $540 = (($539) + 12|0);
         $541 = HEAP32[$540>>2]|0;
         $542 = (($539) + 16|0);
         $543 = HEAP32[$542>>2]|0;
         $544 = ($541|0)==($543|0);
         if (!($544)) {
          if ($536) {
           $885 = $$pre$i2$i$i138;$886 = $539;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L198;
          }
         }
         $545 = HEAP32[$539>>2]|0;
         $546 = (($545) + 36|0);
         $547 = HEAP32[$546>>2]|0;
         __THREW__ = 0;
         $548 = (invoke_ii($547|0,($539|0))|0);
         $549 = __THREW__; __THREW__ = 0;
         $550 = $549&1;
         if ($550) {
          label = 20;
          break L3;
         }
         $551 = ($548|0)==(-1);
         if ($551) {
          HEAP32[$__e>>2] = 0;
          $884 = 0;
          label = 198;
          break;
         } else {
          $552 = ($$pre$i2$i$i138|0)==(0|0);
          $tmp$i$i140 = $536 ^ $552;
          if ($tmp$i$i140) {
           $885 = $$pre$i2$i$i138;$886 = $$pre$i2$i$i138;
           break;
          } else {
           $$pre$i2$i$i98 = $$pre$i2$i$i138;
           break L198;
          }
         }
        }
       } while(0);
       if ((label|0) == 198) {
        label = 0;
        if ($536) {
         $$pre$i2$i$i98 = $884;
         break;
        } else {
         $885 = $884;$886 = 0;
        }
       }
       $553 = HEAP32[$__b>>2]|0;
       $554 = (($553) + 12|0);
       $555 = HEAP32[$554>>2]|0;
       $556 = (($553) + 16|0);
       $557 = HEAP32[$556>>2]|0;
       $558 = ($555|0)==($557|0);
       if ($558) {
        $559 = HEAP32[$553>>2]|0;
        $560 = (($559) + 36|0);
        $561 = HEAP32[$560>>2]|0;
        __THREW__ = 0;
        $562 = (invoke_ii($561|0,($553|0))|0);
        $563 = __THREW__; __THREW__ = 0;
        $564 = $563&1;
        if ($564) {
         label = 20;
         break L3;
        } else {
         $$0$i$i130 = $562;
        }
       } else {
        $565 = HEAP8[$555>>0]|0;
        $566 = $565&255;
        $$0$i$i130 = $566;
       }
       $567 = $$0$i$i130&255;
       $isascii1$i128 = ($567<<24>>24)>(-1);
       if ($isascii1$i128) {
        $sext199 = $$0$i$i130 << 24;
        $568 = $sext199 >> 24;
        $569 = HEAP32[$6>>2]|0;
        $570 = (($569) + ($568<<1)|0);
        $571 = HEAP16[$570>>1]|0;
        $572 = $571 & 2048;
        $573 = ($572<<16>>16)==(0);
        if ($573) {
         label = 209;
        } else {
         $574 = HEAP32[$__wn>>2]|0;
         $575 = HEAP32[$0>>2]|0;
         $576 = ($574|0)==($575|0);
         if ($576) {
          __THREW__ = 0;
          invoke_viii(616,($__wb|0),($__wn|0),($0|0));
          $577 = __THREW__; __THREW__ = 0;
          $578 = $577&1;
          if ($578) {
           label = 20;
           break L3;
          }
          $$pre257 = HEAP32[$__wn>>2]|0;
          $580 = $$pre257;
         } else {
          $580 = $574;
         }
         $579 = (($580) + 1|0);
         HEAP32[$__wn>>2] = $579;
         HEAP8[$580>>0] = $567;
         $581 = (($__ng$0) + 1)|0;
         $887 = $594;$__ng$1 = $581;
        }
       } else {
        label = 209;
       }
       if ((label|0) == 209) {
        label = 0;
        $582 = HEAP8[$__grp>>0]|0;
        $583 = $582 & 1;
        $584 = ($583<<24>>24)==(0);
        if ($584) {
         $586 = $582&255;
         $587 = $586 >>> 1;
         $589 = $587;
        } else {
         $585 = HEAP32[$22>>2]|0;
         $589 = $585;
        }
        $588 = ($589|0)!=(0);
        $590 = ($__ng$0|0)!=(0);
        $or$cond6 = $588 & $590;
        $591 = ($567<<24>>24)==($56<<24>>24);
        $or$cond12 = $or$cond6 & $591;
        if (!($or$cond12)) {
         $$pre$i2$i$i98 = $885;
         break;
        }
        $592 = HEAP32[$__ge>>2]|0;
        $593 = ($594|0)==($592|0);
        if ($593) {
         __THREW__ = 0;
         invoke_viii(617,($__gb|0),($__gn|0),($__ge|0));
         $595 = __THREW__; __THREW__ = 0;
         $596 = $595&1;
         if ($596) {
          label = 20;
          break L3;
         }
         $$pre259 = HEAP32[$__gn>>2]|0;
         $598 = $$pre259;
        } else {
         $598 = $594;
        }
        $597 = (($598) + 4|0);
        HEAP32[$__gn>>2] = $597;
        HEAP32[$598>>2] = $__ng$0;
        $887 = $597;$__ng$1 = 0;
       }
       $599 = HEAP32[$__b>>2]|0;
       $600 = (($599) + 12|0);
       $601 = HEAP32[$600>>2]|0;
       $602 = (($599) + 16|0);
       $603 = HEAP32[$602>>2]|0;
       $604 = ($601|0)==($603|0);
       if ($604) {
        $605 = HEAP32[$599>>2]|0;
        $606 = (($605) + 40|0);
        $607 = HEAP32[$606>>2]|0;
        __THREW__ = 0;
        (invoke_ii($607|0,($599|0))|0);
        $608 = __THREW__; __THREW__ = 0;
        $609 = $608&1;
        if ($609) {
         label = 20;
         break L3;
        } else {
         $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $610 = (($601) + 1|0);
        HEAP32[$600>>2] = $610;
        $$pre$i2$i$i138 = $885;$539 = $886;$594 = $887;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $611 = HEAP32[$__gb>>2]|0;
      $612 = ($611|0)!=($594|0);
      $613 = ($__ng$0|0)!=(0);
      $or$cond8 = $612 & $613;
      if ($or$cond8) {
       $614 = HEAP32[$__ge>>2]|0;
       $615 = ($594|0)==($614|0);
       if ($615) {
        __THREW__ = 0;
        invoke_viii(617,($__gb|0),($__gn|0),($__ge|0));
        $616 = __THREW__; __THREW__ = 0;
        $617 = $616&1;
        if ($617) {
         label = 24;
         break L3;
        }
        $$pre253 = HEAP32[$__gn>>2]|0;
        $619 = $$pre253;
       } else {
        $619 = $594;
       }
       $618 = (($619) + 4|0);
       HEAP32[$__gn>>2] = $618;
       HEAP32[$619>>2] = $__ng$0;
       $888 = $618;
      } else {
       $888 = $594;
      }
      $620 = HEAP32[$__fd>>2]|0;
      $621 = ($620|0)>(0);
      if ($621) {
       $622 = HEAP32[$__b>>2]|0;
       $623 = ($622|0)==(0|0);
       do {
        if ($623) {
         $637 = 0;
        } else {
         $624 = (($622) + 12|0);
         $625 = HEAP32[$624>>2]|0;
         $626 = (($622) + 16|0);
         $627 = HEAP32[$626>>2]|0;
         $628 = ($625|0)==($627|0);
         if ($628) {
          $629 = HEAP32[$622>>2]|0;
          $630 = (($629) + 36|0);
          $631 = HEAP32[$630>>2]|0;
          __THREW__ = 0;
          $632 = (invoke_ii($631|0,($622|0))|0);
          $633 = __THREW__; __THREW__ = 0;
          $634 = $633&1;
          if ($634) {
           label = 24;
           break L3;
          }
          $635 = ($632|0)==(-1);
          if ($635) {
           HEAP32[$__b>>2] = 0;
           $637 = 0;
           break;
          } else {
           $$pre$i$i$i94 = HEAP32[$__b>>2]|0;
           $637 = $$pre$i$i$i94;
           break;
          }
         } else {
          $637 = $622;
         }
        }
       } while(0);
       $636 = ($637|0)==(0|0);
       $638 = ($$pre$i2$i$i98|0)==(0|0);
       do {
        if ($638) {
         label = 238;
        } else {
         $639 = (($$pre$i2$i$i98) + 12|0);
         $640 = HEAP32[$639>>2]|0;
         $641 = (($$pre$i2$i$i98) + 16|0);
         $642 = HEAP32[$641>>2]|0;
         $643 = ($640|0)==($642|0);
         if (!($643)) {
          if ($636) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
         $644 = HEAP32[$$pre$i2$i$i98>>2]|0;
         $645 = (($644) + 36|0);
         $646 = HEAP32[$645>>2]|0;
         __THREW__ = 0;
         $647 = (invoke_ii($646|0,($$pre$i2$i$i98|0))|0);
         $648 = __THREW__; __THREW__ = 0;
         $649 = $648&1;
         if ($649) {
          label = 24;
          break L3;
         }
         $650 = ($647|0)==(-1);
         if ($650) {
          HEAP32[$__e>>2] = 0;
          label = 238;
          break;
         } else {
          $651 = ($$pre$i2$i$i98|0)==(0|0);
          $tmp$i$i100 = $636 ^ $651;
          if ($tmp$i$i100) {
           $890 = $$pre$i2$i$i98;
           break;
          } else {
           label = 244;
           break L3;
          }
         }
        }
       } while(0);
       if ((label|0) == 238) {
        label = 0;
        if ($636) {
         label = 244;
         break L3;
        } else {
         $890 = 0;
        }
       }
       $652 = HEAP32[$__b>>2]|0;
       $653 = (($652) + 12|0);
       $654 = HEAP32[$653>>2]|0;
       $655 = (($652) + 16|0);
       $656 = HEAP32[$655>>2]|0;
       $657 = ($654|0)==($656|0);
       if ($657) {
        $658 = HEAP32[$652>>2]|0;
        $659 = (($658) + 36|0);
        $660 = HEAP32[$659>>2]|0;
        __THREW__ = 0;
        $661 = (invoke_ii($660|0,($652|0))|0);
        $662 = __THREW__; __THREW__ = 0;
        $663 = $662&1;
        if ($663) {
         label = 24;
         break L3;
        } else {
         $$0$i$i87 = $661;
        }
       } else {
        $664 = HEAP8[$654>>0]|0;
        $665 = $664&255;
        $$0$i$i87 = $665;
       }
       $666 = $$0$i$i87&255;
       $667 = HEAP8[$__dp>>0]|0;
       $668 = ($666<<24>>24)==($667<<24>>24);
       if (!($668)) {
        label = 244;
        break L3;
       }
       $671 = HEAP32[$__b>>2]|0;
       $672 = (($671) + 12|0);
       $673 = HEAP32[$672>>2]|0;
       $674 = (($671) + 16|0);
       $675 = HEAP32[$674>>2]|0;
       $676 = ($673|0)==($675|0);
       if ($676) {
        $677 = HEAP32[$671>>2]|0;
        $678 = (($677) + 40|0);
        $679 = HEAP32[$678>>2]|0;
        __THREW__ = 0;
        (invoke_ii($679|0,($671|0))|0);
        $680 = __THREW__; __THREW__ = 0;
        $681 = $680&1;
        if ($681) {
         label = 24;
         break L3;
        } else {
         $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
        }
       } else {
        $682 = (($673) + 1|0);
        HEAP32[$672>>2] = $682;
        $$pre$i2$i$i74 = $890;$700 = $890;$760 = $620;
       }
       while(1) {
        $683 = HEAP32[$__b>>2]|0;
        $684 = ($683|0)==(0|0);
        do {
         if ($684) {
          $698 = 0;
         } else {
          $685 = (($683) + 12|0);
          $686 = HEAP32[$685>>2]|0;
          $687 = (($683) + 16|0);
          $688 = HEAP32[$687>>2]|0;
          $689 = ($686|0)==($688|0);
          if ($689) {
           $690 = HEAP32[$683>>2]|0;
           $691 = (($690) + 36|0);
           $692 = HEAP32[$691>>2]|0;
           __THREW__ = 0;
           $693 = (invoke_ii($692|0,($683|0))|0);
           $694 = __THREW__; __THREW__ = 0;
           $695 = $694&1;
           if ($695) {
            label = 21;
            break L3;
           }
           $696 = ($693|0)==(-1);
           if ($696) {
            HEAP32[$__b>>2] = 0;
            $698 = 0;
            break;
           } else {
            $$pre$i$i$i70 = HEAP32[$__b>>2]|0;
            $698 = $$pre$i$i$i70;
            break;
           }
          } else {
           $698 = $683;
          }
         }
        } while(0);
        $697 = ($698|0)==(0|0);
        $699 = ($700|0)==(0|0);
        do {
         if ($699) {
          $$pre$i2$i$i74255$ph = $$pre$i2$i$i74;
          label = 260;
         } else {
          $701 = (($700) + 12|0);
          $702 = HEAP32[$701>>2]|0;
          $703 = (($700) + 16|0);
          $704 = HEAP32[$703>>2]|0;
          $705 = ($702|0)==($704|0);
          if (!($705)) {
           if ($697) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $700;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
          $706 = HEAP32[$700>>2]|0;
          $707 = (($706) + 36|0);
          $708 = HEAP32[$707>>2]|0;
          __THREW__ = 0;
          $709 = (invoke_ii($708|0,($700|0))|0);
          $710 = __THREW__; __THREW__ = 0;
          $711 = $710&1;
          if ($711) {
           label = 21;
           break L3;
          }
          $712 = ($709|0)==(-1);
          if ($712) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i74255$ph = 0;
           label = 260;
           break;
          } else {
           $713 = ($$pre$i2$i$i74|0)==(0|0);
           $tmp$i$i76 = $697 ^ $713;
           if ($tmp$i$i76) {
            $$pre$i2$i$i74255266 = $$pre$i2$i$i74;$891 = $$pre$i2$i$i74;
            break;
           } else {
            label = 267;
            break L3;
           }
          }
         }
        } while(0);
        if ((label|0) == 260) {
         label = 0;
         if ($697) {
          label = 267;
          break L3;
         } else {
          $$pre$i2$i$i74255266 = $$pre$i2$i$i74255$ph;$891 = 0;
         }
        }
        $714 = HEAP32[$__b>>2]|0;
        $715 = (($714) + 12|0);
        $716 = HEAP32[$715>>2]|0;
        $717 = (($714) + 16|0);
        $718 = HEAP32[$717>>2]|0;
        $719 = ($716|0)==($718|0);
        if ($719) {
         $720 = HEAP32[$714>>2]|0;
         $721 = (($720) + 36|0);
         $722 = HEAP32[$721>>2]|0;
         __THREW__ = 0;
         $723 = (invoke_ii($722|0,($714|0))|0);
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 21;
          break L3;
         } else {
          $$0$i$i65 = $723;
         }
        } else {
         $726 = HEAP8[$716>>0]|0;
         $727 = $726&255;
         $$0$i$i65 = $727;
        }
        $728 = $$0$i$i65&255;
        $isascii1$i63 = ($728<<24>>24)>(-1);
        if (!($isascii1$i63)) {
         label = 267;
         break L3;
        }
        $sext = $$0$i$i65 << 24;
        $729 = $sext >> 24;
        $730 = HEAP32[$6>>2]|0;
        $731 = (($730) + ($729<<1)|0);
        $732 = HEAP16[$731>>1]|0;
        $733 = $732 & 2048;
        $734 = ($733<<16>>16)==(0);
        if ($734) {
         label = 267;
         break L3;
        }
        $737 = HEAP32[$__wn>>2]|0;
        $738 = HEAP32[$0>>2]|0;
        $739 = ($737|0)==($738|0);
        if ($739) {
         __THREW__ = 0;
         invoke_viii(616,($__wb|0),($__wn|0),($0|0));
         $740 = __THREW__; __THREW__ = 0;
         $741 = $740&1;
         if ($741) {
          label = 21;
          break L3;
         }
        }
        $742 = HEAP32[$__b>>2]|0;
        $743 = (($742) + 12|0);
        $744 = HEAP32[$743>>2]|0;
        $745 = (($742) + 16|0);
        $746 = HEAP32[$745>>2]|0;
        $747 = ($744|0)==($746|0);
        if ($747) {
         $748 = HEAP32[$742>>2]|0;
         $749 = (($748) + 36|0);
         $750 = HEAP32[$749>>2]|0;
         __THREW__ = 0;
         $751 = (invoke_ii($750|0,($742|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 21;
          break L3;
         } else {
          $$0$i$i58 = $751;
         }
        } else {
         $754 = HEAP8[$744>>0]|0;
         $755 = $754&255;
         $$0$i$i58 = $755;
        }
        $756 = $$0$i$i58&255;
        $757 = HEAP32[$__wn>>2]|0;
        $758 = (($757) + 1|0);
        HEAP32[$__wn>>2] = $758;
        HEAP8[$757>>0] = $756;
        $759 = (($760) + -1)|0;
        HEAP32[$__fd>>2] = $759;
        $761 = HEAP32[$__b>>2]|0;
        $762 = (($761) + 12|0);
        $763 = HEAP32[$762>>2]|0;
        $764 = (($761) + 16|0);
        $765 = HEAP32[$764>>2]|0;
        $766 = ($763|0)==($765|0);
        if ($766) {
         $767 = HEAP32[$761>>2]|0;
         $768 = (($767) + 40|0);
         $769 = HEAP32[$768>>2]|0;
         __THREW__ = 0;
         (invoke_ii($769|0,($761|0))|0);
         $770 = __THREW__; __THREW__ = 0;
         $771 = $770&1;
         if ($771) {
          label = 21;
          break L3;
         }
        } else {
         $773 = (($763) + 1|0);
         HEAP32[$762>>2] = $773;
        }
        $772 = ($759|0)>(0);
        if ($772) {
         $$pre$i2$i$i74 = $$pre$i2$i$i74255266;$700 = $891;$760 = $759;
        } else {
         $889 = $$pre$i2$i$i74255266;
         break;
        }
       }
      } else {
       $889 = $$pre$i2$i$i98;
      }
      $774 = HEAP32[$__wn>>2]|0;
      $775 = HEAP32[$__wb>>2]|0;
      $776 = ($774|0)==($775|0);
      if ($776) {
       label = 278;
       break L3;
      } else {
       $879 = $889;$880 = $888;$__trailing_sign$1 = $__trailing_sign$0234;
      }
      break;
     }
     case 0:  {
      label = 41;
      break;
     }
     default: {
      $879 = $877;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
     }
     }
    } while(0);
    L324: do {
     if ((label|0) == 41) {
      label = 0;
      $119 = ($__p$0232|0)==(3);
      if ($119) {
       $864 = $876;$878 = $877;$__trailing_sign$0$lcssa = $__trailing_sign$0234;
       label = 280;
       break L3;
      } else {
       $$pre$i2$i$i43 = $877;$137 = $877;
      }
      while(1) {
       $120 = HEAP32[$__b>>2]|0;
       $121 = ($120|0)==(0|0);
       do {
        if ($121) {
         $135 = 0;
        } else {
         $122 = (($120) + 12|0);
         $123 = HEAP32[$122>>2]|0;
         $124 = (($120) + 16|0);
         $125 = HEAP32[$124>>2]|0;
         $126 = ($123|0)==($125|0);
         if ($126) {
          $127 = HEAP32[$120>>2]|0;
          $128 = (($127) + 36|0);
          $129 = HEAP32[$128>>2]|0;
          __THREW__ = 0;
          $130 = (invoke_ii($129|0,($120|0))|0);
          $131 = __THREW__; __THREW__ = 0;
          $132 = $131&1;
          if ($132) {
           label = 23;
           break L3;
          }
          $133 = ($130|0)==(-1);
          if ($133) {
           HEAP32[$__b>>2] = 0;
           $135 = 0;
           break;
          } else {
           $$pre$i$i$i39 = HEAP32[$__b>>2]|0;
           $135 = $$pre$i$i$i39;
           break;
          }
         } else {
          $135 = $120;
         }
        }
       } while(0);
       $134 = ($135|0)==(0|0);
       $136 = ($137|0)==(0|0);
       do {
        if ($136) {
         $$pre$i2$i$i43240 = $$pre$i2$i$i43;
         label = 54;
        } else {
         $138 = (($137) + 12|0);
         $139 = HEAP32[$138>>2]|0;
         $140 = (($137) + 16|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = ($139|0)==($141|0);
         if (!($142)) {
          if ($134) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $137;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L324;
          }
         }
         $143 = HEAP32[$137>>2]|0;
         $144 = (($143) + 36|0);
         $145 = HEAP32[$144>>2]|0;
         __THREW__ = 0;
         $146 = (invoke_ii($145|0,($137|0))|0);
         $147 = __THREW__; __THREW__ = 0;
         $148 = $147&1;
         if ($148) {
          label = 23;
          break L3;
         }
         $149 = ($146|0)==(-1);
         if ($149) {
          HEAP32[$__e>>2] = 0;
          $$pre$i2$i$i43240 = 0;
          label = 54;
          break;
         } else {
          $150 = ($$pre$i2$i$i43|0)==(0|0);
          $tmp$i$i45 = $134 ^ $150;
          if ($tmp$i$i45) {
           $$pre$i2$i$i43242 = $$pre$i2$i$i43;$881 = $$pre$i2$i$i43;
           break;
          } else {
           $879 = $$pre$i2$i$i43;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
           break L324;
          }
         }
        }
       } while(0);
       if ((label|0) == 54) {
        label = 0;
        if ($134) {
         $879 = $$pre$i2$i$i43240;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
         break L324;
        } else {
         $$pre$i2$i$i43242 = $$pre$i2$i$i43240;$881 = 0;
        }
       }
       $151 = HEAP32[$__b>>2]|0;
       $152 = (($151) + 12|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($151) + 16|0);
       $155 = HEAP32[$154>>2]|0;
       $156 = ($153|0)==($155|0);
       if ($156) {
        $157 = HEAP32[$151>>2]|0;
        $158 = (($157) + 36|0);
        $159 = HEAP32[$158>>2]|0;
        __THREW__ = 0;
        $160 = (invoke_ii($159|0,($151|0))|0);
        $161 = __THREW__; __THREW__ = 0;
        $162 = $161&1;
        if ($162) {
         label = 23;
         break L3;
        } else {
         $$0$i$i49 = $160;
        }
       } else {
        $163 = HEAP8[$153>>0]|0;
        $164 = $163&255;
        $$0$i$i49 = $164;
       }
       $165 = $$0$i$i49&255;
       $isascii1$i52 = ($165<<24>>24)>(-1);
       if (!($isascii1$i52)) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L324;
       }
       $sext200 = $$0$i$i49 << 24;
       $166 = $sext200 >> 24;
       $167 = HEAP32[$6>>2]|0;
       $168 = (($167) + ($166<<1)|0);
       $169 = HEAP16[$168>>1]|0;
       $170 = $169 & 8192;
       $171 = ($170<<16>>16)==(0);
       if ($171) {
        $879 = $$pre$i2$i$i43242;$880 = $876;$__trailing_sign$1 = $__trailing_sign$0234;
        break L324;
       }
       $172 = HEAP32[$__b>>2]|0;
       $173 = (($172) + 12|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = (($172) + 16|0);
       $176 = HEAP32[$175>>2]|0;
       $177 = ($174|0)==($176|0);
       if ($177) {
        $178 = HEAP32[$172>>2]|0;
        $179 = (($178) + 40|0);
        $180 = HEAP32[$179>>2]|0;
        __THREW__ = 0;
        $181 = (invoke_ii($180|0,($172|0))|0);
        $182 = __THREW__; __THREW__ = 0;
        $183 = $182&1;
        if ($183) {
         label = 23;
         break L3;
        } else {
         $$0$i$i55 = $181;
        }
       } else {
        $184 = (($174) + 1|0);
        HEAP32[$173>>2] = $184;
        $185 = HEAP8[$174>>0]|0;
        $186 = $185&255;
        $$0$i$i55 = $186;
       }
       $187 = $$0$i$i55&255;
       __THREW__ = 0;
       invoke_vii(539,($__spaces|0),($187|0));
       $188 = __THREW__; __THREW__ = 0;
       $189 = $188&1;
       if ($189) {
        label = 23;
        break L3;
       } else {
        $$pre$i2$i$i43 = $$pre$i2$i$i43242;$137 = $881;
       }
      }
     }
    } while(0);
    $779 = (($__p$0232) + 1)|0;
    $780 = ($779>>>0)<(4);
    if ($780) {
     $876 = $880;$__p$0232 = $779;$__trailing_sign$0234 = $__trailing_sign$1;
    } else {
     $864 = $880;$878 = $879;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 280;
     break;
    }
   }
   L359:    switch (label|0) {
    case 20: {
     $59 = ___cxa_find_matching_catch()|0;
     $60 = tempRet0;
     $lpad$phi$index = $59;$lpad$phi$index7 = $60;
     break L1;
     break;
    }
    case 21: {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi$index = $61;$lpad$phi$index7 = $62;
     break L1;
     break;
    }
    case 22: {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi$index = $63;$lpad$phi$index7 = $64;
     break L1;
     break;
    }
    case 23: {
     $65 = ___cxa_find_matching_catch()|0;
     $66 = tempRet0;
     $lpad$phi$index = $65;$lpad$phi$index7 = $66;
     break L1;
     break;
    }
    case 24: {
     $67 = ___cxa_find_matching_catch()|0;
     $68 = tempRet0;
     $lpad$phi$index = $67;$lpad$phi$index7 = $68;
     break L1;
     break;
    }
    case 40: {
     $117 = HEAP32[$__err>>2]|0;
     $118 = $117 | 4;
     HEAP32[$__err>>2] = $118;
     $$0 = 0;
     break;
    }
    case 132: {
     $373 = HEAP32[$__err>>2]|0;
     $374 = $373 | 4;
     HEAP32[$__err>>2] = $374;
     $$0 = 0;
     break;
    }
    case 185: {
     $520 = HEAP32[$__err>>2]|0;
     $521 = $520 | 4;
     HEAP32[$__err>>2] = $521;
     $$0 = 0;
     break;
    }
    case 244: {
     $669 = HEAP32[$__err>>2]|0;
     $670 = $669 | 4;
     HEAP32[$__err>>2] = $670;
     $$0 = 0;
     break;
    }
    case 267: {
     $735 = HEAP32[$__err>>2]|0;
     $736 = $735 | 4;
     HEAP32[$__err>>2] = $736;
     $$0 = 0;
     break;
    }
    case 278: {
     $777 = HEAP32[$__err>>2]|0;
     $778 = $777 | 4;
     HEAP32[$__err>>2] = $778;
     $$0 = 0;
     break;
    }
    case 280: {
     $781 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L371: do {
      if (!($781)) {
       $782 = (($__trailing_sign$0$lcssa) + 1|0);
       $783 = (($__trailing_sign$0$lcssa) + 8|0);
       $784 = (($__trailing_sign$0$lcssa) + 4|0);
       $$pre$i2$i$i = $878;$810 = $878;$__i$0 = 1;
       L373: while(1) {
        $785 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $786 = $785 & 1;
        $787 = ($786<<24>>24)==(0);
        if ($787) {
         $789 = $785&255;
         $790 = $789 >>> 1;
         $792 = $790;
        } else {
         $788 = HEAP32[$784>>2]|0;
         $792 = $788;
        }
        $791 = ($__i$0>>>0)<($792>>>0);
        if (!($791)) {
         break L371;
        }
        $793 = HEAP32[$__b>>2]|0;
        $794 = ($793|0)==(0|0);
        do {
         if ($794) {
          $808 = 0;
         } else {
          $795 = (($793) + 12|0);
          $796 = HEAP32[$795>>2]|0;
          $797 = (($793) + 16|0);
          $798 = HEAP32[$797>>2]|0;
          $799 = ($796|0)==($798|0);
          if ($799) {
           $800 = HEAP32[$793>>2]|0;
           $801 = (($800) + 36|0);
           $802 = HEAP32[$801>>2]|0;
           __THREW__ = 0;
           $803 = (invoke_ii($802|0,($793|0))|0);
           $804 = __THREW__; __THREW__ = 0;
           $805 = $804&1;
           if ($805) {
            label = 19;
            break L373;
           }
           $806 = ($803|0)==(-1);
           if ($806) {
            HEAP32[$__b>>2] = 0;
            $808 = 0;
            break;
           } else {
            $$pre$i$i$i = HEAP32[$__b>>2]|0;
            $808 = $$pre$i$i$i;
            break;
           }
          } else {
           $808 = $793;
          }
         }
        } while(0);
        $807 = ($808|0)==(0|0);
        $809 = ($810|0)==(0|0);
        do {
         if ($809) {
          $$pre$i2$i$i261$ph = $$pre$i2$i$i;
          label = 298;
         } else {
          $811 = (($810) + 12|0);
          $812 = HEAP32[$811>>2]|0;
          $813 = (($810) + 16|0);
          $814 = HEAP32[$813>>2]|0;
          $815 = ($812|0)==($814|0);
          if (!($815)) {
           if ($807) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $810;
            break;
           } else {
            label = 306;
            break L373;
           }
          }
          $816 = HEAP32[$810>>2]|0;
          $817 = (($816) + 36|0);
          $818 = HEAP32[$817>>2]|0;
          __THREW__ = 0;
          $819 = (invoke_ii($818|0,($810|0))|0);
          $820 = __THREW__; __THREW__ = 0;
          $821 = $820&1;
          if ($821) {
           label = 19;
           break L373;
          }
          $822 = ($819|0)==(-1);
          if ($822) {
           HEAP32[$__e>>2] = 0;
           $$pre$i2$i$i261$ph = 0;
           label = 298;
           break;
          } else {
           $823 = ($$pre$i2$i$i|0)==(0|0);
           $tmp$i$i = $807 ^ $823;
           if ($tmp$i$i) {
            $$pre$i2$i$i261269 = $$pre$i2$i$i;$892 = $$pre$i2$i$i;
            break;
           } else {
            label = 306;
            break L373;
           }
          }
         }
        } while(0);
        if ((label|0) == 298) {
         label = 0;
         if ($807) {
          label = 306;
          break;
         } else {
          $$pre$i2$i$i261269 = $$pre$i2$i$i261$ph;$892 = 0;
         }
        }
        $824 = HEAP32[$__b>>2]|0;
        $825 = (($824) + 12|0);
        $826 = HEAP32[$825>>2]|0;
        $827 = (($824) + 16|0);
        $828 = HEAP32[$827>>2]|0;
        $829 = ($826|0)==($828|0);
        if ($829) {
         $830 = HEAP32[$824>>2]|0;
         $831 = (($830) + 36|0);
         $832 = HEAP32[$831>>2]|0;
         __THREW__ = 0;
         $833 = (invoke_ii($832|0,($824|0))|0);
         $834 = __THREW__; __THREW__ = 0;
         $835 = $834&1;
         if ($835) {
          label = 19;
          break;
         } else {
          $$0$i$i = $833;
         }
        } else {
         $836 = HEAP8[$826>>0]|0;
         $837 = $836&255;
         $$0$i$i = $837;
        }
        $838 = $$0$i$i&255;
        $839 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $840 = $839 & 1;
        $841 = ($840<<24>>24)==(0);
        if ($841) {
         $844 = $782;
        } else {
         $842 = HEAP32[$783>>2]|0;
         $844 = $842;
        }
        $843 = (($844) + ($__i$0)|0);
        $845 = HEAP8[$843>>0]|0;
        $846 = ($838<<24>>24)==($845<<24>>24);
        if (!($846)) {
         label = 306;
         break;
        }
        $849 = (($__i$0) + 1)|0;
        $850 = HEAP32[$__b>>2]|0;
        $851 = (($850) + 12|0);
        $852 = HEAP32[$851>>2]|0;
        $853 = (($850) + 16|0);
        $854 = HEAP32[$853>>2]|0;
        $855 = ($852|0)==($854|0);
        if ($855) {
         $856 = HEAP32[$850>>2]|0;
         $857 = (($856) + 40|0);
         $858 = HEAP32[$857>>2]|0;
         __THREW__ = 0;
         (invoke_ii($858|0,($850|0))|0);
         $859 = __THREW__; __THREW__ = 0;
         $860 = $859&1;
         if ($860) {
          label = 19;
          break;
         } else {
          $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
          continue;
         }
        } else {
         $861 = (($852) + 1|0);
         HEAP32[$851>>2] = $861;
         $$pre$i2$i$i = $$pre$i2$i$i261269;$810 = $892;$__i$0 = $849;
         continue;
        }
       }
       if ((label|0) == 19) {
        $57 = ___cxa_find_matching_catch()|0;
        $58 = tempRet0;
        $lpad$phi$index = $57;$lpad$phi$index7 = $58;
        break L1;
       }
       else if ((label|0) == 306) {
        $847 = HEAP32[$__err>>2]|0;
        $848 = $847 | 4;
        HEAP32[$__err>>2] = $848;
        $$0 = 0;
        break L359;
       }
      }
     } while(0);
     $862 = HEAP32[$__gb>>2]|0;
     $863 = ($862|0)==($864|0);
     if ($863) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$862,$864,$__et);
      $865 = HEAP32[$__et>>2]|0;
      $866 = ($865|0)==(0);
      if ($866) {
       $$0 = 1;
      } else {
       $867 = HEAP32[$__err>>2]|0;
       $868 = $867 | 4;
       HEAP32[$__err>>2] = $868;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $869 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $870 = ($869|0)==(0|0);
   if ($870) {
    STACKTOP = sp;return ($$0|0);
   }
   $871 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($871|0,($869|0));
   $872 = __THREW__; __THREW__ = 0;
   $873 = $872&1;
   if ($873) {
    $874 = ___cxa_find_matching_catch(0|0)|0;
    $875 = tempRet0;
    ___clang_call_terminate($874);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $71 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $72 = ($71|0)==(0|0);
 if ($72) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $73 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($73|0,($71|0));
 $74 = __THREW__; __THREW__ = 0;
 $75 = $74&1;
 if ($75) {
  $76 = ___cxa_find_matching_catch(0|0)|0;
  $77 = tempRet0;
  ___clang_call_terminate($76);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(618,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  ___cxa_throw(($0|0),(21096|0),(355|0));
  // unreachable;
 }
}
function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0112 = 0, $$0113 = 0, $$014 = 0, $$015 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp;
 $__wbuf = sp + 28|0;
 $__wb = sp + 8|0;
 $__wn = sp + 24|0;
 $__loc = sp + 20|0;
 $__neg = sp + 128|0;
 $0 = sp + 16|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 612;
 $2 = (($__wbuf) + 100|0);
 __THREW__ = 0;
 invoke_vii(457,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0112 = $32;$$014 = $31;$95 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(458,($__loc|0),(12416|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(613,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 1|0);
       HEAP8[$20>>0] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP8[$18>>0] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 28|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(539,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 28|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -1|0);
      $42 = ($39>>>0)<($41>>>0);
      L17: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP8[$__w$05>>0]|0;
         $46 = ($45<<24>>24)==($36<<24>>24);
         $44 = (($__w$05) + 1|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L17;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(619,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $64 = 0;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L3;
        }
        $62 = ($59|0)==(-1);
        if ($62) {
         HEAP32[$__b>>2] = 0;
         $64 = 0;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $64 = $$pre$i$i$i;
         break;
        }
       } else {
        $64 = $49;
       }
      }
     } while(0);
     $63 = ($64|0)==(0|0);
     $65 = ($8|0)==(0|0);
     do {
      if ($65) {
       label = 29;
      } else {
       $66 = (($8) + 12|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = (($8) + 16|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = ($67|0)==($69|0);
       if (!($70)) {
        if ($63) {
         break;
        } else {
         label = 31;
         break;
        }
       }
       $71 = HEAP32[$8>>2]|0;
       $72 = (($71) + 36|0);
       $73 = HEAP32[$72>>2]|0;
       __THREW__ = 0;
       $74 = (invoke_ii($73|0,($8|0))|0);
       $75 = __THREW__; __THREW__ = 0;
       $76 = $75&1;
       if ($76) {
        break L3;
       }
       $77 = ($74|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 29;
        break;
       } else {
        $78 = ($8|0)==(0|0);
        $tmp$i$i = $63 ^ $78;
        if ($tmp$i$i) {
         break;
        } else {
         label = 31;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 29) {
      if ($63) {
       label = 31;
      }
     }
     if ((label|0) == 31) {
      $79 = HEAP32[$__err>>2]|0;
      $80 = $79 | 2;
      HEAP32[$__err>>2] = $80;
     }
     $81 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $81;
     $82 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($82)|0);
     $83 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $84 = ($83|0)==(0|0);
     if ($84) {
      STACKTOP = sp;return;
     }
     $85 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($85|0,($83|0));
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $90 = ___cxa_find_matching_catch()|0;
  $91 = tempRet0;
  $92 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($92)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $93 = ($$pre|0)==(0|0);
  if ($93) {
   $$0113 = $91;$$015 = $90;
   ___resumeException($$015|0);
   // unreachable;
  } else {
   $$0112 = $91;$$014 = $90;$95 = $$pre;
  }
 }
 $94 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($94|0,($95|0));
 $96 = __THREW__; __THREW__ = 0;
 $97 = $96&1;
 if ($97) {
  $98 = ___cxa_find_matching_catch(0|0)|0;
  $99 = tempRet0;
  ___clang_call_terminate($98);
  // unreachable;
 } else {
  $$0113 = $$0112;$$015 = $$014;
  ___resumeException($$015|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11856)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 1|0);
   HEAP8[$24>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP8[$22>>0] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 1|0);
   HEAP8[$38>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP8[$36>>0] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP8[$__dp>>0] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP8[$__ts>>0] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 1|0);
   HEAP8[$74>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP8[$72>>0] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11792)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 1|0);
   HEAP8[$97>>0] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP8[$95>>0] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 1|0);
   HEAP8[$111>>0] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP8[$109>>0] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP8[$__dp>>0] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP8[$__ts>>0] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 1|0);
   HEAP8[$147>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP8[$145>>0] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err) {
 $__grouping = $__grouping|0;
 $__g = $__g|0;
 $__g_end = $__g_end|0;
 $__err = $__err|0;
 var $$012$i$i = 0, $$__ig$0 = 0, $$lcssa6 = 0, $$not = 0, $$not9 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ig$011 = 0, $__r$012 = 0;
 var $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__grouping>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $5 = $0&255;
  $6 = $5 >>> 1;
  $8 = $6;
 } else {
  $3 = (($__grouping) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $8 = $4;
 }
 $7 = ($8|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $9 = ($__g|0)==($__g_end|0);
 if ($9) {
  $19 = $0;
 } else {
  $10 = (($__g_end) + -4|0);
  $11 = ($10>>>0)>($__g>>>0);
  if ($11) {
   $$012$i$i = $__g;$14 = $10;
   while(1) {
    $12 = HEAP32[$$012$i$i>>2]|0;
    $13 = HEAP32[$14>>2]|0;
    HEAP32[$$012$i$i>>2] = $13;
    HEAP32[$14>>2] = $12;
    $15 = (($$012$i$i) + 4|0);
    $16 = (($14) + -4|0);
    $17 = ($15>>>0)<($16>>>0);
    if ($17) {
     $$012$i$i = $15;$14 = $16;
    } else {
     break;
    }
   }
   $$pre = HEAP8[$__grouping>>0]|0;
   $19 = $$pre;
  } else {
   $19 = $0;
  }
 }
 $18 = $19 & 1;
 $20 = ($18<<24>>24)==(0);
 if ($20) {
  $25 = (($__grouping) + 1|0);
  $26 = $19&255;
  $27 = $26 >>> 1;
  $31 = $25;$34 = $27;
 } else {
  $21 = (($__grouping) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($__grouping) + 4|0);
  $24 = HEAP32[$23>>2]|0;
  $31 = $22;$34 = $24;
 }
 $28 = (($__g_end) + -4|0);
 $29 = ($28>>>0)>($__g>>>0);
 $30 = HEAP8[$31>>0]|0;
 $$not9 = ($30<<24>>24)<(1);
 $32 = ($30<<24>>24)==(127);
 $or$cond210 = $$not9 | $32;
 L18: do {
  if ($29) {
   $33 = (($31) + ($34)|0);
   $35 = $33;
   $37 = $30;$__ig$011 = $31;$__r$012 = $__g;$or$cond213 = $or$cond210;
   while(1) {
    if (!($or$cond213)) {
     $36 = $37 << 24 >> 24;
     $38 = HEAP32[$__r$012>>2]|0;
     $39 = ($36|0)==($38|0);
     if (!($39)) {
      break;
     }
    }
    $40 = $__ig$011;
    $41 = (($35) - ($40))|0;
    $42 = ($41|0)>(1);
    $43 = (($__ig$011) + 1|0);
    $$__ig$0 = $42 ? $43 : $__ig$011;
    $44 = (($__r$012) + 4|0);
    $45 = ($44>>>0)<($28>>>0);
    $46 = HEAP8[$$__ig$0>>0]|0;
    $$not = ($46<<24>>24)<(1);
    $47 = ($46<<24>>24)==(127);
    $or$cond2 = $$not | $47;
    if ($45) {
     $37 = $46;$__ig$011 = $$__ig$0;$__r$012 = $44;$or$cond213 = $or$cond2;
    } else {
     $$lcssa6 = $46;$or$cond2$lcssa = $or$cond2;
     break L18;
    }
   }
   HEAP32[$__err>>2] = 4;
   STACKTOP = sp;return;
  } else {
   $$lcssa6 = $30;$or$cond2$lcssa = $or$cond210;
  }
 } while(0);
 if ($or$cond2$lcssa) {
  STACKTOP = sp;return;
 }
 $48 = $$lcssa6 << 24 >> 24;
 $49 = HEAP32[$28>>2]|0;
 $50 = (($49) + -1)|0;
 $51 = ($50>>>0)<($48>>>0);
 if ($51) {
  STACKTOP = sp;return;
 }
 HEAP32[$__err>>2] = 4;
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0 = 0, $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01 = 0, $$01$i = 0, $$112 = 0, $$113 = 0, $$1210 = 0, $$1211 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre15 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0;
 var $phitmp$i$i$i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 472|0;
 $vararg_buffer = sp;
 $__wbuf = sp + 64|0;
 $__wb = sp + 464|0;
 $__wn = sp + 8|0;
 $__loc = sp + 4|0;
 $__neg = sp + 576|0;
 $0 = sp + 56|0;
 $__atoms = sp + 16|0;
 $__nbuf = sp + 476|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 612;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(457,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 do {
  if ($4) {
   $33 = ___cxa_find_matching_catch()|0;
   $34 = tempRet0;
   HEAP32[$__wb>>2] = 0;
   $$112 = $33;$$1210 = $34;$107 = 612;$108 = $__wbuf;
  } else {
   __THREW__ = 0;
   $5 = (invoke_iii(458,($__loc|0),(12408|0))|0);
   $6 = __THREW__; __THREW__ = 0;
   $7 = $6&1;
   L4: do {
    if ($7) {
     label = 11;
    } else {
     HEAP8[$__neg>>0] = 0;
     $8 = HEAP32[$__e>>2]|0;
     HEAP32[$0>>2] = $8;
     $9 = (($__iob) + 4|0);
     $10 = HEAP32[$9>>2]|0;
     __THREW__ = 0;
     ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
     $11 = (invoke_iiiiiiiiiiii(621,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
     $12 = __THREW__; __THREW__ = 0;
     $13 = $12&1;
     if ($13) {
      label = 11;
     } else {
      if ($11) {
       $14 = HEAP32[$5>>2]|0;
       $15 = (($14) + 48|0);
       $16 = HEAP32[$15>>2]|0;
       __THREW__ = 0;
       (invoke_iiiii($16|0,($5|0),(12112|0),(((12112 + 10|0))|0),($__atoms|0))|0);
       $17 = __THREW__; __THREW__ = 0;
       $18 = $17&1;
       if ($18) {
        label = 11;
        break;
       }
       $19 = HEAP32[$__wn>>2]|0;
       $20 = HEAP32[$__wb>>2]|0;
       $21 = $19;
       $22 = $20;
       $23 = (($21) - ($22))|0;
       $24 = ($23|0)>(392);
       if ($24) {
        $25 = $23 >> 2;
        $26 = (($25) + 2)|0;
        $27 = (_malloc($26)|0);
        $28 = ($27|0)==(0|0);
        if ($28) {
         __THREW__ = 0;
         invoke_v(601);
         $29 = __THREW__; __THREW__ = 0;
         $30 = $29&1;
         if ($30) {
          $31 = ___cxa_find_matching_catch()|0;
          $32 = tempRet0;
          $$0 = $31;$$01 = $32;
          break;
         } else {
          $39 = 0;$__nc$0 = 0;
         }
        } else {
         $39 = $27;$__nc$0 = $27;
        }
       } else {
        $39 = 0;$__nc$0 = $__nbuf;
       }
       $40 = HEAP8[$__neg>>0]|0;
       $41 = ($40<<24>>24)==(0);
       if ($41) {
        $__nc$1 = $__nc$0;
       } else {
        $42 = (($__nc$0) + 1|0);
        HEAP8[$__nc$0>>0] = 45;
        $__nc$1 = $42;
       }
       $43 = ($20>>>0)<($19>>>0);
       if ($43) {
        $44 = (($__atoms) + 40|0);
        $45 = $__atoms;
        $__nc$26 = $__nc$1;$__w$07 = $20;
        while(1) {
         $46 = HEAP32[$__w$07>>2]|0;
         $$01$i = $__atoms;
         while(1) {
          $49 = HEAP32[$$01$i>>2]|0;
          $50 = ($49|0)==($46|0);
          $48 = (($$01$i) + 4|0);
          if ($50) {
           $$0$lcssa$i = $$01$i;
           break;
          }
          $47 = ($48|0)==($44|0);
          if ($47) {
           $$0$lcssa$i = $44;
           break;
          } else {
           $$01$i = $48;
          }
         }
         $51 = $$0$lcssa$i;
         $52 = (($51) - ($45))|0;
         $53 = $52 >> 2;
         $54 = (12112 + ($53)|0);
         $55 = HEAP8[$54>>0]|0;
         HEAP8[$__nc$26>>0] = $55;
         $56 = (($__w$07) + 4|0);
         $57 = (($__nc$26) + 1|0);
         $58 = HEAP32[$__wn>>2]|0;
         $59 = ($56>>>0)<($58>>>0);
         if ($59) {
          $__nc$26 = $57;$__w$07 = $56;
         } else {
          $__nc$2$lcssa = $57;
          break;
         }
        }
       } else {
        $__nc$2$lcssa = $__nc$1;
       }
       HEAP8[$__nc$2$lcssa>>0] = 0;
       HEAP32[$vararg_buffer>>2] = $__v;
       $60 = (_sscanf($__nbuf,12048,$vararg_buffer)|0);
       $61 = ($60|0)==(1);
       if (!($61)) {
        __THREW__ = 0;
        invoke_vi(614,(12056|0));
        $62 = __THREW__; __THREW__ = 0;
        $63 = $62&1;
        if ($63) {
         $37 = ___cxa_find_matching_catch()|0;
         $38 = tempRet0;
         _free($39);
         $$0 = $37;$$01 = $38;
         break;
        }
       }
       _free($39);
      }
      $64 = HEAP32[$__b>>2]|0;
      $65 = ($64|0)==(0|0);
      do {
       if ($65) {
        $113 = 1;
       } else {
        $66 = (($64) + 12|0);
        $67 = HEAP32[$66>>2]|0;
        $68 = (($64) + 16|0);
        $69 = HEAP32[$68>>2]|0;
        $70 = ($67|0)==($69|0);
        if ($70) {
         $71 = HEAP32[$64>>2]|0;
         $72 = (($71) + 36|0);
         $73 = HEAP32[$72>>2]|0;
         __THREW__ = 0;
         $74 = (invoke_ii($73|0,($64|0))|0);
         $75 = __THREW__; __THREW__ = 0;
         $76 = $75&1;
         if ($76) {
          label = 11;
          break L4;
         } else {
          $$0$i$i$i$i = $74;
         }
        } else {
         $77 = HEAP32[$67>>2]|0;
         $$0$i$i$i$i = $77;
        }
        $78 = ($$0$i$i$i$i|0)==(-1);
        if ($78) {
         HEAP32[$__b>>2] = 0;
         $113 = 1;
         break;
        } else {
         $$pre$i$i$i = HEAP32[$__b>>2]|0;
         $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
         $113 = $phitmp$i$i$i;
         break;
        }
       }
      } while(0);
      $79 = HEAP32[$__e>>2]|0;
      $80 = ($79|0)==(0|0);
      do {
       if ($80) {
        label = 37;
       } else {
        $81 = (($79) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = (($79) + 16|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($82|0)==($84|0);
        if ($85) {
         $86 = HEAP32[$79>>2]|0;
         $87 = (($86) + 36|0);
         $88 = HEAP32[$87>>2]|0;
         __THREW__ = 0;
         $89 = (invoke_ii($88|0,($79|0))|0);
         $90 = __THREW__; __THREW__ = 0;
         $91 = $90&1;
         if ($91) {
          label = 11;
          break L4;
         } else {
          $$0$i$i1$i$i = $89;
         }
        } else {
         $92 = HEAP32[$82>>2]|0;
         $$0$i$i1$i$i = $92;
        }
        $93 = ($$0$i$i1$i$i|0)==(-1);
        if ($93) {
         HEAP32[$__e>>2] = 0;
         label = 37;
         break;
        } else {
         if ($113) {
          break;
         } else {
          label = 39;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 37) {
       if ($113) {
        label = 39;
       }
      }
      if ((label|0) == 39) {
       $94 = HEAP32[$__err>>2]|0;
       $95 = $94 | 2;
       HEAP32[$__err>>2] = $95;
      }
      $96 = HEAP32[$__b>>2]|0;
      HEAP32[$agg$result>>2] = $96;
      $97 = HEAP32[$__loc>>2]|0;
      (__ZNSt3__114__shared_count16__release_sharedEv($97)|0);
      $98 = HEAP32[$__wb>>2]|0;
      HEAP32[$__wb>>2] = 0;
      $99 = ($98|0)==(0|0);
      if ($99) {
       STACKTOP = sp;return;
      }
      $100 = HEAP32[$1>>2]|0;
      __THREW__ = 0;
      invoke_vi($100|0,($98|0));
      $101 = __THREW__; __THREW__ = 0;
      $102 = $101&1;
      if ($102) {
       $103 = ___cxa_find_matching_catch(0|0)|0;
       $104 = tempRet0;
       ___clang_call_terminate($103);
       // unreachable;
      } else {
       STACKTOP = sp;return;
      }
     }
    }
   } while(0);
   if ((label|0) == 11) {
    $35 = ___cxa_find_matching_catch()|0;
    $36 = tempRet0;
    $$0 = $35;$$01 = $36;
   }
   $105 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($105)|0);
   $$pre = HEAP32[$__wb>>2]|0;
   HEAP32[$__wb>>2] = 0;
   $106 = ($$pre|0)==(0|0);
   if ($106) {
    $$113 = $$0;$$1211 = $$01;
    ___resumeException($$113|0);
    // unreachable;
   } else {
    $$pre15 = HEAP32[$1>>2]|0;
    $$112 = $$0;$$1210 = $$01;$107 = $$pre15;$108 = $$pre;
    break;
   }
  }
 } while(0);
 __THREW__ = 0;
 invoke_vi($107|0,($108|0));
 $109 = __THREW__; __THREW__ = 0;
 $110 = $109&1;
 if ($110) {
  $111 = ___cxa_find_matching_catch(0|0)|0;
  $112 = tempRet0;
  ___clang_call_terminate($111);
  // unreachable;
 } else {
  $$113 = $$112;$$1211 = $$1210;
  ___resumeException($$113|0);
  // unreachable;
 }
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e,$__intl,$__loc,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__flags = $__flags|0;
 $__err = $__err|0;
 $__neg = $__neg|0;
 $__ct = $__ct|0;
 $__wb = $__wb|0;
 $__wn = $__wn|0;
 $__we = $__we|0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i117 = 0, $$0$i$i$i$i149 = 0, $$0$i$i$i$i174 = 0, $$0$i$i$i$i22 = 0, $$0$i$i$i$i43 = 0, $$0$i$i$i$i83 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i123 = 0, $$0$i$i1$i$i155 = 0, $$0$i$i1$i$i180 = 0, $$0$i$i1$i$i28 = 0, $$0$i$i1$i$i49 = 0, $$0$i$i1$i$i89 = 0, $$0$i$i101 = 0, $$0$i$i110 = 0, $$0$i$i113 = 0;
 var $$0$i$i135 = 0, $$0$i$i146 = 0, $$0$i$i170 = 0, $$0$i$i37 = 0, $$0$i$i41 = 0, $$0$i$i58 = 0, $$0$i$i64 = 0, $$0$i$i69 = 0, $$0$i$i77 = 0, $$0$i$i80 = 0, $$288 = 0, $$289 = 0, $$290 = 0, $$291 = 0, $$292 = 0, $$293 = 0, $$294 = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i119 = 0;
 var $$pre$i$i$i151 = 0, $$pre$i$i$i176 = 0, $$pre$i$i$i24 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i85 = 0, $$pre$i3$i$i = 0, $$pre$i3$i$i125 = 0, $$pre$i3$i$i157 = 0, $$pre$i3$i$i182 = 0, $$pre$i3$i$i182268 = 0, $$pre$i3$i$i182269 = 0, $$pre$i3$i$i279$ph = 0, $$pre$i3$i$i279287 = 0, $$pre$i3$i$i51 = 0, $$pre$i3$i$i51260 = 0, $$pre$i3$i$i51262 = 0, $$pre$i3$i$i91 = 0, $$pre$i3$i$i91273$ph = 0, $$pre$i3$i$i91273284 = 0, $$pre263 = 0;
 var $$pre264 = 0, $$pre265 = 0, $$pre266 = 0, $$pre267 = 0, $$pre271 = 0, $$pre275 = 0, $$pre277 = 0, $$sum = 0, $$sum280 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0;
 var $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0;
 var $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0;
 var $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0;
 var $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0;
 var $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0;
 var $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0;
 var $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0;
 var $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0;
 var $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0;
 var $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0;
 var $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0;
 var $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0;
 var $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0;
 var $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0;
 var $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0;
 var $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0;
 var $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0;
 var $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0;
 var $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0;
 var $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$1 = 0, $__nsn = 0, $__nsn$__trailing_sign$0 = 0, $__nsn$__trailing_sign$010 = 0, $__p$0250 = 0, $__pat = 0, $__psn = 0;
 var $__psn$__trailing_sign$0 = 0, $__psn$__trailing_sign$09 = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0252 = 0, $__trailing_sign$1 = 0, $__ts = 0, $brmerge = 0, $cond = 0, $lpad$phi$index = 0, $lpad$phi$index8 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond6 = 0, $or$cond8 = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i120 = 0, $phitmp$i$i$i152 = 0, $phitmp$i$i$i177 = 0;
 var $phitmp$i$i$i25 = 0, $phitmp$i$i$i46 = 0, $phitmp$i$i$i86 = 0, $phitmp$i4$i$i = 0, $phitmp$i4$i$i158 = 0, $phitmp$i4$i$i183 = 0, $phitmp$i4$i$i52 = 0, $phitmp$i4$i$i92 = 0, $switch = 0, $tmp$i$i = 0, $tmp$i$i160 = 0, $tmp$i$i185 = 0, $tmp$i$i54 = 0, $tmp$i$i94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 500|0;
 $__gbuf = sp + 96|0;
 $__gb = sp + 40|0;
 $__gn = sp + 20|0;
 $__ge = sp + 12|0;
 $__pat = sp + 88|0;
 $__dp = sp + 496|0;
 $__ts = sp + 504|0;
 $__grp = sp + 24|0;
 $__sym = sp + 48|0;
 $__psn = sp;
 $__nsn = sp + 72|0;
 $__spaces = sp + 60|0;
 $__fd = sp + 16|0;
 $__et = sp + 84|0;
 HEAP32[$0>>2] = $__we;
 HEAP32[$__gb>>2] = $__gbuf;
 $1 = (($__gb) + 4|0);
 HEAP32[$1>>2] = 612;
 HEAP32[$__gn>>2] = $__gbuf;
 $2 = (($__gbuf) + 400|0);
 HEAP32[$__ge>>2] = $2;
 HEAP32[$__pat>>2] = 0;
 ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
 ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
 ;HEAP32[$__psn+0>>2]=0|0;HEAP32[$__psn+4>>2]=0|0;HEAP32[$__psn+8>>2]=0|0;
 ;HEAP32[$__nsn+0>>2]=0|0;HEAP32[$__nsn+4>>2]=0|0;HEAP32[$__nsn+8>>2]=0|0;
 ;HEAP32[$__spaces+0>>2]=0|0;HEAP32[$__spaces+4>>2]=0|0;HEAP32[$__spaces+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viiiiiiiiii(622,($__intl|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__psn|0),($__nsn|0),($__fd|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 L1: do {
  if ($4) {
   $66 = ___cxa_find_matching_catch()|0;
   $67 = tempRet0;
   $lpad$phi$index = $66;$lpad$phi$index8 = $67;
  } else {
   $5 = HEAP32[$__wb>>2]|0;
   HEAP32[$__wn>>2] = $5;
   $6 = (($__nsn) + 4|0);
   $7 = (($__nsn) + 8|0);
   $8 = (($__psn) + 4|0);
   $9 = (($__psn) + 8|0);
   $10 = $__flags & 512;
   $11 = ($10|0)!=(0);
   $12 = (($__sym) + 4|0);
   $13 = (($__sym) + 8|0);
   $14 = (($__spaces) + 4|0);
   $15 = (($__spaces) + 8|0);
   $16 = (($__pat) + 3|0);
   $17 = (($__grp) + 4|0);
   $855 = $__gbuf;$__p$0250 = 0;$__trailing_sign$0252 = 0;
   L4: while(1) {
    $18 = HEAP32[$__b>>2]|0;
    $19 = ($18|0)==(0|0);
    do {
     if ($19) {
      $856 = 1;
     } else {
      $20 = (($18) + 12|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($18) + 16|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($21|0)==($23|0);
      if ($24) {
       $25 = HEAP32[$18>>2]|0;
       $26 = (($25) + 36|0);
       $27 = HEAP32[$26>>2]|0;
       __THREW__ = 0;
       $28 = (invoke_ii($27|0,($18|0))|0);
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        label = 26;
        break L4;
       } else {
        $$0$i$i$i$i22 = $28;
       }
      } else {
       $31 = HEAP32[$21>>2]|0;
       $$0$i$i$i$i22 = $31;
      }
      $32 = ($$0$i$i$i$i22|0)==(-1);
      if ($32) {
       HEAP32[$__b>>2] = 0;
       $856 = 1;
       break;
      } else {
       $$pre$i$i$i24 = HEAP32[$__b>>2]|0;
       $phitmp$i$i$i25 = ($$pre$i$i$i24|0)==(0|0);
       $856 = $phitmp$i$i$i25;
       break;
      }
     }
    } while(0);
    $33 = HEAP32[$__e>>2]|0;
    $34 = ($33|0)==(0|0);
    do {
     if ($34) {
      label = 16;
     } else {
      $35 = (($33) + 12|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = (($33) + 16|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = ($36|0)==($38|0);
      if ($39) {
       $40 = HEAP32[$33>>2]|0;
       $41 = (($40) + 36|0);
       $42 = HEAP32[$41>>2]|0;
       __THREW__ = 0;
       $43 = (invoke_ii($42|0,($33|0))|0);
       $44 = __THREW__; __THREW__ = 0;
       $45 = $44&1;
       if ($45) {
        label = 26;
        break L4;
       } else {
        $$0$i$i1$i$i28 = $43;
       }
      } else {
       $46 = HEAP32[$36>>2]|0;
       $$0$i$i1$i$i28 = $46;
      }
      $47 = ($$0$i$i1$i$i28|0)==(-1);
      if ($47) {
       HEAP32[$__e>>2] = 0;
       label = 16;
       break;
      } else {
       if ($856) {
        $858 = $33;
        break;
       } else {
        $843 = $855;$857 = $33;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
        label = 291;
        break L4;
       }
      }
     }
    } while(0);
    if ((label|0) == 16) {
     label = 0;
     if ($856) {
      $843 = $855;$857 = 0;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
      label = 291;
      break;
     } else {
      $858 = 0;
     }
    }
    $48 = (($__pat) + ($__p$0250)|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    L28: do {
     switch ($50|0) {
     case 3:  {
      $179 = HEAP8[$__psn>>0]|0;
      $180 = $179 & 1;
      $181 = ($180<<24>>24)==(0);
      if ($181) {
       $183 = $179&255;
       $184 = $183 >>> 1;
       $194 = $184;
      } else {
       $182 = HEAP32[$8>>2]|0;
       $194 = $182;
      }
      $185 = HEAP8[$__nsn>>0]|0;
      $186 = $185 & 1;
      $187 = ($186<<24>>24)==(0);
      if ($187) {
       $189 = $185&255;
       $190 = $189 >>> 1;
       $192 = $190;
      } else {
       $188 = HEAP32[$6>>2]|0;
       $192 = $188;
      }
      $191 = (0 - ($192))|0;
      $193 = ($194|0)==($191|0);
      if ($193) {
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      } else {
       if ($181) {
        $196 = $179&255;
        $197 = $196 >>> 1;
        $199 = $197;
       } else {
        $195 = HEAP32[$8>>2]|0;
        $199 = $195;
       }
       $198 = ($199|0)==(0);
       if (!($198)) {
        if ($187) {
         $201 = $185&255;
         $202 = $201 >>> 1;
         $204 = $202;
        } else {
         $200 = HEAP32[$6>>2]|0;
         $204 = $200;
        }
        $203 = ($204|0)==(0);
        if (!($203)) {
         $282 = HEAP32[$__b>>2]|0;
         $283 = (($282) + 12|0);
         $284 = HEAP32[$283>>2]|0;
         $285 = (($282) + 16|0);
         $286 = HEAP32[$285>>2]|0;
         $287 = ($284|0)==($286|0);
         if ($287) {
          $288 = HEAP32[$282>>2]|0;
          $289 = (($288) + 36|0);
          $290 = HEAP32[$289>>2]|0;
          __THREW__ = 0;
          $291 = (invoke_ii($290|0,($282|0))|0);
          $292 = __THREW__; __THREW__ = 0;
          $293 = $292&1;
          if ($293) {
           label = 26;
           break L4;
          }
          $$pre264 = HEAP8[$__psn>>0]|0;
          $$0$i$i113 = $291;$296 = $$pre264;
         } else {
          $294 = HEAP32[$284>>2]|0;
          $$0$i$i113 = $294;$296 = $179;
         }
         $295 = $296 & 1;
         $297 = ($295<<24>>24)==(0);
         $298 = HEAP32[$9>>2]|0;
         $$289 = $297 ? $8 : $298;
         $299 = HEAP32[$$289>>2]|0;
         $300 = ($$0$i$i113|0)==($299|0);
         $301 = HEAP32[$__b>>2]|0;
         $302 = (($301) + 12|0);
         $303 = HEAP32[$302>>2]|0;
         $304 = (($301) + 16|0);
         $305 = HEAP32[$304>>2]|0;
         $306 = ($303|0)==($305|0);
         if ($300) {
          if ($306) {
           $307 = HEAP32[$301>>2]|0;
           $308 = (($307) + 40|0);
           $309 = HEAP32[$308>>2]|0;
           __THREW__ = 0;
           (invoke_ii($309|0,($301|0))|0);
           $310 = __THREW__; __THREW__ = 0;
           $311 = $310&1;
           if ($311) {
            label = 26;
            break L4;
           }
          } else {
           $312 = (($303) + 4|0);
           HEAP32[$302>>2] = $312;
          }
          $313 = HEAP8[$__psn>>0]|0;
          $314 = $313 & 1;
          $315 = ($314<<24>>24)==(0);
          if ($315) {
           $317 = $313&255;
           $318 = $317 >>> 1;
           $320 = $318;
          } else {
           $316 = HEAP32[$8>>2]|0;
           $320 = $316;
          }
          $319 = ($320>>>0)>(1);
          $__psn$__trailing_sign$09 = $319 ? $__psn : $__trailing_sign$0252;
          $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$09;
          break L28;
         }
         if ($306) {
          $321 = HEAP32[$301>>2]|0;
          $322 = (($321) + 36|0);
          $323 = HEAP32[$322>>2]|0;
          __THREW__ = 0;
          $324 = (invoke_ii($323|0,($301|0))|0);
          $325 = __THREW__; __THREW__ = 0;
          $326 = $325&1;
          if ($326) {
           label = 26;
           break L4;
          } else {
           $$0$i$i135 = $324;
          }
         } else {
          $327 = HEAP32[$303>>2]|0;
          $$0$i$i135 = $327;
         }
         $328 = HEAP8[$__nsn>>0]|0;
         $329 = $328 & 1;
         $330 = ($329<<24>>24)==(0);
         $331 = HEAP32[$7>>2]|0;
         $$290 = $330 ? $6 : $331;
         $332 = HEAP32[$$290>>2]|0;
         $333 = ($$0$i$i135|0)==($332|0);
         if (!($333)) {
          label = 135;
          break L4;
         }
         $334 = HEAP32[$__b>>2]|0;
         $335 = (($334) + 12|0);
         $336 = HEAP32[$335>>2]|0;
         $337 = (($334) + 16|0);
         $338 = HEAP32[$337>>2]|0;
         $339 = ($336|0)==($338|0);
         if ($339) {
          $340 = HEAP32[$334>>2]|0;
          $341 = (($340) + 40|0);
          $342 = HEAP32[$341>>2]|0;
          __THREW__ = 0;
          (invoke_ii($342|0,($334|0))|0);
          $343 = __THREW__; __THREW__ = 0;
          $344 = $343&1;
          if ($344) {
           label = 26;
           break L4;
          }
         } else {
          $345 = (($336) + 4|0);
          HEAP32[$335>>2] = $345;
         }
         HEAP8[$__neg>>0] = 1;
         $346 = HEAP8[$__nsn>>0]|0;
         $347 = $346 & 1;
         $348 = ($347<<24>>24)==(0);
         if ($348) {
          $350 = $346&255;
          $351 = $350 >>> 1;
          $353 = $351;
         } else {
          $349 = HEAP32[$6>>2]|0;
          $353 = $349;
         }
         $352 = ($353>>>0)>(1);
         $__nsn$__trailing_sign$010 = $352 ? $__nsn : $__trailing_sign$0252;
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$010;
         break L28;
        }
       }
       if ($181) {
        $206 = $179&255;
        $207 = $206 >>> 1;
        $209 = $207;
       } else {
        $205 = HEAP32[$8>>2]|0;
        $209 = $205;
       }
       $208 = ($209|0)==(0);
       $210 = HEAP32[$__b>>2]|0;
       $211 = (($210) + 12|0);
       $212 = HEAP32[$211>>2]|0;
       $213 = (($210) + 16|0);
       $214 = HEAP32[$213>>2]|0;
       $215 = ($212|0)==($214|0);
       if ($208) {
        if ($215) {
         $249 = HEAP32[$210>>2]|0;
         $250 = (($249) + 36|0);
         $251 = HEAP32[$250>>2]|0;
         __THREW__ = 0;
         $252 = (invoke_ii($251|0,($210|0))|0);
         $253 = __THREW__; __THREW__ = 0;
         $254 = $253&1;
         if ($254) {
          label = 26;
          break L4;
         }
         $$pre = HEAP8[$__nsn>>0]|0;
         $$0$i$i101 = $252;$257 = $$pre;
        } else {
         $255 = HEAP32[$212>>2]|0;
         $$0$i$i101 = $255;$257 = $185;
        }
        $256 = $257 & 1;
        $258 = ($256<<24>>24)==(0);
        $259 = HEAP32[$7>>2]|0;
        $$288 = $258 ? $6 : $259;
        $260 = HEAP32[$$288>>2]|0;
        $261 = ($$0$i$i101|0)==($260|0);
        if (!($261)) {
         $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L28;
        }
        $262 = HEAP32[$__b>>2]|0;
        $263 = (($262) + 12|0);
        $264 = HEAP32[$263>>2]|0;
        $265 = (($262) + 16|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($264|0)==($266|0);
        if ($267) {
         $268 = HEAP32[$262>>2]|0;
         $269 = (($268) + 40|0);
         $270 = HEAP32[$269>>2]|0;
         __THREW__ = 0;
         (invoke_ii($270|0,($262|0))|0);
         $271 = __THREW__; __THREW__ = 0;
         $272 = $271&1;
         if ($272) {
          label = 26;
          break L4;
         }
        } else {
         $273 = (($264) + 4|0);
         HEAP32[$263>>2] = $273;
        }
        HEAP8[$__neg>>0] = 1;
        $274 = HEAP8[$__nsn>>0]|0;
        $275 = $274 & 1;
        $276 = ($275<<24>>24)==(0);
        if ($276) {
         $278 = $274&255;
         $279 = $278 >>> 1;
         $281 = $279;
        } else {
         $277 = HEAP32[$6>>2]|0;
         $281 = $277;
        }
        $280 = ($281>>>0)>(1);
        $__nsn$__trailing_sign$0 = $280 ? $__nsn : $__trailing_sign$0252;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__nsn$__trailing_sign$0;
        break L28;
       }
       if ($215) {
        $216 = HEAP32[$210>>2]|0;
        $217 = (($216) + 36|0);
        $218 = HEAP32[$217>>2]|0;
        __THREW__ = 0;
        $219 = (invoke_ii($218|0,($210|0))|0);
        $220 = __THREW__; __THREW__ = 0;
        $221 = $220&1;
        if ($221) {
         label = 26;
         break L4;
        }
        $$pre263 = HEAP8[$__psn>>0]|0;
        $$0$i$i80 = $219;$224 = $$pre263;
       } else {
        $222 = HEAP32[$212>>2]|0;
        $$0$i$i80 = $222;$224 = $179;
       }
       $223 = $224 & 1;
       $225 = ($223<<24>>24)==(0);
       $226 = HEAP32[$9>>2]|0;
       $$ = $225 ? $8 : $226;
       $227 = HEAP32[$$>>2]|0;
       $228 = ($$0$i$i80|0)==($227|0);
       if (!($228)) {
        HEAP8[$__neg>>0] = 1;
        $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L28;
       }
       $229 = HEAP32[$__b>>2]|0;
       $230 = (($229) + 12|0);
       $231 = HEAP32[$230>>2]|0;
       $232 = (($229) + 16|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = ($231|0)==($233|0);
       if ($234) {
        $235 = HEAP32[$229>>2]|0;
        $236 = (($235) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        __THREW__ = 0;
        (invoke_ii($237|0,($229|0))|0);
        $238 = __THREW__; __THREW__ = 0;
        $239 = $238&1;
        if ($239) {
         label = 26;
         break L4;
        }
       } else {
        $240 = (($231) + 4|0);
        HEAP32[$230>>2] = $240;
       }
       $241 = HEAP8[$__psn>>0]|0;
       $242 = $241 & 1;
       $243 = ($242<<24>>24)==(0);
       if ($243) {
        $245 = $241&255;
        $246 = $245 >>> 1;
        $248 = $246;
       } else {
        $244 = HEAP32[$8>>2]|0;
        $248 = $244;
       }
       $247 = ($248>>>0)>(1);
       $__psn$__trailing_sign$0 = $247 ? $__psn : $__trailing_sign$0252;
       $859 = $858;$860 = $855;$__trailing_sign$1 = $__psn$__trailing_sign$0;
      }
      break;
     }
     case 1:  {
      $cond = ($__p$0250|0)==(3);
      if ($cond) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L4;
      }
      $75 = HEAP32[$__b>>2]|0;
      $76 = (($75) + 12|0);
      $77 = HEAP32[$76>>2]|0;
      $78 = (($75) + 16|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($77|0)==($79|0);
      if ($80) {
       $81 = HEAP32[$75>>2]|0;
       $82 = (($81) + 36|0);
       $83 = HEAP32[$82>>2]|0;
       __THREW__ = 0;
       $84 = (invoke_ii($83|0,($75|0))|0);
       $85 = __THREW__; __THREW__ = 0;
       $86 = $85&1;
       if ($86) {
        label = 26;
        break L4;
       } else {
        $$0$i$i37 = $84;
       }
      } else {
       $87 = HEAP32[$77>>2]|0;
       $$0$i$i37 = $87;
      }
      $88 = HEAP32[$__ct>>2]|0;
      $89 = (($88) + 12|0);
      $90 = HEAP32[$89>>2]|0;
      __THREW__ = 0;
      $91 = (invoke_iiii($90|0,($__ct|0),8192,($$0$i$i37|0))|0);
      $92 = __THREW__; __THREW__ = 0;
      $93 = $92&1;
      if ($93) {
       label = 26;
       break L4;
      }
      if (!($91)) {
       label = 42;
       break L4;
      }
      $94 = HEAP32[$__b>>2]|0;
      $95 = (($94) + 12|0);
      $96 = HEAP32[$95>>2]|0;
      $97 = (($94) + 16|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = ($96|0)==($98|0);
      if ($99) {
       $100 = HEAP32[$94>>2]|0;
       $101 = (($100) + 40|0);
       $102 = HEAP32[$101>>2]|0;
       __THREW__ = 0;
       $103 = (invoke_ii($102|0,($94|0))|0);
       $104 = __THREW__; __THREW__ = 0;
       $105 = $104&1;
       if ($105) {
        label = 26;
        break L4;
       } else {
        $$0$i$i41 = $103;
       }
      } else {
       $106 = (($96) + 4|0);
       HEAP32[$95>>2] = $106;
       $107 = HEAP32[$96>>2]|0;
       $$0$i$i41 = $107;
      }
      __THREW__ = 0;
      invoke_vii(623,($__spaces|0),($$0$i$i41|0));
      $108 = __THREW__; __THREW__ = 0;
      $109 = $108&1;
      if ($109) {
       label = 26;
       break L4;
      } else {
       label = 43;
      }
      break;
     }
     case 4:  {
      $51 = HEAP32[$__ts>>2]|0;
      $$pre$i3$i$i157 = $858;$529 = $858;$583 = $855;$__ng$0 = 0;
      L130: while(1) {
       $513 = HEAP32[$__b>>2]|0;
       $514 = ($513|0)==(0|0);
       do {
        if ($514) {
         $543 = 1;
        } else {
         $515 = (($513) + 12|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = (($513) + 16|0);
         $518 = HEAP32[$517>>2]|0;
         $519 = ($516|0)==($518|0);
         if ($519) {
          $520 = HEAP32[$513>>2]|0;
          $521 = (($520) + 36|0);
          $522 = HEAP32[$521>>2]|0;
          __THREW__ = 0;
          $523 = (invoke_ii($522|0,($513|0))|0);
          $524 = __THREW__; __THREW__ = 0;
          $525 = $524&1;
          if ($525) {
           label = 21;
           break L4;
          } else {
           $$0$i$i$i$i149 = $523;
          }
         } else {
          $526 = HEAP32[$516>>2]|0;
          $$0$i$i$i$i149 = $526;
         }
         $527 = ($$0$i$i$i$i149|0)==(-1);
         if ($527) {
          HEAP32[$__b>>2] = 0;
          $543 = 1;
          break;
         } else {
          $$pre$i$i$i151 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i152 = ($$pre$i$i$i151|0)==(0|0);
          $543 = $phitmp$i$i$i152;
          break;
         }
        }
       } while(0);
       $528 = ($529|0)==(0|0);
       do {
        if ($528) {
         $864 = $$pre$i3$i$i157;
         label = 207;
        } else {
         $530 = (($529) + 12|0);
         $531 = HEAP32[$530>>2]|0;
         $532 = (($529) + 16|0);
         $533 = HEAP32[$532>>2]|0;
         $534 = ($531|0)==($533|0);
         if ($534) {
          $535 = HEAP32[$529>>2]|0;
          $536 = (($535) + 36|0);
          $537 = HEAP32[$536>>2]|0;
          __THREW__ = 0;
          $538 = (invoke_ii($537|0,($529|0))|0);
          $539 = __THREW__; __THREW__ = 0;
          $540 = $539&1;
          if ($540) {
           label = 21;
           break L4;
          } else {
           $$0$i$i1$i$i155 = $538;
          }
         } else {
          $541 = HEAP32[$531>>2]|0;
          $$0$i$i1$i$i155 = $541;
         }
         $542 = ($$0$i$i1$i$i155|0)==(-1);
         if ($542) {
          HEAP32[$__e>>2] = 0;
          $864 = 0;
          label = 207;
          break;
         } else {
          $phitmp$i4$i$i158 = ($$pre$i3$i$i157|0)==(0|0);
          $tmp$i$i160 = $543 ^ $phitmp$i4$i$i158;
          if ($tmp$i$i160) {
           $865 = $$pre$i3$i$i157;$866 = $$pre$i3$i$i157;
           break;
          } else {
           $$pre$i3$i$i125 = $$pre$i3$i$i157;
           break L130;
          }
         }
        }
       } while(0);
       if ((label|0) == 207) {
        label = 0;
        if ($543) {
         $$pre$i3$i$i125 = $864;
         break;
        } else {
         $865 = $864;$866 = 0;
        }
       }
       $544 = HEAP32[$__b>>2]|0;
       $545 = (($544) + 12|0);
       $546 = HEAP32[$545>>2]|0;
       $547 = (($544) + 16|0);
       $548 = HEAP32[$547>>2]|0;
       $549 = ($546|0)==($548|0);
       if ($549) {
        $550 = HEAP32[$544>>2]|0;
        $551 = (($550) + 36|0);
        $552 = HEAP32[$551>>2]|0;
        __THREW__ = 0;
        $553 = (invoke_ii($552|0,($544|0))|0);
        $554 = __THREW__; __THREW__ = 0;
        $555 = $554&1;
        if ($555) {
         label = 21;
         break L4;
        } else {
         $$0$i$i146 = $553;
        }
       } else {
        $556 = HEAP32[$546>>2]|0;
        $$0$i$i146 = $556;
       }
       $557 = HEAP32[$__ct>>2]|0;
       $558 = (($557) + 12|0);
       $559 = HEAP32[$558>>2]|0;
       __THREW__ = 0;
       $560 = (invoke_iiii($559|0,($__ct|0),2048,($$0$i$i146|0))|0);
       $561 = __THREW__; __THREW__ = 0;
       $562 = $561&1;
       if ($562) {
        label = 21;
        break L4;
       }
       if ($560) {
        $563 = HEAP32[$__wn>>2]|0;
        $564 = HEAP32[$0>>2]|0;
        $565 = ($563|0)==($564|0);
        if ($565) {
         __THREW__ = 0;
         invoke_viii(624,($__wb|0),($__wn|0),($0|0));
         $566 = __THREW__; __THREW__ = 0;
         $567 = $566&1;
         if ($567) {
          label = 21;
          break L4;
         }
         $$pre275 = HEAP32[$__wn>>2]|0;
         $569 = $$pre275;
        } else {
         $569 = $563;
        }
        $568 = (($569) + 4|0);
        HEAP32[$__wn>>2] = $568;
        HEAP32[$569>>2] = $$0$i$i146;
        $570 = (($__ng$0) + 1)|0;
        $867 = $583;$__ng$1 = $570;
       } else {
        $571 = HEAP8[$__grp>>0]|0;
        $572 = $571 & 1;
        $573 = ($572<<24>>24)==(0);
        if ($573) {
         $575 = $571&255;
         $576 = $575 >>> 1;
         $578 = $576;
        } else {
         $574 = HEAP32[$17>>2]|0;
         $578 = $574;
        }
        $577 = ($578|0)!=(0);
        $579 = ($__ng$0|0)!=(0);
        $or$cond6 = $577 & $579;
        $580 = ($$0$i$i146|0)==($51|0);
        $or$cond12 = $or$cond6 & $580;
        if (!($or$cond12)) {
         $$pre$i3$i$i125 = $865;
         break;
        }
        $581 = HEAP32[$__ge>>2]|0;
        $582 = ($583|0)==($581|0);
        if ($582) {
         __THREW__ = 0;
         invoke_viii(617,($__gb|0),($__gn|0),($__ge|0));
         $584 = __THREW__; __THREW__ = 0;
         $585 = $584&1;
         if ($585) {
          label = 21;
          break L4;
         }
         $$pre277 = HEAP32[$__gn>>2]|0;
         $587 = $$pre277;
        } else {
         $587 = $583;
        }
        $586 = (($587) + 4|0);
        HEAP32[$__gn>>2] = $586;
        HEAP32[$587>>2] = $__ng$0;
        $867 = $586;$__ng$1 = 0;
       }
       $588 = HEAP32[$__b>>2]|0;
       $589 = (($588) + 12|0);
       $590 = HEAP32[$589>>2]|0;
       $591 = (($588) + 16|0);
       $592 = HEAP32[$591>>2]|0;
       $593 = ($590|0)==($592|0);
       if ($593) {
        $594 = HEAP32[$588>>2]|0;
        $595 = (($594) + 40|0);
        $596 = HEAP32[$595>>2]|0;
        __THREW__ = 0;
        (invoke_ii($596|0,($588|0))|0);
        $597 = __THREW__; __THREW__ = 0;
        $598 = $597&1;
        if ($598) {
         label = 21;
         break L4;
        } else {
         $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
         continue;
        }
       } else {
        $599 = (($590) + 4|0);
        HEAP32[$589>>2] = $599;
        $$pre$i3$i$i157 = $865;$529 = $866;$583 = $867;$__ng$0 = $__ng$1;
        continue;
       }
      }
      $600 = HEAP32[$__gb>>2]|0;
      $601 = ($600|0)!=($583|0);
      $602 = ($__ng$0|0)!=(0);
      $or$cond8 = $601 & $602;
      if ($or$cond8) {
       $603 = HEAP32[$__ge>>2]|0;
       $604 = ($583|0)==($603|0);
       if ($604) {
        __THREW__ = 0;
        invoke_viii(617,($__gb|0),($__gn|0),($__ge|0));
        $605 = __THREW__; __THREW__ = 0;
        $606 = $605&1;
        if ($606) {
         label = 26;
         break L4;
        }
        $$pre271 = HEAP32[$__gn>>2]|0;
        $608 = $$pre271;
       } else {
        $608 = $583;
       }
       $607 = (($608) + 4|0);
       HEAP32[$__gn>>2] = $607;
       HEAP32[$608>>2] = $__ng$0;
       $868 = $607;
      } else {
       $868 = $583;
      }
      $609 = HEAP32[$__fd>>2]|0;
      $610 = ($609|0)>(0);
      if ($610) {
       $611 = HEAP32[$__b>>2]|0;
       $612 = ($611|0)==(0|0);
       do {
        if ($612) {
         $870 = 1;
        } else {
         $613 = (($611) + 12|0);
         $614 = HEAP32[$613>>2]|0;
         $615 = (($611) + 16|0);
         $616 = HEAP32[$615>>2]|0;
         $617 = ($614|0)==($616|0);
         if ($617) {
          $618 = HEAP32[$611>>2]|0;
          $619 = (($618) + 36|0);
          $620 = HEAP32[$619>>2]|0;
          __THREW__ = 0;
          $621 = (invoke_ii($620|0,($611|0))|0);
          $622 = __THREW__; __THREW__ = 0;
          $623 = $622&1;
          if ($623) {
           label = 26;
           break L4;
          } else {
           $$0$i$i$i$i117 = $621;
          }
         } else {
          $624 = HEAP32[$614>>2]|0;
          $$0$i$i$i$i117 = $624;
         }
         $625 = ($$0$i$i$i$i117|0)==(-1);
         if ($625) {
          HEAP32[$__b>>2] = 0;
          $870 = 1;
          break;
         } else {
          $$pre$i$i$i119 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i120 = ($$pre$i$i$i119|0)==(0|0);
          $870 = $phitmp$i$i$i120;
          break;
         }
        }
       } while(0);
       $626 = ($$pre$i3$i$i125|0)==(0|0);
       do {
        if ($626) {
         label = 248;
        } else {
         $627 = (($$pre$i3$i$i125) + 12|0);
         $628 = HEAP32[$627>>2]|0;
         $629 = (($$pre$i3$i$i125) + 16|0);
         $630 = HEAP32[$629>>2]|0;
         $631 = ($628|0)==($630|0);
         if ($631) {
          $632 = HEAP32[$$pre$i3$i$i125>>2]|0;
          $633 = (($632) + 36|0);
          $634 = HEAP32[$633>>2]|0;
          __THREW__ = 0;
          $635 = (invoke_ii($634|0,($$pre$i3$i$i125|0))|0);
          $636 = __THREW__; __THREW__ = 0;
          $637 = $636&1;
          if ($637) {
           label = 26;
           break L4;
          } else {
           $$0$i$i1$i$i123 = $635;
          }
         } else {
          $638 = HEAP32[$628>>2]|0;
          $$0$i$i1$i$i123 = $638;
         }
         $639 = ($$0$i$i1$i$i123|0)==(-1);
         if ($639) {
          HEAP32[$__e>>2] = 0;
          label = 248;
          break;
         } else {
          if ($870) {
           $871 = $$pre$i3$i$i125;
           break;
          } else {
           label = 254;
           break L4;
          }
         }
        }
       } while(0);
       if ((label|0) == 248) {
        label = 0;
        if ($870) {
         label = 254;
         break L4;
        } else {
         $871 = 0;
        }
       }
       $640 = HEAP32[$__b>>2]|0;
       $641 = (($640) + 12|0);
       $642 = HEAP32[$641>>2]|0;
       $643 = (($640) + 16|0);
       $644 = HEAP32[$643>>2]|0;
       $645 = ($642|0)==($644|0);
       if ($645) {
        $646 = HEAP32[$640>>2]|0;
        $647 = (($646) + 36|0);
        $648 = HEAP32[$647>>2]|0;
        __THREW__ = 0;
        $649 = (invoke_ii($648|0,($640|0))|0);
        $650 = __THREW__; __THREW__ = 0;
        $651 = $650&1;
        if ($651) {
         label = 26;
         break L4;
        } else {
         $$0$i$i110 = $649;
        }
       } else {
        $652 = HEAP32[$642>>2]|0;
        $$0$i$i110 = $652;
       }
       $653 = HEAP32[$__dp>>2]|0;
       $654 = ($$0$i$i110|0)==($653|0);
       if (!($654)) {
        label = 254;
        break L4;
       }
       $657 = HEAP32[$__b>>2]|0;
       $658 = (($657) + 12|0);
       $659 = HEAP32[$658>>2]|0;
       $660 = (($657) + 16|0);
       $661 = HEAP32[$660>>2]|0;
       $662 = ($659|0)==($661|0);
       if ($662) {
        $663 = HEAP32[$657>>2]|0;
        $664 = (($663) + 40|0);
        $665 = HEAP32[$664>>2]|0;
        __THREW__ = 0;
        (invoke_ii($665|0,($657|0))|0);
        $666 = __THREW__; __THREW__ = 0;
        $667 = $666&1;
        if ($667) {
         label = 26;
         break L4;
        } else {
         $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
        }
       } else {
        $668 = (($659) + 4|0);
        HEAP32[$658>>2] = $668;
        $$pre$i3$i$i91 = $871;$685 = $871;$742 = $609;
       }
       while(1) {
        $669 = HEAP32[$__b>>2]|0;
        $670 = ($669|0)==(0|0);
        do {
         if ($670) {
          $699 = 1;
         } else {
          $671 = (($669) + 12|0);
          $672 = HEAP32[$671>>2]|0;
          $673 = (($669) + 16|0);
          $674 = HEAP32[$673>>2]|0;
          $675 = ($672|0)==($674|0);
          if ($675) {
           $676 = HEAP32[$669>>2]|0;
           $677 = (($676) + 36|0);
           $678 = HEAP32[$677>>2]|0;
           __THREW__ = 0;
           $679 = (invoke_ii($678|0,($669|0))|0);
           $680 = __THREW__; __THREW__ = 0;
           $681 = $680&1;
           if ($681) {
            label = 22;
            break L4;
           } else {
            $$0$i$i$i$i83 = $679;
           }
          } else {
           $682 = HEAP32[$672>>2]|0;
           $$0$i$i$i$i83 = $682;
          }
          $683 = ($$0$i$i$i$i83|0)==(-1);
          if ($683) {
           HEAP32[$__b>>2] = 0;
           $699 = 1;
           break;
          } else {
           $$pre$i$i$i85 = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i86 = ($$pre$i$i$i85|0)==(0|0);
           $699 = $phitmp$i$i$i86;
           break;
          }
         }
        } while(0);
        $684 = ($685|0)==(0|0);
        do {
         if ($684) {
          $$pre$i3$i$i91273$ph = $$pre$i3$i$i91;
          label = 271;
         } else {
          $686 = (($685) + 12|0);
          $687 = HEAP32[$686>>2]|0;
          $688 = (($685) + 16|0);
          $689 = HEAP32[$688>>2]|0;
          $690 = ($687|0)==($689|0);
          if ($690) {
           $691 = HEAP32[$685>>2]|0;
           $692 = (($691) + 36|0);
           $693 = HEAP32[$692>>2]|0;
           __THREW__ = 0;
           $694 = (invoke_ii($693|0,($685|0))|0);
           $695 = __THREW__; __THREW__ = 0;
           $696 = $695&1;
           if ($696) {
            label = 22;
            break L4;
           } else {
            $$0$i$i1$i$i89 = $694;
           }
          } else {
           $697 = HEAP32[$687>>2]|0;
           $$0$i$i1$i$i89 = $697;
          }
          $698 = ($$0$i$i1$i$i89|0)==(-1);
          if ($698) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i91273$ph = 0;
           label = 271;
           break;
          } else {
           $phitmp$i4$i$i92 = ($$pre$i3$i$i91|0)==(0|0);
           $tmp$i$i94 = $699 ^ $phitmp$i4$i$i92;
           if ($tmp$i$i94) {
            $$pre$i3$i$i91273284 = $$pre$i3$i$i91;$872 = $$pre$i3$i$i91;
            break;
           } else {
            label = 278;
            break L4;
           }
          }
         }
        } while(0);
        if ((label|0) == 271) {
         label = 0;
         if ($699) {
          label = 278;
          break L4;
         } else {
          $$pre$i3$i$i91273284 = $$pre$i3$i$i91273$ph;$872 = 0;
         }
        }
        $700 = HEAP32[$__b>>2]|0;
        $701 = (($700) + 12|0);
        $702 = HEAP32[$701>>2]|0;
        $703 = (($700) + 16|0);
        $704 = HEAP32[$703>>2]|0;
        $705 = ($702|0)==($704|0);
        if ($705) {
         $706 = HEAP32[$700>>2]|0;
         $707 = (($706) + 36|0);
         $708 = HEAP32[$707>>2]|0;
         __THREW__ = 0;
         $709 = (invoke_ii($708|0,($700|0))|0);
         $710 = __THREW__; __THREW__ = 0;
         $711 = $710&1;
         if ($711) {
          label = 22;
          break L4;
         } else {
          $$0$i$i77 = $709;
         }
        } else {
         $712 = HEAP32[$702>>2]|0;
         $$0$i$i77 = $712;
        }
        $713 = HEAP32[$__ct>>2]|0;
        $714 = (($713) + 12|0);
        $715 = HEAP32[$714>>2]|0;
        __THREW__ = 0;
        $716 = (invoke_iiii($715|0,($__ct|0),2048,($$0$i$i77|0))|0);
        $717 = __THREW__; __THREW__ = 0;
        $718 = $717&1;
        if ($718) {
         label = 22;
         break L4;
        }
        if (!($716)) {
         label = 278;
         break L4;
        }
        $721 = HEAP32[$__wn>>2]|0;
        $722 = HEAP32[$0>>2]|0;
        $723 = ($721|0)==($722|0);
        if ($723) {
         __THREW__ = 0;
         invoke_viii(624,($__wb|0),($__wn|0),($0|0));
         $724 = __THREW__; __THREW__ = 0;
         $725 = $724&1;
         if ($725) {
          label = 22;
          break L4;
         }
        }
        $726 = HEAP32[$__b>>2]|0;
        $727 = (($726) + 12|0);
        $728 = HEAP32[$727>>2]|0;
        $729 = (($726) + 16|0);
        $730 = HEAP32[$729>>2]|0;
        $731 = ($728|0)==($730|0);
        if ($731) {
         $732 = HEAP32[$726>>2]|0;
         $733 = (($732) + 36|0);
         $734 = HEAP32[$733>>2]|0;
         __THREW__ = 0;
         $735 = (invoke_ii($734|0,($726|0))|0);
         $736 = __THREW__; __THREW__ = 0;
         $737 = $736&1;
         if ($737) {
          label = 22;
          break L4;
         } else {
          $$0$i$i69 = $735;
         }
        } else {
         $738 = HEAP32[$728>>2]|0;
         $$0$i$i69 = $738;
        }
        $739 = HEAP32[$__wn>>2]|0;
        $740 = (($739) + 4|0);
        HEAP32[$__wn>>2] = $740;
        HEAP32[$739>>2] = $$0$i$i69;
        $741 = (($742) + -1)|0;
        HEAP32[$__fd>>2] = $741;
        $743 = HEAP32[$__b>>2]|0;
        $744 = (($743) + 12|0);
        $745 = HEAP32[$744>>2]|0;
        $746 = (($743) + 16|0);
        $747 = HEAP32[$746>>2]|0;
        $748 = ($745|0)==($747|0);
        if ($748) {
         $749 = HEAP32[$743>>2]|0;
         $750 = (($749) + 40|0);
         $751 = HEAP32[$750>>2]|0;
         __THREW__ = 0;
         (invoke_ii($751|0,($743|0))|0);
         $752 = __THREW__; __THREW__ = 0;
         $753 = $752&1;
         if ($753) {
          label = 22;
          break L4;
         }
        } else {
         $755 = (($745) + 4|0);
         HEAP32[$744>>2] = $755;
        }
        $754 = ($741|0)>(0);
        if ($754) {
         $$pre$i3$i$i91 = $$pre$i3$i$i91273284;$685 = $872;$742 = $741;
        } else {
         $869 = $$pre$i3$i$i91273284;
         break;
        }
       }
      } else {
       $869 = $$pre$i3$i$i125;
      }
      $756 = HEAP32[$__wn>>2]|0;
      $757 = HEAP32[$__wb>>2]|0;
      $758 = ($756|0)==($757|0);
      if ($758) {
       label = 289;
       break L4;
      } else {
       $859 = $869;$860 = $868;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 2:  {
      $356 = ($__trailing_sign$0252|0)!=(0|0);
      $357 = ($__p$0250>>>0)<(2);
      $or$cond = $356 | $357;
      if (!($or$cond)) {
       $358 = ($__p$0250|0)==(2);
       if ($358) {
        $359 = HEAP8[$16>>0]|0;
        $360 = ($359<<24>>24)!=(0);
        $361 = $360;
       } else {
        $361 = 0;
       }
       $brmerge = $11 | $361;
       if (!($brmerge)) {
        $859 = $858;$860 = $855;$__trailing_sign$1 = 0;
        break L28;
       }
      }
      $362 = HEAP8[$__sym>>0]|0;
      $363 = $362 & 1;
      $364 = ($363<<24>>24)==(0);
      $365 = HEAP32[$13>>2]|0;
      $$291 = $364 ? $12 : $365;
      $366 = ($__p$0250|0)==(0);
      L268: do {
       if ($366) {
        $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
       } else {
        $367 = (($__p$0250) + -1)|0;
        $368 = (($__pat) + ($367)|0);
        $369 = HEAP8[$368>>0]|0;
        $switch = ($369&255)<(2);
        if ($switch) {
         $371 = $362;$381 = $$291;
         while(1) {
          $370 = $371 & 1;
          $372 = ($370<<24>>24)==(0);
          if ($372) {
           $375 = $371&255;
           $376 = $375 >>> 1;
           $378 = $12;$379 = $376;
          } else {
           $373 = HEAP32[$13>>2]|0;
           $374 = HEAP32[$12>>2]|0;
           $378 = $373;$379 = $374;
          }
          $377 = (($378) + ($379<<2)|0);
          $380 = ($381|0)==($377|0);
          if ($380) {
           $391 = $371;
           break;
          }
          $382 = HEAP32[$381>>2]|0;
          $383 = HEAP32[$__ct>>2]|0;
          $384 = (($383) + 12|0);
          $385 = HEAP32[$384>>2]|0;
          __THREW__ = 0;
          $386 = (invoke_iiii($385|0,($__ct|0),8192,($382|0))|0);
          $387 = __THREW__; __THREW__ = 0;
          $388 = $387&1;
          if ($388) {
           label = 23;
           break L4;
          }
          if (!($386)) {
           label = 148;
           break;
          }
          $389 = (($381) + 4|0);
          $$pre265 = HEAP8[$__sym>>0]|0;
          $371 = $$pre265;$381 = $389;
         }
         if ((label|0) == 148) {
          label = 0;
          $$pre266 = HEAP8[$__sym>>0]|0;
          $391 = $$pre266;
         }
         $390 = $391 & 1;
         $392 = ($390<<24>>24)==(0);
         $393 = HEAP32[$13>>2]|0;
         $$292 = $392 ? $12 : $393;
         $394 = $381;
         $395 = $$292;
         $396 = (($394) - ($395))|0;
         $397 = $396 >> 2;
         $398 = HEAP8[$__spaces>>0]|0;
         $399 = $398 & 1;
         $400 = ($399<<24>>24)==(0);
         if ($400) {
          $402 = $398&255;
          $403 = $402 >>> 1;
          $405 = $403;
         } else {
          $401 = HEAP32[$14>>2]|0;
          $405 = $401;
         }
         $404 = ($397>>>0)>($405>>>0);
         L286: do {
          if (!($404)) {
           if ($400) {
            $409 = $398&255;
            $410 = $409 >>> 1;
            $$sum280 = (($410) - ($397))|0;
            $411 = (($14) + ($$sum280<<2)|0);
            $412 = $398&255;
            $413 = $412 >>> 1;
            $415 = $14;$416 = $413;$419 = $411;
           } else {
            $406 = HEAP32[$15>>2]|0;
            $407 = HEAP32[$14>>2]|0;
            $$sum = (($407) - ($397))|0;
            $408 = (($406) + ($$sum<<2)|0);
            $415 = $406;$416 = $407;$419 = $408;
           }
           $414 = (($415) + ($416<<2)|0);
           $417 = HEAP32[$13>>2]|0;
           $$293 = $392 ? $12 : $417;
           $418 = ($419|0)==($414|0);
           if ($418) {
            $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
            break L268;
           } else {
            $421 = $419;$423 = $$293;
           }
           while(1) {
            $420 = HEAP32[$421>>2]|0;
            $422 = HEAP32[$423>>2]|0;
            $424 = ($420|0)==($422|0);
            if (!($424)) {
             break L286;
            }
            $425 = (($421) + 4|0);
            $426 = (($423) + 4|0);
            $427 = ($425|0)==($414|0);
            if ($427) {
             $$pre$i3$i$i182 = $858;$430 = $391;$440 = $381;$457 = $858;
             break L268;
            } else {
             $421 = $425;$423 = $426;
            }
           }
          }
         } while(0);
         $428 = HEAP32[$13>>2]|0;
         $$294 = $392 ? $12 : $428;
         $$pre$i3$i$i182 = $858;$430 = $391;$440 = $$294;$457 = $858;
        } else {
         $$pre$i3$i$i182 = $858;$430 = $362;$440 = $$291;$457 = $858;
        }
       }
      } while(0);
      L296: while(1) {
       $429 = $430 & 1;
       $431 = ($429<<24>>24)==(0);
       if ($431) {
        $434 = $430&255;
        $435 = $434 >>> 1;
        $437 = $12;$438 = $435;
       } else {
        $432 = HEAP32[$13>>2]|0;
        $433 = HEAP32[$12>>2]|0;
        $437 = $432;$438 = $433;
       }
       $436 = (($437) + ($438<<2)|0);
       $439 = ($440|0)==($436|0);
       if ($439) {
        $862 = $$pre$i3$i$i182;
        break;
       }
       $441 = HEAP32[$__b>>2]|0;
       $442 = ($441|0)==(0|0);
       do {
        if ($442) {
         $471 = 1;
        } else {
         $443 = (($441) + 12|0);
         $444 = HEAP32[$443>>2]|0;
         $445 = (($441) + 16|0);
         $446 = HEAP32[$445>>2]|0;
         $447 = ($444|0)==($446|0);
         if ($447) {
          $448 = HEAP32[$441>>2]|0;
          $449 = (($448) + 36|0);
          $450 = HEAP32[$449>>2]|0;
          __THREW__ = 0;
          $451 = (invoke_ii($450|0,($441|0))|0);
          $452 = __THREW__; __THREW__ = 0;
          $453 = $452&1;
          if ($453) {
           label = 24;
           break L4;
          } else {
           $$0$i$i$i$i174 = $451;
          }
         } else {
          $454 = HEAP32[$444>>2]|0;
          $$0$i$i$i$i174 = $454;
         }
         $455 = ($$0$i$i$i$i174|0)==(-1);
         if ($455) {
          HEAP32[$__b>>2] = 0;
          $471 = 1;
          break;
         } else {
          $$pre$i$i$i176 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i177 = ($$pre$i$i$i176|0)==(0|0);
          $471 = $phitmp$i$i$i177;
          break;
         }
        }
       } while(0);
       $456 = ($457|0)==(0|0);
       do {
        if ($456) {
         $$pre$i3$i$i182269 = $$pre$i3$i$i182;
         label = 178;
        } else {
         $458 = (($457) + 12|0);
         $459 = HEAP32[$458>>2]|0;
         $460 = (($457) + 16|0);
         $461 = HEAP32[$460>>2]|0;
         $462 = ($459|0)==($461|0);
         if ($462) {
          $463 = HEAP32[$457>>2]|0;
          $464 = (($463) + 36|0);
          $465 = HEAP32[$464>>2]|0;
          __THREW__ = 0;
          $466 = (invoke_ii($465|0,($457|0))|0);
          $467 = __THREW__; __THREW__ = 0;
          $468 = $467&1;
          if ($468) {
           label = 24;
           break L4;
          } else {
           $$0$i$i1$i$i180 = $466;
          }
         } else {
          $469 = HEAP32[$459>>2]|0;
          $$0$i$i1$i$i180 = $469;
         }
         $470 = ($$0$i$i1$i$i180|0)==(-1);
         if ($470) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i182269 = 0;
          label = 178;
          break;
         } else {
          $phitmp$i4$i$i183 = ($$pre$i3$i$i182|0)==(0|0);
          $tmp$i$i185 = $471 ^ $phitmp$i4$i$i183;
          if ($tmp$i$i185) {
           $$pre$i3$i$i182268 = $$pre$i3$i$i182;$863 = $$pre$i3$i$i182;
           break;
          } else {
           $862 = $$pre$i3$i$i182;
           break L296;
          }
         }
        }
       } while(0);
       if ((label|0) == 178) {
        label = 0;
        if ($471) {
         $862 = $$pre$i3$i$i182269;
         break;
        } else {
         $$pre$i3$i$i182268 = $$pre$i3$i$i182269;$863 = 0;
        }
       }
       $472 = HEAP32[$__b>>2]|0;
       $473 = (($472) + 12|0);
       $474 = HEAP32[$473>>2]|0;
       $475 = (($472) + 16|0);
       $476 = HEAP32[$475>>2]|0;
       $477 = ($474|0)==($476|0);
       if ($477) {
        $478 = HEAP32[$472>>2]|0;
        $479 = (($478) + 36|0);
        $480 = HEAP32[$479>>2]|0;
        __THREW__ = 0;
        $481 = (invoke_ii($480|0,($472|0))|0);
        $482 = __THREW__; __THREW__ = 0;
        $483 = $482&1;
        if ($483) {
         label = 24;
         break L4;
        } else {
         $$0$i$i170 = $481;
        }
       } else {
        $484 = HEAP32[$474>>2]|0;
        $$0$i$i170 = $484;
       }
       $485 = HEAP32[$440>>2]|0;
       $486 = ($$0$i$i170|0)==($485|0);
       if (!($486)) {
        $862 = $$pre$i3$i$i182268;
        break;
       }
       $487 = HEAP32[$__b>>2]|0;
       $488 = (($487) + 12|0);
       $489 = HEAP32[$488>>2]|0;
       $490 = (($487) + 16|0);
       $491 = HEAP32[$490>>2]|0;
       $492 = ($489|0)==($491|0);
       if ($492) {
        $493 = HEAP32[$487>>2]|0;
        $494 = (($493) + 40|0);
        $495 = HEAP32[$494>>2]|0;
        __THREW__ = 0;
        (invoke_ii($495|0,($487|0))|0);
        $496 = __THREW__; __THREW__ = 0;
        $497 = $496&1;
        if ($497) {
         label = 24;
         break L4;
        }
       } else {
        $498 = (($489) + 4|0);
        HEAP32[$488>>2] = $498;
       }
       $499 = (($440) + 4|0);
       $$pre267 = HEAP8[$__sym>>0]|0;
       $$pre$i3$i$i182 = $$pre$i3$i$i182268;$430 = $$pre267;$440 = $499;$457 = $863;
      }
      if ($11) {
       $500 = HEAP8[$__sym>>0]|0;
       $501 = $500 & 1;
       $502 = ($501<<24>>24)==(0);
       if ($502) {
        $505 = $500&255;
        $506 = $505 >>> 1;
        $508 = $12;$509 = $506;
       } else {
        $503 = HEAP32[$13>>2]|0;
        $504 = HEAP32[$12>>2]|0;
        $508 = $503;$509 = $504;
       }
       $507 = (($508) + ($509<<2)|0);
       $510 = ($440|0)==($507|0);
       if ($510) {
        $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
       } else {
        label = 193;
        break L4;
       }
      } else {
       $859 = $862;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
      }
      break;
     }
     case 0:  {
      label = 43;
      break;
     }
     default: {
      $859 = $858;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
     }
     }
    } while(0);
    L340: do {
     if ((label|0) == 43) {
      label = 0;
      $112 = ($__p$0250|0)==(3);
      if ($112) {
       $843 = $855;$857 = $858;$__trailing_sign$0$lcssa = $__trailing_sign$0252;
       label = 291;
       break L4;
      } else {
       $$pre$i3$i$i51 = $858;$129 = $858;
      }
      while(1) {
       $113 = HEAP32[$__b>>2]|0;
       $114 = ($113|0)==(0|0);
       do {
        if ($114) {
         $143 = 1;
        } else {
         $115 = (($113) + 12|0);
         $116 = HEAP32[$115>>2]|0;
         $117 = (($113) + 16|0);
         $118 = HEAP32[$117>>2]|0;
         $119 = ($116|0)==($118|0);
         if ($119) {
          $120 = HEAP32[$113>>2]|0;
          $121 = (($120) + 36|0);
          $122 = HEAP32[$121>>2]|0;
          __THREW__ = 0;
          $123 = (invoke_ii($122|0,($113|0))|0);
          $124 = __THREW__; __THREW__ = 0;
          $125 = $124&1;
          if ($125) {
           label = 25;
           break L4;
          } else {
           $$0$i$i$i$i43 = $123;
          }
         } else {
          $126 = HEAP32[$116>>2]|0;
          $$0$i$i$i$i43 = $126;
         }
         $127 = ($$0$i$i$i$i43|0)==(-1);
         if ($127) {
          HEAP32[$__b>>2] = 0;
          $143 = 1;
          break;
         } else {
          $$pre$i$i$i45 = HEAP32[$__b>>2]|0;
          $phitmp$i$i$i46 = ($$pre$i$i$i45|0)==(0|0);
          $143 = $phitmp$i$i$i46;
          break;
         }
        }
       } while(0);
       $128 = ($129|0)==(0|0);
       do {
        if ($128) {
         $$pre$i3$i$i51260 = $$pre$i3$i$i51;
         label = 57;
        } else {
         $130 = (($129) + 12|0);
         $131 = HEAP32[$130>>2]|0;
         $132 = (($129) + 16|0);
         $133 = HEAP32[$132>>2]|0;
         $134 = ($131|0)==($133|0);
         if ($134) {
          $135 = HEAP32[$129>>2]|0;
          $136 = (($135) + 36|0);
          $137 = HEAP32[$136>>2]|0;
          __THREW__ = 0;
          $138 = (invoke_ii($137|0,($129|0))|0);
          $139 = __THREW__; __THREW__ = 0;
          $140 = $139&1;
          if ($140) {
           label = 25;
           break L4;
          } else {
           $$0$i$i1$i$i49 = $138;
          }
         } else {
          $141 = HEAP32[$131>>2]|0;
          $$0$i$i1$i$i49 = $141;
         }
         $142 = ($$0$i$i1$i$i49|0)==(-1);
         if ($142) {
          HEAP32[$__e>>2] = 0;
          $$pre$i3$i$i51260 = 0;
          label = 57;
          break;
         } else {
          $phitmp$i4$i$i52 = ($$pre$i3$i$i51|0)==(0|0);
          $tmp$i$i54 = $143 ^ $phitmp$i4$i$i52;
          if ($tmp$i$i54) {
           $$pre$i3$i$i51262 = $$pre$i3$i$i51;$861 = $$pre$i3$i$i51;
           break;
          } else {
           $859 = $$pre$i3$i$i51;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
           break L340;
          }
         }
        }
       } while(0);
       if ((label|0) == 57) {
        label = 0;
        if ($143) {
         $859 = $$pre$i3$i$i51260;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
         break L340;
        } else {
         $$pre$i3$i$i51262 = $$pre$i3$i$i51260;$861 = 0;
        }
       }
       $144 = HEAP32[$__b>>2]|0;
       $145 = (($144) + 12|0);
       $146 = HEAP32[$145>>2]|0;
       $147 = (($144) + 16|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($146|0)==($148|0);
       if ($149) {
        $150 = HEAP32[$144>>2]|0;
        $151 = (($150) + 36|0);
        $152 = HEAP32[$151>>2]|0;
        __THREW__ = 0;
        $153 = (invoke_ii($152|0,($144|0))|0);
        $154 = __THREW__; __THREW__ = 0;
        $155 = $154&1;
        if ($155) {
         label = 25;
         break L4;
        } else {
         $$0$i$i58 = $153;
        }
       } else {
        $156 = HEAP32[$146>>2]|0;
        $$0$i$i58 = $156;
       }
       $157 = HEAP32[$__ct>>2]|0;
       $158 = (($157) + 12|0);
       $159 = HEAP32[$158>>2]|0;
       __THREW__ = 0;
       $160 = (invoke_iiii($159|0,($__ct|0),8192,($$0$i$i58|0))|0);
       $161 = __THREW__; __THREW__ = 0;
       $162 = $161&1;
       if ($162) {
        label = 25;
        break L4;
       }
       if (!($160)) {
        $859 = $$pre$i3$i$i51262;$860 = $855;$__trailing_sign$1 = $__trailing_sign$0252;
        break L340;
       }
       $163 = HEAP32[$__b>>2]|0;
       $164 = (($163) + 12|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = (($163) + 16|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($165|0)==($167|0);
       if ($168) {
        $169 = HEAP32[$163>>2]|0;
        $170 = (($169) + 40|0);
        $171 = HEAP32[$170>>2]|0;
        __THREW__ = 0;
        $172 = (invoke_ii($171|0,($163|0))|0);
        $173 = __THREW__; __THREW__ = 0;
        $174 = $173&1;
        if ($174) {
         label = 25;
         break L4;
        } else {
         $$0$i$i64 = $172;
        }
       } else {
        $175 = (($165) + 4|0);
        HEAP32[$164>>2] = $175;
        $176 = HEAP32[$165>>2]|0;
        $$0$i$i64 = $176;
       }
       __THREW__ = 0;
       invoke_vii(623,($__spaces|0),($$0$i$i64|0));
       $177 = __THREW__; __THREW__ = 0;
       $178 = $177&1;
       if ($178) {
        label = 25;
        break L4;
       } else {
        $$pre$i3$i$i51 = $$pre$i3$i$i51262;$129 = $861;
       }
      }
     }
    } while(0);
    $761 = (($__p$0250) + 1)|0;
    $762 = ($761>>>0)<(4);
    if ($762) {
     $855 = $860;$__p$0250 = $761;$__trailing_sign$0252 = $__trailing_sign$1;
    } else {
     $843 = $860;$857 = $859;$__trailing_sign$0$lcssa = $__trailing_sign$1;
     label = 291;
     break;
    }
   }
   L377:    switch (label|0) {
    case 21: {
     $54 = ___cxa_find_matching_catch()|0;
     $55 = tempRet0;
     $lpad$phi$index = $54;$lpad$phi$index8 = $55;
     break L1;
     break;
    }
    case 22: {
     $56 = ___cxa_find_matching_catch()|0;
     $57 = tempRet0;
     $lpad$phi$index = $56;$lpad$phi$index8 = $57;
     break L1;
     break;
    }
    case 23: {
     $58 = ___cxa_find_matching_catch()|0;
     $59 = tempRet0;
     $lpad$phi$index = $58;$lpad$phi$index8 = $59;
     break L1;
     break;
    }
    case 24: {
     $60 = ___cxa_find_matching_catch()|0;
     $61 = tempRet0;
     $lpad$phi$index = $60;$lpad$phi$index8 = $61;
     break L1;
     break;
    }
    case 25: {
     $62 = ___cxa_find_matching_catch()|0;
     $63 = tempRet0;
     $lpad$phi$index = $62;$lpad$phi$index8 = $63;
     break L1;
     break;
    }
    case 26: {
     $64 = ___cxa_find_matching_catch()|0;
     $65 = tempRet0;
     $lpad$phi$index = $64;$lpad$phi$index8 = $65;
     break L1;
     break;
    }
    case 42: {
     $110 = HEAP32[$__err>>2]|0;
     $111 = $110 | 4;
     HEAP32[$__err>>2] = $111;
     $$0 = 0;
     break;
    }
    case 135: {
     $354 = HEAP32[$__err>>2]|0;
     $355 = $354 | 4;
     HEAP32[$__err>>2] = $355;
     $$0 = 0;
     break;
    }
    case 193: {
     $511 = HEAP32[$__err>>2]|0;
     $512 = $511 | 4;
     HEAP32[$__err>>2] = $512;
     $$0 = 0;
     break;
    }
    case 254: {
     $655 = HEAP32[$__err>>2]|0;
     $656 = $655 | 4;
     HEAP32[$__err>>2] = $656;
     $$0 = 0;
     break;
    }
    case 278: {
     $719 = HEAP32[$__err>>2]|0;
     $720 = $719 | 4;
     HEAP32[$__err>>2] = $720;
     $$0 = 0;
     break;
    }
    case 289: {
     $759 = HEAP32[$__err>>2]|0;
     $760 = $759 | 4;
     HEAP32[$__err>>2] = $760;
     $$0 = 0;
     break;
    }
    case 291: {
     $763 = ($__trailing_sign$0$lcssa|0)==(0|0);
     L391: do {
      if (!($763)) {
       $764 = (($__trailing_sign$0$lcssa) + 4|0);
       $765 = (($__trailing_sign$0$lcssa) + 8|0);
       $$pre$i3$i$i = $857;$790 = $857;$__i$0 = 1;
       L393: while(1) {
        $766 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $767 = $766 & 1;
        $768 = ($767<<24>>24)==(0);
        if ($768) {
         $770 = $766&255;
         $771 = $770 >>> 1;
         $773 = $771;
        } else {
         $769 = HEAP32[$764>>2]|0;
         $773 = $769;
        }
        $772 = ($__i$0>>>0)<($773>>>0);
        if (!($772)) {
         break L391;
        }
        $774 = HEAP32[$__b>>2]|0;
        $775 = ($774|0)==(0|0);
        do {
         if ($775) {
          $804 = 1;
         } else {
          $776 = (($774) + 12|0);
          $777 = HEAP32[$776>>2]|0;
          $778 = (($774) + 16|0);
          $779 = HEAP32[$778>>2]|0;
          $780 = ($777|0)==($779|0);
          if ($780) {
           $781 = HEAP32[$774>>2]|0;
           $782 = (($781) + 36|0);
           $783 = HEAP32[$782>>2]|0;
           __THREW__ = 0;
           $784 = (invoke_ii($783|0,($774|0))|0);
           $785 = __THREW__; __THREW__ = 0;
           $786 = $785&1;
           if ($786) {
            label = 20;
            break L393;
           } else {
            $$0$i$i$i$i = $784;
           }
          } else {
           $787 = HEAP32[$777>>2]|0;
           $$0$i$i$i$i = $787;
          }
          $788 = ($$0$i$i$i$i|0)==(-1);
          if ($788) {
           HEAP32[$__b>>2] = 0;
           $804 = 1;
           break;
          } else {
           $$pre$i$i$i = HEAP32[$__b>>2]|0;
           $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
           $804 = $phitmp$i$i$i;
           break;
          }
         }
        } while(0);
        $789 = ($790|0)==(0|0);
        do {
         if ($789) {
          $$pre$i3$i$i279$ph = $$pre$i3$i$i;
          label = 310;
         } else {
          $791 = (($790) + 12|0);
          $792 = HEAP32[$791>>2]|0;
          $793 = (($790) + 16|0);
          $794 = HEAP32[$793>>2]|0;
          $795 = ($792|0)==($794|0);
          if ($795) {
           $796 = HEAP32[$790>>2]|0;
           $797 = (($796) + 36|0);
           $798 = HEAP32[$797>>2]|0;
           __THREW__ = 0;
           $799 = (invoke_ii($798|0,($790|0))|0);
           $800 = __THREW__; __THREW__ = 0;
           $801 = $800&1;
           if ($801) {
            label = 20;
            break L393;
           } else {
            $$0$i$i1$i$i = $799;
           }
          } else {
           $802 = HEAP32[$792>>2]|0;
           $$0$i$i1$i$i = $802;
          }
          $803 = ($$0$i$i1$i$i|0)==(-1);
          if ($803) {
           HEAP32[$__e>>2] = 0;
           $$pre$i3$i$i279$ph = 0;
           label = 310;
           break;
          } else {
           $phitmp$i4$i$i = ($$pre$i3$i$i|0)==(0|0);
           $tmp$i$i = $804 ^ $phitmp$i4$i$i;
           if ($tmp$i$i) {
            $$pre$i3$i$i279287 = $$pre$i3$i$i;$873 = $$pre$i3$i$i;
            break;
           } else {
            label = 318;
            break L393;
           }
          }
         }
        } while(0);
        if ((label|0) == 310) {
         label = 0;
         if ($804) {
          label = 318;
          break;
         } else {
          $$pre$i3$i$i279287 = $$pre$i3$i$i279$ph;$873 = 0;
         }
        }
        $805 = HEAP32[$__b>>2]|0;
        $806 = (($805) + 12|0);
        $807 = HEAP32[$806>>2]|0;
        $808 = (($805) + 16|0);
        $809 = HEAP32[$808>>2]|0;
        $810 = ($807|0)==($809|0);
        if ($810) {
         $811 = HEAP32[$805>>2]|0;
         $812 = (($811) + 36|0);
         $813 = HEAP32[$812>>2]|0;
         __THREW__ = 0;
         $814 = (invoke_ii($813|0,($805|0))|0);
         $815 = __THREW__; __THREW__ = 0;
         $816 = $815&1;
         if ($816) {
          label = 20;
          break;
         } else {
          $$0$i$i = $814;
         }
        } else {
         $817 = HEAP32[$807>>2]|0;
         $$0$i$i = $817;
        }
        $818 = HEAP8[$__trailing_sign$0$lcssa>>0]|0;
        $819 = $818 & 1;
        $820 = ($819<<24>>24)==(0);
        if ($820) {
         $823 = $764;
        } else {
         $821 = HEAP32[$765>>2]|0;
         $823 = $821;
        }
        $822 = (($823) + ($__i$0<<2)|0);
        $824 = HEAP32[$822>>2]|0;
        $825 = ($$0$i$i|0)==($824|0);
        if (!($825)) {
         label = 318;
         break;
        }
        $828 = (($__i$0) + 1)|0;
        $829 = HEAP32[$__b>>2]|0;
        $830 = (($829) + 12|0);
        $831 = HEAP32[$830>>2]|0;
        $832 = (($829) + 16|0);
        $833 = HEAP32[$832>>2]|0;
        $834 = ($831|0)==($833|0);
        if ($834) {
         $835 = HEAP32[$829>>2]|0;
         $836 = (($835) + 40|0);
         $837 = HEAP32[$836>>2]|0;
         __THREW__ = 0;
         (invoke_ii($837|0,($829|0))|0);
         $838 = __THREW__; __THREW__ = 0;
         $839 = $838&1;
         if ($839) {
          label = 20;
          break;
         } else {
          $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
          continue;
         }
        } else {
         $840 = (($831) + 4|0);
         HEAP32[$830>>2] = $840;
         $$pre$i3$i$i = $$pre$i3$i$i279287;$790 = $873;$__i$0 = $828;
         continue;
        }
       }
       if ((label|0) == 20) {
        $52 = ___cxa_find_matching_catch()|0;
        $53 = tempRet0;
        $lpad$phi$index = $52;$lpad$phi$index8 = $53;
        break L1;
       }
       else if ((label|0) == 318) {
        $826 = HEAP32[$__err>>2]|0;
        $827 = $826 | 4;
        HEAP32[$__err>>2] = $827;
        $$0 = 0;
        break L377;
       }
      }
     } while(0);
     $841 = HEAP32[$__gb>>2]|0;
     $842 = ($841|0)==($843|0);
     if ($842) {
      $$0 = 1;
     } else {
      HEAP32[$__et>>2] = 0;
      __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$841,$843,$__et);
      $844 = HEAP32[$__et>>2]|0;
      $845 = ($844|0)==(0);
      if ($845) {
       $$0 = 1;
      } else {
       $846 = HEAP32[$__err>>2]|0;
       $847 = $846 | 4;
       HEAP32[$__err>>2] = $847;
       $$0 = 0;
      }
     }
     break;
    }
   }
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $848 = HEAP32[$__gb>>2]|0;
   HEAP32[$__gb>>2] = 0;
   $849 = ($848|0)==(0|0);
   if ($849) {
    STACKTOP = sp;return ($$0|0);
   }
   $850 = HEAP32[$1>>2]|0;
   __THREW__ = 0;
   invoke_vi($850|0,($848|0));
   $851 = __THREW__; __THREW__ = 0;
   $852 = $851&1;
   if ($852) {
    $853 = ___cxa_find_matching_catch(0|0)|0;
    $854 = tempRet0;
    ___clang_call_terminate($853);
    // unreachable;
   } else {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $68 = HEAP32[$__gb>>2]|0;
 HEAP32[$__gb>>2] = 0;
 $69 = ($68|0)==(0|0);
 if ($69) {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 $70 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($70|0,($68|0));
 $71 = __THREW__; __THREW__ = 0;
 $72 = $71&1;
 if ($72) {
  $73 = ___cxa_find_matching_catch(0|0)|0;
  $74 = tempRet0;
  ___clang_call_terminate($73);
  // unreachable;
 } else {
  ___resumeException($lpad$phi$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0111 = 0, $$0112 = 0, $$013 = 0, $$014 = 0, $$byval_copy = 0, $$pre = 0, $$pre$i$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, $phitmp$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 4|0;
 $__wbuf = sp + 16|0;
 $__wb = sp + 8|0;
 $__wn = sp + 420|0;
 $__loc = sp;
 $__neg = sp + 424|0;
 $0 = sp + 416|0;
 HEAP32[$__wb>>2] = $__wbuf;
 $1 = (($__wb) + 4|0);
 HEAP32[$1>>2] = 612;
 $2 = (($__wbuf) + 400|0);
 __THREW__ = 0;
 invoke_vii(457,($__loc|0),($__iob|0));
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $31 = ___cxa_find_matching_catch()|0;
  $32 = tempRet0;
  HEAP32[$__wb>>2] = 0;
  $$0111 = $32;$$013 = $31;$94 = $__wbuf;
 } else {
  __THREW__ = 0;
  $5 = (invoke_iii(458,($__loc|0),(12408|0))|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  L3: do {
   if (!($7)) {
    HEAP8[$__neg>>0] = 0;
    $8 = HEAP32[$__e>>2]|0;
    HEAP32[$0>>2] = $8;
    $9 = (($__iob) + 4|0);
    $10 = HEAP32[$9>>2]|0;
    __THREW__ = 0;
    ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
    $11 = (invoke_iiiiiiiiiiii(621,($__b|0),($$byval_copy|0),($__intl|0),($__loc|0),($10|0),($__err|0),($__neg|0),($5|0),($__wb|0),($__wn|0),($2|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     if ($11) {
      $14 = HEAP8[$__v>>0]|0;
      $15 = $14 & 1;
      $16 = ($15<<24>>24)==(0);
      if ($16) {
       $20 = (($__v) + 4|0);
       HEAP32[$20>>2] = 0;
       HEAP8[$__v>>0] = 0;
      } else {
       $17 = (($__v) + 8|0);
       $18 = HEAP32[$17>>2]|0;
       HEAP32[$18>>2] = 0;
       $19 = (($__v) + 4|0);
       HEAP32[$19>>2] = 0;
      }
      $21 = HEAP8[$__neg>>0]|0;
      $22 = ($21<<24>>24)==(0);
      if (!($22)) {
       $23 = HEAP32[$5>>2]|0;
       $24 = (($23) + 44|0);
       $25 = HEAP32[$24>>2]|0;
       __THREW__ = 0;
       $26 = (invoke_iii($25|0,($5|0),45)|0);
       $27 = __THREW__; __THREW__ = 0;
       $28 = $27&1;
       if ($28) {
        break;
       }
       __THREW__ = 0;
       invoke_vii(623,($__v|0),($26|0));
       $29 = __THREW__; __THREW__ = 0;
       $30 = $29&1;
       if ($30) {
        break;
       }
      }
      $33 = HEAP32[$5>>2]|0;
      $34 = (($33) + 44|0);
      $35 = HEAP32[$34>>2]|0;
      __THREW__ = 0;
      $36 = (invoke_iii($35|0,($5|0),48)|0);
      $37 = __THREW__; __THREW__ = 0;
      $38 = $37&1;
      if ($38) {
       break;
      }
      $39 = HEAP32[$__wb>>2]|0;
      $40 = HEAP32[$__wn>>2]|0;
      $41 = (($40) + -4|0);
      $42 = ($39>>>0)<($41>>>0);
      L17: do {
       if ($42) {
        $__w$05 = $39;
        while(1) {
         $45 = HEAP32[$__w$05>>2]|0;
         $46 = ($45|0)==($36|0);
         $44 = (($__w$05) + 4|0);
         if (!($46)) {
          $__w$0$lcssa = $__w$05;
          break L17;
         }
         $43 = ($44>>>0)<($41>>>0);
         if ($43) {
          $__w$05 = $44;
         } else {
          $__w$0$lcssa = $44;
          break;
         }
        }
       } else {
        $__w$0$lcssa = $39;
       }
      } while(0);
      __THREW__ = 0;
      (invoke_iiii(625,($__v|0),($__w$0$lcssa|0),($40|0))|0);
      $47 = __THREW__; __THREW__ = 0;
      $48 = $47&1;
      if ($48) {
       break;
      }
     }
     $49 = HEAP32[$__b>>2]|0;
     $50 = ($49|0)==(0|0);
     do {
      if ($50) {
       $99 = 1;
      } else {
       $51 = (($49) + 12|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = (($49) + 16|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($52|0)==($54|0);
       if ($55) {
        $56 = HEAP32[$49>>2]|0;
        $57 = (($56) + 36|0);
        $58 = HEAP32[$57>>2]|0;
        __THREW__ = 0;
        $59 = (invoke_ii($58|0,($49|0))|0);
        $60 = __THREW__; __THREW__ = 0;
        $61 = $60&1;
        if ($61) {
         break L3;
        } else {
         $$0$i$i$i$i = $59;
        }
       } else {
        $62 = HEAP32[$52>>2]|0;
        $$0$i$i$i$i = $62;
       }
       $63 = ($$0$i$i$i$i|0)==(-1);
       if ($63) {
        HEAP32[$__b>>2] = 0;
        $99 = 1;
        break;
       } else {
        $$pre$i$i$i = HEAP32[$__b>>2]|0;
        $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
        $99 = $phitmp$i$i$i;
        break;
       }
      }
     } while(0);
     $64 = ($8|0)==(0|0);
     do {
      if ($64) {
       label = 30;
      } else {
       $65 = (($8) + 12|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = (($8) + 16|0);
       $68 = HEAP32[$67>>2]|0;
       $69 = ($66|0)==($68|0);
       if ($69) {
        $70 = HEAP32[$8>>2]|0;
        $71 = (($70) + 36|0);
        $72 = HEAP32[$71>>2]|0;
        __THREW__ = 0;
        $73 = (invoke_ii($72|0,($8|0))|0);
        $74 = __THREW__; __THREW__ = 0;
        $75 = $74&1;
        if ($75) {
         break L3;
        } else {
         $$0$i$i1$i$i = $73;
        }
       } else {
        $76 = HEAP32[$66>>2]|0;
        $$0$i$i1$i$i = $76;
       }
       $77 = ($$0$i$i1$i$i|0)==(-1);
       if ($77) {
        HEAP32[$__e>>2] = 0;
        label = 30;
        break;
       } else {
        if ($99) {
         break;
        } else {
         label = 32;
         break;
        }
       }
      }
     } while(0);
     if ((label|0) == 30) {
      if ($99) {
       label = 32;
      }
     }
     if ((label|0) == 32) {
      $78 = HEAP32[$__err>>2]|0;
      $79 = $78 | 2;
      HEAP32[$__err>>2] = $79;
     }
     $80 = HEAP32[$__b>>2]|0;
     HEAP32[$agg$result>>2] = $80;
     $81 = HEAP32[$__loc>>2]|0;
     (__ZNSt3__114__shared_count16__release_sharedEv($81)|0);
     $82 = HEAP32[$__wb>>2]|0;
     HEAP32[$__wb>>2] = 0;
     $83 = ($82|0)==(0|0);
     if ($83) {
      STACKTOP = sp;return;
     }
     $84 = HEAP32[$1>>2]|0;
     __THREW__ = 0;
     invoke_vi($84|0,($82|0));
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      STACKTOP = sp;return;
     }
    }
   }
  } while(0);
  $89 = ___cxa_find_matching_catch()|0;
  $90 = tempRet0;
  $91 = HEAP32[$__loc>>2]|0;
  (__ZNSt3__114__shared_count16__release_sharedEv($91)|0);
  $$pre = HEAP32[$__wb>>2]|0;
  HEAP32[$__wb>>2] = 0;
  $92 = ($$pre|0)==(0|0);
  if ($92) {
   $$0112 = $90;$$014 = $89;
   ___resumeException($$014|0);
   // unreachable;
  } else {
   $$0111 = $90;$$013 = $89;$94 = $$pre;
  }
 }
 $93 = HEAP32[$1>>2]|0;
 __THREW__ = 0;
 invoke_vi($93|0,($94|0));
 $95 = __THREW__; __THREW__ = 0;
 $96 = $95&1;
 if ($96) {
  $97 = ___cxa_find_matching_catch(0|0)|0;
  $98 = tempRet0;
  ___clang_call_terminate($97);
  // unreachable;
 } else {
  $$0112 = $$0111;$$014 = $$013;
  ___resumeException($$014|0);
  // unreachable;
 }
}
function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__psn,$__nsn,$__fd) {
 $__intl = $__intl|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__psn = $__psn|0;
 $__nsn = $__nsn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 40|0;
 $2 = sp + 76|0;
 $3 = sp + 4|0;
 $4 = sp + 88|0;
 $5 = sp + 100|0;
 $6 = sp + 28|0;
 $7 = sp + 64|0;
 $8 = sp + 52|0;
 $9 = sp + 16|0;
 if ($__intl) {
  $10 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11984)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$13 & 1023]($0,$10);
  $14 = HEAP32[$0>>2]|0;
  HEAP8[$__pat>>0]=$14&255;HEAP8[$__pat+1>>0]=($14>>8)&255;HEAP8[$__pat+2>>0]=($14>>16)&255;HEAP8[$__pat+3>>0]=$14>>24;
  $15 = HEAP32[$10>>2]|0;
  $16 = (($15) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  FUNCTION_TABLE_vii[$17 & 1023]($1,$10);
  $18 = HEAP8[$__nsn>>0]|0;
  $19 = $18 & 1;
  $20 = ($19<<24>>24)==(0);
  if ($20) {
   $24 = (($__nsn) + 4|0);
   HEAP32[$24>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $21 = (($__nsn) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   HEAP32[$22>>2] = 0;
   $23 = (($__nsn) + 4|0);
   HEAP32[$23>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__nsn|0),0);
  $25 = __THREW__; __THREW__ = 0;
  $26 = $25&1;
  if ($26) {
   $27 = ___cxa_find_matching_catch(0|0)|0;
   $28 = tempRet0;
   ___clang_call_terminate($27);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$1+8>>2]|0;
  ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  $29 = HEAP32[$10>>2]|0;
  $30 = (($29) + 28|0);
  $31 = HEAP32[$30>>2]|0;
  FUNCTION_TABLE_vii[$31 & 1023]($2,$10);
  $32 = HEAP8[$__psn>>0]|0;
  $33 = $32 & 1;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $38 = (($__psn) + 4|0);
   HEAP32[$38>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $35 = (($__psn) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   HEAP32[$36>>2] = 0;
   $37 = (($__psn) + 4|0);
   HEAP32[$37>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__psn|0),0);
  $39 = __THREW__; __THREW__ = 0;
  $40 = $39&1;
  if ($40) {
   $41 = ___cxa_find_matching_catch(0|0)|0;
   $42 = tempRet0;
   ___clang_call_terminate($41);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$2+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$2+8>>2]|0;
  ;HEAP32[$2+0>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  $43 = HEAP32[$10>>2]|0;
  $44 = (($43) + 12|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (FUNCTION_TABLE_ii[$45 & 1023]($10)|0);
  HEAP32[$__dp>>2] = $46;
  $47 = HEAP32[$10>>2]|0;
  $48 = (($47) + 16|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (FUNCTION_TABLE_ii[$49 & 1023]($10)|0);
  HEAP32[$__ts>>2] = $50;
  $51 = HEAP32[$10>>2]|0;
  $52 = (($51) + 20|0);
  $53 = HEAP32[$52>>2]|0;
  FUNCTION_TABLE_vii[$53 & 1023]($3,$10);
  $54 = HEAP8[$__grp>>0]|0;
  $55 = $54 & 1;
  $56 = ($55<<24>>24)==(0);
  if ($56) {
   $60 = (($__grp) + 1|0);
   HEAP8[$60>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $57 = (($__grp) + 8|0);
   $58 = HEAP32[$57>>2]|0;
   HEAP8[$58>>0] = 0;
   $59 = (($__grp) + 4|0);
   HEAP32[$59>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $61 = __THREW__; __THREW__ = 0;
  $62 = $61&1;
  if ($62) {
   $63 = ___cxa_find_matching_catch(0|0)|0;
   $64 = tempRet0;
   ___clang_call_terminate($63);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$3+8>>2]|0;
  ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  $65 = HEAP32[$10>>2]|0;
  $66 = (($65) + 24|0);
  $67 = HEAP32[$66>>2]|0;
  FUNCTION_TABLE_vii[$67 & 1023]($4,$10);
  $68 = HEAP8[$__sym>>0]|0;
  $69 = $68 & 1;
  $70 = ($69<<24>>24)==(0);
  if ($70) {
   $74 = (($__sym) + 4|0);
   HEAP32[$74>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $71 = (($__sym) + 8|0);
   $72 = HEAP32[$71>>2]|0;
   HEAP32[$72>>2] = 0;
   $73 = (($__sym) + 4|0);
   HEAP32[$73>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $75 = __THREW__; __THREW__ = 0;
  $76 = $75&1;
  if ($76) {
   $77 = ___cxa_find_matching_catch(0|0)|0;
   $78 = tempRet0;
   ___clang_call_terminate($77);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $79 = HEAP32[$10>>2]|0;
  $80 = (($79) + 36|0);
  $81 = HEAP32[$80>>2]|0;
  $82 = (FUNCTION_TABLE_ii[$81 & 1023]($10)|0);
  $storemerge = $82;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $83 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11920)|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = (($84) + 44|0);
  $86 = HEAP32[$85>>2]|0;
  FUNCTION_TABLE_vii[$86 & 1023]($5,$83);
  $87 = HEAP32[$5>>2]|0;
  HEAP8[$__pat>>0]=$87&255;HEAP8[$__pat+1>>0]=($87>>8)&255;HEAP8[$__pat+2>>0]=($87>>16)&255;HEAP8[$__pat+3>>0]=$87>>24;
  $88 = HEAP32[$83>>2]|0;
  $89 = (($88) + 32|0);
  $90 = HEAP32[$89>>2]|0;
  FUNCTION_TABLE_vii[$90 & 1023]($6,$83);
  $91 = HEAP8[$__nsn>>0]|0;
  $92 = $91 & 1;
  $93 = ($92<<24>>24)==(0);
  if ($93) {
   $97 = (($__nsn) + 4|0);
   HEAP32[$97>>2] = 0;
   HEAP8[$__nsn>>0] = 0;
  } else {
   $94 = (($__nsn) + 8|0);
   $95 = HEAP32[$94>>2]|0;
   HEAP32[$95>>2] = 0;
   $96 = (($__nsn) + 4|0);
   HEAP32[$96>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__nsn|0),0);
  $98 = __THREW__; __THREW__ = 0;
  $99 = $98&1;
  if ($99) {
   $100 = ___cxa_find_matching_catch(0|0)|0;
   $101 = tempRet0;
   ___clang_call_terminate($100);
   // unreachable;
  }
  ;HEAP32[$__nsn+0>>2]=HEAP32[$6+0>>2]|0;HEAP32[$__nsn+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$__nsn+8>>2]=HEAP32[$6+8>>2]|0;
  ;HEAP32[$6+0>>2]=0|0;HEAP32[$6+4>>2]=0|0;HEAP32[$6+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  $102 = HEAP32[$83>>2]|0;
  $103 = (($102) + 28|0);
  $104 = HEAP32[$103>>2]|0;
  FUNCTION_TABLE_vii[$104 & 1023]($7,$83);
  $105 = HEAP8[$__psn>>0]|0;
  $106 = $105 & 1;
  $107 = ($106<<24>>24)==(0);
  if ($107) {
   $111 = (($__psn) + 4|0);
   HEAP32[$111>>2] = 0;
   HEAP8[$__psn>>0] = 0;
  } else {
   $108 = (($__psn) + 8|0);
   $109 = HEAP32[$108>>2]|0;
   HEAP32[$109>>2] = 0;
   $110 = (($__psn) + 4|0);
   HEAP32[$110>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__psn|0),0);
  $112 = __THREW__; __THREW__ = 0;
  $113 = $112&1;
  if ($113) {
   $114 = ___cxa_find_matching_catch(0|0)|0;
   $115 = tempRet0;
   ___clang_call_terminate($114);
   // unreachable;
  }
  ;HEAP32[$__psn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__psn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__psn+8>>2]=HEAP32[$7+8>>2]|0;
  ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  $116 = HEAP32[$83>>2]|0;
  $117 = (($116) + 12|0);
  $118 = HEAP32[$117>>2]|0;
  $119 = (FUNCTION_TABLE_ii[$118 & 1023]($83)|0);
  HEAP32[$__dp>>2] = $119;
  $120 = HEAP32[$83>>2]|0;
  $121 = (($120) + 16|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = (FUNCTION_TABLE_ii[$122 & 1023]($83)|0);
  HEAP32[$__ts>>2] = $123;
  $124 = HEAP32[$83>>2]|0;
  $125 = (($124) + 20|0);
  $126 = HEAP32[$125>>2]|0;
  FUNCTION_TABLE_vii[$126 & 1023]($8,$83);
  $127 = HEAP8[$__grp>>0]|0;
  $128 = $127 & 1;
  $129 = ($128<<24>>24)==(0);
  if ($129) {
   $133 = (($__grp) + 1|0);
   HEAP8[$133>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $130 = (($__grp) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   HEAP8[$131>>0] = 0;
   $132 = (($__grp) + 4|0);
   HEAP32[$132>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $134 = __THREW__; __THREW__ = 0;
  $135 = $134&1;
  if ($135) {
   $136 = ___cxa_find_matching_catch(0|0)|0;
   $137 = tempRet0;
   ___clang_call_terminate($136);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$8+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$8+8>>2]|0;
  ;HEAP32[$8+0>>2]=0|0;HEAP32[$8+4>>2]=0|0;HEAP32[$8+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  $138 = HEAP32[$83>>2]|0;
  $139 = (($138) + 24|0);
  $140 = HEAP32[$139>>2]|0;
  FUNCTION_TABLE_vii[$140 & 1023]($9,$83);
  $141 = HEAP8[$__sym>>0]|0;
  $142 = $141 & 1;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $147 = (($__sym) + 4|0);
   HEAP32[$147>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $144 = (($__sym) + 8|0);
   $145 = HEAP32[$144>>2]|0;
   HEAP32[$145>>2] = 0;
   $146 = (($__sym) + 4|0);
   HEAP32[$146>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $148 = __THREW__; __THREW__ = 0;
  $149 = $148&1;
  if ($149) {
   $150 = ___cxa_find_matching_catch(0|0)|0;
   $151 = tempRet0;
   ___clang_call_terminate($150);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$9+8>>2]|0;
  ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $152 = HEAP32[$83>>2]|0;
  $153 = (($152) + 36|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = (FUNCTION_TABLE_ii[$154 & 1023]($83)|0);
  $storemerge = $155;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0;
 var $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 80|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 84|0;
 $__bb = sp + 48|0;
 $__digits = sp + 184|0;
 $__loc = sp + 76|0;
 $__pat = sp + 52|0;
 $__dp = sp + 284|0;
 $__ts = sp + 388|0;
 $__grp = sp + 64|0;
 $__sym = sp + 20|0;
 $__sn = sp + 32|0;
 $__fd = sp + 60|0;
 $__mbuf = sp + 288|0;
 $__mi = sp + 56|0;
 $__me = sp + 16|0;
 $0 = sp + 44|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,12168,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(595)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $112 = 0;$113 = 0;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(600,($__bb|0),($3|0),(12168|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $112 = 0;$113 = 0;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(601);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $112 = 0;$113 = 0;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $114 = $$pre;
     } else {
      $114 = $9;
     }
     $15 = (_malloc($6)|0);
     $16 = ($15|0)==(0|0);
     if ($16) {
      __THREW__ = 0;
      invoke_v(601);
      $17 = __THREW__; __THREW__ = 0;
      $18 = $17&1;
      if ($18) {
       $112 = $114;$113 = 0;
      } else {
       $107 = 0;$108 = $114;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $107 = $15;$108 = $114;$__db$0 = $15;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $107 = 0;$108 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(457,($__loc|0),($__iob|0));
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $112 = $108;$113 = $107;
  } else {
   __THREW__ = 0;
   $21 = (invoke_iii(458,($__loc|0),(12416|0))|0);
   $22 = __THREW__; __THREW__ = 0;
   $23 = $22&1;
   if ($23) {
    label = 35;
   } else {
    $24 = HEAP32[$__bb>>2]|0;
    $25 = (($24) + ($__n$0)|0);
    $26 = HEAP32[$21>>2]|0;
    $27 = (($26) + 32|0);
    $28 = HEAP32[$27>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($28|0,($21|0),($24|0),($25|0),($__db$0|0))|0);
    $29 = __THREW__; __THREW__ = 0;
    $30 = $29&1;
    if ($30) {
     label = 35;
    } else {
     $31 = ($__n$0|0)==(0);
     if ($31) {
      $35 = 0;
     } else {
      $32 = HEAP32[$__bb>>2]|0;
      $33 = HEAP8[$32>>0]|0;
      $34 = ($33<<24>>24)==(45);
      $35 = $34;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(627,($__intl|0),($35|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $36 = __THREW__; __THREW__ = 0;
     $37 = $36&1;
     do {
      if ($37) {
       $89 = ___cxa_find_matching_catch()|0;
       $90 = tempRet0;
       $$0 = $89;$$01 = $90;
      } else {
       $38 = HEAP32[$__fd>>2]|0;
       $39 = ($__n$0|0)>($38|0);
       if ($39) {
        $40 = (($__n$0) - ($38))|0;
        $41 = $40 << 1;
        $42 = HEAP8[$__sn>>0]|0;
        $43 = $42 & 1;
        $44 = ($43<<24>>24)==(0);
        if ($44) {
         $47 = $42&255;
         $48 = $47 >>> 1;
         $58 = $48;
        } else {
         $45 = (($__sn) + 4|0);
         $46 = HEAP32[$45>>2]|0;
         $58 = $46;
        }
        $49 = HEAP8[$__sym>>0]|0;
        $50 = $49 & 1;
        $51 = ($50<<24>>24)==(0);
        if ($51) {
         $54 = $49&255;
         $55 = $54 >>> 1;
         $60 = $55;
        } else {
         $52 = (($__sym) + 4|0);
         $53 = HEAP32[$52>>2]|0;
         $60 = $53;
        }
        $56 = $41 | 1;
        $57 = (($58) + ($56))|0;
        $59 = (($57) + ($60))|0;
        $$pn = $59;
       } else {
        $61 = HEAP8[$__sn>>0]|0;
        $62 = $61 & 1;
        $63 = ($62<<24>>24)==(0);
        if ($63) {
         $66 = $61&255;
         $67 = $66 >>> 1;
         $76 = $67;
        } else {
         $64 = (($__sn) + 4|0);
         $65 = HEAP32[$64>>2]|0;
         $76 = $65;
        }
        $68 = HEAP8[$__sym>>0]|0;
        $69 = $68 & 1;
        $70 = ($69<<24>>24)==(0);
        if ($70) {
         $73 = $68&255;
         $74 = $73 >>> 1;
         $78 = $74;
        } else {
         $71 = (($__sym) + 4|0);
         $72 = HEAP32[$71>>2]|0;
         $78 = $72;
        }
        $75 = (($76) + 2)|0;
        $77 = (($75) + ($78))|0;
        $$pn = $77;
       }
       $79 = (($$pn) + ($38))|0;
       $80 = ($79>>>0)>(100);
       if ($80) {
        $81 = (_malloc($79)|0);
        $82 = ($81|0)==(0|0);
        if ($82) {
         __THREW__ = 0;
         invoke_v(601);
         $83 = __THREW__; __THREW__ = 0;
         $84 = $83&1;
         if ($84) {
          $85 = ___cxa_find_matching_catch()|0;
          $86 = tempRet0;
          $$0 = $85;$$01 = $86;
          break;
         } else {
          $93 = 0;$__mb$0 = 0;
         }
        } else {
         $93 = $81;$__mb$0 = $81;
        }
       } else {
        $93 = 0;$__mb$0 = $__mbuf;
       }
       $94 = (($__iob) + 4|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = (($__db$0) + ($__n$0)|0);
       $97 = HEAP8[$__dp>>0]|0;
       $98 = HEAP8[$__ts>>0]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(628,($__mb$0|0),($__mi|0),($__me|0),($95|0),($__db$0|0),($96|0),($21|0),($35|0),($__pat|0),($97|0),($98|0),($__grp|0),($__sym|0),($__sn|0),($38|0));
       $99 = __THREW__; __THREW__ = 0;
       $100 = $99&1;
       if (!($100)) {
        $101 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $101;
        $102 = HEAP32[$__mi>>2]|0;
        $103 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(460,($agg$result|0),($$byval_copy|0),($__mb$0|0),($102|0),($103|0),($__iob|0),($__fl|0));
        $104 = __THREW__; __THREW__ = 0;
        $105 = $104&1;
        if (!($105)) {
         _free($93);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $106 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($106)|0);
         _free($107);
         _free($108);
         STACKTOP = sp;return;
        }
       }
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       _free($93);
       $$0 = $91;$$01 = $92;
      }
     } while(0);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $87 = ___cxa_find_matching_catch()|0;
    $88 = tempRet0;
    $$1 = $87;$$12 = $88;
   }
   $109 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($109)|0);
   $$2 = $$1;$$23 = $$12;$110 = $107;$111 = $108;
   _free($110);
   _free($111);
   ___resumeException($$2|0);
   // unreachable;
  }
 }
 $13 = ___cxa_find_matching_catch()|0;
 $14 = tempRet0;
 $$2 = $13;$$23 = $14;$110 = $113;$111 = $112;
 _free($110);
 _free($111);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 92|0;
 $3 = sp + 40|0;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 28|0;
 $10 = sp + 4|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11856)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 1|0);
     HEAP8[$26>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP8[$24>>0] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(620,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 1|0);
     HEAP8[$43>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP8[$41>>0] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(620,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP8[$__dp>>0] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP8[$__ts>>0] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 1|0);
   HEAP8[$79>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP8[$77>>0] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11792)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 1|0);
     HEAP8[$102>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP8[$100>>0] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(620,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 1|0);
     HEAP8[$119>>0] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP8[$117>>0] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(620,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP8[$__dp>>0] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP8[$__ts>>0] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 1|0);
   HEAP8[$155>>0] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP8[$153>>0] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i20 = 0, $$01$i$i = 0, $$01$i$i18 = 0, $$012$i$i = 0, $$055 = 0, $$2 = 0, $$lcssa41 = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa63 = 0, $__d$032 = 0, $__d$1$lcssa77 = 0, $__d$1$lcssa78 = 0, $__d$135 = 0, $__d$2 = 0, $__d$348 = 0, $__f$0$lcssa75 = 0;
 var $__f$0$lcssa76 = 0, $__f$036 = 0, $__f$142 = 0, $__gl$051 = 0, $__gl$1 = 0, $__ig$050 = 0, $__ig$1 = 0, $__ng$049 = 0, $__ng$1 = 0, $__p$054 = 0, $exitcond = 0, $isascii1$i = 0, $or$cond = 0, $or$cond3 = 0, $scevgep66 = 0, $scevgep6667 = 0, $scevgep68 = 0, $umax = 0, $umax65 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 1|0);
 $1 = (($__sn) + 8|0);
 $2 = (($__sn) + 4|0);
 $3 = $__flags & 512;
 $4 = ($3|0)==(0);
 $5 = (($__sym) + 1|0);
 $6 = (($__sym) + 8|0);
 $7 = (($__sym) + 4|0);
 $8 = ($__fd|0)>(0);
 $9 = (($__grp) + 1|0);
 $10 = (($__grp) + 8|0);
 $11 = (($__grp) + 4|0);
 $12 = (($__ct) + 8|0);
 $13 = (0 - ($__fd))|0;
 $$055 = $__db;$__p$054 = 0;
 while(1) {
  $14 = (($__pat) + ($__p$054)|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = $15 << 24 >> 24;
  switch ($16|0) {
  case 0:  {
   $17 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $17;
   $$2 = $$055;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$055) + 1|0);
   $$$0 = $__neg ? $62 : $$055;
   $63 = ($$$0>>>0)<($__de>>>0);
   L6: do {
    if ($63) {
     $__d$032 = $$$0;
     while(1) {
      $66 = HEAP8[$__d$032>>0]|0;
      $isascii1$i = ($66<<24>>24)>(-1);
      if (!($isascii1$i)) {
       $__d$0$lcssa = $__d$032;
       break L6;
      }
      $67 = $66 << 24 >> 24;
      $68 = HEAP32[$12>>2]|0;
      $69 = (($68) + ($67<<1)|0);
      $70 = HEAP16[$69>>1]|0;
      $71 = $70 & 2048;
      $72 = ($71<<16>>16)==(0);
      $65 = (($__d$032) + 1|0);
      if ($72) {
       $__d$0$lcssa = $__d$032;
       break L6;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$032 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   $__d$0$lcssa63 = $__d$0$lcssa;
   if ($8) {
    $73 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($73) {
     $74 = $$$0;
     $75 = (($74) - ($__d$0$lcssa63))|0;
     $76 = ($75>>>0)<($13>>>0);
     $umax = $76 ? $13 : $75;
     $umax65 = $umax;
     $scevgep66 = (($umax65) + ($__fd)|0);
     $scevgep6667 = $scevgep66;
     $80 = $61;$__d$135 = $__d$0$lcssa;$__f$036 = $__fd;
     while(1) {
      $77 = (($__d$135) + -1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($80) + 1|0);
      HEAP32[$__me>>2] = $79;
      HEAP8[$80>>0] = $78;
      $81 = (($__f$036) + -1)|0;
      $82 = ($77>>>0)>($$$0>>>0);
      $83 = ($81|0)>(0);
      $or$cond = $82 & $83;
      if (!($or$cond)) {
       break;
      }
      $$pre = HEAP32[$__me>>2]|0;
      $80 = $$pre;$__d$135 = $77;$__f$036 = $81;
     }
     $scevgep68 = (($__d$0$lcssa) + ($umax)|0);
     if ($83) {
      $__d$1$lcssa78 = $scevgep68;$__f$0$lcssa76 = $scevgep6667;
      label = 32;
     } else {
      $91 = 0;$__d$1$lcssa77 = $scevgep68;$__f$0$lcssa75 = $scevgep6667;
     }
    } else {
     $__d$1$lcssa78 = $__d$0$lcssa;$__f$0$lcssa76 = $__fd;
     label = 32;
    }
    if ((label|0) == 32) {
     label = 0;
     $84 = HEAP32[$__ct>>2]|0;
     $85 = (($84) + 28|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (FUNCTION_TABLE_iii[$86 & 1023]($__ct,48)|0);
     $91 = $87;$__d$1$lcssa77 = $__d$1$lcssa78;$__f$0$lcssa75 = $__f$0$lcssa76;
    }
    $88 = ($__f$0$lcssa75|0)>(0);
    $89 = HEAP32[$__me>>2]|0;
    $90 = (($89) + 1|0);
    HEAP32[$__me>>2] = $90;
    if ($88) {
     $92 = $89;$__f$142 = $__f$0$lcssa75;
     while(1) {
      HEAP8[$92>>0] = $91;
      $93 = (($__f$142) + -1)|0;
      $94 = ($93|0)>(0);
      $95 = HEAP32[$__me>>2]|0;
      $96 = (($95) + 1|0);
      HEAP32[$__me>>2] = $96;
      if ($94) {
       $92 = $95;$__f$142 = $93;
      } else {
       $$lcssa41 = $95;
       break;
      }
     }
    } else {
     $$lcssa41 = $89;
    }
    HEAP8[$$lcssa41>>0] = $__dp;
    $__d$2 = $__d$1$lcssa77;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $97 = ($__d$2|0)==($$$0|0);
   if ($97) {
    $98 = HEAP32[$__ct>>2]|0;
    $99 = (($98) + 28|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = (FUNCTION_TABLE_iii[$100 & 1023]($__ct,48)|0);
    $102 = HEAP32[$__me>>2]|0;
    $103 = (($102) + 1|0);
    HEAP32[$__me>>2] = $103;
    HEAP8[$102>>0] = $101;
   } else {
    $104 = HEAP8[$__grp>>0]|0;
    $105 = $104 & 1;
    $106 = ($105<<24>>24)==(0);
    if ($106) {
     $108 = $104&255;
     $109 = $108 >>> 1;
     $111 = $109;
    } else {
     $107 = HEAP32[$11>>2]|0;
     $111 = $107;
    }
    $110 = ($111|0)==(0);
    if ($110) {
     $__d$348 = $__d$2;$__gl$051 = -1;$__ig$050 = 0;$__ng$049 = 0;
    } else {
     if ($106) {
      $114 = $9;
     } else {
      $112 = HEAP32[$10>>2]|0;
      $114 = $112;
     }
     $113 = HEAP8[$114>>0]|0;
     $115 = $113 << 24 >> 24;
     $__d$348 = $__d$2;$__gl$051 = $115;$__ig$050 = 0;$__ng$049 = 0;
    }
    while(1) {
     $116 = ($__ng$049|0)==($__gl$051|0);
     if ($116) {
      $117 = HEAP32[$__me>>2]|0;
      $118 = (($117) + 1|0);
      HEAP32[$__me>>2] = $118;
      HEAP8[$117>>0] = $__ts;
      $119 = (($__ig$050) + 1)|0;
      $120 = HEAP8[$__grp>>0]|0;
      $121 = $120 & 1;
      $122 = ($121<<24>>24)==(0);
      if ($122) {
       $124 = $120&255;
       $125 = $124 >>> 1;
       $127 = $125;
      } else {
       $123 = HEAP32[$11>>2]|0;
       $127 = $123;
      }
      $126 = ($119>>>0)<($127>>>0);
      if ($126) {
       if ($122) {
        $130 = $9;
       } else {
        $128 = HEAP32[$10>>2]|0;
        $130 = $128;
       }
       $129 = (($130) + ($119)|0);
       $131 = HEAP8[$129>>0]|0;
       $132 = ($131<<24>>24)==(127);
       if ($132) {
        $__gl$1 = -1;$__ig$1 = $119;$__ng$1 = 0;
       } else {
        if ($122) {
         $135 = $9;
        } else {
         $133 = HEAP32[$10>>2]|0;
         $135 = $133;
        }
        $134 = (($135) + ($119)|0);
        $136 = HEAP8[$134>>0]|0;
        $137 = $136 << 24 >> 24;
        $__gl$1 = $137;$__ig$1 = $119;$__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$051;$__ig$1 = $119;$__ng$1 = 0;
      }
     } else {
      $__gl$1 = $__gl$051;$__ig$1 = $__ig$050;$__ng$1 = $__ng$049;
     }
     $138 = (($__d$348) + -1|0);
     $139 = HEAP8[$138>>0]|0;
     $140 = HEAP32[$__me>>2]|0;
     $141 = (($140) + 1|0);
     HEAP32[$__me>>2] = $141;
     HEAP8[$140>>0] = $139;
     $142 = (($__ng$1) + 1)|0;
     $143 = ($138|0)==($$$0|0);
     if ($143) {
      break;
     } else {
      $__d$348 = $138;$__gl$051 = $__gl$1;$__ig$050 = $__ig$1;$__ng$049 = $142;
     }
    }
   }
   $144 = HEAP32[$__me>>2]|0;
   $145 = ($61|0)==($144|0);
   if ($145) {
    $$2 = $$$0;
   } else {
    $146 = (($144) + -1|0);
    $147 = ($146>>>0)>($61>>>0);
    if ($147) {
     $$012$i$i = $61;$150 = $146;
     while(1) {
      $148 = HEAP8[$$012$i$i>>0]|0;
      $149 = HEAP8[$150>>0]|0;
      HEAP8[$$012$i$i>>0] = $149;
      HEAP8[$150>>0] = $148;
      $151 = (($$012$i$i) + 1|0);
      $152 = (($150) + -1|0);
      $153 = ($151>>>0)<($152>>>0);
      if ($153) {
       $$012$i$i = $151;$150 = $152;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 3:  {
   $25 = HEAP8[$__sn>>0]|0;
   $26 = $25 & 1;
   $27 = ($26<<24>>24)==(0);
   if ($27) {
    $29 = $25&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $28 = HEAP32[$2>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    $$2 = $$055;
   } else {
    if ($27) {
     $35 = $0;
    } else {
     $33 = HEAP32[$1>>2]|0;
     $35 = $33;
    }
    $34 = HEAP8[$35>>0]|0;
    $36 = HEAP32[$__me>>2]|0;
    $37 = (($36) + 1|0);
    HEAP32[$__me>>2] = $37;
    HEAP8[$36>>0] = $34;
    $$2 = $$055;
   }
   break;
  }
  case 1:  {
   $18 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $18;
   $19 = HEAP32[$__ct>>2]|0;
   $20 = (($19) + 28|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (FUNCTION_TABLE_iii[$21 & 1023]($__ct,32)|0);
   $23 = HEAP32[$__me>>2]|0;
   $24 = (($23) + 1|0);
   HEAP32[$__me>>2] = $24;
   HEAP8[$23>>0] = $22;
   $$2 = $$055;
   break;
  }
  case 2:  {
   $38 = HEAP8[$__sym>>0]|0;
   $39 = $38 & 1;
   $40 = ($39<<24>>24)==(0);
   if ($40) {
    $42 = $38&255;
    $43 = $42 >>> 1;
    $45 = $43;
   } else {
    $41 = HEAP32[$7>>2]|0;
    $45 = $41;
   }
   $44 = ($45|0)==(0);
   $or$cond3 = $44 | $4;
   if ($or$cond3) {
    $$2 = $$055;
   } else {
    if ($40) {
     $48 = $38&255;
     $49 = $48 >>> 1;
     $51 = $5;$52 = $49;$55 = $5;
    } else {
     $46 = HEAP32[$6>>2]|0;
     $47 = HEAP32[$7>>2]|0;
     $51 = $46;$52 = $47;$55 = $46;
    }
    $50 = (($51) + ($52)|0);
    $53 = HEAP32[$__me>>2]|0;
    $54 = ($55|0)==($50|0);
    if ($54) {
     $$0$lcssa$i$i20 = $53;
    } else {
     $$01$i$i18 = $53;$57 = $55;
     while(1) {
      $56 = HEAP8[$57>>0]|0;
      HEAP8[$$01$i$i18>>0] = $56;
      $58 = (($57) + 1|0);
      $59 = (($$01$i$i18) + 1|0);
      $60 = ($58|0)==($50|0);
      if ($60) {
       $$0$lcssa$i$i20 = $59;
       break;
      } else {
       $$01$i$i18 = $59;$57 = $58;
      }
     }
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i20;
    $$2 = $$055;
   }
   break;
  }
  default: {
   $$2 = $$055;
  }
  }
  $154 = (($__p$054) + 1)|0;
  $exitcond = ($154|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$055 = $$2;$__p$054 = $154;
  }
 }
 $155 = HEAP8[$__sn>>0]|0;
 $156 = $155 & 1;
 $157 = ($156<<24>>24)==(0);
 if ($157) {
  $159 = $155&255;
  $160 = $159 >>> 1;
  $162 = $160;
 } else {
  $158 = HEAP32[$2>>2]|0;
  $162 = $158;
 }
 $161 = ($162>>>0)>(1);
 if ($161) {
  if ($157) {
   $165 = $155&255;
   $166 = $165 >>> 1;
   $$pn = $0;$169 = $0;$170 = $166;
  } else {
   $163 = HEAP32[$1>>2]|0;
   $164 = HEAP32[$2>>2]|0;
   $$pn = $163;$169 = $163;$170 = $164;
  }
  $167 = (($$pn) + 1|0);
  $168 = (($169) + ($170)|0);
  $171 = HEAP32[$__me>>2]|0;
  $172 = ($167|0)==($168|0);
  if ($172) {
   $$0$lcssa$i$i = $171;
  } else {
   $$01$i$i = $171;$174 = $167;
   while(1) {
    $173 = HEAP8[$174>>0]|0;
    HEAP8[$$01$i$i>>0] = $173;
    $175 = (($174) + 1|0);
    $176 = (($$01$i$i) + 1|0);
    $177 = ($175|0)==($168|0);
    if ($177) {
     $$0$lcssa$i$i = $176;
     break;
    } else {
     $$01$i$i = $176;$174 = $175;
    }
   }
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0;
 var $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 20|0;
 $__loc = sp + 24|0;
 $__pat = sp + 12|0;
 $__dp = sp + 64|0;
 $__ts = sp + 65|0;
 $__grp = sp;
 $__sym = sp + 52|0;
 $__sn = sp + 32|0;
 $__fd = sp + 28|0;
 $__mbuf = sp + 68|0;
 $__mi = sp + 44|0;
 $__me = sp + 48|0;
 $0 = sp + 16|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(458,($__loc|0),(12416|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 1|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP8[$17>>0]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 28|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16<<24>>24)==($21<<24>>24);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(627,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $92 = ___cxa_find_matching_catch()|0;
     $93 = tempRet0;
     $$0 = $92;$$01 = $93;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = (_malloc($82)|0);
       $85 = ($84|0)==(0|0);
       if ($85) {
        __THREW__ = 0;
        invoke_v(601);
        $86 = __THREW__; __THREW__ = 0;
        $87 = $86&1;
        if ($87) {
         $88 = ___cxa_find_matching_catch()|0;
         $89 = tempRet0;
         $$0 = $88;$$01 = $89;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $100 = $$pre;$96 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $100 = $28;$96 = $84;$__mb$0 = $84;
       }
      } else {
       $100 = $28;$96 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $97 = (($__iob) + 4|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = $100 & 1;
     $101 = ($99<<24>>24)==(0);
     if ($101) {
      $106 = (($__digits) + 1|0);
      $107 = $100&255;
      $108 = $107 >>> 1;
      $110 = $106;$111 = $108;
     } else {
      $102 = (($__digits) + 8|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = (($__digits) + 4|0);
      $105 = HEAP32[$104>>2]|0;
      $110 = $103;$111 = $105;
     }
     $109 = (($110) + ($111)|0);
     $112 = HEAP8[$__dp>>0]|0;
     $113 = HEAP8[$__ts>>0]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(628,($__mb$0|0),($__mi|0),($__me|0),($98|0),($110|0),($109|0),($1|0),($25|0),($__pat|0),($112|0),($113|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $114 = __THREW__; __THREW__ = 0;
     $115 = $114&1;
     if (!($115)) {
      $116 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $116;
      $117 = HEAP32[$__mi>>2]|0;
      $118 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(460,($agg$result|0),($$byval_copy|0),($__mb$0|0),($117|0),($118|0),($__iob|0),($__fl|0));
      $119 = __THREW__; __THREW__ = 0;
      $120 = $119&1;
      if (!($120)) {
       _free($96);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $121 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($121)|0);
       STACKTOP = sp;return;
      }
     }
     $94 = ___cxa_find_matching_catch()|0;
     $95 = tempRet0;
     _free($96);
     $$0 = $94;$$01 = $95;
    }
   } while(0);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $122 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $90 = ___cxa_find_matching_catch()|0;
 $91 = tempRet0;
 $$1 = $90;$$12 = $91;
 $122 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($122)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__units) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__units = +$__units;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$2 = 0, $$23 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0;
 var $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 444|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $__buf = sp + 896|0;
 $__bb = sp + 20|0;
 $__digits = sp + 32|0;
 $__loc = sp + 24|0;
 $__pat = sp + 436|0;
 $__dp = sp + 888|0;
 $__ts = sp + 892|0;
 $__grp = sp + 448|0;
 $__sym = sp + 460|0;
 $__sn = sp + 472|0;
 $__fd = sp + 484|0;
 $__mbuf = sp + 488|0;
 $__mi = sp + 16|0;
 $__me = sp + 432|0;
 $0 = sp + 440|0;
 HEAP32[$__bb>>2] = $__buf;
 HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer+4>>2]=HEAP32[tempDoublePtr+4>>2];
 $1 = (_snprintf($__buf,100,12168,$vararg_buffer)|0);
 $2 = ($1>>>0)>(99);
 do {
  if ($2) {
   __THREW__ = 0;
   $3 = (invoke_i(595)|0);
   $4 = __THREW__; __THREW__ = 0;
   $5 = $4&1;
   if ($5) {
    $118 = 0;$119 = 0;
    label = 7;
   } else {
    __THREW__ = 0;
    HEAPF64[tempDoublePtr>>3]=$__units;HEAP32[$vararg_buffer1>>2]=HEAP32[tempDoublePtr>>2];HEAP32[$vararg_buffer1+4>>2]=HEAP32[tempDoublePtr+4>>2];
    $6 = (invoke_iiiii(600,($__bb|0),($3|0),(12168|0),($vararg_buffer1|0))|0);
    $7 = __THREW__; __THREW__ = 0;
    $8 = $7&1;
    if ($8) {
     $118 = 0;$119 = 0;
     label = 7;
    } else {
     $9 = HEAP32[$__bb>>2]|0;
     $10 = ($9|0)==(0|0);
     if ($10) {
      __THREW__ = 0;
      invoke_v(601);
      $11 = __THREW__; __THREW__ = 0;
      $12 = $11&1;
      if ($12) {
       $118 = 0;$119 = 0;
       label = 7;
       break;
      }
      $$pre = HEAP32[$__bb>>2]|0;
      $120 = $$pre;
     } else {
      $120 = $9;
     }
     $15 = $6 << 2;
     $16 = (_malloc($15)|0);
     $17 = ($16|0)==(0|0);
     if ($17) {
      __THREW__ = 0;
      invoke_v(601);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if ($19) {
       $118 = $120;$119 = 0;
       label = 7;
      } else {
       $112 = 0;$113 = $120;$__db$0 = 0;$__n$0 = $6;
       label = 10;
      }
     } else {
      $112 = $16;$113 = $120;$__db$0 = $16;$__n$0 = $6;
      label = 10;
     }
    }
   }
  } else {
   $112 = 0;$113 = 0;$__db$0 = $__digits;$__n$0 = $1;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  __THREW__ = 0;
  invoke_vii(457,($__loc|0),($__iob|0));
  $20 = __THREW__; __THREW__ = 0;
  $21 = $20&1;
  if ($21) {
   $118 = $113;$119 = $112;
   label = 7;
  } else {
   __THREW__ = 0;
   $22 = (invoke_iii(458,($__loc|0),(12408|0))|0);
   $23 = __THREW__; __THREW__ = 0;
   $24 = $23&1;
   if ($24) {
    label = 35;
   } else {
    $25 = HEAP32[$__bb>>2]|0;
    $26 = (($25) + ($__n$0)|0);
    $27 = HEAP32[$22>>2]|0;
    $28 = (($27) + 48|0);
    $29 = HEAP32[$28>>2]|0;
    __THREW__ = 0;
    (invoke_iiiii($29|0,($22|0),($25|0),($26|0),($__db$0|0))|0);
    $30 = __THREW__; __THREW__ = 0;
    $31 = $30&1;
    if ($31) {
     label = 35;
    } else {
     $32 = ($__n$0|0)==(0);
     if ($32) {
      $36 = 0;
     } else {
      $33 = HEAP32[$__bb>>2]|0;
      $34 = HEAP8[$33>>0]|0;
      $35 = ($34<<24>>24)==(45);
      $36 = $35;
     }
     HEAP32[$__pat>>2] = 0;
     ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
     ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
     ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
     __THREW__ = 0;
     invoke_viiiiiiiiii(629,($__intl|0),($36|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     do {
      if ($38) {
       $91 = ___cxa_find_matching_catch()|0;
       $92 = tempRet0;
       $$0 = $91;$$01 = $92;
      } else {
       $39 = HEAP32[$__fd>>2]|0;
       $40 = ($__n$0|0)>($39|0);
       if ($40) {
        $41 = (($__n$0) - ($39))|0;
        $42 = $41 << 1;
        $43 = HEAP8[$__sn>>0]|0;
        $44 = $43 & 1;
        $45 = ($44<<24>>24)==(0);
        if ($45) {
         $48 = $43&255;
         $49 = $48 >>> 1;
         $59 = $49;
        } else {
         $46 = (($__sn) + 4|0);
         $47 = HEAP32[$46>>2]|0;
         $59 = $47;
        }
        $50 = HEAP8[$__sym>>0]|0;
        $51 = $50 & 1;
        $52 = ($51<<24>>24)==(0);
        if ($52) {
         $55 = $50&255;
         $56 = $55 >>> 1;
         $61 = $56;
        } else {
         $53 = (($__sym) + 4|0);
         $54 = HEAP32[$53>>2]|0;
         $61 = $54;
        }
        $57 = $42 | 1;
        $58 = (($59) + ($57))|0;
        $60 = (($58) + ($61))|0;
        $$pn = $60;
       } else {
        $62 = HEAP8[$__sn>>0]|0;
        $63 = $62 & 1;
        $64 = ($63<<24>>24)==(0);
        if ($64) {
         $67 = $62&255;
         $68 = $67 >>> 1;
         $77 = $68;
        } else {
         $65 = (($__sn) + 4|0);
         $66 = HEAP32[$65>>2]|0;
         $77 = $66;
        }
        $69 = HEAP8[$__sym>>0]|0;
        $70 = $69 & 1;
        $71 = ($70<<24>>24)==(0);
        if ($71) {
         $74 = $69&255;
         $75 = $74 >>> 1;
         $79 = $75;
        } else {
         $72 = (($__sym) + 4|0);
         $73 = HEAP32[$72>>2]|0;
         $79 = $73;
        }
        $76 = (($77) + 2)|0;
        $78 = (($76) + ($79))|0;
        $$pn = $78;
       }
       $80 = (($$pn) + ($39))|0;
       $81 = ($80>>>0)>(100);
       if ($81) {
        $82 = $80 << 2;
        $83 = (_malloc($82)|0);
        $84 = ($83|0)==(0|0);
        if ($84) {
         __THREW__ = 0;
         invoke_v(601);
         $85 = __THREW__; __THREW__ = 0;
         $86 = $85&1;
         if ($86) {
          $87 = ___cxa_find_matching_catch()|0;
          $88 = tempRet0;
          $$0 = $87;$$01 = $88;
          break;
         } else {
          $96 = 0;$__mb$0 = 0;
         }
        } else {
         $96 = $83;$__mb$0 = $83;
        }
       } else {
        $96 = 0;$__mb$0 = $__mbuf;
       }
       $97 = (($__iob) + 4|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = (($__db$0) + ($__n$0<<2)|0);
       $100 = HEAP32[$__dp>>2]|0;
       $101 = HEAP32[$__ts>>2]|0;
       __THREW__ = 0;
       invoke_viiiiiiiiiiiiiii(630,($__mb$0|0),($__mi|0),($__me|0),($98|0),($__db$0|0),($99|0),($22|0),($36|0),($__pat|0),($100|0),($101|0),($__grp|0),($__sym|0),($__sn|0),($39|0));
       $102 = __THREW__; __THREW__ = 0;
       $103 = $102&1;
       if (!($103)) {
        $104 = HEAP32[$__s>>2]|0;
        HEAP32[$0>>2] = $104;
        $105 = HEAP32[$__mi>>2]|0;
        $106 = HEAP32[$__me>>2]|0;
        __THREW__ = 0;
        ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
        invoke_viiiiiii(608,($agg$result|0),($$byval_copy|0),($__mb$0|0),($105|0),($106|0),($__iob|0),($__fl|0));
        $107 = __THREW__; __THREW__ = 0;
        $108 = $107&1;
        if (!($108)) {
         $109 = ($96|0)==(0|0);
         if (!($109)) {
          _free($96);
         }
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
         __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
         __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
         $110 = HEAP32[$__loc>>2]|0;
         (__ZNSt3__114__shared_count16__release_sharedEv($110)|0);
         $111 = ($112|0)==(0|0);
         if ($111) {
          _free($113);
          STACKTOP = sp;return;
         }
         _free($112);
         _free($113);
         STACKTOP = sp;return;
        }
       }
       $93 = ___cxa_find_matching_catch()|0;
       $94 = tempRet0;
       $95 = ($96|0)==(0|0);
       if ($95) {
        $$0 = $93;$$01 = $94;
       } else {
        _free($96);
        $$0 = $93;$$01 = $94;
       }
      }
     } while(0);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
     $$1 = $$0;$$12 = $$01;
    }
   }
   if ((label|0) == 35) {
    $89 = ___cxa_find_matching_catch()|0;
    $90 = tempRet0;
    $$1 = $89;$$12 = $90;
   }
   $114 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($114)|0);
   $$2 = $$1;$$23 = $$12;$116 = $112;$117 = $113;
  }
 }
 if ((label|0) == 7) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $$2 = $13;$$23 = $14;$116 = $119;$117 = $118;
 }
 $115 = ($116|0)==(0|0);
 if ($115) {
  _free($117);
  ___resumeException($$2|0);
  // unreachable;
 }
 _free($116);
 _free($117);
 ___resumeException($$2|0);
 // unreachable;
}
function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__intl = $__intl|0;
 $__neg = $__neg|0;
 $__loc = $__loc|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 $1 = sp + 16|0;
 $2 = sp + 92|0;
 $3 = sp + 40|0;
 $4 = sp + 80|0;
 $5 = sp + 96|0;
 $6 = sp + 108|0;
 $7 = sp + 56|0;
 $8 = sp + 52|0;
 $9 = sp + 28|0;
 $10 = sp + 4|0;
 $11 = sp + 68|0;
 if ($__intl) {
  $12 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11984)|0);
  $13 = HEAP32[$12>>2]|0;
  do {
   if ($__neg) {
    $14 = (($13) + 44|0);
    $15 = HEAP32[$14>>2]|0;
    FUNCTION_TABLE_vii[$15 & 1023]($0,$12);
    $16 = HEAP32[$0>>2]|0;
    HEAP8[$__pat>>0]=$16&255;HEAP8[$__pat+1>>0]=($16>>8)&255;HEAP8[$__pat+2>>0]=($16>>16)&255;HEAP8[$__pat+3>>0]=$16>>24;
    $17 = HEAP32[$12>>2]|0;
    $18 = (($17) + 32|0);
    $19 = HEAP32[$18>>2]|0;
    FUNCTION_TABLE_vii[$19 & 1023]($1,$12);
    $20 = HEAP8[$__sn>>0]|0;
    $21 = $20 & 1;
    $22 = ($21<<24>>24)==(0);
    if ($22) {
     $26 = (($__sn) + 4|0);
     HEAP32[$26>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $23 = (($__sn) + 8|0);
     $24 = HEAP32[$23>>2]|0;
     HEAP32[$24>>2] = 0;
     $25 = (($__sn) + 4|0);
     HEAP32[$25>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$1+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$1+8>>2]|0;
     ;HEAP32[$1+0>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
     break;
    }
   } else {
    $31 = (($13) + 40|0);
    $32 = HEAP32[$31>>2]|0;
    FUNCTION_TABLE_vii[$32 & 1023]($2,$12);
    $33 = HEAP32[$2>>2]|0;
    HEAP8[$__pat>>0]=$33&255;HEAP8[$__pat+1>>0]=($33>>8)&255;HEAP8[$__pat+2>>0]=($33>>16)&255;HEAP8[$__pat+3>>0]=$33>>24;
    $34 = HEAP32[$12>>2]|0;
    $35 = (($34) + 28|0);
    $36 = HEAP32[$35>>2]|0;
    FUNCTION_TABLE_vii[$36 & 1023]($3,$12);
    $37 = HEAP8[$__sn>>0]|0;
    $38 = $37 & 1;
    $39 = ($38<<24>>24)==(0);
    if ($39) {
     $43 = (($__sn) + 4|0);
     HEAP32[$43>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $40 = (($__sn) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     HEAP32[$41>>2] = 0;
     $42 = (($__sn) + 4|0);
     HEAP32[$42>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     $46 = ___cxa_find_matching_catch(0|0)|0;
     $47 = tempRet0;
     ___clang_call_terminate($46);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$3+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$3+8>>2]|0;
     ;HEAP32[$3+0>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
     break;
    }
   }
  } while(0);
  $48 = HEAP32[$12>>2]|0;
  $49 = (($48) + 12|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (FUNCTION_TABLE_ii[$50 & 1023]($12)|0);
  HEAP32[$__dp>>2] = $51;
  $52 = HEAP32[$12>>2]|0;
  $53 = (($52) + 16|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = (FUNCTION_TABLE_ii[$54 & 1023]($12)|0);
  HEAP32[$__ts>>2] = $55;
  $56 = HEAP32[$12>>2]|0;
  $57 = (($56) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  FUNCTION_TABLE_vii[$58 & 1023]($4,$12);
  $59 = HEAP8[$__grp>>0]|0;
  $60 = $59 & 1;
  $61 = ($60<<24>>24)==(0);
  if ($61) {
   $65 = (($__grp) + 1|0);
   HEAP8[$65>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $62 = (($__grp) + 8|0);
   $63 = HEAP32[$62>>2]|0;
   HEAP8[$63>>0] = 0;
   $64 = (($__grp) + 4|0);
   HEAP32[$64>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $66 = __THREW__; __THREW__ = 0;
  $67 = $66&1;
  if ($67) {
   $68 = ___cxa_find_matching_catch(0|0)|0;
   $69 = tempRet0;
   ___clang_call_terminate($68);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$4+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$4+8>>2]|0;
  ;HEAP32[$4+0>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $70 = HEAP32[$12>>2]|0;
  $71 = (($70) + 24|0);
  $72 = HEAP32[$71>>2]|0;
  FUNCTION_TABLE_vii[$72 & 1023]($5,$12);
  $73 = HEAP8[$__sym>>0]|0;
  $74 = $73 & 1;
  $75 = ($74<<24>>24)==(0);
  if ($75) {
   $79 = (($__sym) + 4|0);
   HEAP32[$79>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $76 = (($__sym) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   HEAP32[$77>>2] = 0;
   $78 = (($__sym) + 4|0);
   HEAP32[$78>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $80 = __THREW__; __THREW__ = 0;
  $81 = $80&1;
  if ($81) {
   $82 = ___cxa_find_matching_catch(0|0)|0;
   $83 = tempRet0;
   ___clang_call_terminate($82);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$5+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$5+8>>2]|0;
  ;HEAP32[$5+0>>2]=0|0;HEAP32[$5+4>>2]=0|0;HEAP32[$5+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $84 = HEAP32[$12>>2]|0;
  $85 = (($84) + 36|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (FUNCTION_TABLE_ii[$86 & 1023]($12)|0);
  $storemerge = $87;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 } else {
  $88 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,11920)|0);
  $89 = HEAP32[$88>>2]|0;
  do {
   if ($__neg) {
    $90 = (($89) + 44|0);
    $91 = HEAP32[$90>>2]|0;
    FUNCTION_TABLE_vii[$91 & 1023]($6,$88);
    $92 = HEAP32[$6>>2]|0;
    HEAP8[$__pat>>0]=$92&255;HEAP8[$__pat+1>>0]=($92>>8)&255;HEAP8[$__pat+2>>0]=($92>>16)&255;HEAP8[$__pat+3>>0]=$92>>24;
    $93 = HEAP32[$88>>2]|0;
    $94 = (($93) + 32|0);
    $95 = HEAP32[$94>>2]|0;
    FUNCTION_TABLE_vii[$95 & 1023]($7,$88);
    $96 = HEAP8[$__sn>>0]|0;
    $97 = $96 & 1;
    $98 = ($97<<24>>24)==(0);
    if ($98) {
     $102 = (($__sn) + 4|0);
     HEAP32[$102>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $99 = (($__sn) + 8|0);
     $100 = HEAP32[$99>>2]|0;
     HEAP32[$100>>2] = 0;
     $101 = (($__sn) + 4|0);
     HEAP32[$101>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $103 = __THREW__; __THREW__ = 0;
    $104 = $103&1;
    if ($104) {
     $105 = ___cxa_find_matching_catch(0|0)|0;
     $106 = tempRet0;
     ___clang_call_terminate($105);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$7+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$7+8>>2]|0;
     ;HEAP32[$7+0>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
     break;
    }
   } else {
    $107 = (($89) + 40|0);
    $108 = HEAP32[$107>>2]|0;
    FUNCTION_TABLE_vii[$108 & 1023]($8,$88);
    $109 = HEAP32[$8>>2]|0;
    HEAP8[$__pat>>0]=$109&255;HEAP8[$__pat+1>>0]=($109>>8)&255;HEAP8[$__pat+2>>0]=($109>>16)&255;HEAP8[$__pat+3>>0]=$109>>24;
    $110 = HEAP32[$88>>2]|0;
    $111 = (($110) + 28|0);
    $112 = HEAP32[$111>>2]|0;
    FUNCTION_TABLE_vii[$112 & 1023]($9,$88);
    $113 = HEAP8[$__sn>>0]|0;
    $114 = $113 & 1;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $119 = (($__sn) + 4|0);
     HEAP32[$119>>2] = 0;
     HEAP8[$__sn>>0] = 0;
    } else {
     $116 = (($__sn) + 8|0);
     $117 = HEAP32[$116>>2]|0;
     HEAP32[$117>>2] = 0;
     $118 = (($__sn) + 4|0);
     HEAP32[$118>>2] = 0;
    }
    __THREW__ = 0;
    invoke_vii(626,($__sn|0),0);
    $120 = __THREW__; __THREW__ = 0;
    $121 = $120&1;
    if ($121) {
     $122 = ___cxa_find_matching_catch(0|0)|0;
     $123 = tempRet0;
     ___clang_call_terminate($122);
     // unreachable;
    } else {
     ;HEAP32[$__sn+0>>2]=HEAP32[$9+0>>2]|0;HEAP32[$__sn+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$__sn+8>>2]=HEAP32[$9+8>>2]|0;
     ;HEAP32[$9+0>>2]=0|0;HEAP32[$9+4>>2]=0|0;HEAP32[$9+8>>2]=0|0;
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
     break;
    }
   }
  } while(0);
  $124 = HEAP32[$88>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (FUNCTION_TABLE_ii[$126 & 1023]($88)|0);
  HEAP32[$__dp>>2] = $127;
  $128 = HEAP32[$88>>2]|0;
  $129 = (($128) + 16|0);
  $130 = HEAP32[$129>>2]|0;
  $131 = (FUNCTION_TABLE_ii[$130 & 1023]($88)|0);
  HEAP32[$__ts>>2] = $131;
  $132 = HEAP32[$88>>2]|0;
  $133 = (($132) + 20|0);
  $134 = HEAP32[$133>>2]|0;
  FUNCTION_TABLE_vii[$134 & 1023]($10,$88);
  $135 = HEAP8[$__grp>>0]|0;
  $136 = $135 & 1;
  $137 = ($136<<24>>24)==(0);
  if ($137) {
   $141 = (($__grp) + 1|0);
   HEAP8[$141>>0] = 0;
   HEAP8[$__grp>>0] = 0;
  } else {
   $138 = (($__grp) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   HEAP8[$139>>0] = 0;
   $140 = (($__grp) + 4|0);
   HEAP32[$140>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(620,($__grp|0),0);
  $142 = __THREW__; __THREW__ = 0;
  $143 = $142&1;
  if ($143) {
   $144 = ___cxa_find_matching_catch(0|0)|0;
   $145 = tempRet0;
   ___clang_call_terminate($144);
   // unreachable;
  }
  ;HEAP32[$__grp+0>>2]=HEAP32[$10+0>>2]|0;HEAP32[$__grp+4>>2]=HEAP32[$10+4>>2]|0;HEAP32[$__grp+8>>2]=HEAP32[$10+8>>2]|0;
  ;HEAP32[$10+0>>2]=0|0;HEAP32[$10+4>>2]=0|0;HEAP32[$10+8>>2]=0|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  $146 = HEAP32[$88>>2]|0;
  $147 = (($146) + 24|0);
  $148 = HEAP32[$147>>2]|0;
  FUNCTION_TABLE_vii[$148 & 1023]($11,$88);
  $149 = HEAP8[$__sym>>0]|0;
  $150 = $149 & 1;
  $151 = ($150<<24>>24)==(0);
  if ($151) {
   $155 = (($__sym) + 4|0);
   HEAP32[$155>>2] = 0;
   HEAP8[$__sym>>0] = 0;
  } else {
   $152 = (($__sym) + 8|0);
   $153 = HEAP32[$152>>2]|0;
   HEAP32[$153>>2] = 0;
   $154 = (($__sym) + 4|0);
   HEAP32[$154>>2] = 0;
  }
  __THREW__ = 0;
  invoke_vii(626,($__sym|0),0);
  $156 = __THREW__; __THREW__ = 0;
  $157 = $156&1;
  if ($157) {
   $158 = ___cxa_find_matching_catch(0|0)|0;
   $159 = tempRet0;
   ___clang_call_terminate($158);
   // unreachable;
  }
  ;HEAP32[$__sym+0>>2]=HEAP32[$11+0>>2]|0;HEAP32[$__sym+4>>2]=HEAP32[$11+4>>2]|0;HEAP32[$__sym+8>>2]=HEAP32[$11+8>>2]|0;
  ;HEAP32[$11+0>>2]=0|0;HEAP32[$11+4>>2]=0|0;HEAP32[$11+8>>2]=0|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $160 = HEAP32[$88>>2]|0;
  $161 = (($160) + 36|0);
  $162 = HEAP32[$161>>2]|0;
  $163 = (FUNCTION_TABLE_ii[$162 & 1023]($88)|0);
  $storemerge = $163;
  HEAP32[$__fd>>2] = $storemerge;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) {
 $__mb = $__mb|0;
 $__mi = $__mi|0;
 $__me = $__me|0;
 $__flags = $__flags|0;
 $__db = $__db|0;
 $__de = $__de|0;
 $__ct = $__ct|0;
 $__neg = $__neg|0;
 $__pat = $__pat|0;
 $__dp = $__dp|0;
 $__ts = $__ts|0;
 $__grp = $__grp|0;
 $__sym = $__sym|0;
 $__sn = $__sn|0;
 $__fd = $__fd|0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i22 = 0, $$01$i$i = 0, $$01$i$i19 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa45 = 0, $$pn = 0, $$promoted4$i$i = 0, $$promoted4$i$i16 = 0, $$sum = 0, $$sum33 = 0, $$sum75 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $88$phi = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$034 = 0, $__d$1$lcssa7881 = 0, $__d$1$lcssa79 = 0;
 var $__d$137 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$038 = 0, $__f$146 = 0, $__gl$057 = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__me$promoted = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, $exitcond = 0, $or$cond = 0, $or$cond3 = 0, $scevgep = 0, $scevgep$i$i = 0, $scevgep$i$i17 = 0;
 var $scevgep6$i$i = 0, $scevgep6$i$i20 = 0, $scevgep71 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$__me>>2] = $__mb;
 $0 = (($__sn) + 4|0);
 $1 = (($__sn) + 8|0);
 $2 = $__flags & 512;
 $3 = ($2|0)==(0);
 $4 = (($__sym) + 4|0);
 $5 = (($__sym) + 8|0);
 $6 = ($__fd|0)>(0);
 $7 = (($__grp) + 1|0);
 $8 = (($__grp) + 8|0);
 $9 = (($__grp) + 4|0);
 $$060 = $__db;$__p$059 = 0;
 while(1) {
  $10 = (($__pat) + ($__p$059)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  switch ($12|0) {
  case 1:  {
   $14 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $14;
   $15 = HEAP32[$__ct>>2]|0;
   $16 = (($15) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iii[$17 & 1023]($__ct,32)|0);
   $19 = HEAP32[$__me>>2]|0;
   $20 = (($19) + 4|0);
   HEAP32[$__me>>2] = $20;
   HEAP32[$19>>2] = $18;
   $$2 = $$060;
   break;
  }
  case 4:  {
   $61 = HEAP32[$__me>>2]|0;
   $62 = (($$060) + 4|0);
   $$$0 = $__neg ? $62 : $$060;
   $63 = ($$$0>>>0)<($__de>>>0);
   L6: do {
    if ($63) {
     $__d$034 = $$$0;
     while(1) {
      $66 = HEAP32[$__d$034>>2]|0;
      $67 = HEAP32[$__ct>>2]|0;
      $68 = (($67) + 12|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = (FUNCTION_TABLE_iiii[$69 & 1023]($__ct,2048,$66)|0);
      $65 = (($__d$034) + 4|0);
      if (!($70)) {
       $__d$0$lcssa = $__d$034;
       break L6;
      }
      $64 = ($65>>>0)<($__de>>>0);
      if ($64) {
       $__d$034 = $65;
      } else {
       $__d$0$lcssa = $65;
       break;
      }
     }
    } else {
     $__d$0$lcssa = $$$0;
    }
   } while(0);
   if ($6) {
    $71 = ($__d$0$lcssa>>>0)>($$$0>>>0);
    if ($71) {
     $__me$promoted = HEAP32[$__me>>2]|0;
     $75 = $__me$promoted;$__d$137 = $__d$0$lcssa;$__f$038 = $__fd;
     while(1) {
      $72 = (($__d$137) + -4|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = (($75) + 4|0);
      HEAP32[$75>>2] = $73;
      $76 = (($__f$038) + -1)|0;
      $77 = ($72>>>0)>($$$0>>>0);
      $78 = ($76|0)>(0);
      $or$cond = $77 & $78;
      if ($or$cond) {
       $75 = $74;$__d$137 = $72;$__f$038 = $76;
      } else {
       break;
      }
     }
     HEAP32[$__me>>2] = $74;
     if ($78) {
      $__d$1$lcssa79 = $72;$__f$0$lcssa77 = $76;
      label = 33;
     } else {
      $79 = HEAP32[$__me>>2]|0;
      $80 = (($79) + 4|0);
      HEAP32[$__me>>2] = $80;
      $$lcssa45 = $79;$__d$1$lcssa7881 = $72;
     }
    } else {
     $__d$1$lcssa79 = $__d$0$lcssa;$__f$0$lcssa77 = $__fd;
     label = 33;
    }
    if ((label|0) == 33) {
     label = 0;
     $81 = HEAP32[$__ct>>2]|0;
     $82 = (($81) + 44|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (FUNCTION_TABLE_iii[$83 & 1023]($__ct,48)|0);
     $85 = ($__f$0$lcssa77|0)>(0);
     $86 = HEAP32[$__me>>2]|0;
     $87 = (($86) + 4|0);
     HEAP32[$__me>>2] = $87;
     if ($85) {
      $88 = $86;$92 = $87;$__f$146 = $__f$0$lcssa77;
      while(1) {
       HEAP32[$88>>2] = $84;
       $89 = (($__f$146) + -1)|0;
       $90 = ($89|0)>(0);
       $91 = (($92) + 4|0);
       if ($90) {
        $88$phi = $92;$92 = $91;$__f$146 = $89;$88 = $88$phi;
       } else {
        break;
       }
      }
      $$sum75 = (($__f$0$lcssa77) + 1)|0;
      $scevgep = (($86) + ($$sum75<<2)|0);
      $scevgep71 = (($86) + ($__f$0$lcssa77<<2)|0);
      HEAP32[$__me>>2] = $scevgep;
      $$lcssa45 = $scevgep71;$__d$1$lcssa7881 = $__d$1$lcssa79;
     } else {
      $$lcssa45 = $86;$__d$1$lcssa7881 = $__d$1$lcssa79;
     }
    }
    HEAP32[$$lcssa45>>2] = $__dp;
    $__d$2 = $__d$1$lcssa7881;
   } else {
    $__d$2 = $__d$0$lcssa;
   }
   $93 = ($__d$2|0)==($$$0|0);
   if ($93) {
    $94 = HEAP32[$__ct>>2]|0;
    $95 = (($94) + 44|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (FUNCTION_TABLE_iii[$96 & 1023]($__ct,48)|0);
    $98 = HEAP32[$__me>>2]|0;
    $99 = (($98) + 4|0);
    HEAP32[$__me>>2] = $99;
    HEAP32[$98>>2] = $97;
    $141 = $99;
   } else {
    $100 = HEAP8[$__grp>>0]|0;
    $101 = $100 & 1;
    $102 = ($101<<24>>24)==(0);
    if ($102) {
     $104 = $100&255;
     $105 = $104 >>> 1;
     $107 = $105;
    } else {
     $103 = HEAP32[$9>>2]|0;
     $107 = $103;
    }
    $106 = ($107|0)==(0);
    if ($106) {
     $__d$354 = $__d$2;$__gl$057 = -1;$__ig$056 = 0;$__ng$055 = 0;
    } else {
     if ($102) {
      $110 = $7;
     } else {
      $108 = HEAP32[$8>>2]|0;
      $110 = $108;
     }
     $109 = HEAP8[$110>>0]|0;
     $111 = $109 << 24 >> 24;
     $__d$354 = $__d$2;$__gl$057 = $111;$__ig$056 = 0;$__ng$055 = 0;
    }
    while(1) {
     $112 = ($__ng$055|0)==($__gl$057|0);
     $113 = HEAP32[$__me>>2]|0;
     if ($112) {
      $114 = (($113) + 4|0);
      HEAP32[$__me>>2] = $114;
      HEAP32[$113>>2] = $__ts;
      $115 = (($__ig$056) + 1)|0;
      $116 = HEAP8[$__grp>>0]|0;
      $117 = $116 & 1;
      $118 = ($117<<24>>24)==(0);
      if ($118) {
       $120 = $116&255;
       $121 = $120 >>> 1;
       $123 = $121;
      } else {
       $119 = HEAP32[$9>>2]|0;
       $123 = $119;
      }
      $122 = ($115>>>0)<($123>>>0);
      if ($122) {
       if ($118) {
        $126 = $7;
       } else {
        $124 = HEAP32[$8>>2]|0;
        $126 = $124;
       }
       $125 = (($126) + ($115)|0);
       $127 = HEAP8[$125>>0]|0;
       $128 = ($127<<24>>24)==(127);
       if ($128) {
        $137 = $114;$__gl$1 = -1;$__ig$1 = $115;$__ng$1 = 0;
       } else {
        if ($118) {
         $131 = $7;
        } else {
         $129 = HEAP32[$8>>2]|0;
         $131 = $129;
        }
        $130 = (($131) + ($115)|0);
        $132 = HEAP8[$130>>0]|0;
        $133 = $132 << 24 >> 24;
        $137 = $114;$__gl$1 = $133;$__ig$1 = $115;$__ng$1 = 0;
       }
      } else {
       $137 = $114;$__gl$1 = $__gl$057;$__ig$1 = $115;$__ng$1 = 0;
      }
     } else {
      $137 = $113;$__gl$1 = $__gl$057;$__ig$1 = $__ig$056;$__ng$1 = $__ng$055;
     }
     $134 = (($__d$354) + -4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = (($137) + 4|0);
     HEAP32[$__me>>2] = $136;
     HEAP32[$137>>2] = $135;
     $138 = (($__ng$1) + 1)|0;
     $139 = ($134|0)==($$$0|0);
     if ($139) {
      $141 = $136;
      break;
     } else {
      $__d$354 = $134;$__gl$057 = $__gl$1;$__ig$056 = $__ig$1;$__ng$055 = $138;
     }
    }
   }
   $140 = ($61|0)==($141|0);
   if ($140) {
    $$2 = $$$0;
   } else {
    $142 = (($141) + -4|0);
    $143 = ($142>>>0)>($61>>>0);
    if ($143) {
     $$012$i$i = $61;$146 = $142;
     while(1) {
      $144 = HEAP32[$$012$i$i>>2]|0;
      $145 = HEAP32[$146>>2]|0;
      HEAP32[$$012$i$i>>2] = $145;
      HEAP32[$146>>2] = $144;
      $147 = (($$012$i$i) + 4|0);
      $148 = (($146) + -4|0);
      $149 = ($147>>>0)<($148>>>0);
      if ($149) {
       $$012$i$i = $147;$146 = $148;
      } else {
       $$2 = $$$0;
       break;
      }
     }
    } else {
     $$2 = $$$0;
    }
   }
   break;
  }
  case 0:  {
   $13 = HEAP32[$__me>>2]|0;
   HEAP32[$__mi>>2] = $13;
   $$2 = $$060;
   break;
  }
  case 3:  {
   $21 = HEAP8[$__sn>>0]|0;
   $22 = $21 & 1;
   $23 = ($22<<24>>24)==(0);
   if ($23) {
    $25 = $21&255;
    $26 = $25 >>> 1;
    $28 = $26;
   } else {
    $24 = HEAP32[$0>>2]|0;
    $28 = $24;
   }
   $27 = ($28|0)==(0);
   if ($27) {
    $$2 = $$060;
   } else {
    if ($23) {
     $31 = $0;
    } else {
     $29 = HEAP32[$1>>2]|0;
     $31 = $29;
    }
    $30 = HEAP32[$31>>2]|0;
    $32 = HEAP32[$__me>>2]|0;
    $33 = (($32) + 4|0);
    HEAP32[$__me>>2] = $33;
    HEAP32[$32>>2] = $30;
    $$2 = $$060;
   }
   break;
  }
  case 2:  {
   $34 = HEAP8[$__sym>>0]|0;
   $35 = $34 & 1;
   $36 = ($35<<24>>24)==(0);
   if ($36) {
    $38 = $34&255;
    $39 = $38 >>> 1;
    $41 = $39;
   } else {
    $37 = HEAP32[$4>>2]|0;
    $41 = $37;
   }
   $40 = ($41|0)==(0);
   $or$cond3 = $40 | $3;
   if ($or$cond3) {
    $$2 = $$060;
   } else {
    if ($36) {
     $44 = $34&255;
     $45 = $44 >>> 1;
     $47 = $4;$48 = $45;$51 = $4;
    } else {
     $42 = HEAP32[$5>>2]|0;
     $43 = HEAP32[$4>>2]|0;
     $47 = $42;$48 = $43;$51 = $42;
    }
    $46 = (($47) + ($48<<2)|0);
    $49 = HEAP32[$__me>>2]|0;
    $50 = ($51|0)==($46|0);
    if ($50) {
     $$0$lcssa$i$i22 = $49;
    } else {
     $$promoted4$i$i16 = $51;
     $$sum33 = (($48) + -1)|0;
     $scevgep$i$i17 = (($47) + ($$sum33<<2)|0);
     $52 = $scevgep$i$i17;
     $53 = (($52) - ($$promoted4$i$i16))|0;
     $54 = $53 >>> 2;
     $$01$i$i19 = $49;$56 = $51;
     while(1) {
      $55 = HEAP32[$56>>2]|0;
      HEAP32[$$01$i$i19>>2] = $55;
      $57 = (($56) + 4|0);
      $58 = (($$01$i$i19) + 4|0);
      $59 = ($57|0)==($46|0);
      if ($59) {
       break;
      } else {
       $$01$i$i19 = $58;$56 = $57;
      }
     }
     $60 = (($54) + 1)|0;
     $scevgep6$i$i20 = (($49) + ($60<<2)|0);
     $$0$lcssa$i$i22 = $scevgep6$i$i20;
    }
    HEAP32[$__me>>2] = $$0$lcssa$i$i22;
    $$2 = $$060;
   }
   break;
  }
  default: {
   $$2 = $$060;
  }
  }
  $150 = (($__p$059) + 1)|0;
  $exitcond = ($150|0)==(4);
  if ($exitcond) {
   break;
  } else {
   $$060 = $$2;$__p$059 = $150;
  }
 }
 $151 = HEAP8[$__sn>>0]|0;
 $152 = $151 & 1;
 $153 = ($152<<24>>24)==(0);
 if ($153) {
  $155 = $151&255;
  $156 = $155 >>> 1;
  $158 = $156;
 } else {
  $154 = HEAP32[$0>>2]|0;
  $158 = $154;
 }
 $157 = ($158>>>0)>(1);
 if ($157) {
  if ($153) {
   $161 = $151&255;
   $162 = $161 >>> 1;
   $$pn = $0;$165 = $0;$166 = $162;
  } else {
   $159 = HEAP32[$1>>2]|0;
   $160 = HEAP32[$0>>2]|0;
   $$pn = $159;$165 = $159;$166 = $160;
  }
  $163 = (($$pn) + 4|0);
  $164 = (($165) + ($166<<2)|0);
  $167 = HEAP32[$__me>>2]|0;
  $168 = ($163|0)==($164|0);
  if ($168) {
   $$0$lcssa$i$i = $167;
  } else {
   $$promoted4$i$i = $163;
   $$sum = (($166) + -1)|0;
   $scevgep$i$i = (($165) + ($$sum<<2)|0);
   $169 = $scevgep$i$i;
   $170 = (($169) - ($$promoted4$i$i))|0;
   $171 = $170 >>> 2;
   $$01$i$i = $167;$173 = $163;
   while(1) {
    $172 = HEAP32[$173>>2]|0;
    HEAP32[$$01$i$i>>2] = $172;
    $174 = (($173) + 4|0);
    $175 = (($$01$i$i) + 4|0);
    $176 = ($174|0)==($164|0);
    if ($176) {
     break;
    } else {
     $$01$i$i = $175;$173 = $174;
    }
   }
   $177 = (($171) + 1)|0;
   $scevgep6$i$i = (($167) + ($177<<2)|0);
   $$0$lcssa$i$i = $scevgep6$i$i;
  }
  HEAP32[$__me>>2] = $$0$lcssa$i$i;
 }
 $178 = $__flags & 176;
 if ((($178|0) == 32)) {
  $179 = HEAP32[$__me>>2]|0;
  HEAP32[$__mi>>2] = $179;
  STACKTOP = sp;return;
 } else if ((($178|0) == 16)) {
  STACKTOP = sp;return;
 } else {
  HEAP32[$__mi>>2] = $__mb;
  STACKTOP = sp;return;
 }
}
function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result,$this,$__s,$__intl,$__iob,$__fl,$__digits) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__s = $__s|0;
 $__intl = $__intl|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 $__digits = $__digits|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $$byval_copy = 0, $$pn = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0;
 var $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $$byval_copy = sp + 456|0;
 $__loc = sp + 440|0;
 $__pat = sp + 12|0;
 $__dp = sp + 8|0;
 $__ts = sp + 436|0;
 $__grp = sp + 444|0;
 $__sym = sp + 460|0;
 $__sn = sp + 16|0;
 $__fd = sp;
 $__mbuf = sp + 32|0;
 $__mi = sp + 4|0;
 $__me = sp + 432|0;
 $0 = sp + 28|0;
 __ZNKSt3__18ios_base6getlocEv($__loc,$__iob);
 __THREW__ = 0;
 $1 = (invoke_iii(458,($__loc|0),(12408|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 do {
  if (!($3)) {
   $4 = HEAP8[$__digits>>0]|0;
   $5 = $4 & 1;
   $6 = ($5<<24>>24)==(0);
   if ($6) {
    $9 = $4&255;
    $10 = $9 >>> 1;
    $12 = $10;
   } else {
    $7 = (($__digits) + 4|0);
    $8 = HEAP32[$7>>2]|0;
    $12 = $8;
   }
   $11 = ($12|0)==(0);
   if ($11) {
    $25 = 0;
   } else {
    if ($6) {
     $15 = (($__digits) + 4|0);
     $17 = $15;
    } else {
     $13 = (($__digits) + 8|0);
     $14 = HEAP32[$13>>2]|0;
     $17 = $14;
    }
    $16 = HEAP32[$17>>2]|0;
    $18 = HEAP32[$1>>2]|0;
    $19 = (($18) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    __THREW__ = 0;
    $21 = (invoke_iii($20|0,($1|0),45)|0);
    $22 = __THREW__; __THREW__ = 0;
    $23 = $22&1;
    if ($23) {
     break;
    }
    $24 = ($16|0)==($21|0);
    $25 = $24;
   }
   HEAP32[$__pat>>2] = 0;
   ;HEAP32[$__grp+0>>2]=0|0;HEAP32[$__grp+4>>2]=0|0;HEAP32[$__grp+8>>2]=0|0;
   ;HEAP32[$__sym+0>>2]=0|0;HEAP32[$__sym+4>>2]=0|0;HEAP32[$__sym+8>>2]=0|0;
   ;HEAP32[$__sn+0>>2]=0|0;HEAP32[$__sn+4>>2]=0|0;HEAP32[$__sn+8>>2]=0|0;
   __THREW__ = 0;
   invoke_viiiiiiiiii(629,($__intl|0),($25|0),($__loc|0),($__pat|0),($__dp|0),($__ts|0),($__grp|0),($__sym|0),($__sn|0),($__fd|0));
   $26 = __THREW__; __THREW__ = 0;
   $27 = $26&1;
   L15: do {
    if ($27) {
     $93 = ___cxa_find_matching_catch()|0;
     $94 = tempRet0;
     $$0 = $93;$$01 = $94;
    } else {
     $28 = HEAP8[$__digits>>0]|0;
     $29 = $28 & 1;
     $30 = ($29<<24>>24)==(0);
     if ($30) {
      $33 = $28&255;
      $34 = $33 >>> 1;
      $37 = $34;
     } else {
      $31 = (($__digits) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $37 = $32;
     }
     $35 = HEAP32[$__fd>>2]|0;
     $36 = ($37|0)>($35|0);
     if ($36) {
      if ($30) {
       $40 = $28&255;
       $41 = $40 >>> 1;
       $43 = $41;
      } else {
       $38 = (($__digits) + 4|0);
       $39 = HEAP32[$38>>2]|0;
       $43 = $39;
      }
      $42 = (($43) - ($35))|0;
      $44 = $42 << 1;
      $45 = HEAP8[$__sn>>0]|0;
      $46 = $45 & 1;
      $47 = ($46<<24>>24)==(0);
      if ($47) {
       $50 = $45&255;
       $51 = $50 >>> 1;
       $61 = $51;
      } else {
       $48 = (($__sn) + 4|0);
       $49 = HEAP32[$48>>2]|0;
       $61 = $49;
      }
      $52 = HEAP8[$__sym>>0]|0;
      $53 = $52 & 1;
      $54 = ($53<<24>>24)==(0);
      if ($54) {
       $57 = $52&255;
       $58 = $57 >>> 1;
       $63 = $58;
      } else {
       $55 = (($__sym) + 4|0);
       $56 = HEAP32[$55>>2]|0;
       $63 = $56;
      }
      $59 = $44 | 1;
      $60 = (($61) + ($59))|0;
      $62 = (($60) + ($63))|0;
      $$pn = $62;
     } else {
      $64 = HEAP8[$__sn>>0]|0;
      $65 = $64 & 1;
      $66 = ($65<<24>>24)==(0);
      if ($66) {
       $69 = $64&255;
       $70 = $69 >>> 1;
       $79 = $70;
      } else {
       $67 = (($__sn) + 4|0);
       $68 = HEAP32[$67>>2]|0;
       $79 = $68;
      }
      $71 = HEAP8[$__sym>>0]|0;
      $72 = $71 & 1;
      $73 = ($72<<24>>24)==(0);
      if ($73) {
       $76 = $71&255;
       $77 = $76 >>> 1;
       $81 = $77;
      } else {
       $74 = (($__sym) + 4|0);
       $75 = HEAP32[$74>>2]|0;
       $81 = $75;
      }
      $78 = (($79) + 2)|0;
      $80 = (($78) + ($81))|0;
      $$pn = $80;
     }
     $82 = (($$pn) + ($35))|0;
     $83 = ($82>>>0)>(100);
     do {
      if ($83) {
       $84 = $82 << 2;
       $85 = (_malloc($84)|0);
       $86 = ($85|0)==(0|0);
       if ($86) {
        __THREW__ = 0;
        invoke_v(601);
        $87 = __THREW__; __THREW__ = 0;
        $88 = $87&1;
        if ($88) {
         $89 = ___cxa_find_matching_catch()|0;
         $90 = tempRet0;
         $$0 = $89;$$01 = $90;
         break L15;
        } else {
         $$pre = HEAP8[$__digits>>0]|0;
         $102 = $$pre;$98 = 0;$__mb$0 = 0;
         break;
        }
       } else {
        $102 = $28;$98 = $85;$__mb$0 = $85;
       }
      } else {
       $102 = $28;$98 = 0;$__mb$0 = $__mbuf;
      }
     } while(0);
     $99 = (($__iob) + 4|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = $102 & 1;
     $103 = ($101<<24>>24)==(0);
     if ($103) {
      $108 = (($__digits) + 4|0);
      $109 = $102&255;
      $110 = $109 >>> 1;
      $112 = $108;$113 = $110;
     } else {
      $104 = (($__digits) + 8|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($__digits) + 4|0);
      $107 = HEAP32[$106>>2]|0;
      $112 = $105;$113 = $107;
     }
     $111 = (($112) + ($113<<2)|0);
     $114 = HEAP32[$__dp>>2]|0;
     $115 = HEAP32[$__ts>>2]|0;
     __THREW__ = 0;
     invoke_viiiiiiiiiiiiiii(630,($__mb$0|0),($__mi|0),($__me|0),($100|0),($112|0),($111|0),($1|0),($25|0),($__pat|0),($114|0),($115|0),($__grp|0),($__sym|0),($__sn|0),($35|0));
     $116 = __THREW__; __THREW__ = 0;
     $117 = $116&1;
     if (!($117)) {
      $118 = HEAP32[$__s>>2]|0;
      HEAP32[$0>>2] = $118;
      $119 = HEAP32[$__mi>>2]|0;
      $120 = HEAP32[$__me>>2]|0;
      __THREW__ = 0;
      ;HEAP32[$$byval_copy+0>>2]=HEAP32[$0+0>>2]|0;
      invoke_viiiiiii(608,($agg$result|0),($$byval_copy|0),($__mb$0|0),($119|0),($120|0),($__iob|0),($__fl|0));
      $121 = __THREW__; __THREW__ = 0;
      $122 = $121&1;
      if (!($122)) {
       $123 = ($98|0)==(0|0);
       if ($123) {
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
        __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
        __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
        $124 = HEAP32[$__loc>>2]|0;
        (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
        STACKTOP = sp;return;
       }
       _free($98);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
       __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
       $124 = HEAP32[$__loc>>2]|0;
       (__ZNSt3__114__shared_count16__release_sharedEv($124)|0);
       STACKTOP = sp;return;
      }
     }
     $95 = ___cxa_find_matching_catch()|0;
     $96 = tempRet0;
     $97 = ($98|0)==(0|0);
     if ($97) {
      $$0 = $95;$$01 = $96;
     } else {
      _free($98);
      $$0 = $95;$$01 = $96;
     }
    }
   } while(0);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
   $$1 = $$0;$$12 = $$01;
   $125 = HEAP32[$__loc>>2]|0;
   (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $91 = ___cxa_find_matching_catch()|0;
 $92 = tempRet0;
 $$1 = $91;$$12 = $92;
 $125 = HEAP32[$__loc>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($125)|0);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$01 = 0, $$01$i = 0, $$01$i7 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ndflt = 0, $exitcond$i = 0, $exitcond$i8 = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0;
 var $phitmp = 0, $phitmp18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__ndflt = sp;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $0 = HEAP8[$__dflt>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = (($__dflt) + 1|0);
  $8 = (($__dflt) + 1|0);
  $9 = $0&255;
  $10 = $9 >>> 1;
  $12 = $8;$13 = $10;$15 = $7;
 } else {
  $3 = (($__dflt) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($__dflt) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $12 = $4;$13 = $6;$15 = $4;
 }
 $11 = (($12) + ($13)|0);
 $14 = ($15>>>0)<($11>>>0);
 do {
  if ($14) {
   $$01$i7 = $15;
   while(1) {
    $20 = HEAP8[$$01$i7>>0]|0;
    __THREW__ = 0;
    invoke_vii(539,($__ndflt|0),($20|0));
    $21 = __THREW__; __THREW__ = 0;
    $22 = $21&1;
    if ($22) {
     label = 12;
     break;
    }
    $23 = (($$01$i7) + 1|0);
    $exitcond$i8 = ($23|0)==($11|0);
    if ($exitcond$i8) {
     break;
    } else {
     $$01$i7 = $23;
    }
   }
   if ((label|0) == 12) {
    $36 = ___cxa_find_matching_catch()|0;
    $37 = tempRet0;
    $lpad$phi$index = $36;$lpad$phi$index2 = $37;
    break;
   }
   $$pre = HEAP8[$__ndflt>>0]|0;
   $phitmp = $$pre & 1;
   $phitmp18 = ($phitmp<<24>>24)==(0);
   $24 = ($__c|0)==(-1);
   $25 = $__c << 1;
   $26 = $25;
   $27 = $24 ? (-1) : $26;
   if ($phitmp18) {
    $49 = $27;
    label = 10;
   } else {
    $28 = (($__ndflt) + 8|0);
    $29 = HEAP32[$28>>2]|0;
    $31 = $27;$32 = $29;
    label = 11;
   }
  } else {
   $16 = ($__c|0)==(-1);
   $17 = $__c << 1;
   $18 = $17;
   $19 = $16 ? (-1) : $18;
   $49 = $19;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $30 = (($__ndflt) + 1|0);
  $31 = $49;$32 = $30;
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   __THREW__ = 0;
   $33 = (invoke_iiiii(631,($31|0),($__set|0),($__msgid|0),($32|0))|0);
   $34 = __THREW__; __THREW__ = 0;
   $35 = $34&1;
   if ($35) {
    $38 = ___cxa_find_matching_catch()|0;
    $39 = tempRet0;
    $lpad$phi$index = $38;$lpad$phi$index2 = $39;
    break;
   }
   ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
   $40 = (_strlen(($33|0))|0);
   $41 = (($33) + ($40)|0);
   $42 = ($40|0)>(0);
   if ($42) {
    $$01$i = $33;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   while(1) {
    $43 = HEAP8[$$01$i>>0]|0;
    __THREW__ = 0;
    invoke_vii(539,($agg$result|0),($43|0));
    $44 = __THREW__; __THREW__ = 0;
    $45 = $44&1;
    if ($45) {
     break;
    }
    $46 = (($$01$i) + 1|0);
    $exitcond$i = ($46|0)==($41|0);
    if ($exitcond$i) {
     label = 19;
     break;
    } else {
     $$01$i = $46;
    }
   }
   if ((label|0) == 19) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
    STACKTOP = sp;return;
   }
   $47 = ___cxa_find_matching_catch()|0;
   $48 = tempRet0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($agg$result);
   $$01 = $47;$$02 = $48;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$01|0);
   // unreachable;
  }
 } while(0);
 $$01 = $lpad$phi$index;$$02 = $lpad$phi$index2;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$01|0);
 // unreachable;
}
function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0) {
 $this = $this|0;
 $__nm = $__nm|0;
 $0 = $0|0;
 var $$ = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$__nm>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $6 = (($__nm) + 1|0);
  $7 = $6;
 } else {
  $4 = (($__nm) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $7 = $5;
 }
 $8 = (_catopen(($7|0),1)|0);
 $9 = $8;
 $not$ = ($8|0)!=((-1)|0);
 $10 = $not$&1;
 $$ = $9 >>> $10;
 STACKTOP = sp;return ($$|0);
}
function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result,$this,$__c,$__set,$__msgid,$__dflt) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__c = $__c|0;
 $__set = $__set|0;
 $__msgid = $__msgid|0;
 $__dflt = $__dflt|0;
 var $$05$i = 0, $$05$i16 = 0, $$1 = 0, $$13 = 0, $$pre = 0, $$pre$i21 = 0, $$pre44 = 0, $$pre9$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__bn$i = 0, $__bn$i14 = 0, $__buf$i = 0;
 var $__buf$i13 = 0, $__mb$i = 0, $__mb$i11 = 0, $__ndflt = 0, $__nn$i = 0, $__p$04$i = 0, $__p$04$i20 = 0, $__wn$i = 0, $lpad$phi$index = 0, $lpad$phi$index10 = 0, $lpad$phi38$index = 0, $lpad$phi38$index3 = 0, $or$cond3$i = 0, $or$cond3$i17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__mb$i11 = sp + 8|0;
 $__buf$i13 = sp + 192|0;
 $__bn$i14 = sp + 168|0;
 $__wn$i = sp + 152|0;
 $__mb$i = sp;
 $__buf$i = sp + 24|0;
 $__bn$i = sp + 20|0;
 $__nn$i = sp + 16|0;
 $__ndflt = sp + 172|0;
 $0 = sp + 160|0;
 $1 = sp + 184|0;
 ;HEAP32[$__ndflt+0>>2]=0|0;HEAP32[$__ndflt+4>>2]=0|0;HEAP32[$__ndflt+8>>2]=0|0;
 $2 = (($0) + 4|0);
 HEAP32[$2>>2] = 0;
 HEAP32[$0>>2] = ((14064 + 8|0));
 $3 = HEAP8[$__dflt>>0]|0;
 $4 = $3 & 1;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $10 = (($__dflt) + 4|0);
  $11 = (($__dflt) + 4|0);
  $12 = $3&255;
  $13 = $12 >>> 1;
  $15 = $11;$16 = $13;$22 = $10;
 } else {
  $6 = (($__dflt) + 8|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($__dflt) + 4|0);
  $9 = HEAP32[$8>>2]|0;
  $15 = $7;$16 = $9;$22 = $7;
 }
 $14 = (($15) + ($16<<2)|0);
 $17 = $__mb$i11;
 $18 = $17;
 HEAP32[$18>>2] = 0;
 $19 = (($17) + 4)|0;
 $20 = $19;
 HEAP32[$20>>2] = 0;
 $21 = ($22>>>0)<($14>>>0);
 L5: do {
  if ($21) {
   $23 = (($__buf$i13) + 32|0);
   $$05$i16 = $22;$25 = ((14064 + 8|0));
   L7: while(1) {
    HEAP32[$__wn$i>>2] = $$05$i16;
    $24 = (($25) + 12|0);
    $26 = HEAP32[$24>>2]|0;
    __THREW__ = 0;
    $27 = (invoke_iiiiiiiii($26|0,($0|0),($__mb$i11|0),($$05$i16|0),($14|0),($__wn$i|0),($__buf$i13|0),($23|0),($__bn$i14|0))|0);
    $28 = __THREW__; __THREW__ = 0;
    $29 = $28&1;
    if ($29) {
     label = 22;
     break;
    }
    $30 = ($27|0)==(2);
    $31 = HEAP32[$__wn$i>>2]|0;
    $32 = ($31|0)==($$05$i16|0);
    $or$cond3$i17 = $30 | $32;
    if ($or$cond3$i17) {
     label = 9;
     break;
    }
    $33 = HEAP32[$__bn$i14>>2]|0;
    $34 = ($__buf$i13>>>0)<($33>>>0);
    if ($34) {
     $__p$04$i20 = $__buf$i13;
     while(1) {
      $37 = HEAP8[$__p$04$i20>>0]|0;
      __THREW__ = 0;
      invoke_vii(539,($__ndflt|0),($37|0));
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 21;
       break L7;
      }
      $40 = (($__p$04$i20) + 1|0);
      $41 = HEAP32[$__bn$i14>>2]|0;
      $42 = ($40>>>0)<($41>>>0);
      if ($42) {
       $__p$04$i20 = $40;
      } else {
       break;
      }
     }
     $$pre$i21 = HEAP32[$__wn$i>>2]|0;
     $44 = $$pre$i21;
    } else {
     $44 = $31;
    }
    $43 = ($44>>>0)<($14>>>0);
    if (!($43)) {
     break L5;
    }
    $$pre = HEAP32[$0>>2]|0;
    $$05$i16 = $44;$25 = $$pre;
   }
   do {
    if ((label|0) == 9) {
     __THREW__ = 0;
     invoke_vi(614,(13296|0));
     $35 = __THREW__; __THREW__ = 0;
     $36 = $35&1;
     if ($36) {
      $65 = ___cxa_find_matching_catch()|0;
      $66 = tempRet0;
      $lpad$phi38$index = $65;$lpad$phi38$index3 = $66;
      break;
     } else {
      // unreachable;
     }
    }
    else if ((label|0) == 21) {
     $61 = ___cxa_find_matching_catch()|0;
     $62 = tempRet0;
     $lpad$phi38$index = $61;$lpad$phi38$index3 = $62;
    }
    else if ((label|0) == 22) {
     $63 = ___cxa_find_matching_catch()|0;
     $64 = tempRet0;
     $lpad$phi38$index = $63;$lpad$phi38$index3 = $64;
    }
   } while(0);
   $$1 = $lpad$phi38$index;$$13 = $lpad$phi38$index3;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   ___resumeException($$1|0);
   // unreachable;
  }
 } while(0);
 $45 = ($__c|0)==(-1);
 $46 = $__c << 1;
 $47 = $46;
 $48 = $45 ? (-1) : $47;
 $49 = HEAP8[$__ndflt>>0]|0;
 $50 = $49 & 1;
 $51 = ($50<<24>>24)==(0);
 if ($51) {
  $54 = (($__ndflt) + 1|0);
  $55 = $54;
 } else {
  $52 = (($__ndflt) + 8|0);
  $53 = HEAP32[$52>>2]|0;
  $55 = $53;
 }
 __THREW__ = 0;
 $56 = (invoke_iiiii(631,($48|0),($__set|0),($__msgid|0),($55|0))|0);
 $57 = __THREW__; __THREW__ = 0;
 $58 = $57&1;
 if ($58) {
  $59 = ___cxa_find_matching_catch()|0;
  $60 = tempRet0;
  $$1 = $59;$$13 = $60;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  ___resumeException($$1|0);
  // unreachable;
 }
 ;HEAP32[$agg$result+0>>2]=0|0;HEAP32[$agg$result+4>>2]=0|0;HEAP32[$agg$result+8>>2]=0|0;
 $67 = (($1) + 4|0);
 HEAP32[$67>>2] = 0;
 HEAP32[$1>>2] = ((14168 + 8|0));
 $68 = (_strlen(($56|0))|0);
 $69 = (($56) + ($68)|0);
 $70 = $__mb$i;
 $71 = $70;
 HEAP32[$71>>2] = 0;
 $72 = (($70) + 4)|0;
 $73 = $72;
 HEAP32[$73>>2] = 0;
 $74 = ($68|0)>(0);
 if (!($74)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
  STACKTOP = sp;return;
 }
 $75 = $69;
 $76 = (($__buf$i) + 128|0);
 $$05$i = $56;$78 = ((14168 + 8|0));
 L39: while(1) {
  HEAP32[$__nn$i>>2] = $$05$i;
  $77 = (($78) + 16|0);
  $79 = HEAP32[$77>>2]|0;
  $80 = $$05$i;
  $81 = (($75) - ($80))|0;
  $82 = ($81|0)>(32);
  $83 = (($$05$i) + 32|0);
  $84 = $82 ? $83 : $69;
  __THREW__ = 0;
  $85 = (invoke_iiiiiiiii($79|0,($1|0),($__mb$i|0),($$05$i|0),($84|0),($__nn$i|0),($__buf$i|0),($76|0),($__bn$i|0))|0);
  $86 = __THREW__; __THREW__ = 0;
  $87 = $86&1;
  if ($87) {
   label = 39;
   break;
  }
  $88 = ($85|0)==(2);
  $89 = HEAP32[$__nn$i>>2]|0;
  $90 = ($89|0)==($$05$i|0);
  $or$cond3$i = $88 | $90;
  if ($or$cond3$i) {
   label = 30;
   break;
  }
  $91 = HEAP32[$__bn$i>>2]|0;
  $92 = ($__buf$i>>>0)<($91>>>0);
  if ($92) {
   $__p$04$i = $__buf$i;
   while(1) {
    $95 = HEAP32[$__p$04$i>>2]|0;
    __THREW__ = 0;
    invoke_vii(623,($agg$result|0),($95|0));
    $96 = __THREW__; __THREW__ = 0;
    $97 = $96&1;
    if ($97) {
     label = 38;
     break L39;
    }
    $98 = (($__p$04$i) + 4|0);
    $99 = HEAP32[$__bn$i>>2]|0;
    $100 = ($98>>>0)<($99>>>0);
    if ($100) {
     $__p$04$i = $98;
    } else {
     break;
    }
   }
   $$pre9$i = HEAP32[$__nn$i>>2]|0;
   $102 = $$pre9$i;
  } else {
   $102 = $89;
  }
  $101 = ($102>>>0)<($69>>>0);
  if (!($101)) {
   label = 37;
   break;
  }
  $$pre44 = HEAP32[$1>>2]|0;
  $$05$i = $102;$78 = $$pre44;
 }
 do {
  if ((label|0) == 30) {
   __THREW__ = 0;
   invoke_vi(614,(13296|0));
   $93 = __THREW__; __THREW__ = 0;
   $94 = $93&1;
   if ($94) {
    $107 = ___cxa_find_matching_catch()|0;
    $108 = tempRet0;
    $lpad$phi$index = $107;$lpad$phi$index10 = $108;
    break;
   } else {
    // unreachable;
   }
  }
  else if ((label|0) == 37) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
   STACKTOP = sp;return;
  }
  else if ((label|0) == 38) {
   $103 = ___cxa_find_matching_catch()|0;
   $104 = tempRet0;
   $lpad$phi$index = $103;$lpad$phi$index10 = $104;
  }
  else if ((label|0) == 39) {
   $105 = ___cxa_find_matching_catch()|0;
   $106 = tempRet0;
   $lpad$phi$index = $105;$lpad$phi$index10 = $106;
  }
 } while(0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($agg$result);
 $$1 = $lpad$phi$index;$$13 = $lpad$phi$index10;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 ___resumeException($$1|0);
 // unreachable;
}
function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__c|0)==(-1);
 $1 = $__c << 1;
 $2 = $1;
 $3 = $0 ? (-1) : $2;
 (_catclose(($3|0))|0);
 STACKTOP = sp;return;
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(589,($0|0),(12296|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = ((20944 + 8|0));
  ___cxa_throw(($0|0),(20992|0),(352|0));
  // unreachable;
 }
}
function __ZNSt3__16locale5__impC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $$0 = 0, $$01 = 0, $$1 = 0, $$12 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $__new_last2$i$i$i = 0, $eh$lpad$body$index3Z2D = 0, $eh$lpad$body$indexZ2D = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((12328 + 8|0));
 $2 = (($this) + 8|0);
 __THREW__ = 0;
 invoke_vii(632,($2|0),28);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $84 = ___cxa_find_matching_catch()|0;
  $85 = tempRet0;
  $$1 = $85;$$12 = $84;
  ___resumeException($$12|0);
  // unreachable;
 }
 $5 = (($this) + 144|0);
 __THREW__ = 0;
 invoke_viii(442,($5|0),(12320|0),1);
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $86 = ___cxa_find_matching_catch()|0;
  $87 = tempRet0;
  $$0 = $87;$$01 = $86;
 } else {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($this) + 12|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==($8|0);
  if (!($11)) {
   $__new_last2$i$i$i = $8;
   $scevgep$i$i$i = (($10) + -4|0);
   $12 = $scevgep$i$i$i;
   $13 = (($12) - ($__new_last2$i$i$i))|0;
   $14 = $13 >>> 2;
   $15 = $14 ^ -1;
   $scevgep4$i$i$i = (($10) + ($15<<2)|0);
   HEAP32[$9>>2] = $scevgep4$i$i$i;
  }
  HEAP32[((17224 + 4|0))>>2] = 0;
  HEAP32[17224>>2] = ((10776 + 8|0));
  __THREW__ = 0;
  invoke_vii(633,($this|0),(17224|0));
  $16 = __THREW__; __THREW__ = 0;
  $17 = $16&1;
  do {
   if ($17) {
    label = 41;
   } else {
    HEAP32[((17216 + 4|0))>>2] = 0;
    HEAP32[17216>>2] = ((10816 + 8|0));
    __THREW__ = 0;
    invoke_vii(634,($this|0),(17216|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     label = 41;
    } else {
     __ZNSt3__15ctypeIcEC2EPKtbj(17200,0,0,1);
     __THREW__ = 0;
     invoke_vii(635,($this|0),(17200|0));
     $20 = __THREW__; __THREW__ = 0;
     $21 = $20&1;
     if ($21) {
      label = 41;
     } else {
      HEAP32[((17192 + 4|0))>>2] = 0;
      HEAP32[17192>>2] = ((13384 + 8|0));
      __THREW__ = 0;
      invoke_vii(636,($this|0),(17192|0));
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 41;
      } else {
       HEAP32[((17184 + 4|0))>>2] = 0;
       HEAP32[17184>>2] = ((13600 + 8|0));
       __THREW__ = 0;
       invoke_vii(637,($this|0),(17184|0));
       $24 = __THREW__; __THREW__ = 0;
       $25 = $24&1;
       if ($25) {
        label = 41;
       } else {
        __THREW__ = 0;
        invoke_vii(638,(17168|0),1);
        $26 = __THREW__; __THREW__ = 0;
        $27 = $26&1;
        if ($27) {
         label = 41;
        } else {
         __THREW__ = 0;
         invoke_vii(639,($this|0),(17168|0));
         $28 = __THREW__; __THREW__ = 0;
         $29 = $28&1;
         if ($29) {
          label = 41;
         } else {
          HEAP32[((17160 + 4|0))>>2] = 0;
          HEAP32[17160>>2] = ((13824 + 8|0));
          __THREW__ = 0;
          invoke_vii(640,($this|0),(17160|0));
          $30 = __THREW__; __THREW__ = 0;
          $31 = $30&1;
          if ($31) {
           label = 41;
          } else {
           HEAP32[((17152 + 4|0))>>2] = 0;
           HEAP32[17152>>2] = ((13944 + 8|0));
           __THREW__ = 0;
           invoke_vii(641,($this|0),(17152|0));
           $32 = __THREW__; __THREW__ = 0;
           $33 = $32&1;
           if ($33) {
            label = 41;
           } else {
            HEAP32[((17128 + 4|0))>>2] = 0;
            HEAP32[17128>>2] = ((12576 + 8|0));
            HEAP8[((17128 + 8|0))>>0] = 46;
            HEAP8[((17128 + 9|0))>>0] = 44;
            ;HEAP32[((17128 + 12|0))+0>>2]=0|0;HEAP32[((17128 + 12|0))+4>>2]=0|0;HEAP32[((17128 + 12|0))+8>>2]=0|0;
            __THREW__ = 0;
            invoke_vii(642,($this|0),(17128|0));
            $34 = __THREW__; __THREW__ = 0;
            $35 = $34&1;
            if ($35) {
             label = 41;
            } else {
             HEAP32[((17096 + 4|0))>>2] = 0;
             HEAP32[17096>>2] = ((12616 + 8|0));
             HEAP32[((17096 + 8|0))>>2] = 46;
             HEAP32[((17096 + 12|0))>>2] = 44;
             ;HEAP32[((17096 + 16|0))+0>>2]=0|0;HEAP32[((17096 + 16|0))+4>>2]=0|0;HEAP32[((17096 + 16|0))+8>>2]=0|0;
             __THREW__ = 0;
             invoke_vii(643,($this|0),(17096|0));
             $36 = __THREW__; __THREW__ = 0;
             $37 = $36&1;
             if ($37) {
              label = 41;
             } else {
              HEAP32[((17088 + 4|0))>>2] = 0;
              HEAP32[17088>>2] = ((10856 + 8|0));
              __THREW__ = 0;
              invoke_vii(644,($this|0),(17088|0));
              $38 = __THREW__; __THREW__ = 0;
              $39 = $38&1;
              if ($39) {
               label = 41;
              } else {
               HEAP32[((17080 + 4|0))>>2] = 0;
               HEAP32[17080>>2] = ((10976 + 8|0));
               __THREW__ = 0;
               invoke_vii(645,($this|0),(17080|0));
               $40 = __THREW__; __THREW__ = 0;
               $41 = $40&1;
               if ($41) {
                label = 41;
               } else {
                HEAP32[((17072 + 4|0))>>2] = 0;
                HEAP32[17072>>2] = ((11048 + 8|0));
                __THREW__ = 0;
                invoke_vii(646,($this|0),(17072|0));
                $42 = __THREW__; __THREW__ = 0;
                $43 = $42&1;
                if ($43) {
                 label = 41;
                } else {
                 HEAP32[((17064 + 4|0))>>2] = 0;
                 HEAP32[17064>>2] = ((11144 + 8|0));
                 __THREW__ = 0;
                 invoke_vii(647,($this|0),(17064|0));
                 $44 = __THREW__; __THREW__ = 0;
                 $45 = $44&1;
                 if ($45) {
                  label = 41;
                 } else {
                  HEAP32[((17056 + 4|0))>>2] = 0;
                  HEAP32[17056>>2] = ((11736 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(648,($this|0),(17056|0));
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17048 + 4|0))>>2] = 0;
                  HEAP32[17048>>2] = ((11800 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(649,($this|0),(17048|0));
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17040 + 4|0))>>2] = 0;
                  HEAP32[17040>>2] = ((11864 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(650,($this|0),(17040|0));
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17032 + 4|0))>>2] = 0;
                  HEAP32[17032>>2] = ((11928 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(651,($this|0),(17032|0));
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17024 + 4|0))>>2] = 0;
                  HEAP32[17024>>2] = ((11992 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(652,($this|0),(17024|0));
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17016 + 4|0))>>2] = 0;
                  HEAP32[17016>>2] = ((12072 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(653,($this|0),(17016|0));
                  $56 = __THREW__; __THREW__ = 0;
                  $57 = $56&1;
                  if ($57) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17008 + 4|0))>>2] = 0;
                  HEAP32[17008>>2] = ((12128 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(654,($this|0),(17008|0));
                  $58 = __THREW__; __THREW__ = 0;
                  $59 = $58&1;
                  if ($59) {
                   label = 41;
                   break;
                  }
                  HEAP32[((17000 + 4|0))>>2] = 0;
                  HEAP32[17000>>2] = ((12176 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(655,($this|0),(17000|0));
                  $60 = __THREW__; __THREW__ = 0;
                  $61 = $60&1;
                  if ($61) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16984 + 4|0))>>2] = 0;
                  HEAP32[16984>>2] = ((11224 + 8|0));
                  HEAP32[((16984 + 8|0))>>2] = ((11224 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(656,($this|0),(16984|0));
                  $62 = __THREW__; __THREW__ = 0;
                  $63 = $62&1;
                  if ($63) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16968 + 4|0))>>2] = 0;
                  HEAP32[16968>>2] = ((11376 + 8|0));
                  HEAP32[((16968 + 8|0))>>2] = ((11376 + 56|0));
                  __THREW__ = 0;
                  invoke_vii(657,($this|0),(16968|0));
                  $64 = __THREW__; __THREW__ = 0;
                  $65 = $64&1;
                  if ($65) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16952 + 4|0))>>2] = 0;
                  HEAP32[16952>>2] = ((13320 + 8|0));
                  __THREW__ = 0;
                  $66 = (invoke_i(595)|0);
                  $67 = __THREW__; __THREW__ = 0;
                  $68 = $67&1;
                  if ($68) {
                   $69 = ___cxa_find_matching_catch()|0;
                   $70 = tempRet0;
                   $eh$lpad$body$index3Z2D = $70;$eh$lpad$body$indexZ2D = $69;
                   break;
                  }
                  HEAP32[((16952 + 8|0))>>2] = $66;
                  HEAP32[16952>>2] = ((11672 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(658,($this|0),(16952|0));
                  $71 = __THREW__; __THREW__ = 0;
                  $72 = $71&1;
                  if ($72) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16936 + 4|0))>>2] = 0;
                  HEAP32[16936>>2] = ((13320 + 8|0));
                  __THREW__ = 0;
                  $73 = (invoke_i(595)|0);
                  $74 = __THREW__; __THREW__ = 0;
                  $75 = $74&1;
                  if ($75) {
                   $76 = ___cxa_find_matching_catch()|0;
                   $77 = tempRet0;
                   $eh$lpad$body$index3Z2D = $77;$eh$lpad$body$indexZ2D = $76;
                   break;
                  }
                  HEAP32[((16936 + 8|0))>>2] = $73;
                  HEAP32[16936>>2] = ((11704 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(659,($this|0),(16936|0));
                  $78 = __THREW__; __THREW__ = 0;
                  $79 = $78&1;
                  if ($79) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16928 + 4|0))>>2] = 0;
                  HEAP32[16928>>2] = ((12216 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(660,($this|0),(16928|0));
                  $80 = __THREW__; __THREW__ = 0;
                  $81 = $80&1;
                  if ($81) {
                   label = 41;
                   break;
                  }
                  HEAP32[((16920 + 4|0))>>2] = 0;
                  HEAP32[16920>>2] = ((12256 + 8|0));
                  __THREW__ = 0;
                  invoke_vii(661,($this|0),(16920|0));
                  $82 = __THREW__; __THREW__ = 0;
                  $83 = $82&1;
                  if ($83) {
                   label = 41;
                   break;
                  }
                  STACKTOP = sp;return;
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 41) {
   $88 = ___cxa_find_matching_catch()|0;
   $89 = tempRet0;
   $eh$lpad$body$index3Z2D = $89;$eh$lpad$body$indexZ2D = $88;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $$0 = $eh$lpad$body$index3Z2D;$$01 = $eh$lpad$body$indexZ2D;
 }
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($2);
 $$1 = $$0;$$12 = $$01;
 ___resumeException($$12|0);
 // unreachable;
}
function __ZNSt3__16locale7classicEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12368>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((12368|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(662)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((12368|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12360>>2] = 12352;
     ___cxa_guard_release((12368|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12360>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id) {
 $this = $this|0;
 $f = $f|0;
 $id = $id|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $2;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 do {
  if ($8) {
   $16 = $3;
  } else {
   $9 = (($id) + 1)|0;
   __THREW__ = 0;
   invoke_vii(663,($0|0),($9|0));
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    $$pre = HEAP32[$0>>2]|0;
    $16 = $$pre;
    break;
   }
   $12 = ___cxa_find_matching_catch()|0;
   $13 = tempRet0;
   $14 = ($f|0)==(0|0);
   if ($14) {
    ___resumeException($12|0);
    // unreachable;
   }
   (__ZNSt3__114__shared_count16__release_sharedEv($f)|0);
   ___resumeException($12|0);
   // unreachable;
  }
 } while(0);
 $15 = (($16) + ($id<<2)|0);
 $17 = HEAP32[$15>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  $20 = $16;
  $19 = (($20) + ($id<<2)|0);
  HEAP32[$19>>2] = $f;
  STACKTOP = sp;return;
 }
 (__ZNSt3__114__shared_count16__release_sharedEv($17)|0);
 $$pre2 = HEAP32[$0>>2]|0;
 $20 = $$pre2;
 $19 = (($20) + ($id<<2)|0);
 HEAP32[$19>>2] = $f;
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this|0;
 var $$pre = 0, $$pre2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i$01 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12328 + 8|0));
 $0 = (($this) + 8|0);
 $1 = (($this) + 12|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($2|0)==($3|0);
 if (!($4)) {
  $18 = $2;$6 = $3;$i$01 = 0;
  while(1) {
   $5 = (($6) + ($i$01<<2)|0);
   $7 = HEAP32[$5>>2]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $11 = $18;$13 = $6;
   } else {
    (__ZNSt3__114__shared_count16__release_sharedEv($7)|0);
    $$pre = HEAP32[$1>>2]|0;
    $$pre2 = HEAP32[$0>>2]|0;
    $11 = $$pre;$13 = $$pre2;
   }
   $9 = (($i$01) + 1)|0;
   $10 = $11;
   $12 = $13;
   $14 = (($10) - ($12))|0;
   $15 = $14 >> 2;
   $16 = ($9>>>0)<($15>>>0);
   if ($16) {
    $18 = $11;$6 = $13;$i$01 = $9;
   } else {
    break;
   }
  }
 }
 $17 = (($this) + 144|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($17);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9use_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale5__imp9has_facetEl($this,$id)|0);
 if ($0) {
  $2 = (($this) + 8|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = (($3) + ($id<<2)|0);
  $5 = HEAP32[$4>>2]|0;
  STACKTOP = sp;return ($5|0);
 } else {
  $1 = (___cxa_allocate_exception(4)|0);
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw(($1|0),(21192|0),(359|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZNSt3__16locale5__imp12make_classicEv() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__16locale5__impC2Ej(16760,1);
 HEAP32[12352>>2] = 16760;
 STACKTOP = sp;return (12352|0);
}
function __ZNSt3__16locale5__imp11make_globalEv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale7classicEv()|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[12376>>2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 STACKTOP = sp;return (12376|0);
}
function __ZNSt3__16locale8__globalEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12392>>0]|0;
 $1 = ($0<<24>>24)==(0);
 do {
  if ($1) {
   $2 = (___cxa_guard_acquire((12392|0))|0);
   $3 = ($2|0)==(0);
   if (!($3)) {
    __THREW__ = 0;
    (invoke_i(664)|0);
    $4 = __THREW__; __THREW__ = 0;
    $5 = $4&1;
    if ($5) {
     $7 = ___cxa_find_matching_catch()|0;
     $8 = tempRet0;
     ___cxa_guard_abort((12392|0));
     ___resumeException($7|0);
     // unreachable;
    } else {
     HEAP32[12384>>2] = 12376;
     ___cxa_guard_release((12392|0));
     break;
    }
   }
  }
 } while(0);
 $6 = HEAP32[12384>>2]|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNSt3__16localeC2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(665)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  HEAP32[$this>>2] = $3;
  __ZNSt3__114__shared_count12__add_sharedEv($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16localeC2ERKS0_($this,$l) {
 $this = $this|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$l>>2]|0;
 HEAP32[$this>>2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 STACKTOP = sp;return;
}
function __ZNSt3__16localeD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 (__ZNSt3__114__shared_count16__release_sharedEv($0)|0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__p$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p$i = sp;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(-1);
 if (!($1)) {
  HEAP32[$__p$i>>2] = $this;
  $2 = (($__p$i) + 4|0);
  HEAP32[$2>>2] = (666);
  $3 = (($__p$i) + 8|0);
  HEAP32[$3>>2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this,$__p$i,667);
 }
 $4 = (($this) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (($5) + -1)|0;
 STACKTOP = sp;return ($6|0);
}
function __ZNKSt3__16locale9use_facetERNS0_2idE($this,$x) {
 $this = $this|0;
 $x = $x|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (__ZNSt3__16locale2id5__getEv($x)|0);
 $2 = (__ZNKSt3__16locale5__imp9use_facetEl($0,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($this|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = HEAP32[$this>>2]|0;
 $2 = (($1) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 FUNCTION_TABLE_vi[$3 & 1023]($this);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[12400>>2]|0;HEAP32[12400>>2] = (($0+1)|0);
 $1 = (($0) + 1)|0;
 $2 = (($this) + 4|0);
 HEAP32[$2>>2] = $1;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c) {
 $this = $this|0;
 $m = $m|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $5 = 0;
  STACKTOP = sp;return ($5|0);
 }
 $0 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 $1 = (($0) + ($c<<1)|0);
 $2 = HEAP16[$1>>1]|0;
 $3 = $2 & $m;
 $4 = ($3<<16>>16)!=(0);
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNSt3__15ctypeIcE13classic_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(668)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $vec = $vec|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $vec;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
   $7 = (($6) + ($5<<1)|0);
   $8 = HEAP16[$7>>1]|0;
   $9 = $8;
  } else {
   $9 = 0;
  }
  HEAP16[$$03>>1] = $9;
  $10 = (($$012) + 4|0);
  $11 = (($$03) + 2|0);
  $12 = ($10|0)==($high|0);
  if ($12) {
   break;
  } else {
   $$012 = $10;$$03 = $11;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $1 = HEAP32[$$01>>2]|0;
    $isascii = ($1>>>0)<(128);
    if ($isascii) {
     $2 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
     $3 = (($2) + ($1<<1)|0);
     $4 = HEAP16[$3>>1]|0;
     $5 = $4 & $m;
     $6 = ($5<<16>>16)==(0);
     if (!($6)) {
      $$0$lcssa = $$01;
      break L1;
     }
    }
    $7 = (($$01) + 4|0);
    $8 = ($7|0)==($high|0);
    if ($8) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $7;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high) {
 $this = $this|0;
 $m = $m|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 L1: do {
  if ($0) {
   $$0$lcssa = $low;
  } else {
   $$01 = $low;
   while(1) {
    $3 = HEAP32[$$01>>2]|0;
    $isascii = ($3>>>0)<(128);
    if (!($isascii)) {
     $$0$lcssa = $$01;
     break L1;
    }
    $4 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
    $5 = (($4) + ($3<<1)|0);
    $6 = HEAP16[$5>>1]|0;
    $7 = $6 & $m;
    $8 = ($7<<16>>16)==(0);
    $2 = (($$01) + 4|0);
    if ($8) {
     $$0$lcssa = $$01;
     break L1;
    }
    $1 = ($2|0)==($high|0);
    if ($1) {
     $$0$lcssa = $high;
     break;
    } else {
     $$01 = $2;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(669)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 if (!($isascii)) {
  $3 = $c;
  STACKTOP = sp;return ($3|0);
 }
 $0 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $1 = (($0) + ($c<<2)|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 STACKTOP = sp;return ($3|0);
}
function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(670)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $4 = ___cxa_find_matching_catch(0|0)|0;
  $5 = tempRet0;
  ___clang_call_terminate($4);
  // unreachable;
 } else {
  $3 = HEAP32[$0>>2]|0;
  STACKTOP = sp;return ($3|0);
 }
 return (0)|0;
}
function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low3 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 }
 $low3 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low3))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$01 = $low;
 while(1) {
  $5 = HEAP32[$$01>>2]|0;
  $isascii = ($5>>>0)<(128);
  if ($isascii) {
   $6 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $7 = (($6) + ($5<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = $8;
  } else {
   $9 = $5;
  }
  HEAP32[$$01>>2] = $9;
  $10 = (($$01) + 4|0);
  $11 = ($10|0)==($high|0);
  if ($11) {
   break;
  } else {
   $$01 = $10;
  }
 }
 $scevgep5 = (($low) + ($4<<2)|0);
 $$0$lcssa = $scevgep5;
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c << 24 >> 24;
 STACKTOP = sp;return ($0|0);
}
function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$012 = $low;$$03 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$012>>0]|0;
  $2 = $1 << 24 >> 24;
  HEAP32[$$03>>2] = $2;
  $3 = (($$012) + 1|0);
  $4 = (($$03) + 4|0);
  $5 = ($3|0)==($high|0);
  if ($5) {
   $$01$lcssa = $high;
   break;
  } else {
   $$012 = $3;$$03 = $4;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $$0 = 0, $0 = 0, $isascii = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii = ($c>>>0)<(128);
 $0 = $c&255;
 $$0 = $isascii ? $0 : $dfault;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii = 0, $low5 = 0, $scevgep = 0, $scevgep7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 }
 $low5 = $low;
 $scevgep = (($high) + -4|0);
 $1 = $scevgep;
 $2 = (($1) - ($low5))|0;
 $3 = $2 >>> 2;
 $4 = (($3) + 1)|0;
 $$012 = $low;$$03 = $dest;
 while(1) {
  $5 = HEAP32[$$012>>2]|0;
  $isascii = ($5>>>0)<(128);
  $6 = $5&255;
  $$dfault = $isascii ? $6 : $dfault;
  HEAP8[$$03>>0] = $$dfault;
  $7 = (($$012) + 4|0);
  $8 = (($$03) + 1|0);
  $9 = ($7|0)==($high|0);
  if ($9) {
   break;
  } else {
   $$012 = $7;$$03 = $8;
  }
 }
 $scevgep7 = (($low) + ($4<<2)|0);
 $$01$lcssa = $scevgep7;
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__15ctypeIcEC2EPKtbj($this,$tab,$del,$refs) {
 $this = $this|0;
 $tab = $tab|0;
 $del = $del|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((12424 + 8|0));
 $2 = (($this) + 8|0);
 HEAP32[$2>>2] = $tab;
 $3 = (($this) + 12|0);
 $4 = $del&1;
 HEAP8[$3>>0] = $4;
 $5 = ($tab|0)==(0|0);
 if (!($5)) {
  STACKTOP = sp;return;
 }
 $6 = (__ZNSt3__15ctypeIcE13classic_tableEv()|0);
 HEAP32[$2>>2] = $6;
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12424 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $3 = (($this) + 12|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = ($4<<24>>24)==(0);
  if (!($5)) {
   __ZdaPv($1);
  }
 }
 STACKTOP = sp;return;
}
function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c&255;
 $1 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_upper_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 if (!($isascii1)) {
  $5 = $c;
  STACKTOP = sp;return ($5|0);
 }
 $0 = $c << 24 >> 24;
 $1 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
 $2 = (($1) + ($0<<2)|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3&255;
 $5 = $4;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 var $$0$lcssa = 0, $$02 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$0$lcssa = $low;
  STACKTOP = sp;return ($$0$lcssa|0);
 } else {
  $$02 = $low;
 }
 while(1) {
  $1 = HEAP8[$$02>>0]|0;
  $isascii1 = ($1<<24>>24)>(-1);
  if ($isascii1) {
   $2 = $1 << 24 >> 24;
   $3 = (__ZNSt3__15ctypeIcE21__classic_lower_tableEv()|0);
   $4 = (($3) + ($2<<2)|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = $5&255;
   $7 = $6;
  } else {
   $7 = $1;
  }
  HEAP8[$$02>>0] = $7;
  $8 = (($$02) + 1|0);
  $9 = ($8|0)==($high|0);
  if ($9) {
   $$0$lcssa = $high;
   break;
  } else {
   $$02 = $8;
  }
 }
 STACKTOP = sp;return ($$0$lcssa|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c) {
 $this = $this|0;
 $c = $c|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return ($c|0);
}
function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
 } else {
  $$012 = $low;$$03 = $dest;
  while(1) {
   $1 = HEAP8[$$012>>0]|0;
   HEAP8[$$03>>0] = $1;
   $2 = (($$012) + 1|0);
   $3 = (($$03) + 1|0);
   $4 = ($2|0)==($high|0);
   if ($4) {
    $$01$lcssa = $high;
    break;
   } else {
    $$012 = $2;$$03 = $3;
   }
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault) {
 $this = $this|0;
 $c = $c|0;
 $dfault = $dfault|0;
 var $c$dfault = 0, $isascii1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isascii1 = ($c<<24>>24)>(-1);
 $c$dfault = $isascii1 ? $c : $dfault;
 STACKTOP = sp;return ($c$dfault|0);
}
function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest) {
 $this = $this|0;
 $low = $low|0;
 $high = $high|0;
 $dfault = $dfault|0;
 $dest = $dest|0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $$dfault = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isascii2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($low|0)==($high|0);
 if ($0) {
  $$01$lcssa = $low;
  STACKTOP = sp;return ($$01$lcssa|0);
 } else {
  $$013 = $low;$$04 = $dest;
 }
 while(1) {
  $1 = HEAP8[$$013>>0]|0;
  $isascii2 = ($1<<24>>24)>(-1);
  $$dfault = $isascii2 ? $1 : $dfault;
  HEAP8[$$04>>0] = $$dfault;
  $2 = (($$013) + 1|0);
  $3 = (($$04) + 1|0);
  $4 = ($2|0)==($high|0);
  if ($4) {
   $$01$lcssa = $high;
   break;
  } else {
   $$013 = $2;$$04 = $3;
  }
 }
 STACKTOP = sp;return ($$01$lcssa|0);
}
function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $1 = $1|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $2 = $2|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $end = $end|0;
 $mx = $mx|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $end;
 $2 = $frm;
 $3 = (($1) - ($2))|0;
 $4 = ($3>>>0)<($mx>>>0);
 $5 = $4 ? $3 : $mx;
 STACKTOP = sp;return ($5|0);
}
function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 1;
}
function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this,$refs) {
 $this = $this|0;
 $refs = $refs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($refs) + -1)|0;
 $1 = (($this) + 4|0);
 HEAP32[$1>>2] = $0;
 HEAP32[$this>>2] = ((12496 + 8|0));
 __THREW__ = 0;
 $2 = (invoke_i(595)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___resumeException($6|0);
  // unreachable;
 } else {
  $5 = (($this) + 8|0);
  HEAP32[$5>>2] = $2;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0148 = 0, $$0247 = 0, $$1$lcssa = 0, $$19 = 0, $$pre = 0, $$pre101 = 0, $$pre98 = 0, $$pre99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$054 = 0, $fend$149 = 0, $fend$2$lcssa = 0, $fend$215 = 0, $fend$3 = 0, $n$011 = 0, $not$ = 0, $or$cond = 0, $or$cond46 = 0, $p$012 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $tmp = sp + 8|0;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $112 = $frm;
  } else {
   $fend$054 = $frm;
   while(1) {
    $3 = HEAP32[$fend$054>>2]|0;
    $4 = ($3|0)==(0);
    $2 = (($fend$054) + 4|0);
    if ($4) {
     $fend$0$lcssa = $fend$054;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$054 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond46 = $0 | $5;
   if ($or$cond46) {
    $112 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0148 = $frm;$$0247 = $to;$fend$149 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$149;
     $19 = $$0148;
     $20 = (($18) - ($19))|0;
     $21 = $20 >> 2;
     $22 = $$0247;
     $23 = (($6) - ($22))|0;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(671,($$0247|0),($frm_nxt|0),($21|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(611,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 1;
      label = 51;
      break;
     }
     $68 = HEAP32[$to_nxt>>2]|0;
     $69 = (($68) + ($26)|0);
     HEAP32[$to_nxt>>2] = $69;
     $70 = ($69|0)==($to_end|0);
     if ($70) {
      label = 49;
      break;
     }
     $71 = ($fend$149|0)==($frm_end|0);
     if ($71) {
      $$pre98 = HEAP32[$frm_nxt>>2]|0;
      $109 = $$pre98;$111 = $69;$fend$3 = $frm_end;
     } else {
      $72 = HEAP32[$7>>2]|0;
      $73 = (_uselocale(($72|0))|0);
      __THREW__ = 0;
      $74 = (invoke_iiii(672,($tmp|0),0,($st|0))|0);
      $75 = __THREW__; __THREW__ = 0;
      $76 = $75&1;
      if ($76) {
       label = 35;
       break;
      }
      $77 = ($73|0)==(0|0);
      if (!($77)) {
       __THREW__ = 0;
       (invoke_ii(611,($73|0))|0);
       $78 = __THREW__; __THREW__ = 0;
       $79 = $78&1;
       if ($79) {
        label = 34;
        break;
       }
      }
      $89 = ($74|0)==(-1);
      if ($89) {
       $$0 = 2;
       label = 51;
       break;
      }
      $90 = HEAP32[$to_nxt>>2]|0;
      $91 = $90;
      $92 = (($6) - ($91))|0;
      $93 = ($74>>>0)>($92>>>0);
      if ($93) {
       $$0 = 1;
       label = 51;
       break;
      }
      $94 = ($74|0)==(0);
      L25: do {
       if (!($94)) {
        $97 = $90;$n$011 = $74;$p$012 = $tmp;
        while(1) {
         $95 = HEAP8[$p$012>>0]|0;
         $96 = (($97) + 1|0);
         HEAP32[$to_nxt>>2] = $96;
         HEAP8[$97>>0] = $95;
         $98 = (($n$011) + -1)|0;
         $99 = ($98|0)==(0);
         if ($99) {
          break L25;
         }
         $100 = (($p$012) + 1|0);
         $$pre101 = HEAP32[$to_nxt>>2]|0;
         $97 = $$pre101;$n$011 = $98;$p$012 = $100;
        }
       }
      } while(0);
      $101 = HEAP32[$frm_nxt>>2]|0;
      $102 = (($101) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
      $103 = ($102|0)==($frm_end|0);
      L30: do {
       if ($103) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$215 = $102;
        while(1) {
         $106 = HEAP32[$fend$215>>2]|0;
         $107 = ($106|0)==(0);
         $105 = (($fend$215) + 4|0);
         if ($107) {
          $fend$2$lcssa = $fend$215;
          break L30;
         }
         $104 = ($105|0)==($frm_end|0);
         if ($104) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$215 = $105;
         }
        }
       }
      } while(0);
      $$pre99 = HEAP32[$to_nxt>>2]|0;
      $109 = $102;$111 = $$pre99;$fend$3 = $fend$2$lcssa;
     }
     $108 = ($109|0)==($frm_end|0);
     $110 = ($111|0)==($to_end|0);
     $or$cond = $108 | $110;
     if ($or$cond) {
      $112 = $109;
      break L1;
     } else {
      $$0148 = $109;$$0247 = $111;$fend$149 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(611,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0247;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0148|0)==($41|0);
     L55: do {
      if ($42) {
       $$1$lcssa = $$0148;
      } else {
       $$19 = $$0148;$46 = $$0247;
       while(1) {
        $43 = HEAP32[$$19>>2]|0;
        $44 = HEAP32[$7>>2]|0;
        $45 = (_uselocale(($44|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiii(672,($46|0),($43|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         break;
        }
        $50 = ($45|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(611,($45|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        $62 = ($47|0)==(-1);
        if ($62) {
         $$1$lcssa = $$19;
         break L55;
        }
        $63 = HEAP32[$to_nxt>>2]|0;
        $64 = (($63) + ($47)|0);
        HEAP32[$to_nxt>>2] = $64;
        $65 = (($$19) + 4|0);
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($65|0)==($66|0);
        if ($67) {
         $$1$lcssa = $65;
         break L55;
        } else {
         $$19 = $65;$46 = $64;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       $55 = ___cxa_find_matching_catch()|0;
       $56 = tempRet0;
       $57 = ($45|0)==(0|0);
       if ($57) {
        ___resumeException($55|0);
        // unreachable;
       }
       __THREW__ = 0;
       (invoke_ii(611,($45|0))|0);
       $58 = __THREW__; __THREW__ = 0;
       $59 = $58&1;
       if ($59) {
        $60 = ___cxa_find_matching_catch(0|0)|0;
        $61 = tempRet0;
        ___clang_call_terminate($60);
        // unreachable;
       } else {
        ___resumeException($55|0);
        // unreachable;
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $$0 = 2;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 34) {
     $80 = ___cxa_find_matching_catch(0|0)|0;
     $81 = tempRet0;
     ___clang_call_terminate($80);
     // unreachable;
    }
    else if ((label|0) == 35) {
     $82 = ___cxa_find_matching_catch()|0;
     $83 = tempRet0;
     $84 = ($73|0)==(0|0);
     if ($84) {
      ___resumeException($82|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(611,($73|0))|0);
     $85 = __THREW__; __THREW__ = 0;
     $86 = $85&1;
     if ($86) {
      $87 = ___cxa_find_matching_catch(0|0)|0;
      $88 = tempRet0;
      ___clang_call_terminate($87);
      // unreachable;
     } else {
      ___resumeException($82|0);
      // unreachable;
     }
    }
    else if ((label|0) == 49) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $112 = $$pre;
     break;
    }
    else if ((label|0) == 51) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($112|0)!=($frm_end|0);
 $113 = $not$&1;
 $$0 = $113;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$0155 = 0, $$0254 = 0, $$1$lcssa = 0, $$115 = 0, $$2 = 0, $$pre = 0, $$pre114 = 0, $$pre115 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $fend$0$lcssa = 0, $fend$061 = 0, $fend$156 = 0, $fend$2$lcssa = 0, $fend$216 = 0;
 var $fend$3 = 0, $not$ = 0, $not$3 = 0, $or$cond = 0, $or$cond53 = 0, $save_state = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $save_state = sp;
 $0 = ($frm|0)==($frm_end|0);
 L1: do {
  if ($0) {
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $104 = $frm;
  } else {
   $fend$061 = $frm;
   while(1) {
    $3 = HEAP8[$fend$061>>0]|0;
    $4 = ($3<<24>>24)==(0);
    $2 = (($fend$061) + 1|0);
    if ($4) {
     $fend$0$lcssa = $fend$061;
     break;
    }
    $1 = ($2|0)==($frm_end|0);
    if ($1) {
     $fend$0$lcssa = $frm_end;
     break;
    } else {
     $fend$061 = $2;
    }
   }
   HEAP32[$to_nxt>>2] = $to;
   HEAP32[$frm_nxt>>2] = $frm;
   $5 = ($to|0)==($to_end|0);
   $or$cond53 = $0 | $5;
   if ($or$cond53) {
    $104 = $frm;
   } else {
    $6 = $to_end;
    $7 = (($this) + 8|0);
    $$0155 = $frm;$$0254 = $to;$fend$156 = $fend$0$lcssa;
    while(1) {
     $8 = $st;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $11 = (($8) + 4)|0;
     $12 = $11;
     $13 = HEAP32[$12>>2]|0;
     $14 = $save_state;
     $15 = $14;
     HEAP32[$15>>2] = $10;
     $16 = (($14) + 4)|0;
     $17 = $16;
     HEAP32[$17>>2] = $13;
     $18 = $fend$156;
     $19 = $$0155;
     $20 = (($18) - ($19))|0;
     $21 = $$0254;
     $22 = (($6) - ($21))|0;
     $23 = $22 >> 2;
     $24 = HEAP32[$7>>2]|0;
     $25 = (_uselocale(($24|0))|0);
     __THREW__ = 0;
     $26 = (invoke_iiiiii(673,($$0254|0),($frm_nxt|0),($20|0),($23|0),($st|0))|0);
     $27 = __THREW__; __THREW__ = 0;
     $28 = $27&1;
     if ($28) {
      label = 11;
      break;
     }
     $29 = ($25|0)==(0|0);
     if (!($29)) {
      __THREW__ = 0;
      (invoke_ii(611,($25|0))|0);
      $30 = __THREW__; __THREW__ = 0;
      $31 = $30&1;
      if ($31) {
       label = 10;
       break;
      }
     }
     if ((($26|0) == -1)) {
      label = 16;
      break;
     } else if ((($26|0) == 0)) {
      $$0 = 2;
      label = 50;
      break;
     }
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + ($26<<2)|0);
     HEAP32[$to_nxt>>2] = $70;
     $71 = ($70|0)==($to_end|0);
     if ($71) {
      label = 48;
      break;
     }
     $72 = ($fend$156|0)==($frm_end|0);
     $$pre114 = HEAP32[$frm_nxt>>2]|0;
     if ($72) {
      $101 = $$pre114;$103 = $70;$fend$3 = $frm_end;
     } else {
      $73 = HEAP32[$7>>2]|0;
      $74 = (_uselocale(($73|0))|0);
      __THREW__ = 0;
      $75 = (invoke_iiiii(674,($70|0),($$pre114|0),1,($st|0))|0);
      $76 = __THREW__; __THREW__ = 0;
      $77 = $76&1;
      if ($77) {
       label = 38;
       break;
      }
      $78 = ($74|0)==(0|0);
      if (!($78)) {
       __THREW__ = 0;
       (invoke_ii(611,($74|0))|0);
       $79 = __THREW__; __THREW__ = 0;
       $80 = $79&1;
       if ($80) {
        label = 37;
        break;
       }
      }
      $90 = ($75|0)==(0);
      if (!($90)) {
       $$0 = 2;
       label = 50;
       break;
      }
      $91 = HEAP32[$to_nxt>>2]|0;
      $92 = (($91) + 4|0);
      HEAP32[$to_nxt>>2] = $92;
      $93 = HEAP32[$frm_nxt>>2]|0;
      $94 = (($93) + 1|0);
      HEAP32[$frm_nxt>>2] = $94;
      $95 = ($94|0)==($frm_end|0);
      L22: do {
       if ($95) {
        $fend$2$lcssa = $frm_end;
       } else {
        $fend$216 = $94;
        while(1) {
         $98 = HEAP8[$fend$216>>0]|0;
         $99 = ($98<<24>>24)==(0);
         $97 = (($fend$216) + 1|0);
         if ($99) {
          $fend$2$lcssa = $fend$216;
          break L22;
         }
         $96 = ($97|0)==($frm_end|0);
         if ($96) {
          $fend$2$lcssa = $frm_end;
          break;
         } else {
          $fend$216 = $97;
         }
        }
       }
      } while(0);
      $$pre115 = HEAP32[$to_nxt>>2]|0;
      $101 = $94;$103 = $$pre115;$fend$3 = $fend$2$lcssa;
     }
     $100 = ($101|0)==($frm_end|0);
     $102 = ($103|0)==($to_end|0);
     $or$cond = $100 | $102;
     if ($or$cond) {
      $104 = $101;
      break L1;
     } else {
      $$0155 = $101;$$0254 = $103;$fend$156 = $fend$3;
     }
    }
    if ((label|0) == 10) {
     $32 = ___cxa_find_matching_catch(0|0)|0;
     $33 = tempRet0;
     ___clang_call_terminate($32);
     // unreachable;
    }
    else if ((label|0) == 11) {
     $34 = ___cxa_find_matching_catch()|0;
     $35 = tempRet0;
     $36 = ($25|0)==(0|0);
     if ($36) {
      ___resumeException($34|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(611,($25|0))|0);
     $37 = __THREW__; __THREW__ = 0;
     $38 = $37&1;
     if ($38) {
      $39 = ___cxa_find_matching_catch(0|0)|0;
      $40 = tempRet0;
      ___clang_call_terminate($39);
      // unreachable;
     } else {
      ___resumeException($34|0);
      // unreachable;
     }
    }
    else if ((label|0) == 16) {
     HEAP32[$to_nxt>>2] = $$0254;
     $41 = HEAP32[$frm_nxt>>2]|0;
     $42 = ($$0155|0)==($41|0);
     L31: do {
      if ($42) {
       $$1$lcssa = $$0155;
      } else {
       $$115 = $$0155;$storemerge14 = $$0254;
       while(1) {
        $43 = $$115;
        $44 = (($18) - ($43))|0;
        $45 = HEAP32[$7>>2]|0;
        $46 = (_uselocale(($45|0))|0);
        __THREW__ = 0;
        $47 = (invoke_iiiii(674,($storemerge14|0),($$115|0),($44|0),($save_state|0))|0);
        $48 = __THREW__; __THREW__ = 0;
        $49 = $48&1;
        if ($49) {
         label = 21;
         break;
        }
        $50 = ($46|0)==(0|0);
        if (!($50)) {
         __THREW__ = 0;
         (invoke_ii(611,($46|0))|0);
         $51 = __THREW__; __THREW__ = 0;
         $52 = $51&1;
         if ($52) {
          label = 20;
          break;
         }
        }
        if ((($47|0) == -1)) {
         label = 27;
         break;
        } else if ((($47|0) == -2)) {
         label = 28;
         break;
        } else if ((($47|0) == 0)) {
         $62 = (($$115) + 1|0);
         $$2 = $62;
        } else {
         $63 = (($$115) + ($47)|0);
         $$2 = $63;
        }
        $64 = HEAP32[$to_nxt>>2]|0;
        $65 = (($64) + 4|0);
        HEAP32[$to_nxt>>2] = $65;
        $66 = HEAP32[$frm_nxt>>2]|0;
        $67 = ($$2|0)==($66|0);
        if ($67) {
         $$1$lcssa = $$2;
         break L31;
        } else {
         $$115 = $$2;$storemerge14 = $65;
        }
       }
       if ((label|0) == 20) {
        $53 = ___cxa_find_matching_catch(0|0)|0;
        $54 = tempRet0;
        ___clang_call_terminate($53);
        // unreachable;
       }
       else if ((label|0) == 21) {
        $55 = ___cxa_find_matching_catch()|0;
        $56 = tempRet0;
        $57 = ($46|0)==(0|0);
        if ($57) {
         ___resumeException($55|0);
         // unreachable;
        }
        __THREW__ = 0;
        (invoke_ii(611,($46|0))|0);
        $58 = __THREW__; __THREW__ = 0;
        $59 = $58&1;
        if ($59) {
         $60 = ___cxa_find_matching_catch(0|0)|0;
         $61 = tempRet0;
         ___clang_call_terminate($60);
         // unreachable;
        } else {
         ___resumeException($55|0);
         // unreachable;
        }
       }
       else if ((label|0) == 27) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 2;
        STACKTOP = sp;return ($$0|0);
       }
       else if ((label|0) == 28) {
        HEAP32[$frm_nxt>>2] = $$115;
        $$0 = 1;
        STACKTOP = sp;return ($$0|0);
       }
      }
     } while(0);
     HEAP32[$frm_nxt>>2] = $$1$lcssa;
     $not$3 = ($$1$lcssa|0)!=($frm_end|0);
     $68 = $not$3&1;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    else if ((label|0) == 37) {
     $81 = ___cxa_find_matching_catch(0|0)|0;
     $82 = tempRet0;
     ___clang_call_terminate($81);
     // unreachable;
    }
    else if ((label|0) == 38) {
     $83 = ___cxa_find_matching_catch()|0;
     $84 = tempRet0;
     $85 = ($74|0)==(0|0);
     if ($85) {
      ___resumeException($83|0);
      // unreachable;
     }
     __THREW__ = 0;
     (invoke_ii(611,($74|0))|0);
     $86 = __THREW__; __THREW__ = 0;
     $87 = $86&1;
     if ($87) {
      $88 = ___cxa_find_matching_catch(0|0)|0;
      $89 = tempRet0;
      ___clang_call_terminate($88);
      // unreachable;
     } else {
      ___resumeException($83|0);
      // unreachable;
     }
    }
    else if ((label|0) == 48) {
     $$pre = HEAP32[$frm_nxt>>2]|0;
     $104 = $$pre;
     break;
    }
    else if ((label|0) == 50) {
     STACKTOP = sp;return ($$0|0);
    }
   }
  }
 } while(0);
 $not$ = ($104|0)!=($frm_end|0);
 $105 = $not$&1;
 $$0 = $105;
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $st = $st|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $tmp = sp;
 HEAP32[$to_nxt>>2] = $to;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (_uselocale(($1|0))|0);
 __THREW__ = 0;
 $3 = (invoke_iiii(672,($tmp|0),0,($st|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   ___resumeException($11|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(611,($2|0))|0);
  $14 = __THREW__; __THREW__ = 0;
  $15 = $14&1;
  if ($15) {
   $16 = ___cxa_find_matching_catch(0|0)|0;
   $17 = tempRet0;
   ___clang_call_terminate($16);
   // unreachable;
  } else {
   ___resumeException($11|0);
   // unreachable;
  }
 }
 $6 = ($2|0)==(0|0);
 if (!($6)) {
  __THREW__ = 0;
  (invoke_ii(611,($2|0))|0);
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if ($8) {
   $9 = ___cxa_find_matching_catch(0|0)|0;
   $10 = tempRet0;
   ___clang_call_terminate($9);
   // unreachable;
  }
 }
 if ((($3|0) == 0) | (($3|0) == -1)) {
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = (($3) + -1)|0;
 $19 = HEAP32[$to_nxt>>2]|0;
 $20 = $to_end;
 $21 = $19;
 $22 = (($20) - ($21))|0;
 $23 = ($18>>>0)>($22>>>0);
 if ($23) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $24 = ($18|0)==(0);
 if ($24) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $27 = $19;$n$02 = $18;$p$03 = $tmp;
 }
 while(1) {
  $25 = HEAP8[$p$03>>0]|0;
  $26 = (($27) + 1|0);
  HEAP32[$to_nxt>>2] = $26;
  HEAP8[$27>>0] = $25;
  $28 = (($n$02) + -1)|0;
  $29 = ($28|0)==(0);
  if ($29) {
   $$0 = 0;
   break;
  }
  $30 = (($p$03) + 1|0);
  $$pre = HEAP32[$to_nxt>>2]|0;
  $27 = $$pre;$n$02 = $28;$p$03 = $30;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $eh$lpad$body$indexZ2D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_ii(611,($1|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  __THREW__ = 0;
  $5 = (invoke_iiii(675,(0|0),(0|0),4)|0);
  $6 = __THREW__; __THREW__ = 0;
  $7 = $6&1;
  if ($7) {
   $13 = ___cxa_find_matching_catch(0|0)|0;
   $14 = tempRet0;
   $15 = ($2|0)==(0|0);
   if ($15) {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
   __THREW__ = 0;
   (invoke_ii(611,($2|0))|0);
   $16 = __THREW__; __THREW__ = 0;
   $17 = $16&1;
   if ($17) {
    $18 = ___cxa_find_matching_catch(0|0)|0;
    $19 = tempRet0;
    ___clang_call_terminate($18);
    // unreachable;
   } else {
    $eh$lpad$body$indexZ2D = $13;
    ___clang_call_terminate($eh$lpad$body$indexZ2D);
    // unreachable;
   }
  }
  $8 = ($2|0)==(0|0);
  if (!($8)) {
   __THREW__ = 0;
   (invoke_ii(611,($2|0))|0);
   $9 = __THREW__; __THREW__ = 0;
   $10 = $9&1;
   if ($10) {
    $11 = ___cxa_find_matching_catch(0|0)|0;
    $12 = tempRet0;
    ___clang_call_terminate($11);
    // unreachable;
   }
  }
  $20 = ($5|0)==(0);
  if (!($20)) {
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
  $21 = HEAP32[$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
  __THREW__ = 0;
  $23 = (invoke_ii(611,($21|0))|0);
  $24 = __THREW__; __THREW__ = 0;
  $25 = $24&1;
  if (!($25)) {
   $26 = ($23|0)==(0|0);
   if ($26) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   __THREW__ = 0;
   (invoke_ii(611,($23|0))|0);
   $27 = __THREW__; __THREW__ = 0;
   $28 = $27&1;
   if ($28) {
    $29 = ___cxa_find_matching_catch(0|0)|0;
    $30 = tempRet0;
    ___clang_call_terminate($29);
    // unreachable;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  }
 }
 $31 = ___cxa_find_matching_catch(0|0)|0;
 $32 = tempRet0;
 $eh$lpad$body$indexZ2D = $31;
 ___clang_call_terminate($eh$lpad$body$indexZ2D);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx) {
 $this = $this|0;
 $st = $st|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mx|0)==(0);
 $1 = ($frm|0)==($frm_end|0);
 $or$cond5 = $0 | $1;
 if ($or$cond5) {
  $nbytes$0$lcssa = 0;
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 $2 = $frm_end;
 $3 = (($this) + 8|0);
 $$016 = $frm;$nbytes$07 = 0;$nwchar_t$08 = 0;
 while(1) {
  $4 = $$016;
  $5 = (($2) - ($4))|0;
  $6 = HEAP32[$3>>2]|0;
  $7 = (_uselocale(($6|0))|0);
  __THREW__ = 0;
  $8 = (invoke_iiii(676,($$016|0),($5|0),($st|0))|0);
  $9 = __THREW__; __THREW__ = 0;
  $10 = $9&1;
  if ($10) {
   label = 7;
   break;
  }
  $11 = ($7|0)==(0|0);
  if (!($11)) {
   __THREW__ = 0;
   (invoke_ii(611,($7|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if ($13) {
    label = 6;
    break;
   }
  }
  if ((($8|0) == 0)) {
   $23 = (($$016) + 1|0);
   $$1 = $23;$$pn = 1;
  } else if ((($8|0) == -2) | (($8|0) == -1)) {
   $nbytes$0$lcssa = $nbytes$07;
   label = 15;
   break;
  } else {
   $24 = (($$016) + ($8)|0);
   $$1 = $24;$$pn = $8;
  }
  $nbytes$1 = (($$pn) + ($nbytes$07))|0;
  $25 = (($nwchar_t$08) + 1)|0;
  $26 = ($25>>>0)>=($mx>>>0);
  $27 = ($$1|0)==($frm_end|0);
  $or$cond = $26 | $27;
  if ($or$cond) {
   $nbytes$0$lcssa = $nbytes$1;
   label = 15;
   break;
  } else {
   $$016 = $$1;$nbytes$07 = $nbytes$1;$nwchar_t$08 = $25;
  }
 }
 if ((label|0) == 6) {
  $14 = ___cxa_find_matching_catch(0|0)|0;
  $15 = tempRet0;
  ___clang_call_terminate($14);
  // unreachable;
 }
 else if ((label|0) == 7) {
  $16 = ___cxa_find_matching_catch()|0;
  $17 = tempRet0;
  $18 = ($7|0)==(0|0);
  if ($18) {
   ___resumeException($16|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(611,($7|0))|0);
  $19 = __THREW__; __THREW__ = 0;
  $20 = $19&1;
  if ($20) {
   $21 = ___cxa_find_matching_catch(0|0)|0;
   $22 = tempRet0;
   ___clang_call_terminate($21);
   // unreachable;
  } else {
   ___resumeException($16|0);
   // unreachable;
  }
 }
 else if ((label|0) == 15) {
  STACKTOP = sp;return ($nbytes$0$lcssa|0);
 }
 return (0)|0;
}
function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $11 = 1;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 $3 = (invoke_ii(611,($1|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 __THREW__ = 0;
 (invoke_ii(611,($3|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch(0|0)|0;
  $10 = tempRet0;
  ___clang_call_terminate($9);
  // unreachable;
 } else {
  $11 = 4;
  STACKTOP = sp;return ($11|0);
 }
 return (0)|0;
}
function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 1;
 $7 = (($frm) + ($6<<1)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 1;
 $12 = (($to) + ($11<<1)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = (($frm) + ($6<<2)|0);
 HEAP32[$frm_nxt>>2] = $7;
 $8 = HEAP32[$_to_nxt>>2]|0;
 $9 = $8;
 $10 = $to;
 $11 = (($9) - ($10))|0;
 $12 = (($to) + ($11)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $_frm_nxt = 0, $_to_nxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $_frm_nxt = sp + 4|0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt>>2] = $frm;
 HEAP32[$_to_nxt>>2] = $to;
 $1 = (__ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$_frm_nxt,$to,$to_end,$_to_nxt,1114111,0)|0);
 $2 = HEAP32[$_frm_nxt>>2]|0;
 $3 = $2;
 $4 = $frm;
 $5 = (($3) - ($4))|0;
 $6 = (($frm) + ($5)|0);
 HEAP32[$frm_nxt>>2] = $6;
 $7 = HEAP32[$_to_nxt>>2]|0;
 $8 = $7;
 $9 = $to;
 $10 = (($8) - ($9))|0;
 $11 = $10 >> 2;
 $12 = (($to) + ($11<<2)|0);
 HEAP32[$to_nxt>>2] = $12;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt) {
 $this = $this|0;
 $0 = $0|0;
 $to = $to|0;
 $1 = $1|0;
 $to_nxt = $to_nxt|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$to_nxt>>2] = $to;
 STACKTOP = sp;return 3;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 0;
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx) {
 $this = $this|0;
 $0 = $0|0;
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (__ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,1114111,0)|0);
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return 4;
}
function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12576 + 8|0));
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12616 + 8|0));
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 9|0);
 $1 = HEAP8[$0>>0]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 16|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,12656,4);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(12664)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,12664,$0);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result,12688,5);
 STACKTOP = sp;return;
}
function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result,$this) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_wcslen(12696)|0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result,12696,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($iob) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 74;
 if ((($2|0) == 0)) {
  $$0 = 0;
 } else if ((($2|0) == 8)) {
  $$0 = 16;
 } else if ((($2|0) == 64)) {
  $$0 = 8;
 } else {
  $$0 = 10;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12728>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[12720>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((12728|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[12720>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[19928>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((19928|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((19760|0),0,168)|0;
   (___cxa_atexit((677|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19928|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(678,(19760|0),(19936|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(678,(((19760 + 12|0))|0),(19944|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(678,(((19760 + 24|0))|0),(19952|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(678,(((19760 + 36|0))|0),(19960|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(678,(((19760 + 48|0))|0),(19976|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(678,(((19760 + 60|0))|0),(19992|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(678,(((19760 + 72|0))|0),(20000|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(678,(((19760 + 84|0))|0),(20016|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(678,(((19760 + 96|0))|0),(20024|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(678,(((19760 + 108|0))|0),(20032|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(678,(((19760 + 120|0))|0),(20040|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(678,(((19760 + 132|0))|0),(20048|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(678,(((19760 + 144|0))|0),(20056|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(678,(((19760 + 156|0))|0),(20064|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[12720>>2] = 19760;
               ___cxa_guard_release((12728|0));
               $36 = HEAP32[12720>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((12728|0));
 ___resumeException($37|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12744>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $36 = HEAP32[12736>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $2 = (___cxa_guard_acquire((12744|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $36 = HEAP32[12736>>2]|0;
  STACKTOP = sp;return ($36|0);
 }
 $4 = HEAP8[19392>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((19392|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((19224|0),0,168)|0;
   (___cxa_atexit((679|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19392|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(680,(19224|0),(19400|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if (!($9)) {
  __THREW__ = 0;
  (invoke_iii(680,(((19224 + 12|0))|0),(19432|0))|0);
  $10 = __THREW__; __THREW__ = 0;
  $11 = $10&1;
  if (!($11)) {
   __THREW__ = 0;
   (invoke_iii(680,(((19224 + 24|0))|0),(19464|0))|0);
   $12 = __THREW__; __THREW__ = 0;
   $13 = $12&1;
   if (!($13)) {
    __THREW__ = 0;
    (invoke_iii(680,(((19224 + 36|0))|0),(19496|0))|0);
    $14 = __THREW__; __THREW__ = 0;
    $15 = $14&1;
    if (!($15)) {
     __THREW__ = 0;
     (invoke_iii(680,(((19224 + 48|0))|0),(19536|0))|0);
     $16 = __THREW__; __THREW__ = 0;
     $17 = $16&1;
     if (!($17)) {
      __THREW__ = 0;
      (invoke_iii(680,(((19224 + 60|0))|0),(19576|0))|0);
      $18 = __THREW__; __THREW__ = 0;
      $19 = $18&1;
      if (!($19)) {
       __THREW__ = 0;
       (invoke_iii(680,(((19224 + 72|0))|0),(19608|0))|0);
       $20 = __THREW__; __THREW__ = 0;
       $21 = $20&1;
       if (!($21)) {
        __THREW__ = 0;
        (invoke_iii(680,(((19224 + 84|0))|0),(19648|0))|0);
        $22 = __THREW__; __THREW__ = 0;
        $23 = $22&1;
        if (!($23)) {
         __THREW__ = 0;
         (invoke_iii(680,(((19224 + 96|0))|0),(19664|0))|0);
         $24 = __THREW__; __THREW__ = 0;
         $25 = $24&1;
         if (!($25)) {
          __THREW__ = 0;
          (invoke_iii(680,(((19224 + 108|0))|0),(19680|0))|0);
          $26 = __THREW__; __THREW__ = 0;
          $27 = $26&1;
          if (!($27)) {
           __THREW__ = 0;
           (invoke_iii(680,(((19224 + 120|0))|0),(19696|0))|0);
           $28 = __THREW__; __THREW__ = 0;
           $29 = $28&1;
           if (!($29)) {
            __THREW__ = 0;
            (invoke_iii(680,(((19224 + 132|0))|0),(19712|0))|0);
            $30 = __THREW__; __THREW__ = 0;
            $31 = $30&1;
            if (!($31)) {
             __THREW__ = 0;
             (invoke_iii(680,(((19224 + 144|0))|0),(19728|0))|0);
             $32 = __THREW__; __THREW__ = 0;
             $33 = $32&1;
             if (!($33)) {
              __THREW__ = 0;
              (invoke_iii(680,(((19224 + 156|0))|0),(19744|0))|0);
              $34 = __THREW__; __THREW__ = 0;
              $35 = $34&1;
              if (!($35)) {
               HEAP32[12736>>2] = 19224;
               ___cxa_guard_release((12744|0));
               $36 = HEAP32[12736>>2]|0;
               STACKTOP = sp;return ($36|0);
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 }
 $37 = ___cxa_find_matching_catch()|0;
 $38 = tempRet0;
 ___cxa_guard_abort((12744|0));
 ___resumeException($37|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12760>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[12752>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((12760|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[12752>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[19000>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((19000|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((18712|0),0,288)|0;
   (___cxa_atexit((681|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((19000|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(678,(18712|0),(19008|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(678,(((18712 + 12|0))|0),(19016|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(678,(((18712 + 24|0))|0),(19032|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(678,(((18712 + 36|0))|0),(19040|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(678,(((18712 + 48|0))|0),(19048|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(678,(((18712 + 60|0))|0),(19056|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(678,(((18712 + 72|0))|0),(19064|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(678,(((18712 + 84|0))|0),(19072|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(678,(((18712 + 96|0))|0),(19080|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(678,(((18712 + 108|0))|0),(19096|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(678,(((18712 + 120|0))|0),(19104|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(678,(((18712 + 132|0))|0),(19120|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(678,(((18712 + 144|0))|0),(19136|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(678,(((18712 + 156|0))|0),(19144|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(678,(((18712 + 168|0))|0),(19152|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(678,(((18712 + 180|0))|0),(19160|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 192|0))|0),(19048|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 204|0))|0),(19168|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 216|0))|0),(19176|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 228|0))|0),(19184|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 240|0))|0),(19192|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 252|0))|0),(19200|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 264|0))|0),(19208|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(678,(((18712 + 276|0))|0),(19216|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[12752>>2] = 18712;
                  ___cxa_guard_release((12760|0));
                  $56 = HEAP32[12752>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((12760|0));
 ___resumeException($57|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12776>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $56 = HEAP32[12768>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $2 = (___cxa_guard_acquire((12776|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $56 = HEAP32[12768>>2]|0;
  STACKTOP = sp;return ($56|0);
 }
 $4 = HEAP8[18160>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((18160|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17872|0),0,288)|0;
   (___cxa_atexit((682|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((18160|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(680,(17872|0),(18168|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 do {
  if (!($9)) {
   __THREW__ = 0;
   (invoke_iii(680,(((17872 + 12|0))|0),(18200|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   $11 = $10&1;
   if (!($11)) {
    __THREW__ = 0;
    (invoke_iii(680,(((17872 + 24|0))|0),(18240|0))|0);
    $12 = __THREW__; __THREW__ = 0;
    $13 = $12&1;
    if (!($13)) {
     __THREW__ = 0;
     (invoke_iii(680,(((17872 + 36|0))|0),(18264|0))|0);
     $14 = __THREW__; __THREW__ = 0;
     $15 = $14&1;
     if (!($15)) {
      __THREW__ = 0;
      (invoke_iii(680,(((17872 + 48|0))|0),(18584|0))|0);
      $16 = __THREW__; __THREW__ = 0;
      $17 = $16&1;
      if (!($17)) {
       __THREW__ = 0;
       (invoke_iii(680,(((17872 + 60|0))|0),(18288|0))|0);
       $18 = __THREW__; __THREW__ = 0;
       $19 = $18&1;
       if (!($19)) {
        __THREW__ = 0;
        (invoke_iii(680,(((17872 + 72|0))|0),(18312|0))|0);
        $20 = __THREW__; __THREW__ = 0;
        $21 = $20&1;
        if (!($21)) {
         __THREW__ = 0;
         (invoke_iii(680,(((17872 + 84|0))|0),(18336|0))|0);
         $22 = __THREW__; __THREW__ = 0;
         $23 = $22&1;
         if (!($23)) {
          __THREW__ = 0;
          (invoke_iii(680,(((17872 + 96|0))|0),(18368|0))|0);
          $24 = __THREW__; __THREW__ = 0;
          $25 = $24&1;
          if (!($25)) {
           __THREW__ = 0;
           (invoke_iii(680,(((17872 + 108|0))|0),(18408|0))|0);
           $26 = __THREW__; __THREW__ = 0;
           $27 = $26&1;
           if (!($27)) {
            __THREW__ = 0;
            (invoke_iii(680,(((17872 + 120|0))|0),(18440|0))|0);
            $28 = __THREW__; __THREW__ = 0;
            $29 = $28&1;
            if (!($29)) {
             __THREW__ = 0;
             (invoke_iii(680,(((17872 + 132|0))|0),(18480|0))|0);
             $30 = __THREW__; __THREW__ = 0;
             $31 = $30&1;
             if (!($31)) {
              __THREW__ = 0;
              (invoke_iii(680,(((17872 + 144|0))|0),(18520|0))|0);
              $32 = __THREW__; __THREW__ = 0;
              $33 = $32&1;
              if (!($33)) {
               __THREW__ = 0;
               (invoke_iii(680,(((17872 + 156|0))|0),(18536|0))|0);
               $34 = __THREW__; __THREW__ = 0;
               $35 = $34&1;
               if (!($35)) {
                __THREW__ = 0;
                (invoke_iii(680,(((17872 + 168|0))|0),(18552|0))|0);
                $36 = __THREW__; __THREW__ = 0;
                $37 = $36&1;
                if (!($37)) {
                 __THREW__ = 0;
                 (invoke_iii(680,(((17872 + 180|0))|0),(18568|0))|0);
                 $38 = __THREW__; __THREW__ = 0;
                 $39 = $38&1;
                 if (!($39)) {
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 192|0))|0),(18584|0))|0);
                  $40 = __THREW__; __THREW__ = 0;
                  $41 = $40&1;
                  if ($41) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 204|0))|0),(18600|0))|0);
                  $42 = __THREW__; __THREW__ = 0;
                  $43 = $42&1;
                  if ($43) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 216|0))|0),(18616|0))|0);
                  $44 = __THREW__; __THREW__ = 0;
                  $45 = $44&1;
                  if ($45) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 228|0))|0),(18632|0))|0);
                  $46 = __THREW__; __THREW__ = 0;
                  $47 = $46&1;
                  if ($47) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 240|0))|0),(18648|0))|0);
                  $48 = __THREW__; __THREW__ = 0;
                  $49 = $48&1;
                  if ($49) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 252|0))|0),(18664|0))|0);
                  $50 = __THREW__; __THREW__ = 0;
                  $51 = $50&1;
                  if ($51) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 264|0))|0),(18680|0))|0);
                  $52 = __THREW__; __THREW__ = 0;
                  $53 = $52&1;
                  if ($53) {
                   break;
                  }
                  __THREW__ = 0;
                  (invoke_iii(680,(((17872 + 276|0))|0),(18696|0))|0);
                  $54 = __THREW__; __THREW__ = 0;
                  $55 = $54&1;
                  if ($55) {
                   break;
                  }
                  HEAP32[12768>>2] = 17872;
                  ___cxa_guard_release((12776|0));
                  $56 = HEAP32[12768>>2]|0;
                  STACKTOP = sp;return ($56|0);
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  }
 } while(0);
 $57 = ___cxa_find_matching_catch()|0;
 $58 = tempRet0;
 ___cxa_guard_abort((12776|0));
 ___resumeException($57|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12792>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[12784>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((12792|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[12784>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[17848>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17848|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17560|0),0,288)|0;
   (___cxa_atexit((683|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17848|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(678,(17560|0),(17856|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12792|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(678,(((17560 + 12|0))|0),(17864|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12792|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[12784>>2] = 17560;
 ___cxa_guard_release((12792|0));
 $12 = HEAP32[12784>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12808>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  $12 = HEAP32[12800>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $2 = (___cxa_guard_acquire((12808|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $12 = HEAP32[12800>>2]|0;
  STACKTOP = sp;return ($12|0);
 }
 $4 = HEAP8[17520>>0]|0;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  $6 = (___cxa_guard_acquire((17520|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   _memset((17232|0),0,288)|0;
   (___cxa_atexit((684|0),(0|0),(___dso_handle|0))|0);
   ___cxa_guard_release((17520|0));
  }
 }
 __THREW__ = 0;
 (invoke_iii(680,(17232|0),(17528|0))|0);
 $8 = __THREW__; __THREW__ = 0;
 $9 = $8&1;
 if ($9) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12808|0));
  ___resumeException($13|0);
  // unreachable;
 }
 __THREW__ = 0;
 (invoke_iii(680,(((17232 + 12|0))|0),(17544|0))|0);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  ___cxa_guard_abort((12808|0));
  ___resumeException($13|0);
  // unreachable;
 }
 HEAP32[12800>>2] = 17232;
 ___cxa_guard_release((12808|0));
 $12 = HEAP32[12800>>2]|0;
 STACKTOP = sp;return ($12|0);
}
function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12832>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12816|0);
 }
 $2 = (___cxa_guard_acquire((12832|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12816|0);
 }
 __THREW__ = 0;
 invoke_viii(442,(12816|0),(12840|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((12832|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((396|0),(12816|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12832|0));
 STACKTOP = sp;return (12816|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12872>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12856|0);
 }
 $2 = (___cxa_guard_acquire((12872|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12856|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(685,(12880|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(686,(12856|0),(12880|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((687|0),(12856|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12872|0));
   STACKTOP = sp;return (12856|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((12872|0));
 ___resumeException($9|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12936>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12920|0);
 }
 $2 = (___cxa_guard_acquire((12936|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12920|0);
 }
 __THREW__ = 0;
 invoke_viii(442,(12920|0),(12944|0),8);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((12936|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((396|0),(12920|0),(___dso_handle|0))|0);
 ___cxa_guard_release((12936|0));
 STACKTOP = sp;return (12920|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[12976>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (12960|0);
 }
 $2 = (___cxa_guard_acquire((12976|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (12960|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(685,(12984|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(686,(12960|0),(12984|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((687|0),(12960|0),(___dso_handle|0))|0);
   ___cxa_guard_release((12976|0));
   STACKTOP = sp;return (12960|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((12976|0));
 ___resumeException($9|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[13040>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (13024|0);
 }
 $2 = (___cxa_guard_acquire((13040|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (13024|0);
 }
 __THREW__ = 0;
 invoke_viii(442,(13024|0),(13048|0),20);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((13040|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((396|0),(13024|0),(___dso_handle|0))|0);
 ___cxa_guard_release((13040|0));
 STACKTOP = sp;return (13024|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[13088>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (13072|0);
 }
 $2 = (___cxa_guard_acquire((13088|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (13072|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(685,(13096|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(686,(13072|0),(13096|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((687|0),(13072|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13088|0));
   STACKTOP = sp;return (13072|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((13088|0));
 ___resumeException($9|0);
 // unreachable;
 return (0)|0;
}
function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[13200>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (13184|0);
 }
 $2 = (___cxa_guard_acquire((13200|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (13184|0);
 }
 __THREW__ = 0;
 invoke_viii(442,(13184|0),(13208|0),11);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  ___cxa_guard_abort((13200|0));
  ___resumeException($6|0);
  // unreachable;
 }
 (___cxa_atexit((396|0),(13184|0),(___dso_handle|0))|0);
 ___cxa_guard_release((13200|0));
 STACKTOP = sp;return (13184|0);
}
function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[13240>>0]|0;
 $1 = ($0<<24>>24)==(0);
 if (!($1)) {
  STACKTOP = sp;return (13224|0);
 }
 $2 = (___cxa_guard_acquire((13240|0))|0);
 $3 = ($2|0)==(0);
 if ($3) {
  STACKTOP = sp;return (13224|0);
 }
 __THREW__ = 0;
 $4 = (invoke_ii(685,(13248|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 $6 = $5&1;
 if (!($6)) {
  __THREW__ = 0;
  invoke_viii(686,(13224|0),(13248|0),($4|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   (___cxa_atexit((687|0),(13224|0),(___dso_handle|0))|0);
   ___cxa_guard_release((13240|0));
   STACKTOP = sp;return (13224|0);
  }
 }
 $9 = ___cxa_find_matching_catch()|0;
 $10 = tempRet0;
 ___cxa_guard_abort((13240|0));
 ___resumeException($9|0);
 // unreachable;
 return (0)|0;
}
function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((12496 + 8|0));
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 __THREW__ = 0;
 $2 = (invoke_i(595)|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if (!($4)) {
  $5 = ($1|0)==($2|0);
  if ($5) {
   STACKTOP = sp;return;
  }
  $6 = HEAP32[$0>>2]|0;
  __THREW__ = 0;
  invoke_vi(609,($6|0));
  $7 = __THREW__; __THREW__ = 0;
  $8 = $7&1;
  if (!($8)) {
   STACKTOP = sp;return;
  }
 }
 $9 = ___cxa_find_matching_catch(0|0)|0;
 $10 = tempRet0;
 ___clang_call_terminate($9);
 // unreachable;
}
function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12488)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),4,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP32[$$012>>2]|0;
  $11 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$10)|0);
  $12 = ($11|0)==(-1);
  if ($12) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $13 = (($__i$03) + 1)|0;
  $14 = (($$012) + 4|0);
  $15 = ($13|0)<($__n|0);
  if ($15) {
   $$012 = $14;$__i$03 = $13;
  } else {
   $$0 = $13;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0;
 var $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   HEAP32[$__1buf>>2] = $__c;
   $1 = (($this) + 44|0);
   $2 = HEAP8[$1>>0]|0;
   $3 = ($2<<24>>24)==(0);
   if (!($3)) {
    $4 = (($this) + 32|0);
    $5 = HEAP32[$4>>2]|0;
    $6 = (_fwrite(($__1buf|0),4,1,($5|0))|0);
    $7 = ($6|0)==(1);
    if ($7) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $8 = (($__1buf) + 4|0);
   $9 = (($this) + 36|0);
   $10 = (($this) + 40|0);
   $11 = (($__extbuf) + 8|0);
   $12 = $__extbuf;
   $13 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $14 = HEAP32[$9>>2]|0;
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$14>>2]|0;
    $17 = (($16) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($14,$15,$pbase$0,$8,$__e,$__extbuf,$11,$__extbe)|0);
    $20 = HEAP32[$__e>>2]|0;
    $21 = ($20|0)==($pbase$0|0);
    if ($21) {
     $$0 = -1;
     label = 12;
     break;
    }
    $22 = ($19|0)==(3);
    if ($22) {
     label = 7;
     break;
    }
    $26 = ($19|0)==(1);
    $27 = ($19>>>0)<(2);
    if (!($27)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $28 = HEAP32[$__extbe>>2]|0;
    $29 = $28;
    $30 = (($29) - ($12))|0;
    $31 = HEAP32[$13>>2]|0;
    $32 = (_fwrite(($__extbuf|0),1,($30|0),($31|0))|0);
    $33 = ($32|0)==($30|0);
    if (!($33)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $34 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $26 ? $34 : $pbase$0;
    if ($26) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $23 = HEAP32[$13>>2]|0;
    $24 = (_fwrite(($pbase$0|0),1,1,($23|0))|0);
    $25 = ($24|0)==(1);
    if ($25) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12488)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(9080);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIwE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 8|0;
 $__ci = sp + 4|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$__ci>>2] = $9;
   $10 = (($this) + 36|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = (($this) + 40|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($__ci) + 4|0);
   $15 = (($__extbuf) + 8|0);
   $16 = HEAP32[$11>>2]|0;
   $17 = (($16) + 12|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (FUNCTION_TABLE_iiiiiiiii[$18 & 511]($11,$13,$__ci,$14,$__inxt,$__extbuf,$15,$__enxt)|0);
   if ((($19|0) == 3)) {
    $20 = HEAP32[$8>>2]|0;
    $21 = $20&255;
    HEAP8[$__extbuf>>0] = $21;
    $22 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $22;
   } else if ((($19|0) == 1) | (($19|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   }
   $23 = (($this) + 32|0);
   while(1) {
    $24 = HEAP32[$__enxt>>2]|0;
    $25 = ($24>>>0)>($__extbuf>>>0);
    if (!($25)) {
     break L8;
    }
    $26 = (($24) + -1|0);
    HEAP32[$__enxt>>2] = $26;
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 << 24 >> 24;
    $29 = HEAP32[$23>>2]|0;
    $30 = (_ungetc(($28|0),($29|0))|0);
    $31 = ($30|0)==(-1);
    if ($31) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + 24|0);
 $2 = HEAP32[$1>>2]|0;
 (FUNCTION_TABLE_ii[$2 & 1023]($this)|0);
 $3 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12480)|0);
 $4 = (($this) + 36|0);
 HEAP32[$4>>2] = $3;
 $5 = HEAP32[$3>>2]|0;
 $6 = (($5) + 28|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (FUNCTION_TABLE_ii[$7 & 1023]($3)|0);
 $9 = (($this) + 44|0);
 $10 = $8&1;
 HEAP8[$9>>0] = $10;
 STACKTOP = sp;return;
}
function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $__extbe = 0, $__extbuf = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 8|0;
 $__extbe = sp;
 $0 = (($this) + 36|0);
 $1 = (($this) + 40|0);
 $2 = (($__extbuf) + 8|0);
 $3 = $__extbuf;
 $4 = (($this) + 32|0);
 while(1) {
  $5 = HEAP32[$0>>2]|0;
  $6 = HEAP32[$1>>2]|0;
  $7 = HEAP32[$5>>2]|0;
  $8 = (($7) + 20|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (FUNCTION_TABLE_iiiiii[$9 & 1023]($5,$6,$__extbuf,$2,$__extbe)|0);
  $11 = HEAP32[$__extbe>>2]|0;
  $12 = $11;
  $13 = (($12) - ($3))|0;
  $14 = HEAP32[$4>>2]|0;
  $15 = (_fwrite(($__extbuf|0),1,($13|0),($14|0))|0);
  $16 = ($15|0)==($13|0);
  if (!($16)) {
   $$0 = -1;
   label = 5;
   break;
  }
  if ((($10|0) == 2)) {
   $$0 = -1;
   label = 5;
   break;
  } else if (!((($10|0) == 1))) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $17 = HEAP32[$4>>2]|0;
  $18 = (_fflush(($17|0))|0);
  $not$ = ($18|0)!=(0);
  $$ = $not$ << 31 >> 31;
  $$0 = $$;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $$0 = 0, $$012 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__i$03 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 44|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $4 = (($this) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (_fwrite(($__s|0),1,($__n|0),($5|0))|0);
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($__n|0)>(0);
 if ($3) {
  $$012 = $__s;$__i$03 = 0;
 } else {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 while(1) {
  $7 = HEAP32[$this>>2]|0;
  $8 = (($7) + 52|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = HEAP8[$$012>>0]|0;
  $11 = $10&255;
  $12 = (FUNCTION_TABLE_iii[$9 & 1023]($this,$11)|0);
  $13 = ($12|0)==(-1);
  if ($13) {
   $$0 = $__i$03;
   label = 6;
   break;
  }
  $14 = (($__i$03) + 1)|0;
  $15 = (($$012) + 1|0);
  $16 = ($14|0)<($__n|0);
  if ($16) {
   $$012 = $15;$__i$03 = $14;
  } else {
   $$0 = $14;
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$0 = 0, $$__c$i = 0, $$pbase$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0;
 var $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__extbe = sp + 4|0;
 $__e = sp;
 $0 = ($__c|0)==(-1);
 L1: do {
  if (!($0)) {
   $1 = $__c&255;
   HEAP8[$__1buf>>0] = $1;
   $2 = (($this) + 44|0);
   $3 = HEAP8[$2>>0]|0;
   $4 = ($3<<24>>24)==(0);
   if (!($4)) {
    $5 = (($this) + 32|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = (_fwrite(($__1buf|0),1,1,($6|0))|0);
    $8 = ($7|0)==(1);
    if ($8) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   HEAP32[$__extbe>>2] = $__extbuf;
   $9 = (($__1buf) + 1|0);
   $10 = (($this) + 36|0);
   $11 = (($this) + 40|0);
   $12 = (($__extbuf) + 8|0);
   $13 = $__extbuf;
   $14 = (($this) + 32|0);
   $pbase$0 = $__1buf;
   while(1) {
    $15 = HEAP32[$10>>2]|0;
    $16 = HEAP32[$11>>2]|0;
    $17 = HEAP32[$15>>2]|0;
    $18 = (($17) + 12|0);
    $19 = HEAP32[$18>>2]|0;
    $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($15,$16,$pbase$0,$9,$__e,$__extbuf,$12,$__extbe)|0);
    $21 = HEAP32[$__e>>2]|0;
    $22 = ($21|0)==($pbase$0|0);
    if ($22) {
     $$0 = -1;
     label = 12;
     break;
    }
    $23 = ($20|0)==(3);
    if ($23) {
     label = 7;
     break;
    }
    $27 = ($20|0)==(1);
    $28 = ($20>>>0)<(2);
    if (!($28)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $29 = HEAP32[$__extbe>>2]|0;
    $30 = $29;
    $31 = (($30) - ($13))|0;
    $32 = HEAP32[$14>>2]|0;
    $33 = (_fwrite(($__extbuf|0),1,($31|0),($32|0))|0);
    $34 = ($33|0)==($31|0);
    if (!($34)) {
     $$0 = -1;
     label = 12;
     break;
    }
    $35 = HEAP32[$__e>>2]|0;
    $$pbase$0 = $27 ? $35 : $pbase$0;
    if ($27) {
     $pbase$0 = $$pbase$0;
    } else {
     break L1;
    }
   }
   if ((label|0) == 7) {
    $24 = HEAP32[$14>>2]|0;
    $25 = (_fwrite(($pbase$0|0),1,1,($24|0))|0);
    $26 = ($25|0)==(1);
    if ($26) {
     break;
    } else {
     $$0 = -1;
    }
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 12) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$__c$i = $0 ? 0 : $__c;
 $$0 = $$__c$i;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc) {
 $this = $this|0;
 $__loc = $__loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNKSt3__16locale9use_facetERNS0_2idE($__loc,12480)|0);
 $1 = (($this) + 36|0);
 HEAP32[$1>>2] = $0;
 $2 = HEAP32[$0>>2]|0;
 $3 = (($2) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (FUNCTION_TABLE_ii[$4 & 1023]($0)|0);
 $6 = (($this) + 44|0);
 HEAP32[$6>>2] = $5;
 $7 = HEAP32[$1>>2]|0;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = (FUNCTION_TABLE_ii[$10 & 1023]($7)|0);
 $12 = (($this) + 53|0);
 $13 = $11&1;
 HEAP8[$12>>0] = $13;
 $14 = HEAP32[$6>>2]|0;
 $15 = ($14|0)>(8);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 __ZNSt3__121__throw_runtime_errorEPKc(9080);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,0)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__110__stdinbufIcE9__getcharEb($this,1)|0);
 STACKTOP = sp;return ($0|0);
}
function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c) {
 $this = $this|0;
 $__c = $__c|0;
 var $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__enxt = sp + 4|0;
 $__ci = sp + 8|0;
 $__inxt = sp;
 $0 = ($__c|0)==(-1);
 $1 = (($this) + 52|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)!=(0);
 if ($0) {
  if ($3) {
   $$01 = -1;
   STACKTOP = sp;return ($$01|0);
  }
  $4 = (($this) + 48|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)!=(-1);
  $7 = $6&1;
  HEAP8[$1>>0] = $7;
  $$01 = $5;
  STACKTOP = sp;return ($$01|0);
 }
 $8 = (($this) + 48|0);
 L8: do {
  if ($3) {
   $9 = HEAP32[$8>>2]|0;
   $10 = $9&255;
   HEAP8[$__ci>>0] = $10;
   $11 = (($this) + 36|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = (($this) + 40|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = (($__ci) + 1|0);
   $16 = (($__extbuf) + 8|0);
   $17 = HEAP32[$12>>2]|0;
   $18 = (($17) + 12|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (FUNCTION_TABLE_iiiiiiiii[$19 & 511]($12,$14,$__ci,$15,$__inxt,$__extbuf,$16,$__enxt)|0);
   if ((($20|0) == 1) | (($20|0) == 2)) {
    $$01 = -1;
    STACKTOP = sp;return ($$01|0);
   } else if ((($20|0) == 3)) {
    $21 = HEAP32[$8>>2]|0;
    $22 = $21&255;
    HEAP8[$__extbuf>>0] = $22;
    $23 = (($__extbuf) + 1|0);
    HEAP32[$__enxt>>2] = $23;
   }
   $24 = (($this) + 32|0);
   while(1) {
    $25 = HEAP32[$__enxt>>2]|0;
    $26 = ($25>>>0)>($__extbuf>>>0);
    if (!($26)) {
     break L8;
    }
    $27 = (($25) + -1|0);
    HEAP32[$__enxt>>2] = $27;
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = HEAP32[$24>>2]|0;
    $31 = (_ungetc(($29|0),($30|0))|0);
    $32 = ($31|0)==(-1);
    if ($32) {
     $$01 = -1;
     break;
    }
   }
   STACKTOP = sp;return ($$01|0);
  }
 } while(0);
 HEAP32[$8>>2] = $__c;
 HEAP8[$1>>0] = 1;
 $$01 = $__c;
 STACKTOP = sp;return ($$01|0);
}
function __GLOBAL__I_a() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__18ios_base4InitC2Ev(0);
 (___cxa_atexit((688|0),(8504|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((9232 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(69,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this>>2] = ((9120 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(458,($0|0),(12480|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((8976 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 40|0);
 HEAP32[$2>>2] = $__st;
 $3 = (($this) + 48|0);
 HEAP32[$3>>2] = -1;
 $4 = (($this) + 52|0);
 HEAP8[$4>>0] = 0;
 $5 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$5);
 __THREW__ = 0;
 invoke_vii(51,($this|0),($0|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if ($7) {
  $8 = ___cxa_find_matching_catch()|0;
  $9 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($8|0);
  // unreachable;
 } else {
  __ZNSt3__16localeD2Ev($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this,$__fp,$__st) {
 $this = $this|0;
 $__fp = $__fp|0;
 $__st = $__st|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this>>2] = ((8864 + 8|0));
 $1 = (($this) + 32|0);
 HEAP32[$1>>2] = $__fp;
 $2 = (($this) + 4|0);
 __ZNSt3__16localeC2ERKS0_($0,$2);
 __THREW__ = 0;
 $3 = (invoke_iii(458,($0|0),(12488|0))|0);
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $14 = ___cxa_find_matching_catch()|0;
  $15 = tempRet0;
  __ZNSt3__16localeD2Ev($0);
  __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
  ___resumeException($14|0);
  // unreachable;
 } else {
  $6 = (($this) + 36|0);
  __ZNSt3__16localeD2Ev($0);
  HEAP32[$6>>2] = $3;
  $7 = (($this) + 40|0);
  HEAP32[$7>>2] = $__st;
  $8 = (($this) + 44|0);
  $9 = HEAP32[$3>>2]|0;
  $10 = (($9) + 28|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (FUNCTION_TABLE_ii[$11 & 1023]($3)|0);
  $13 = $12&1;
  HEAP8[$8>>0] = $13;
  STACKTOP = sp;return;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen(($msg|0))|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = (($2) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = (($2) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = (($2) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = ($2>>>0)>(4294967279);
 if ($3) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $4 = ($2>>>0)<(11);
 if ($4) {
  $5 = $2 << 1;
  $6 = $5&255;
  HEAP8[$this>>0] = $6;
  $7 = (($this) + 1|0);
  $__p$0$ph = $7;
 } else {
  $8 = (($2) + 16)|0;
  $9 = $8 & -16;
  $10 = (__Znwj($9)|0);
  $11 = (($this) + 8|0);
  HEAP32[$11>>2] = $10;
  $12 = $9 | 1;
  HEAP32[$this>>2] = $12;
  $13 = (($this) + 4|0);
  HEAP32[$13>>2] = $2;
  $__p$0$ph = $10;
 }
 $14 = ($__first|0)==($__last|0);
 if ($14) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP8[$__p$0$lcssa>>0] = 0;
  STACKTOP = sp;return;
 }
 $15 = $__last;
 $16 = (($15) - ($0))|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $17 = HEAP8[$$02>>0]|0;
  HEAP8[$__p$01>>0] = $17;
  $18 = (($$02) + 1|0);
  $19 = (($__p$01) + 1|0);
  $20 = ($18|0)==($__last|0);
  if ($20) {
   break;
  } else {
   $$02 = $18;$__p$01 = $19;
  }
 }
 $scevgep4 = (($__p$0$ph) + ($16)|0);
 $__p$0$lcssa = $scevgep4;
 HEAP8[$__p$0$lcssa>>0] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = $__last;
 $2 = (($1) - ($0))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)>(1073741807);
 if ($4) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $5 = ($3>>>0)<(2);
 if ($5) {
  $6 = $2 >>> 1;
  $7 = $6&255;
  HEAP8[$this>>0] = $7;
  $8 = (($this) + 4|0);
  $__p$0$ph = $8;
 } else {
  $9 = (($3) + 4)|0;
  $10 = $9 & -4;
  $11 = $10 << 2;
  $12 = (__Znwj($11)|0);
  $13 = (($this) + 8|0);
  HEAP32[$13>>2] = $12;
  $14 = $10 | 1;
  HEAP32[$this>>2] = $14;
  $15 = (($this) + 4|0);
  HEAP32[$15>>2] = $3;
  $__p$0$ph = $12;
 }
 $16 = ($__first|0)==($__last|0);
 if ($16) {
  $__p$0$lcssa = $__p$0$ph;
  HEAP32[$__p$0$lcssa>>2] = 0;
  STACKTOP = sp;return;
 }
 $scevgep = (($__last) + -4|0);
 $17 = $scevgep;
 $18 = (($17) - ($0))|0;
 $19 = $18 >>> 2;
 $20 = (($19) + 1)|0;
 $$02 = $__first;$__p$01 = $__p$0$ph;
 while(1) {
  $21 = HEAP32[$$02>>2]|0;
  HEAP32[$__p$01>>2] = $21;
  $22 = (($$02) + 4|0);
  $23 = (($__p$01) + 4|0);
  $24 = ($22|0)==($__last|0);
  if ($24) {
   break;
  } else {
   $$02 = $22;$__p$01 = $23;
  }
 }
 $scevgep5 = (($__p$0$ph) + ($20<<2)|0);
 $__p$0$lcssa = $scevgep5;
 HEAP32[$__p$0$lcssa>>2] = 0;
 STACKTOP = sp;return;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$025 = 0, $$027 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i13 = 0, $$pre$i2$i$i17 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off036 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$063 = 0, $__ky1$037 = 0, $__ky2$048 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$061 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0, $__n_does_match$2$phi = 0, $__n_does_match$333 = 0, $__n_does_match$4 = 0, $__n_does_match$546 = 0, $__n_does_match$6 = 0;
 var $__n_might_match$0$lcssa = 0, $__n_might_match$060 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$332 = 0, $__n_might_match$4 = 0, $__st$062 = 0, $__st$134 = 0, $__st$247 = 0, $__st$326 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0, $or$cond = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(601);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$063 = $__kb;$__n_does_match$061 = 0;$__n_might_match$060 = $3;$__st$062 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$063>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$063) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$062>>0] = 2;
    $33 = (($__n_might_match$060) + -1)|0;
    $34 = (($__n_does_match$061) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$062>>0] = 1;
    $__n_does_match$1 = $__n_does_match$061;$__n_might_match$1 = $__n_might_match$060;
   }
   $35 = (($__ky$063) + 12|0);
   $36 = (($__st$062) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$063 = $35;$__n_does_match$061 = $__n_does_match$1;$__n_might_match$060 = $__n_might_match$1;$__st$062 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $53 = 0;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     }
     $51 = ($48|0)==(-1);
     if ($51) {
      HEAP32[$__b>>2] = 0;
      $53 = 0;
      break;
     } else {
      $$pre$i$i$i = HEAP32[$__b>>2]|0;
      $53 = $$pre$i$i$i;
      break;
     }
    } else {
     $53 = $38;
    }
   }
  } while(0);
  $52 = ($53|0)==(0|0);
  $54 = HEAP32[$__e>>2]|0;
  $55 = ($54|0)==(0|0);
  if ($55) {
   $$pre$i2$i$i17 = 0;
  } else {
   $56 = (($54) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($54) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$54>>2]|0;
    $62 = (($61) + 36|0);
    $63 = HEAP32[$62>>2]|0;
    __THREW__ = 0;
    $64 = (invoke_ii($63|0,($54|0))|0);
    $65 = __THREW__; __THREW__ = 0;
    $66 = $65&1;
    if ($66) {
     label = 6;
     break;
    }
    $67 = ($64|0)==(-1);
    if ($67) {
     HEAP32[$__e>>2] = 0;
     $$pre$i2$i$i17 = 0;
    } else {
     $$pre$i2$i$i17 = $54;
    }
   } else {
    $$pre$i2$i$i17 = $54;
   }
  }
  $68 = ($$pre$i2$i$i17|0)==(0|0);
  $tmp$i$i = $52 ^ $68;
  $69 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $69;
  $70 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 65;
   break;
  }
  $71 = (($70) + 12|0);
  $72 = HEAP32[$71>>2]|0;
  $73 = (($70) + 16|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ($72|0)==($74|0);
  if ($75) {
   $76 = HEAP32[$70>>2]|0;
   $77 = (($76) + 36|0);
   $78 = HEAP32[$77>>2]|0;
   __THREW__ = 0;
   $79 = (invoke_ii($78|0,($70|0))|0);
   $80 = __THREW__; __THREW__ = 0;
   $81 = $80&1;
   if ($81) {
    label = 6;
    break;
   } else {
    $$0$i$i = $79;
   }
  } else {
   $82 = HEAP8[$72>>0]|0;
   $83 = $82&255;
   $$0$i$i = $83;
  }
  $84 = $$0$i$i&255;
  if ($__case_sensitive) {
   $__c$0 = $84;
  } else {
   $85 = HEAP32[$__ct>>2]|0;
   $86 = (($85) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   __THREW__ = 0;
   $88 = (invoke_iii($87|0,($__ct|0),($84|0))|0);
   $89 = __THREW__; __THREW__ = 0;
   $90 = $89&1;
   if ($90) {
    label = 6;
    break;
   } else {
    $__c$0 = $88;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off036 = 0;$__ky1$037 = $__kb;$__n_does_match$333 = $__n_does_match$2;$__n_might_match$332 = $__n_might_match$2;$__st$134 = $__status$0;
  }
  while(1) {
   $91 = HEAP8[$__st$134>>0]|0;
   $92 = ($91<<24>>24)==(1);
   do {
    if ($92) {
     $93 = HEAP8[$__ky1$037>>0]|0;
     $94 = $93 & 1;
     $95 = ($94<<24>>24)==(0);
     if ($95) {
      $98 = (($__ky1$037) + 1|0);
      $100 = $98;
     } else {
      $96 = (($__ky1$037) + 8|0);
      $97 = HEAP32[$96>>2]|0;
      $100 = $97;
     }
     $99 = (($100) + ($__indx$0)|0);
     $101 = HEAP8[$99>>0]|0;
     if ($__case_sensitive) {
      $__kc$0 = $101;
     } else {
      $102 = HEAP32[$__ct>>2]|0;
      $103 = (($102) + 12|0);
      $104 = HEAP32[$103>>2]|0;
      __THREW__ = 0;
      $105 = (invoke_iii($104|0,($__ct|0),($101|0))|0);
      $106 = __THREW__; __THREW__ = 0;
      $107 = $106&1;
      if ($107) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $105;
      }
     }
     $108 = ($__c$0<<24>>24)==($__kc$0<<24>>24);
     if (!($108)) {
      HEAP8[$__st$134>>0] = 0;
      $120 = (($__n_might_match$332) + -1)|0;
      $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $120;
      break;
     }
     $109 = HEAP8[$__ky1$037>>0]|0;
     $110 = $109 & 1;
     $111 = ($110<<24>>24)==(0);
     if ($111) {
      $114 = $109&255;
      $115 = $114 >>> 1;
      $117 = $115;
     } else {
      $112 = (($__ky1$037) + 4|0);
      $113 = HEAP32[$112>>2]|0;
      $117 = $113;
     }
     $116 = ($117|0)==($$pre|0);
     if ($116) {
      HEAP8[$__st$134>>0] = 2;
      $118 = (($__n_might_match$332) + -1)|0;
      $119 = (($__n_does_match$333) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $119;$__n_might_match$4 = $118;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off036;$__n_does_match$4 = $__n_does_match$333;$__n_might_match$4 = $__n_might_match$332;
    }
   } while(0);
   $121 = (($__ky1$037) + 12|0);
   $122 = (($__st$134) + 1|0);
   $123 = ($121|0)==($__ke|0);
   if ($123) {
    break;
   } else {
    $__consume$0$off036 = $__consume$1$off0;$__ky1$037 = $121;$__n_does_match$333 = $__n_does_match$4;$__n_might_match$332 = $__n_might_match$4;$__st$134 = $122;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $124 = HEAP32[$__b>>2]|0;
  $125 = (($124) + 12|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = (($124) + 16|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($126|0)==($128|0);
  if ($129) {
   $130 = HEAP32[$124>>2]|0;
   $131 = (($130) + 40|0);
   $132 = HEAP32[$131>>2]|0;
   __THREW__ = 0;
   (invoke_ii($132|0,($124|0))|0);
   $133 = __THREW__; __THREW__ = 0;
   $134 = $133&1;
   if ($134) {
    label = 6;
    break;
   }
  } else {
   $135 = (($126) + 1|0);
   HEAP32[$125>>2] = $135;
  }
  $136 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($136>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$048 = $__kb;$__n_does_match$546 = $__n_does_match$4;$__st$247 = $__status$0;
  }
  while(1) {
   $137 = HEAP8[$__st$247>>0]|0;
   $138 = ($137<<24>>24)==(2);
   if ($138) {
    $139 = HEAP8[$__ky2$048>>0]|0;
    $140 = $139 & 1;
    $141 = ($140<<24>>24)==(0);
    if ($141) {
     $144 = $139&255;
     $145 = $144 >>> 1;
     $147 = $145;
    } else {
     $142 = (($__ky2$048) + 4|0);
     $143 = HEAP32[$142>>2]|0;
     $147 = $143;
    }
    $146 = ($147|0)==($$pre|0);
    if ($146) {
     $__n_does_match$6 = $__n_does_match$546;
    } else {
     HEAP8[$__st$247>>0] = 0;
     $148 = (($__n_does_match$546) + -1)|0;
     $__n_does_match$6 = $148;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$546;
   }
   $149 = (($__ky2$048) + 12|0);
   $150 = (($__st$247) + 1|0);
   $151 = ($149|0)==($__ke|0);
   if ($151) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$048 = $149;$__n_does_match$546 = $__n_does_match$6;$__st$247 = $150;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 65) {
  $152 = ($70|0)==(0|0);
  do {
   if ($152) {
    $166 = 0;
    label = 71;
   } else {
    $153 = (($70) + 12|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = (($70) + 16|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($154|0)==($156|0);
    if ($157) {
     $158 = HEAP32[$70>>2]|0;
     $159 = (($158) + 36|0);
     $160 = HEAP32[$159>>2]|0;
     __THREW__ = 0;
     $161 = (invoke_ii($160|0,($70|0))|0);
     $162 = __THREW__; __THREW__ = 0;
     $163 = $162&1;
     if (!($163)) {
      $164 = ($161|0)==(-1);
      if ($164) {
       HEAP32[$__b>>2] = 0;
       $166 = 0;
       label = 71;
       break;
      } else {
       $$pre$i$i$i13 = HEAP32[$__b>>2]|0;
       $166 = $$pre$i$i$i13;
       label = 71;
       break;
      }
     }
    } else {
     $166 = $70;
     label = 71;
    }
   }
  } while(0);
  L90: do {
   if ((label|0) == 71) {
    $165 = ($166|0)==(0|0);
    do {
     if ($68) {
      label = 77;
     } else {
      $167 = (($$pre$i2$i$i17) + 12|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = (($$pre$i2$i$i17) + 16|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($168|0)==($170|0);
      if (!($171)) {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
      $172 = HEAP32[$$pre$i2$i$i17>>2]|0;
      $173 = (($172) + 36|0);
      $174 = HEAP32[$173>>2]|0;
      __THREW__ = 0;
      $175 = (invoke_ii($174|0,($$pre$i2$i$i17|0))|0);
      $176 = __THREW__; __THREW__ = 0;
      $177 = $176&1;
      if ($177) {
       break L90;
      }
      $178 = ($175|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 77;
       break;
      } else {
       if ($165) {
        break;
       } else {
        label = 79;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 77) {
     if ($165) {
      label = 79;
     }
    }
    if ((label|0) == 79) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L106: do {
     if ($23) {
      label = 83;
     } else {
      $$027 = $__kb;$__st$326 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$326>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$025 = $$027;
        break L106;
       }
       $183 = (($$027) + 12|0);
       $184 = (($__st$326) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 83;
        break;
       } else {
        $$027 = $183;$__st$326 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 83) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$025 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$025|0);
    }
    __THREW__ = 0;
    invoke_vi(603,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$025|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(603,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(689,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(690,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(691,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP16[$__v>>1] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(692,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $156 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(693,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    HEAP32[$__v>>2] = $121;
    $124 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$124,$__err);
    $125 = ($26|0)==(0|0);
    if ($125) {
     $139 = 0;
    } else {
     $126 = (($26) + 12|0);
     $127 = HEAP32[$126>>2]|0;
     $128 = (($26) + 16|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($127|0)==($129|0);
     if ($130) {
      $131 = HEAP32[$26>>2]|0;
      $132 = (($131) + 36|0);
      $133 = HEAP32[$132>>2]|0;
      __THREW__ = 0;
      $134 = (invoke_ii($133|0,($26|0))|0);
      $135 = __THREW__; __THREW__ = 0;
      $136 = $135&1;
      if ($136) {
       break;
      }
      $137 = ($134|0)==(-1);
      if ($137) {
       HEAP32[$__b>>2] = 0;
       $139 = 0;
      } else {
       $139 = $26;
      }
     } else {
      $139 = $26;
     }
    }
    $138 = ($139|0)==(0|0);
    $140 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 61;
     } else {
      $141 = (($$pre$i2$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i2$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if (!($145)) {
       if (!($138)) {
        break;
       }
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $146 = HEAP32[$$pre$i2$i$i>>2]|0;
      $147 = (($146) + 36|0);
      $148 = HEAP32[$147>>2]|0;
      __THREW__ = 0;
      $149 = (invoke_ii($148|0,($$pre$i2$i$i|0))|0);
      $150 = __THREW__; __THREW__ = 0;
      $151 = $150&1;
      if ($151) {
       break L1;
      }
      $152 = ($149|0)==(-1);
      if ($152) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $153 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $138 ^ $153;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $139;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($138)) {
      HEAP32[$agg$result>>2] = $139;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $139;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $$pre29 = 0, $$pre31 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i19 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 198|0;
 $__thousands_sep = sp + 196|0;
 $__grouping = sp + 16|0;
 $__buf = sp + 4|0;
 $__a_end = sp + 192|0;
 $__g = sp + 32|0;
 $__g_end = sp;
 $__dc = sp + 28|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre31 = (($__buf) + 8|0);
    $$pre$phi30Z2D = $8;$$pre$phi32Z2D = $$pre31;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre29 = (($__buf) + 1|0);
    $$pre$phi30Z2D = $$pre29;$$pre$phi32Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i4 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i4|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i4) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i4) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i4>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i4|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i4;
      }
     } else {
      $26 = $$pre$i$i$i4;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $161 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i19 = (($64) + -1)|0;
      $65 = $phitmp$i19;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi30Z2D;
     } else {
      $71 = HEAP32[$$pre$phi32Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($92,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i4 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   if (!($111)) {
    $113 = HEAP32[$__g_end>>2]|0;
    $114 = $113;
    $115 = $__g;
    $116 = (($114) - ($115))|0;
    $117 = ($116|0)<(160);
    if ($117) {
     $118 = HEAP32[$__dc>>2]|0;
     $119 = (($113) + 4|0);
     HEAP32[$__g_end>>2] = $119;
     HEAP32[$113>>2] = $118;
    }
   }
   $120 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $121 = (invoke_iiiii(694,($__a$2|0),($120|0),($__err|0),($0|0))|0);
   $122 = tempRet0;
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    $125 = $__v;
    $126 = $125;
    HEAP32[$126>>2] = $121;
    $127 = (($125) + 4)|0;
    $128 = $127;
    HEAP32[$128>>2] = $122;
    $129 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$129,$__err);
    $130 = ($26|0)==(0|0);
    if ($130) {
     $144 = 0;
    } else {
     $131 = (($26) + 12|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($26) + 16|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ($132|0)==($134|0);
     if ($135) {
      $136 = HEAP32[$26>>2]|0;
      $137 = (($136) + 36|0);
      $138 = HEAP32[$137>>2]|0;
      __THREW__ = 0;
      $139 = (invoke_ii($138|0,($26|0))|0);
      $140 = __THREW__; __THREW__ = 0;
      $141 = $140&1;
      if ($141) {
       break;
      }
      $142 = ($139|0)==(-1);
      if ($142) {
       HEAP32[$__b>>2] = 0;
       $144 = 0;
      } else {
       $144 = $26;
      }
     } else {
      $144 = $26;
     }
    }
    $143 = ($144|0)==(0|0);
    $145 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($145) {
      label = 61;
     } else {
      $146 = (($$pre$i2$i$i) + 12|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($$pre$i2$i$i) + 16|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($147|0)==($149|0);
      if (!($150)) {
       if (!($143)) {
        break;
       }
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $151 = HEAP32[$$pre$i2$i$i>>2]|0;
      $152 = (($151) + 36|0);
      $153 = HEAP32[$152>>2]|0;
      __THREW__ = 0;
      $154 = (invoke_ii($153|0,($$pre$i2$i$i|0))|0);
      $155 = __THREW__; __THREW__ = 0;
      $156 = $155&1;
      if ($156) {
       break L1;
      }
      $157 = ($154|0)==(-1);
      if ($157) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $158 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $143 ^ $158;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $144;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($143)) {
      HEAP32[$agg$result>>2] = $144;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $159 = HEAP32[$__err>>2]|0;
    $160 = $159 | 2;
    HEAP32[$__err>>2] = $160;
    HEAP32[$agg$result>>2] = $144;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(695,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF32[$__v>>2] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(696,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $$pre30 = 0, $$pre32 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i20 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 200|0;
 $__thousands_sep = sp + 240|0;
 $__grouping = sp;
 $__buf = sp + 188|0;
 $__a_end = sp + 184|0;
 $__g = sp + 16|0;
 $__g_end = sp + 176|0;
 $__dc = sp + 180|0;
 $__in_units = sp + 241|0;
 $__exp = sp + 242|0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre32 = (($__buf) + 8|0);
    $$pre$phi31Z2D = $7;$$pre$phi33Z2D = $$pre32;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre30 = (($__buf) + 1|0);
    $$pre$phi31Z2D = $$pre30;$$pre$phi33Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP8[$__decimal_point>>0]|0;
   $11 = HEAP8[$__thousands_sep>>0]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $26 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 33;
       break;
      }
      $24 = ($21|0)==(-1);
      if ($24) {
       HEAP32[$__b>>2] = 0;
       $26 = 0;
      } else {
       $26 = $$pre$i$i$i5;
      }
     } else {
      $26 = $$pre$i$i$i5;
     }
    }
    $25 = ($26|0)==(0|0);
    $27 = HEAP32[$__e>>2]|0;
    $28 = ($27|0)==(0|0);
    do {
     if ($28) {
      label = 17;
     } else {
      $29 = (($27) + 12|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($27) + 16|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($30|0)==($32|0);
      if (!($33)) {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
      $34 = HEAP32[$27>>2]|0;
      $35 = (($34) + 36|0);
      $36 = HEAP32[$35>>2]|0;
      __THREW__ = 0;
      $37 = (invoke_ii($36|0,($27|0))|0);
      $38 = __THREW__; __THREW__ = 0;
      $39 = $38&1;
      if ($39) {
       label = 33;
       break L7;
      }
      $40 = ($37|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 17;
       break;
      } else {
       if ($25) {
        $158 = $27;
        break;
       } else {
        $$pre$i2$i$i = $27;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 17) {
     label = 0;
     if ($25) {
      $$pre$i2$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 33;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i20 = (($64) + -1)|0;
      $65 = $phitmp$i20;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 33;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi31Z2D;
     } else {
      $71 = HEAP32[$$pre$phi33Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($26) + 12|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = (($26) + 16|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($80|0)==($82|0);
    if ($83) {
     $84 = HEAP32[$26>>2]|0;
     $85 = (($84) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     __THREW__ = 0;
     $87 = (invoke_ii($86|0,($26|0))|0);
     $88 = __THREW__; __THREW__ = 0;
     $89 = $88&1;
     if ($89) {
      label = 33;
      break;
     } else {
      $$0$i$i = $87;
     }
    } else {
     $90 = HEAP8[$80>>0]|0;
     $91 = $90&255;
     $$0$i$i = $91;
    }
    $92 = $$0$i$i&255;
    $93 = (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($92,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $94 = ($93|0)==(0);
    if (!($94)) {
     $$pre$i2$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $95 = HEAP32[$79>>2]|0;
    $96 = HEAP32[$81>>2]|0;
    $97 = ($95|0)==($96|0);
    if ($97) {
     $98 = HEAP32[$26>>2]|0;
     $99 = (($98) + 40|0);
     $100 = HEAP32[$99>>2]|0;
     __THREW__ = 0;
     (invoke_ii($100|0,($26|0))|0);
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      label = 33;
      break;
     } else {
      $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $103 = (($95) + 1|0);
     HEAP32[$79>>2] = $103;
     $$pre$i$i$i5 = $26;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 33) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $104 = HEAP8[$__grouping>>0]|0;
   $105 = $104 & 1;
   $106 = ($105<<24>>24)==(0);
   if ($106) {
    $109 = $104&255;
    $110 = $109 >>> 1;
    $112 = $110;
   } else {
    $107 = (($__grouping) + 4|0);
    $108 = HEAP32[$107>>2]|0;
    $112 = $108;
   }
   $111 = ($112|0)==(0);
   $113 = HEAP8[$__in_units>>0]|0;
   $114 = ($113<<24>>24)==(0);
   $or$cond = $111 | $114;
   if (!($or$cond)) {
    $115 = HEAP32[$__g_end>>2]|0;
    $116 = $115;
    $117 = $__g;
    $118 = (($116) - ($117))|0;
    $119 = ($118|0)<(160);
    if ($119) {
     $120 = HEAP32[$__dc>>2]|0;
     $121 = (($115) + 4|0);
     HEAP32[$__g_end>>2] = $121;
     HEAP32[$115>>2] = $120;
    }
   }
   $122 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $123 = (+invoke_diii(697,($__a$2|0),($122|0),($__err|0)));
   $124 = __THREW__; __THREW__ = 0;
   $125 = $124&1;
   if (!($125)) {
    HEAPF64[$__v>>3] = $123;
    $126 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$126,$__err);
    $127 = ($26|0)==(0|0);
    if ($127) {
     $141 = 0;
    } else {
     $128 = (($26) + 12|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = (($26) + 16|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = ($129|0)==($131|0);
     if ($132) {
      $133 = HEAP32[$26>>2]|0;
      $134 = (($133) + 36|0);
      $135 = HEAP32[$134>>2]|0;
      __THREW__ = 0;
      $136 = (invoke_ii($135|0,($26|0))|0);
      $137 = __THREW__; __THREW__ = 0;
      $138 = $137&1;
      if ($138) {
       break;
      }
      $139 = ($136|0)==(-1);
      if ($139) {
       HEAP32[$__b>>2] = 0;
       $141 = 0;
      } else {
       $141 = $26;
      }
     } else {
      $141 = $26;
     }
    }
    $140 = ($141|0)==(0|0);
    $142 = ($$pre$i2$i$i|0)==(0|0);
    do {
     if ($142) {
      label = 61;
     } else {
      $143 = (($$pre$i2$i$i) + 12|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = (($$pre$i2$i$i) + 16|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($144|0)==($146|0);
      if (!($147)) {
       if (!($140)) {
        break;
       }
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
      $148 = HEAP32[$$pre$i2$i$i>>2]|0;
      $149 = (($148) + 36|0);
      $150 = HEAP32[$149>>2]|0;
      __THREW__ = 0;
      $151 = (invoke_ii($150|0,($$pre$i2$i$i|0))|0);
      $152 = __THREW__; __THREW__ = 0;
      $153 = $152&1;
      if ($153) {
       break L1;
      }
      $154 = ($151|0)==(-1);
      if ($154) {
       HEAP32[$__e>>2] = 0;
       label = 61;
       break;
      }
      $155 = ($$pre$i2$i$i|0)==(0|0);
      $tmp$i$i = $140 ^ $155;
      if ($tmp$i$i) {
       HEAP32[$agg$result>>2] = $141;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 61) {
     if (!($140)) {
      HEAP32[$agg$result>>2] = $141;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $156 = HEAP32[$__err>>2]|0;
    $157 = $156 | 2;
    HEAP32[$__err>>2] = $157;
    HEAP32[$agg$result>>2] = $141;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsscanf($__s,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(611,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e,$__kb,$__ke,$__ct,$__err,$__case_sensitive) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__kb = $__kb|0;
 $__ke = $__ke|0;
 $__ct = $__ct|0;
 $__err = $__err|0;
 $__case_sensitive = $__case_sensitive|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i12 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i18 = 0, $$029 = 0, $$031 = 0, $$index = 0, $$index10 = 0, $$not = 0, $$pre = 0, $$pre$i$i$i = 0, $$pre$i$i$i14 = 0, $$pre$i3$i$i20 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__consume$0$off040 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__kc$0 = 0, $__ky$067 = 0, $__ky1$041 = 0, $__ky2$052 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$065 = 0, $__n_does_match$1 = 0, $__n_does_match$2 = 0;
 var $__n_does_match$2$phi = 0, $__n_does_match$337 = 0, $__n_does_match$4 = 0, $__n_does_match$550 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$064 = 0, $__n_might_match$1 = 0, $__n_might_match$2 = 0, $__n_might_match$2$phi = 0, $__n_might_match$336 = 0, $__n_might_match$4 = 0, $__st$066 = 0, $__st$138 = 0, $__st$251 = 0, $__st$330 = 0, $__statbuf = 0, $__status$0 = 0, $lpad$phi$index = 0, $lpad$phi$index3 = 0;
 var $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i15 = 0, $tmp$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__statbuf = sp;
 $0 = $__ke;
 $1 = $__kb;
 $2 = (($0) - ($1))|0;
 $3 = (($2|0) / 12)&-1;
 $4 = ($3>>>0)>(100);
 if ($4) {
  $5 = (_malloc($3)|0);
  $6 = ($5|0)==(0|0);
  if ($6) {
   __THREW__ = 0;
   invoke_v(601);
   $7 = __THREW__; __THREW__ = 0;
   $8 = $7&1;
   if ($8) {
    $9 = ___cxa_find_matching_catch()|0;
    $10 = tempRet0;
    $$index = $9;$$index10 = $10;
    ___resumeException($$index|0);
    // unreachable;
   } else {
    $18 = 0;$__status$0 = 0;
   }
  } else {
   $18 = $5;$__status$0 = $5;
  }
 } else {
  $18 = 0;$__status$0 = $__statbuf;
 }
 $23 = ($__kb|0)==($__ke|0);
 if ($23) {
  $__n_does_match$0$lcssa = 0;$__n_might_match$0$lcssa = $3;
 } else {
  $__ky$067 = $__kb;$__n_does_match$065 = 0;$__n_might_match$064 = $3;$__st$066 = $__status$0;
  while(1) {
   $24 = HEAP8[$__ky$067>>0]|0;
   $25 = $24 & 1;
   $26 = ($25<<24>>24)==(0);
   if ($26) {
    $29 = $24&255;
    $30 = $29 >>> 1;
    $32 = $30;
   } else {
    $27 = (($__ky$067) + 4|0);
    $28 = HEAP32[$27>>2]|0;
    $32 = $28;
   }
   $31 = ($32|0)==(0);
   if ($31) {
    HEAP8[$__st$066>>0] = 2;
    $33 = (($__n_might_match$064) + -1)|0;
    $34 = (($__n_does_match$065) + 1)|0;
    $__n_does_match$1 = $34;$__n_might_match$1 = $33;
   } else {
    HEAP8[$__st$066>>0] = 1;
    $__n_does_match$1 = $__n_does_match$065;$__n_might_match$1 = $__n_might_match$064;
   }
   $35 = (($__ky$067) + 12|0);
   $36 = (($__st$066) + 1|0);
   $37 = ($35|0)==($__ke|0);
   if ($37) {
    $__n_does_match$0$lcssa = $__n_does_match$1;$__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__ky$067 = $35;$__n_does_match$065 = $__n_does_match$1;$__n_might_match$064 = $__n_might_match$1;$__st$066 = $36;
   }
  }
 }
 $__indx$0 = 0;$__n_does_match$2 = $__n_does_match$0$lcssa;$__n_might_match$2 = $__n_might_match$0$lcssa;
 L19: while(1) {
  $38 = HEAP32[$__b>>2]|0;
  $39 = ($38|0)==(0|0);
  do {
   if ($39) {
    $68 = 1;
   } else {
    $40 = (($38) + 12|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (($38) + 16|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($41|0)==($43|0);
    if ($44) {
     $45 = HEAP32[$38>>2]|0;
     $46 = (($45) + 36|0);
     $47 = HEAP32[$46>>2]|0;
     __THREW__ = 0;
     $48 = (invoke_ii($47|0,($38|0))|0);
     $49 = __THREW__; __THREW__ = 0;
     $50 = $49&1;
     if ($50) {
      label = 6;
      break L19;
     } else {
      $$0$i$i$i$i = $48;
     }
    } else {
     $51 = HEAP32[$41>>2]|0;
     $$0$i$i$i$i = $51;
    }
    $52 = ($$0$i$i$i$i|0)==(-1);
    if ($52) {
     HEAP32[$__b>>2] = 0;
     $68 = 1;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
     $68 = $phitmp$i$i$i;
     break;
    }
   }
  } while(0);
  $53 = HEAP32[$__e>>2]|0;
  $54 = ($53|0)==(0|0);
  if ($54) {
   $$pre$i3$i$i20 = 0;$69 = 1;
  } else {
   $55 = (($53) + 12|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (($53) + 16|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($56|0)==($58|0);
   if ($59) {
    $60 = HEAP32[$53>>2]|0;
    $61 = (($60) + 36|0);
    $62 = HEAP32[$61>>2]|0;
    __THREW__ = 0;
    $63 = (invoke_ii($62|0,($53|0))|0);
    $64 = __THREW__; __THREW__ = 0;
    $65 = $64&1;
    if ($65) {
     label = 6;
     break;
    } else {
     $$0$i$i1$i$i = $63;
    }
   } else {
    $66 = HEAP32[$56>>2]|0;
    $$0$i$i1$i$i = $66;
   }
   $67 = ($$0$i$i1$i$i|0)==(-1);
   if ($67) {
    HEAP32[$__e>>2] = 0;
    $$pre$i3$i$i20 = 0;$69 = 1;
   } else {
    $$pre$i3$i$i20 = $53;$69 = 0;
   }
  }
  $tmp$i$i = $68 ^ $69;
  $70 = ($__n_might_match$2|0)!=(0);
  $or$cond = $tmp$i$i & $70;
  $71 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   label = 67;
   break;
  }
  $72 = (($71) + 12|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = (($71) + 16|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ($73|0)==($75|0);
  if ($76) {
   $77 = HEAP32[$71>>2]|0;
   $78 = (($77) + 36|0);
   $79 = HEAP32[$78>>2]|0;
   __THREW__ = 0;
   $80 = (invoke_ii($79|0,($71|0))|0);
   $81 = __THREW__; __THREW__ = 0;
   $82 = $81&1;
   if ($82) {
    label = 6;
    break;
   } else {
    $$0$i$i = $80;
   }
  } else {
   $83 = HEAP32[$73>>2]|0;
   $$0$i$i = $83;
  }
  if ($__case_sensitive) {
   $__c$0 = $$0$i$i;
  } else {
   $84 = HEAP32[$__ct>>2]|0;
   $85 = (($84) + 28|0);
   $86 = HEAP32[$85>>2]|0;
   __THREW__ = 0;
   $87 = (invoke_iii($86|0,($__ct|0),($$0$i$i|0))|0);
   $88 = __THREW__; __THREW__ = 0;
   $89 = $88&1;
   if ($89) {
    label = 6;
    break;
   } else {
    $__c$0 = $87;
   }
  }
  $$pre = (($__indx$0) + 1)|0;
  if ($23) {
   $__n_might_match$2$phi = $__n_might_match$2;$__n_does_match$2$phi = $__n_does_match$2;$__indx$0 = $$pre;$__n_might_match$2 = $__n_might_match$2$phi;$__n_does_match$2 = $__n_does_match$2$phi;
   continue;
  } else {
   $__consume$0$off040 = 0;$__ky1$041 = $__kb;$__n_does_match$337 = $__n_does_match$2;$__n_might_match$336 = $__n_might_match$2;$__st$138 = $__status$0;
  }
  while(1) {
   $90 = HEAP8[$__st$138>>0]|0;
   $91 = ($90<<24>>24)==(1);
   do {
    if ($91) {
     $92 = HEAP8[$__ky1$041>>0]|0;
     $93 = $92 & 1;
     $94 = ($93<<24>>24)==(0);
     if ($94) {
      $97 = (($__ky1$041) + 4|0);
      $99 = $97;
     } else {
      $95 = (($__ky1$041) + 8|0);
      $96 = HEAP32[$95>>2]|0;
      $99 = $96;
     }
     $98 = (($99) + ($__indx$0<<2)|0);
     $100 = HEAP32[$98>>2]|0;
     if ($__case_sensitive) {
      $__kc$0 = $100;
     } else {
      $101 = HEAP32[$__ct>>2]|0;
      $102 = (($101) + 28|0);
      $103 = HEAP32[$102>>2]|0;
      __THREW__ = 0;
      $104 = (invoke_iii($103|0,($__ct|0),($100|0))|0);
      $105 = __THREW__; __THREW__ = 0;
      $106 = $105&1;
      if ($106) {
       label = 5;
       break L19;
      } else {
       $__kc$0 = $104;
      }
     }
     $107 = ($__c$0|0)==($__kc$0|0);
     if (!($107)) {
      HEAP8[$__st$138>>0] = 0;
      $119 = (($__n_might_match$336) + -1)|0;
      $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $119;
      break;
     }
     $108 = HEAP8[$__ky1$041>>0]|0;
     $109 = $108 & 1;
     $110 = ($109<<24>>24)==(0);
     if ($110) {
      $113 = $108&255;
      $114 = $113 >>> 1;
      $116 = $114;
     } else {
      $111 = (($__ky1$041) + 4|0);
      $112 = HEAP32[$111>>2]|0;
      $116 = $112;
     }
     $115 = ($116|0)==($$pre|0);
     if ($115) {
      HEAP8[$__st$138>>0] = 2;
      $117 = (($__n_might_match$336) + -1)|0;
      $118 = (($__n_does_match$337) + 1)|0;
      $__consume$1$off0 = 1;$__n_does_match$4 = $118;$__n_might_match$4 = $117;
     } else {
      $__consume$1$off0 = 1;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
     }
    } else {
     $__consume$1$off0 = $__consume$0$off040;$__n_does_match$4 = $__n_does_match$337;$__n_might_match$4 = $__n_might_match$336;
    }
   } while(0);
   $120 = (($__ky1$041) + 12|0);
   $121 = (($__st$138) + 1|0);
   $122 = ($120|0)==($__ke|0);
   if ($122) {
    break;
   } else {
    $__consume$0$off040 = $__consume$1$off0;$__ky1$041 = $120;$__n_does_match$337 = $__n_does_match$4;$__n_might_match$336 = $__n_might_match$4;$__st$138 = $121;
   }
  }
  if (!($__consume$1$off0)) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  }
  $123 = HEAP32[$__b>>2]|0;
  $124 = (($123) + 12|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = (($123) + 16|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = ($125|0)==($127|0);
  if ($128) {
   $129 = HEAP32[$123>>2]|0;
   $130 = (($129) + 40|0);
   $131 = HEAP32[$130>>2]|0;
   __THREW__ = 0;
   (invoke_ii($131|0,($123|0))|0);
   $132 = __THREW__; __THREW__ = 0;
   $133 = $132&1;
   if ($133) {
    label = 6;
    break;
   }
  } else {
   $134 = (($125) + 4|0);
   HEAP32[$124>>2] = $134;
  }
  $135 = (($__n_does_match$4) + ($__n_might_match$4))|0;
  $$not = ($135>>>0)<(2);
  if ($$not) {
   $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$4;$__n_might_match$2 = $__n_might_match$4;
   continue;
  } else {
   $__ky2$052 = $__kb;$__n_does_match$550 = $__n_does_match$4;$__st$251 = $__status$0;
  }
  while(1) {
   $136 = HEAP8[$__st$251>>0]|0;
   $137 = ($136<<24>>24)==(2);
   if ($137) {
    $138 = HEAP8[$__ky2$052>>0]|0;
    $139 = $138 & 1;
    $140 = ($139<<24>>24)==(0);
    if ($140) {
     $143 = $138&255;
     $144 = $143 >>> 1;
     $146 = $144;
    } else {
     $141 = (($__ky2$052) + 4|0);
     $142 = HEAP32[$141>>2]|0;
     $146 = $142;
    }
    $145 = ($146|0)==($$pre|0);
    if ($145) {
     $__n_does_match$6 = $__n_does_match$550;
    } else {
     HEAP8[$__st$251>>0] = 0;
     $147 = (($__n_does_match$550) + -1)|0;
     $__n_does_match$6 = $147;
    }
   } else {
    $__n_does_match$6 = $__n_does_match$550;
   }
   $148 = (($__ky2$052) + 12|0);
   $149 = (($__st$251) + 1|0);
   $150 = ($148|0)==($__ke|0);
   if ($150) {
    $__indx$0 = $$pre;$__n_does_match$2 = $__n_does_match$6;$__n_might_match$2 = $__n_might_match$4;
    continue L19;
   } else {
    $__ky2$052 = $148;$__n_does_match$550 = $__n_does_match$6;$__st$251 = $149;
   }
  }
 }
 if ((label|0) == 5) {
  $11 = ___cxa_find_matching_catch()|0;
  $12 = tempRet0;
  $lpad$phi$index = $11;$lpad$phi$index3 = $12;
 }
 else if ((label|0) == 6) {
  $13 = ___cxa_find_matching_catch()|0;
  $14 = tempRet0;
  $lpad$phi$index = $13;$lpad$phi$index3 = $14;
 }
 else if ((label|0) == 67) {
  $151 = ($71|0)==(0|0);
  do {
   if ($151) {
    $193 = 1;
    label = 74;
   } else {
    $152 = (($71) + 12|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = (($71) + 16|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ($153|0)==($155|0);
    if ($156) {
     $157 = HEAP32[$71>>2]|0;
     $158 = (($157) + 36|0);
     $159 = HEAP32[$158>>2]|0;
     __THREW__ = 0;
     $160 = (invoke_ii($159|0,($71|0))|0);
     $161 = __THREW__; __THREW__ = 0;
     $162 = $161&1;
     if ($162) {
      break;
     } else {
      $$0$i$i$i$i12 = $160;
     }
    } else {
     $163 = HEAP32[$153>>2]|0;
     $$0$i$i$i$i12 = $163;
    }
    $164 = ($$0$i$i$i$i12|0)==(-1);
    if ($164) {
     HEAP32[$__b>>2] = 0;
     $193 = 1;
     label = 74;
     break;
    } else {
     $$pre$i$i$i14 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i15 = ($$pre$i$i$i14|0)==(0|0);
     $193 = $phitmp$i$i$i15;
     label = 74;
     break;
    }
   }
  } while(0);
  L96: do {
   if ((label|0) == 74) {
    $165 = ($$pre$i3$i$i20|0)==(0|0);
    do {
     if ($165) {
      label = 80;
     } else {
      $166 = (($$pre$i3$i$i20) + 12|0);
      $167 = HEAP32[$166>>2]|0;
      $168 = (($$pre$i3$i$i20) + 16|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = ($167|0)==($169|0);
      if ($170) {
       $171 = HEAP32[$$pre$i3$i$i20>>2]|0;
       $172 = (($171) + 36|0);
       $173 = HEAP32[$172>>2]|0;
       __THREW__ = 0;
       $174 = (invoke_ii($173|0,($$pre$i3$i$i20|0))|0);
       $175 = __THREW__; __THREW__ = 0;
       $176 = $175&1;
       if ($176) {
        break L96;
       } else {
        $$0$i$i1$i$i18 = $174;
       }
      } else {
       $177 = HEAP32[$167>>2]|0;
       $$0$i$i1$i$i18 = $177;
      }
      $178 = ($$0$i$i1$i$i18|0)==(-1);
      if ($178) {
       HEAP32[$__e>>2] = 0;
       label = 80;
       break;
      } else {
       if ($193) {
        break;
       } else {
        label = 82;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 80) {
     if ($193) {
      label = 82;
     }
    }
    if ((label|0) == 82) {
     $179 = HEAP32[$__err>>2]|0;
     $180 = $179 | 2;
     HEAP32[$__err>>2] = $180;
    }
    L112: do {
     if ($23) {
      label = 86;
     } else {
      $$031 = $__kb;$__st$330 = $__status$0;
      while(1) {
       $181 = HEAP8[$__st$330>>0]|0;
       $182 = ($181<<24>>24)==(2);
       if ($182) {
        $$029 = $$031;
        break L112;
       }
       $183 = (($$031) + 12|0);
       $184 = (($__st$330) + 1|0);
       $185 = ($183|0)==($__ke|0);
       if ($185) {
        label = 86;
        break;
       } else {
        $$031 = $183;$__st$330 = $184;
       }
      }
     }
    } while(0);
    if ((label|0) == 86) {
     $186 = HEAP32[$__err>>2]|0;
     $187 = $186 | 4;
     HEAP32[$__err>>2] = $187;
     $$029 = $__ke;
    }
    $188 = ($18|0)==(0|0);
    if ($188) {
     STACKTOP = sp;return ($$029|0);
    }
    __THREW__ = 0;
    invoke_vi(603,($18|0));
    $189 = __THREW__; __THREW__ = 0;
    $190 = $189&1;
    if ($190) {
     $191 = ___cxa_find_matching_catch(0|0)|0;
     $192 = tempRet0;
     ___clang_call_terminate($191);
     // unreachable;
    } else {
     STACKTOP = sp;return ($$029|0);
    }
   }
  } while(0);
  $15 = ___cxa_find_matching_catch()|0;
  $16 = tempRet0;
  $lpad$phi$index = $15;$lpad$phi$index3 = $16;
 }
 $17 = ($18|0)==(0|0);
 if ($17) {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vi(603,($18|0));
 $19 = __THREW__; __THREW__ = 0;
 $20 = $19&1;
 if ($20) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 } else {
  $$index = $lpad$phi$index;$$index10 = $lpad$phi$index3;
  ___resumeException($$index|0);
  // unreachable;
 }
 return (0)|0;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(689,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(690,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(691,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP16[$__v>>1] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(692,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0;
 var $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $155 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $155 = 1;$80 = 0;
     } else {
      $155 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($155) {
        $156 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($155) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $156 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $156;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(693,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = __THREW__; __THREW__ = 0;
   $122 = $121&1;
   if (!($122)) {
    HEAP32[$__v>>2] = $120;
    $123 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$123,$__err);
    $124 = ($80|0)==(0|0);
    if ($124) {
     $154 = 0;$157 = 1;
    } else {
     $125 = (($80) + 12|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = (($80) + 16|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = ($126|0)==($128|0);
     if ($129) {
      $130 = HEAP32[$80>>2]|0;
      $131 = (($130) + 36|0);
      $132 = HEAP32[$131>>2]|0;
      __THREW__ = 0;
      $133 = (invoke_ii($132|0,($80|0))|0);
      $134 = __THREW__; __THREW__ = 0;
      $135 = $134&1;
      if ($135) {
       break;
      } else {
       $$0$i$i$i$i = $133;
      }
     } else {
      $136 = HEAP32[$126>>2]|0;
      $$0$i$i$i$i = $136;
     }
     $137 = ($$0$i$i$i$i|0)==(-1);
     if ($137) {
      HEAP32[$__b>>2] = 0;
      $154 = 0;$157 = 1;
     } else {
      $154 = $80;$157 = 0;
     }
    }
    $138 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($138) {
      label = 63;
     } else {
      $139 = (($$pre$i3$i$i) + 12|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = (($$pre$i3$i$i) + 16|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)==($142|0);
      if ($143) {
       $144 = HEAP32[$$pre$i3$i$i>>2]|0;
       $145 = (($144) + 36|0);
       $146 = HEAP32[$145>>2]|0;
       __THREW__ = 0;
       $147 = (invoke_ii($146|0,($$pre$i3$i$i|0))|0);
       $148 = __THREW__; __THREW__ = 0;
       $149 = $148&1;
       if ($149) {
        break L1;
       } else {
        $$0$i$i1$i$i = $147;
       }
      } else {
       $150 = HEAP32[$140>>2]|0;
       $$0$i$i1$i$i = $150;
      }
      $151 = ($$0$i$i1$i$i|0)==(-1);
      if ($151) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($157) {
       HEAP32[$agg$result>>2] = $154;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($157)) {
      HEAP32[$agg$result>>2] = $154;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $152 = HEAP32[$__err>>2]|0;
    $153 = $152 | 2;
    HEAP32[$__err>>2] = $153;
    HEAP32[$agg$result>>2] = $154;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$pre = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $$pre32 = 0, $$pre34 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0;
 var $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $phitmp$i23 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 160|0;
 $__thousands_sep = sp + 280|0;
 $__grouping = sp + 264|0;
 $__buf = sp + 284|0;
 $__a_end = sp + 300|0;
 $__g = sp;
 $__g_end = sp + 276|0;
 $__dc = sp + 296|0;
 $0 = (__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping,$__iob,$__atoms,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 L1: do {
  if (!($2)) {
   $3 = HEAP8[$__buf>>0]|0;
   $4 = $3 & 1;
   $5 = ($4<<24>>24)==(0);
   if ($5) {
    $8 = (($__buf) + 1|0);
    $$pre34 = (($__buf) + 8|0);
    $$pre$phi33Z2D = $8;$$pre$phi35Z2D = $$pre34;$9 = $8;
   } else {
    $6 = (($__buf) + 8|0);
    $7 = HEAP32[$6>>2]|0;
    $$pre32 = (($__buf) + 1|0);
    $$pre$phi33Z2D = $$pre32;$$pre$phi35Z2D = $6;$9 = $7;
   }
   HEAP32[$__a_end>>2] = $9;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   $10 = (($__buf) + 4|0);
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i5 = $$pre;$__a$0 = $9;
   L7: while(1) {
    $12 = ($$pre$i$i$i5|0)==(0|0);
    if ($12) {
     $160 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i5) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i5) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i5>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i5|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i3 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i3 = $24;
     }
     $25 = ($$0$i$i$i$i3|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $160 = 1;$80 = 0;
     } else {
      $160 = 0;$80 = $$pre$i$i$i5;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i9 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i9 = $39;
      }
      $40 = ($$0$i$i1$i$i9|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($160) {
        $161 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($160) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $161 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$10>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$10>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i23 = (($64) + -1)|0;
      $65 = $phitmp$i23;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi33Z2D;
     } else {
      $71 = HEAP32[$$pre$phi35Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i,$0,$__a$1,$__a_end,$__dc,$11,$__grouping,$__g,$__g_end,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $161;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i5 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   if (!($110)) {
    $112 = HEAP32[$__g_end>>2]|0;
    $113 = $112;
    $114 = $__g;
    $115 = (($113) - ($114))|0;
    $116 = ($115|0)<(160);
    if ($116) {
     $117 = HEAP32[$__dc>>2]|0;
     $118 = (($112) + 4|0);
     HEAP32[$__g_end>>2] = $118;
     HEAP32[$112>>2] = $117;
    }
   }
   $119 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $120 = (invoke_iiiii(694,($__a$2|0),($119|0),($__err|0),($0|0))|0);
   $121 = tempRet0;
   $122 = __THREW__; __THREW__ = 0;
   $123 = $122&1;
   if (!($123)) {
    $124 = $__v;
    $125 = $124;
    HEAP32[$125>>2] = $120;
    $126 = (($124) + 4)|0;
    $127 = $126;
    HEAP32[$127>>2] = $121;
    $128 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$128,$__err);
    $129 = ($80|0)==(0|0);
    if ($129) {
     $159 = 0;$162 = 1;
    } else {
     $130 = (($80) + 12|0);
     $131 = HEAP32[$130>>2]|0;
     $132 = (($80) + 16|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ($131|0)==($133|0);
     if ($134) {
      $135 = HEAP32[$80>>2]|0;
      $136 = (($135) + 36|0);
      $137 = HEAP32[$136>>2]|0;
      __THREW__ = 0;
      $138 = (invoke_ii($137|0,($80|0))|0);
      $139 = __THREW__; __THREW__ = 0;
      $140 = $139&1;
      if ($140) {
       break;
      } else {
       $$0$i$i$i$i = $138;
      }
     } else {
      $141 = HEAP32[$131>>2]|0;
      $$0$i$i$i$i = $141;
     }
     $142 = ($$0$i$i$i$i|0)==(-1);
     if ($142) {
      HEAP32[$__b>>2] = 0;
      $159 = 0;$162 = 1;
     } else {
      $159 = $80;$162 = 0;
     }
    }
    $143 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($143) {
      label = 63;
     } else {
      $144 = (($$pre$i3$i$i) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i3$i$i) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i3$i$i>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       __THREW__ = 0;
       $152 = (invoke_ii($151|0,($$pre$i3$i$i|0))|0);
       $153 = __THREW__; __THREW__ = 0;
       $154 = $153&1;
       if ($154) {
        break L1;
       } else {
        $$0$i$i1$i$i = $152;
       }
      } else {
       $155 = HEAP32[$145>>2]|0;
       $$0$i$i1$i$i = $155;
      }
      $156 = ($$0$i$i1$i$i|0)==(-1);
      if ($156) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($162) {
       HEAP32[$agg$result>>2] = $159;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($162)) {
      HEAP32[$agg$result>>2] = $159;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $157 = HEAP32[$__err>>2]|0;
    $158 = $157 | 2;
    HEAP32[$__err>>2] = $158;
    HEAP32[$agg$result>>2] = $159;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(695,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF32[$__v>>2] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(696,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result,$this,$__b,$__e,$__iob,$__err,$__v) {
 $agg$result = $agg$result|0;
 $this = $this|0;
 $__b = $__b|0;
 $__e = $__e|0;
 $__iob = $__iob|0;
 $__err = $__err|0;
 $__v = $__v|0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$pre = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $$pre33 = 0, $$pre35 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0;
 var $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, $lpad$phi$index = 0, $lpad$phi$index2 = 0, $or$cond = 0, $phitmp$i24 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__atoms = sp + 208|0;
 $__decimal_point = sp + 184|0;
 $__thousands_sep = sp + 4|0;
 $__grouping = sp + 8|0;
 $__buf = sp + 196|0;
 $__a_end = sp;
 $__g = sp + 24|0;
 $__g_end = sp + 192|0;
 $__dc = sp + 188|0;
 $__in_units = sp + 337|0;
 $__exp = sp + 336|0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping,$__iob,$__atoms,$__decimal_point,$__thousands_sep);
 ;HEAP32[$__buf+0>>2]=0|0;HEAP32[$__buf+4>>2]=0|0;HEAP32[$__buf+8>>2]=0|0;
 __THREW__ = 0;
 invoke_viii(540,($__buf|0),10,0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 L1: do {
  if (!($1)) {
   $2 = HEAP8[$__buf>>0]|0;
   $3 = $2 & 1;
   $4 = ($3<<24>>24)==(0);
   if ($4) {
    $7 = (($__buf) + 1|0);
    $$pre35 = (($__buf) + 8|0);
    $$pre$phi34Z2D = $7;$$pre$phi36Z2D = $$pre35;$8 = $7;
   } else {
    $5 = (($__buf) + 8|0);
    $6 = HEAP32[$5>>2]|0;
    $$pre33 = (($__buf) + 1|0);
    $$pre$phi34Z2D = $$pre33;$$pre$phi36Z2D = $5;$8 = $6;
   }
   HEAP32[$__a_end>>2] = $8;
   HEAP32[$__g_end>>2] = $__g;
   HEAP32[$__dc>>2] = 0;
   HEAP8[$__in_units>>0] = 1;
   HEAP8[$__exp>>0] = 69;
   $9 = (($__buf) + 4|0);
   $10 = HEAP32[$__decimal_point>>2]|0;
   $11 = HEAP32[$__thousands_sep>>2]|0;
   $$pre = HEAP32[$__b>>2]|0;
   $$pre$i$i$i6 = $$pre;$__a$0 = $8;
   L7: while(1) {
    $12 = ($$pre$i$i$i6|0)==(0|0);
    if ($12) {
     $157 = 1;$80 = 0;
    } else {
     $13 = (($$pre$i$i$i6) + 12|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = (($$pre$i$i$i6) + 16|0);
     $16 = HEAP32[$15>>2]|0;
     $17 = ($14|0)==($16|0);
     if ($17) {
      $18 = HEAP32[$$pre$i$i$i6>>2]|0;
      $19 = (($18) + 36|0);
      $20 = HEAP32[$19>>2]|0;
      __THREW__ = 0;
      $21 = (invoke_ii($20|0,($$pre$i$i$i6|0))|0);
      $22 = __THREW__; __THREW__ = 0;
      $23 = $22&1;
      if ($23) {
       label = 34;
       break;
      } else {
       $$0$i$i$i$i4 = $21;
      }
     } else {
      $24 = HEAP32[$14>>2]|0;
      $$0$i$i$i$i4 = $24;
     }
     $25 = ($$0$i$i$i$i4|0)==(-1);
     if ($25) {
      HEAP32[$__b>>2] = 0;
      $157 = 1;$80 = 0;
     } else {
      $157 = 0;$80 = $$pre$i$i$i6;
     }
    }
    $26 = HEAP32[$__e>>2]|0;
    $27 = ($26|0)==(0|0);
    do {
     if ($27) {
      label = 18;
     } else {
      $28 = (($26) + 12|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = (($26) + 16|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($29|0)==($31|0);
      if ($32) {
       $33 = HEAP32[$26>>2]|0;
       $34 = (($33) + 36|0);
       $35 = HEAP32[$34>>2]|0;
       __THREW__ = 0;
       $36 = (invoke_ii($35|0,($26|0))|0);
       $37 = __THREW__; __THREW__ = 0;
       $38 = $37&1;
       if ($38) {
        label = 34;
        break L7;
       } else {
        $$0$i$i1$i$i10 = $36;
       }
      } else {
       $39 = HEAP32[$29>>2]|0;
       $$0$i$i1$i$i10 = $39;
      }
      $40 = ($$0$i$i1$i$i10|0)==(-1);
      if ($40) {
       HEAP32[$__e>>2] = 0;
       label = 18;
       break;
      } else {
       if ($157) {
        $158 = $26;
        break;
       } else {
        $$pre$i3$i$i = $26;$__a$2 = $__a$0;
        break L7;
       }
      }
     }
    } while(0);
    if ((label|0) == 18) {
     label = 0;
     if ($157) {
      $$pre$i3$i$i = 0;$__a$2 = $__a$0;
      break;
     } else {
      $158 = 0;
     }
    }
    $41 = HEAP32[$__a_end>>2]|0;
    $42 = HEAP8[$__buf>>0]|0;
    $43 = $42 & 1;
    $44 = ($43<<24>>24)==(0);
    if ($44) {
     $46 = $42&255;
     $47 = $46 >>> 1;
     $49 = $47;
    } else {
     $45 = HEAP32[$9>>2]|0;
     $49 = $45;
    }
    $48 = (($__a$0) + ($49)|0);
    $50 = ($41|0)==($48|0);
    if ($50) {
     if ($44) {
      $52 = $42&255;
      $53 = $52 >>> 1;
      $54 = $42&255;
      $55 = $54 >>> 1;
      $57 = $55;$74 = $53;
     } else {
      $51 = HEAP32[$9>>2]|0;
      $57 = $51;$74 = $51;
     }
     $56 = $57 << 1;
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($56|0),0);
     $58 = __THREW__; __THREW__ = 0;
     $59 = $58&1;
     if ($59) {
      label = 34;
      break;
     }
     $60 = HEAP8[$__buf>>0]|0;
     $61 = $60 & 1;
     $62 = ($61<<24>>24)==(0);
     if ($62) {
      $65 = 10;
     } else {
      $63 = HEAP32[$__buf>>2]|0;
      $64 = $63 & -2;
      $phitmp$i24 = (($64) + -1)|0;
      $65 = $phitmp$i24;
     }
     __THREW__ = 0;
     invoke_viii(540,($__buf|0),($65|0),0);
     $66 = __THREW__; __THREW__ = 0;
     $67 = $66&1;
     if ($67) {
      label = 34;
      break;
     }
     $68 = HEAP8[$__buf>>0]|0;
     $69 = $68 & 1;
     $70 = ($69<<24>>24)==(0);
     if ($70) {
      $73 = $$pre$phi34Z2D;
     } else {
      $71 = HEAP32[$$pre$phi36Z2D>>2]|0;
      $73 = $71;
     }
     $72 = (($73) + ($74)|0);
     HEAP32[$__a_end>>2] = $72;
     $__a$1 = $73;
    } else {
     $__a$1 = $__a$0;
    }
    $79 = (($80) + 12|0);
    $81 = HEAP32[$79>>2]|0;
    $82 = (($80) + 16|0);
    $83 = HEAP32[$82>>2]|0;
    $84 = ($81|0)==($83|0);
    if ($84) {
     $85 = HEAP32[$80>>2]|0;
     $86 = (($85) + 36|0);
     $87 = HEAP32[$86>>2]|0;
     __THREW__ = 0;
     $88 = (invoke_ii($87|0,($80|0))|0);
     $89 = __THREW__; __THREW__ = 0;
     $90 = $89&1;
     if ($90) {
      label = 34;
      break;
     } else {
      $$0$i$i = $88;
     }
    } else {
     $91 = HEAP32[$81>>2]|0;
     $$0$i$i = $91;
    }
    $92 = (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i,$__in_units,$__exp,$__a$1,$__a_end,$10,$11,$__grouping,$__g,$__g_end,$__dc,$__atoms)|0);
    $93 = ($92|0)==(0);
    if (!($93)) {
     $$pre$i3$i$i = $158;$__a$2 = $__a$1;
     break;
    }
    $94 = HEAP32[$79>>2]|0;
    $95 = HEAP32[$82>>2]|0;
    $96 = ($94|0)==($95|0);
    if ($96) {
     $97 = HEAP32[$80>>2]|0;
     $98 = (($97) + 40|0);
     $99 = HEAP32[$98>>2]|0;
     __THREW__ = 0;
     (invoke_ii($99|0,($80|0))|0);
     $100 = __THREW__; __THREW__ = 0;
     $101 = $100&1;
     if ($101) {
      label = 34;
      break;
     } else {
      $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
      continue;
     }
    } else {
     $102 = (($94) + 4|0);
     HEAP32[$79>>2] = $102;
     $$pre$i$i$i6 = $80;$__a$0 = $__a$1;
     continue;
    }
   }
   if ((label|0) == 34) {
    $75 = ___cxa_find_matching_catch()|0;
    $76 = tempRet0;
    $lpad$phi$index = $75;$lpad$phi$index2 = $76;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    ___resumeException($lpad$phi$index|0);
    // unreachable;
   }
   $103 = HEAP8[$__grouping>>0]|0;
   $104 = $103 & 1;
   $105 = ($104<<24>>24)==(0);
   if ($105) {
    $108 = $103&255;
    $109 = $108 >>> 1;
    $111 = $109;
   } else {
    $106 = (($__grouping) + 4|0);
    $107 = HEAP32[$106>>2]|0;
    $111 = $107;
   }
   $110 = ($111|0)==(0);
   $112 = HEAP8[$__in_units>>0]|0;
   $113 = ($112<<24>>24)==(0);
   $or$cond = $110 | $113;
   if (!($or$cond)) {
    $114 = HEAP32[$__g_end>>2]|0;
    $115 = $114;
    $116 = $__g;
    $117 = (($115) - ($116))|0;
    $118 = ($117|0)<(160);
    if ($118) {
     $119 = HEAP32[$__dc>>2]|0;
     $120 = (($114) + 4|0);
     HEAP32[$__g_end>>2] = $120;
     HEAP32[$114>>2] = $119;
    }
   }
   $121 = HEAP32[$__a_end>>2]|0;
   __THREW__ = 0;
   $122 = (+invoke_diii(697,($__a$2|0),($121|0),($__err|0)));
   $123 = __THREW__; __THREW__ = 0;
   $124 = $123&1;
   if (!($124)) {
    HEAPF64[$__v>>3] = $122;
    $125 = HEAP32[$__g_end>>2]|0;
    __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$125,$__err);
    $126 = ($80|0)==(0|0);
    if ($126) {
     $156 = 0;$159 = 1;
    } else {
     $127 = (($80) + 12|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($80) + 16|0);
     $130 = HEAP32[$129>>2]|0;
     $131 = ($128|0)==($130|0);
     if ($131) {
      $132 = HEAP32[$80>>2]|0;
      $133 = (($132) + 36|0);
      $134 = HEAP32[$133>>2]|0;
      __THREW__ = 0;
      $135 = (invoke_ii($134|0,($80|0))|0);
      $136 = __THREW__; __THREW__ = 0;
      $137 = $136&1;
      if ($137) {
       break;
      } else {
       $$0$i$i$i$i = $135;
      }
     } else {
      $138 = HEAP32[$128>>2]|0;
      $$0$i$i$i$i = $138;
     }
     $139 = ($$0$i$i$i$i|0)==(-1);
     if ($139) {
      HEAP32[$__b>>2] = 0;
      $156 = 0;$159 = 1;
     } else {
      $156 = $80;$159 = 0;
     }
    }
    $140 = ($$pre$i3$i$i|0)==(0|0);
    do {
     if ($140) {
      label = 63;
     } else {
      $141 = (($$pre$i3$i$i) + 12|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = (($$pre$i3$i$i) + 16|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ($142|0)==($144|0);
      if ($145) {
       $146 = HEAP32[$$pre$i3$i$i>>2]|0;
       $147 = (($146) + 36|0);
       $148 = HEAP32[$147>>2]|0;
       __THREW__ = 0;
       $149 = (invoke_ii($148|0,($$pre$i3$i$i|0))|0);
       $150 = __THREW__; __THREW__ = 0;
       $151 = $150&1;
       if ($151) {
        break L1;
       } else {
        $$0$i$i1$i$i = $149;
       }
      } else {
       $152 = HEAP32[$142>>2]|0;
       $$0$i$i1$i$i = $152;
      }
      $153 = ($$0$i$i1$i$i|0)==(-1);
      if ($153) {
       HEAP32[$__e>>2] = 0;
       label = 63;
       break;
      }
      if ($159) {
       HEAP32[$agg$result>>2] = $156;
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
       STACKTOP = sp;return;
      }
     }
    } while(0);
    if ((label|0) == 63) {
     if (!($159)) {
      HEAP32[$agg$result>>2] = $156;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
      STACKTOP = sp;return;
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    HEAP32[$agg$result>>2] = $156;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $77 = ___cxa_find_matching_catch()|0;
 $78 = tempRet0;
 $lpad$phi$index = $77;$lpad$phi$index2 = $78;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 ___resumeException($lpad$phi$index|0);
 // unreachable;
}
function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__n = $__n|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 $1 = (_vsnprintf($__s,$__n,$__format,$__va)|0);
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return ($1|0);
 }
 __THREW__ = 0;
 (invoke_ii(611,($0|0))|0);
 $3 = __THREW__; __THREW__ = 0;
 $4 = $3&1;
 if ($4) {
  $5 = ___cxa_find_matching_catch(0|0)|0;
  $6 = tempRet0;
  ___clang_call_terminate($5);
  // unreachable;
 } else {
  STACKTOP = sp;return ($1|0);
 }
 return (0)|0;
}
function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,$varargs) {
 $__s = $__s|0;
 $__l = $__l|0;
 $__format = $__format|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__va = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__va = sp;
 HEAP32[$__va>>2] = $varargs;
 $0 = (_uselocale(($__l|0))|0);
 __THREW__ = 0;
 $1 = (invoke_iiii(698,($__s|0),($__format|0),($__va|0))|0);
 $2 = __THREW__; __THREW__ = 0;
 $3 = $2&1;
 if ($3) {
  $9 = ___cxa_find_matching_catch()|0;
  $10 = tempRet0;
  $11 = ($0|0)==(0|0);
  if ($11) {
   ___resumeException($9|0);
   // unreachable;
  }
  __THREW__ = 0;
  (invoke_ii(611,($0|0))|0);
  $12 = __THREW__; __THREW__ = 0;
  $13 = $12&1;
  if ($13) {
   $14 = ___cxa_find_matching_catch(0|0)|0;
   $15 = tempRet0;
   ___clang_call_terminate($14);
   // unreachable;
  } else {
   ___resumeException($9|0);
   // unreachable;
  }
 } else {
  $4 = ($0|0)==(0|0);
  if ($4) {
   STACKTOP = sp;return ($1|0);
  }
  __THREW__ = 0;
  (invoke_ii(611,($0|0))|0);
  $5 = __THREW__; __THREW__ = 0;
  $6 = $5&1;
  if ($6) {
   $7 = ___cxa_find_matching_catch(0|0)|0;
   $8 = tempRet0;
   ___clang_call_terminate($7);
   // unreachable;
  } else {
   STACKTOP = sp;return ($1|0);
  }
 }
 return (0)|0;
}
function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result,$__s,$__ob,$__op,$__oe,$__iob,$__fl) {
 $agg$result = $agg$result|0;
 $__s = $__s|0;
 $__ob = $__ob|0;
 $__op = $__op|0;
 $__oe = $__oe|0;
 $__iob = $__iob|0;
 $__fl = $__fl|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__sp = sp;
 $0 = HEAP32[$__s>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  HEAP32[$agg$result>>2] = 0;
  STACKTOP = sp;return;
 }
 $2 = $__oe;
 $3 = $__ob;
 $4 = (($2) - ($3))|0;
 $5 = $4 >> 2;
 $6 = (($__iob) + 12|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>($5|0);
 $9 = (($7) - ($5))|0;
 $__ns$0 = $8 ? $9 : 0;
 $10 = $__op;
 $11 = (($10) - ($3))|0;
 $12 = $11 >> 2;
 $13 = ($11|0)>(0);
 if ($13) {
  $14 = HEAP32[$0>>2]|0;
  $15 = (($14) + 48|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_iiii[$16 & 1023]($0,$__ob,$12)|0);
  $18 = ($17|0)==($12|0);
  if (!($18)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 $19 = ($__ns$0|0)>(0);
 do {
  if ($19) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp,$__ns$0,$__fl);
   $20 = HEAP8[$__sp>>0]|0;
   $21 = $20 & 1;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    $25 = (($__sp) + 4|0);
    $29 = $25;
   } else {
    $23 = (($__sp) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $29 = $24;
   }
   $26 = HEAP32[$0>>2]|0;
   $27 = (($26) + 48|0);
   $28 = HEAP32[$27>>2]|0;
   __THREW__ = 0;
   $30 = (invoke_iiii($28|0,($0|0),($29|0),($__ns$0|0))|0);
   $31 = __THREW__; __THREW__ = 0;
   $32 = $31&1;
   if ($32) {
    $34 = ___cxa_find_matching_catch()|0;
    $35 = tempRet0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    ___resumeException($34|0);
    // unreachable;
   }
   $33 = ($30|0)==($__ns$0|0);
   if ($33) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   }
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
   STACKTOP = sp;return;
  }
 } while(0);
 $36 = (($2) - ($10))|0;
 $37 = $36 >> 2;
 $38 = ($36|0)>(0);
 if ($38) {
  $39 = HEAP32[$0>>2]|0;
  $40 = (($39) + 48|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($0,$__op,$37)|0);
  $43 = ($42|0)==($37|0);
  if (!($43)) {
   HEAP32[$__s>>2] = 0;
   HEAP32[$agg$result>>2] = 0;
   STACKTOP = sp;return;
  }
 }
 HEAP32[$6>>2] = 0;
 HEAP32[$agg$result>>2] = $0;
 STACKTOP = sp;return;
}
function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i11 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i17 = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i21 = 0, $$pre$i2$i$i8 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $isascii1$i = 0, $isascii1$i13 = 0, $or$cond = 0, $sext = 0, $sext25 = 0, $tmp$i$i10 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $13 = 0;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $11 = ($10|0)==(-1);
    if ($11) {
     HEAP32[$__b>>2] = 0;
     $13 = 0;
     break;
    } else {
     $$pre$i$i$i = HEAP32[$__b>>2]|0;
     $13 = $$pre$i$i$i;
     break;
    }
   } else {
    $13 = $0;
   }
  }
 } while(0);
 $12 = ($13|0)==(0|0);
 $14 = HEAP32[$__e>>2]|0;
 $15 = ($14|0)==(0|0);
 do {
  if ($15) {
   label = 11;
  } else {
   $16 = (($14) + 12|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (($14) + 16|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($17|0)==($19|0);
   if ($20) {
    $21 = HEAP32[$14>>2]|0;
    $22 = (($21) + 36|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (FUNCTION_TABLE_ii[$23 & 1023]($14)|0);
    $25 = ($24|0)==(-1);
    if ($25) {
     HEAP32[$__e>>2] = 0;
     label = 11;
     break;
    }
   }
   if ($12) {
    $156 = $14;
   } else {
    label = 12;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  if ($12) {
   label = 12;
  } else {
   $156 = 0;
  }
 }
 if ((label|0) == 12) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP8[$30>>0]|0;
  $39 = $38&255;
  $$0$i$i = $39;
 }
 $40 = $$0$i$i&255;
 $isascii1$i = ($40<<24>>24)>(-1);
 if ($isascii1$i) {
  $sext = $$0$i$i << 24;
  $41 = $sext >> 24;
  $42 = (($__ct) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (($43) + ($41<<1)|0);
  $45 = HEAP16[$44>>1]|0;
  $46 = $45 & 2048;
  $47 = ($46<<16>>16)==(0);
  if (!($47)) {
   $50 = HEAP32[$__ct>>2]|0;
   $51 = (($50) + 36|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = (FUNCTION_TABLE_iiii[$52 & 1023]($__ct,$40,0)|0);
   $54 = $53 << 24 >> 24;
   $55 = HEAP32[$__b>>2]|0;
   $56 = (($55) + 12|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($55) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($57|0)==($59|0);
   if ($60) {
    $61 = HEAP32[$55>>2]|0;
    $62 = (($61) + 40|0);
    $63 = HEAP32[$62>>2]|0;
    (FUNCTION_TABLE_ii[$63 & 1023]($55)|0);
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   } else {
    $64 = (($57) + 1|0);
    HEAP32[$56>>2] = $64;
    $$0$in = $__n;$$pre$i2$i$i8 = $156;$80 = $156;$__r$0$in = $54;
   }
   while(1) {
    $__r$0 = (($__r$0$in) + -48)|0;
    $$0 = (($$0$in) + -1)|0;
    $65 = HEAP32[$__b>>2]|0;
    $66 = ($65|0)==(0|0);
    do {
     if ($66) {
      $78 = 0;
     } else {
      $67 = (($65) + 12|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = (($65) + 16|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)==($70|0);
      if ($71) {
       $72 = HEAP32[$65>>2]|0;
       $73 = (($72) + 36|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = (FUNCTION_TABLE_ii[$74 & 1023]($65)|0);
       $76 = ($75|0)==(-1);
       if ($76) {
        HEAP32[$__b>>2] = 0;
        $78 = 0;
        break;
       } else {
        $$pre$i$i$i4 = HEAP32[$__b>>2]|0;
        $78 = $$pre$i$i$i4;
        break;
       }
      } else {
       $78 = $65;
      }
     }
    } while(0);
    $77 = ($78|0)==(0|0);
    $79 = ($80|0)==(0|0);
    if ($79) {
     $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = 0;
    } else {
     $81 = (($80) + 12|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (($80) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($82|0)==($84|0);
     if ($85) {
      $86 = HEAP32[$80>>2]|0;
      $87 = (($86) + 36|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = (FUNCTION_TABLE_ii[$88 & 1023]($80)|0);
      $90 = ($89|0)==(-1);
      if ($90) {
       HEAP32[$__e>>2] = 0;
       $$pre$i2$i$i21 = 0;$92 = 0;
      } else {
       $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $$pre$i2$i$i8;
      }
     } else {
      $$pre$i2$i$i21 = $$pre$i2$i$i8;$92 = $80;
     }
    }
    $91 = ($92|0)==(0|0);
    $tmp$i$i10 = $77 ^ $91;
    $93 = ($$0|0)>(0);
    $or$cond = $tmp$i$i10 & $93;
    $94 = HEAP32[$__b>>2]|0;
    if (!($or$cond)) {
     label = 40;
     break;
    }
    $95 = (($94) + 12|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = (($94) + 16|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($96|0)==($98|0);
    if ($99) {
     $100 = HEAP32[$94>>2]|0;
     $101 = (($100) + 36|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (FUNCTION_TABLE_ii[$102 & 1023]($94)|0);
     $$0$i$i11 = $103;
    } else {
     $104 = HEAP8[$96>>0]|0;
     $105 = $104&255;
     $$0$i$i11 = $105;
    }
    $106 = $$0$i$i11&255;
    $isascii1$i13 = ($106<<24>>24)>(-1);
    if (!($isascii1$i13)) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $sext25 = $$0$i$i11 << 24;
    $107 = $sext25 >> 24;
    $108 = HEAP32[$42>>2]|0;
    $109 = (($108) + ($107<<1)|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110 & 2048;
    $112 = ($111<<16>>16)==(0);
    if ($112) {
     $$02 = $__r$0;
     label = 52;
     break;
    }
    $113 = ($__r$0*10)|0;
    $114 = HEAP32[$__ct>>2]|0;
    $115 = (($114) + 36|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = (FUNCTION_TABLE_iiii[$116 & 1023]($__ct,$106,0)|0);
    $118 = $117 << 24 >> 24;
    $119 = (($118) + ($113))|0;
    $120 = HEAP32[$__b>>2]|0;
    $121 = (($120) + 12|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = (($120) + 16|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ($122|0)==($124|0);
    if ($125) {
     $126 = HEAP32[$120>>2]|0;
     $127 = (($126) + 40|0);
     $128 = HEAP32[$127>>2]|0;
     (FUNCTION_TABLE_ii[$128 & 1023]($120)|0);
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    } else {
     $129 = (($122) + 1|0);
     HEAP32[$121>>2] = $129;
     $$0$in = $$0;$$pre$i2$i$i8 = $$pre$i2$i$i21;$80 = $92;$__r$0$in = $119;
     continue;
    }
   }
   if ((label|0) == 40) {
    $130 = ($94|0)==(0|0);
    do {
     if ($130) {
      $142 = 0;
     } else {
      $131 = (($94) + 12|0);
      $132 = HEAP32[$131>>2]|0;
      $133 = (($94) + 16|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($132|0)==($134|0);
      if ($135) {
       $136 = HEAP32[$94>>2]|0;
       $137 = (($136) + 36|0);
       $138 = HEAP32[$137>>2]|0;
       $139 = (FUNCTION_TABLE_ii[$138 & 1023]($94)|0);
       $140 = ($139|0)==(-1);
       if ($140) {
        HEAP32[$__b>>2] = 0;
        $142 = 0;
        break;
       } else {
        $$pre$i$i$i17 = HEAP32[$__b>>2]|0;
        $142 = $$pre$i$i$i17;
        break;
       }
      } else {
       $142 = $94;
      }
     }
    } while(0);
    $141 = ($142|0)==(0|0);
    $143 = ($$pre$i2$i$i21|0)==(0|0);
    do {
     if ($143) {
      label = 50;
     } else {
      $144 = (($$pre$i2$i$i21) + 12|0);
      $145 = HEAP32[$144>>2]|0;
      $146 = (($$pre$i2$i$i21) + 16|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = ($145|0)==($147|0);
      if ($148) {
       $149 = HEAP32[$$pre$i2$i$i21>>2]|0;
       $150 = (($149) + 36|0);
       $151 = HEAP32[$150>>2]|0;
       $152 = (FUNCTION_TABLE_ii[$151 & 1023]($$pre$i2$i$i21)|0);
       $153 = ($152|0)==(-1);
       if ($153) {
        HEAP32[$__e>>2] = 0;
        label = 50;
        break;
       }
      }
      if ($141) {
       $$02 = $__r$0;
       STACKTOP = sp;return ($$02|0);
      }
     }
    } while(0);
    if ((label|0) == 50) {
     if (!($141)) {
      $$02 = $__r$0;
      STACKTOP = sp;return ($$02|0);
     }
    }
    $154 = HEAP32[$__err>>2]|0;
    $155 = $154 | 2;
    HEAP32[$__err>>2] = $155;
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
   else if ((label|0) == 52) {
    STACKTOP = sp;return ($$02|0);
   }
  }
 }
 $48 = HEAP32[$__err>>2]|0;
 $49 = $48 | 4;
 HEAP32[$__err>>2] = $49;
 $$02 = 0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e,$__err,$__ct,$__n) {
 $__b = $__b|0;
 $__e = $__e|0;
 $__err = $__err|0;
 $__ct = $__ct|0;
 $__n = $__n|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i18 = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i24 = 0, $$0$i$i1$i$i9 = 0, $$0$i$i15 = 0, $$0$in = 0, $$02 = 0, $$pre$i$i$i = 0, $$pre$i$i$i20 = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i11 = 0, $$pre$i3$i$i26 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__r$0 = 0, $__r$0$in = 0, $or$cond = 0, $phitmp$i$i$i = 0, $phitmp$i$i$i21 = 0, $phitmp$i$i$i6 = 0, $phitmp$i4$i$i12 = 0, $tmp$i$i14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$__b>>2]|0;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $147 = 1;
  } else {
   $2 = (($0) + 12|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = (($0) + 16|0);
   $5 = HEAP32[$4>>2]|0;
   $6 = ($3|0)==($5|0);
   if ($6) {
    $7 = HEAP32[$0>>2]|0;
    $8 = (($7) + 36|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (FUNCTION_TABLE_ii[$9 & 1023]($0)|0);
    $$0$i$i$i$i = $10;
   } else {
    $11 = HEAP32[$3>>2]|0;
    $$0$i$i$i$i = $11;
   }
   $12 = ($$0$i$i$i$i|0)==(-1);
   if ($12) {
    HEAP32[$__b>>2] = 0;
    $147 = 1;
    break;
   } else {
    $$pre$i$i$i = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i = ($$pre$i$i$i|0)==(0|0);
    $147 = $phitmp$i$i$i;
    break;
   }
  }
 } while(0);
 $13 = HEAP32[$__e>>2]|0;
 $14 = ($13|0)==(0|0);
 do {
  if ($14) {
   label = 14;
  } else {
   $15 = (($13) + 12|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($13) + 16|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ($16|0)==($18|0);
   if ($19) {
    $20 = HEAP32[$13>>2]|0;
    $21 = (($20) + 36|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (FUNCTION_TABLE_ii[$22 & 1023]($13)|0);
    $$0$i$i1$i$i = $23;
   } else {
    $24 = HEAP32[$16>>2]|0;
    $$0$i$i1$i$i = $24;
   }
   $25 = ($$0$i$i1$i$i|0)==(-1);
   if ($25) {
    HEAP32[$__e>>2] = 0;
    label = 14;
    break;
   } else {
    if ($147) {
     $148 = $13;
     break;
    } else {
     label = 16;
     break;
    }
   }
  }
 } while(0);
 if ((label|0) == 14) {
  if ($147) {
   label = 16;
  } else {
   $148 = 0;
  }
 }
 if ((label|0) == 16) {
  $26 = HEAP32[$__err>>2]|0;
  $27 = $26 | 6;
  HEAP32[$__err>>2] = $27;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $28 = HEAP32[$__b>>2]|0;
 $29 = (($28) + 12|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = (($28) + 16|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($30|0)==($32|0);
 if ($33) {
  $34 = HEAP32[$28>>2]|0;
  $35 = (($34) + 36|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (FUNCTION_TABLE_ii[$36 & 1023]($28)|0);
  $$0$i$i = $37;
 } else {
  $38 = HEAP32[$30>>2]|0;
  $$0$i$i = $38;
 }
 $39 = HEAP32[$__ct>>2]|0;
 $40 = (($39) + 12|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (FUNCTION_TABLE_iiii[$41 & 1023]($__ct,2048,$$0$i$i)|0);
 if (!($42)) {
  $43 = HEAP32[$__err>>2]|0;
  $44 = $43 | 4;
  HEAP32[$__err>>2] = $44;
  $$02 = 0;
  STACKTOP = sp;return ($$02|0);
 }
 $45 = HEAP32[$__ct>>2]|0;
 $46 = (($45) + 52|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (FUNCTION_TABLE_iiii[$47 & 1023]($__ct,$$0$i$i,0)|0);
 $49 = $48 << 24 >> 24;
 $50 = HEAP32[$__b>>2]|0;
 $51 = (($50) + 12|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($50) + 16|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($52|0)==($54|0);
 if ($55) {
  $56 = HEAP32[$50>>2]|0;
  $57 = (($56) + 40|0);
  $58 = HEAP32[$57>>2]|0;
  (FUNCTION_TABLE_ii[$58 & 1023]($50)|0);
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 } else {
  $59 = (($52) + 4|0);
  HEAP32[$51>>2] = $59;
  $$0$in = $__n;$$pre$i3$i$i11 = $148;$74 = $148;$__r$0$in = $49;
 }
 while(1) {
  $__r$0 = (($__r$0$in) + -48)|0;
  $$0 = (($$0$in) + -1)|0;
  $60 = HEAP32[$__b>>2]|0;
  $61 = ($60|0)==(0|0);
  do {
   if ($61) {
    $86 = 1;
   } else {
    $62 = (($60) + 12|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = (($60) + 16|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($63|0)==($65|0);
    if ($66) {
     $67 = HEAP32[$60>>2]|0;
     $68 = (($67) + 36|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = (FUNCTION_TABLE_ii[$69 & 1023]($60)|0);
     $$0$i$i$i$i3 = $70;
    } else {
     $71 = HEAP32[$63>>2]|0;
     $$0$i$i$i$i3 = $71;
    }
    $72 = ($$0$i$i$i$i3|0)==(-1);
    if ($72) {
     HEAP32[$__b>>2] = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i$i$i5 = HEAP32[$__b>>2]|0;
     $phitmp$i$i$i6 = ($$pre$i$i$i5|0)==(0|0);
     $86 = $phitmp$i$i$i6;
     break;
    }
   }
  } while(0);
  $73 = ($74|0)==(0|0);
  do {
   if ($73) {
    $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = 0;$87 = 1;
   } else {
    $75 = (($74) + 12|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (($74) + 16|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($76|0)==($78|0);
    if ($79) {
     $80 = HEAP32[$74>>2]|0;
     $81 = (($80) + 36|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = (FUNCTION_TABLE_ii[$82 & 1023]($74)|0);
     $$0$i$i1$i$i9 = $83;
    } else {
     $84 = HEAP32[$76>>2]|0;
     $$0$i$i1$i$i9 = $84;
    }
    $85 = ($$0$i$i1$i$i9|0)==(-1);
    if ($85) {
     HEAP32[$__e>>2] = 0;
     $$pre$i3$i$i26 = 0;$149 = 0;$87 = 1;
     break;
    } else {
     $phitmp$i4$i$i12 = ($$pre$i3$i$i11|0)==(0|0);
     $$pre$i3$i$i26 = $$pre$i3$i$i11;$149 = $$pre$i3$i$i11;$87 = $phitmp$i4$i$i12;
     break;
    }
   }
  } while(0);
  $tmp$i$i14 = $86 ^ $87;
  $88 = ($$0|0)>(0);
  $or$cond = $tmp$i$i14 & $88;
  $89 = HEAP32[$__b>>2]|0;
  if (!($or$cond)) {
   break;
  }
  $90 = (($89) + 12|0);
  $91 = HEAP32[$90>>2]|0;
  $92 = (($89) + 16|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($91|0)==($93|0);
  if ($94) {
   $95 = HEAP32[$89>>2]|0;
   $96 = (($95) + 36|0);
   $97 = HEAP32[$96>>2]|0;
   $98 = (FUNCTION_TABLE_ii[$97 & 1023]($89)|0);
   $$0$i$i15 = $98;
  } else {
   $99 = HEAP32[$91>>2]|0;
   $$0$i$i15 = $99;
  }
  $100 = HEAP32[$__ct>>2]|0;
  $101 = (($100) + 12|0);
  $102 = HEAP32[$101>>2]|0;
  $103 = (FUNCTION_TABLE_iiii[$102 & 1023]($__ct,2048,$$0$i$i15)|0);
  if (!($103)) {
   $$02 = $__r$0;
   label = 63;
   break;
  }
  $104 = ($__r$0*10)|0;
  $105 = HEAP32[$__ct>>2]|0;
  $106 = (($105) + 52|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = (FUNCTION_TABLE_iiii[$107 & 1023]($__ct,$$0$i$i15,0)|0);
  $109 = $108 << 24 >> 24;
  $110 = (($109) + ($104))|0;
  $111 = HEAP32[$__b>>2]|0;
  $112 = (($111) + 12|0);
  $113 = HEAP32[$112>>2]|0;
  $114 = (($111) + 16|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = ($113|0)==($115|0);
  if ($116) {
   $117 = HEAP32[$111>>2]|0;
   $118 = (($117) + 40|0);
   $119 = HEAP32[$118>>2]|0;
   (FUNCTION_TABLE_ii[$119 & 1023]($111)|0);
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  } else {
   $120 = (($113) + 4|0);
   HEAP32[$112>>2] = $120;
   $$0$in = $$0;$$pre$i3$i$i11 = $$pre$i3$i$i26;$74 = $149;$__r$0$in = $110;
   continue;
  }
 }
 if ((label|0) == 63) {
  STACKTOP = sp;return ($$02|0);
 }
 $121 = ($89|0)==(0|0);
 do {
  if ($121) {
   $150 = 1;
  } else {
   $122 = (($89) + 12|0);
   $123 = HEAP32[$122>>2]|0;
   $124 = (($89) + 16|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($123|0)==($125|0);
   if ($126) {
    $127 = HEAP32[$89>>2]|0;
    $128 = (($127) + 36|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (FUNCTION_TABLE_ii[$129 & 1023]($89)|0);
    $$0$i$i$i$i18 = $130;
   } else {
    $131 = HEAP32[$123>>2]|0;
    $$0$i$i$i$i18 = $131;
   }
   $132 = ($$0$i$i$i$i18|0)==(-1);
   if ($132) {
    HEAP32[$__b>>2] = 0;
    $150 = 1;
    break;
   } else {
    $$pre$i$i$i20 = HEAP32[$__b>>2]|0;
    $phitmp$i$i$i21 = ($$pre$i$i$i20|0)==(0|0);
    $150 = $phitmp$i$i$i21;
    break;
   }
  }
 } while(0);
 $133 = ($$pre$i3$i$i26|0)==(0|0);
 do {
  if ($133) {
   label = 60;
  } else {
   $134 = (($$pre$i3$i$i26) + 12|0);
   $135 = HEAP32[$134>>2]|0;
   $136 = (($$pre$i3$i$i26) + 16|0);
   $137 = HEAP32[$136>>2]|0;
   $138 = ($135|0)==($137|0);
   if ($138) {
    $139 = HEAP32[$$pre$i3$i$i26>>2]|0;
    $140 = (($139) + 36|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = (FUNCTION_TABLE_ii[$141 & 1023]($$pre$i3$i$i26)|0);
    $$0$i$i1$i$i24 = $142;
   } else {
    $143 = HEAP32[$135>>2]|0;
    $$0$i$i1$i$i24 = $143;
   }
   $144 = ($$0$i$i1$i$i24|0)==(-1);
   if ($144) {
    HEAP32[$__e>>2] = 0;
    label = 60;
    break;
   }
   if ($150) {
    $$02 = $__r$0;
    STACKTOP = sp;return ($$02|0);
   }
  }
 } while(0);
 if ((label|0) == 60) {
  if (!($150)) {
   $$02 = $__r$0;
   STACKTOP = sp;return ($$02|0);
  }
 }
 $145 = HEAP32[$__err>>2]|0;
 $146 = $145 | 2;
 HEAP32[$__err>>2] = $146;
 $$02 = $__r$0;
 STACKTOP = sp;return ($$02|0);
}
function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(612|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $2 ? $4 : 0;
 $14 = (_realloc($13,$$)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $14;
   $23 = $14;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $14;
   $16 = ($$pr|0)==(0|0);
   if ($16) {
    $23 = $14;
   } else {
    $17 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($17|0,($$pr|0));
    $18 = __THREW__; __THREW__ = 0;
    $19 = $18&1;
    if ($19) {
     $20 = ___cxa_find_matching_catch(0|0)|0;
     $21 = tempRet0;
     ___clang_call_terminate($20);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $23 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 603;
 $22 = (($23) + ($12)|0);
 HEAP32[$__n>>2] = $22;
 $24 = HEAP32[$__b>>2]|0;
 $25 = (($24) + ($$)|0);
 HEAP32[$__e>>2] = $25;
 STACKTOP = sp;return;
}
function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(612|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 603;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep3 = 0, $scevgep4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $15 = 10;$16 = $5;$40 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $15 = $phitmp$i;$16 = $7;$40 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = ($__last|0)==($__first|0);
 if ($13) {
  STACKTOP = sp;return ($this|0);
 }
 $14 = (($15) - ($16))|0;
 $17 = ($14>>>0)<($12>>>0);
 if ($17) {
  $18 = (($16) + ($12))|0;
  $19 = (($18) - ($15))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$15,$19,$16,$16,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $21 = $$pre;
 } else {
  $21 = $40;
 }
 $20 = $21 & 1;
 $22 = ($20<<24>>24)==(0);
 if ($22) {
  $25 = (($this) + 1|0);
  $27 = $25;
 } else {
  $23 = (($this) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $27 = $24;
 }
 $26 = (($27) + ($16)|0);
 $28 = (($16) - ($0))|0;
 $scevgep = (($__last) + ($28)|0);
 $scevgep3 = $scevgep;
 $$01 = $__first;$__p$02 = $26;
 while(1) {
  $29 = HEAP8[$$01>>0]|0;
  HEAP8[$__p$02>>0] = $29;
  $30 = (($__p$02) + 1|0);
  $31 = (($$01) + 1|0);
  $32 = ($31|0)==($__last|0);
  if ($32) {
   break;
  } else {
   $$01 = $31;$__p$02 = $30;
  }
 }
 $scevgep4 = (($27) + ($scevgep3)|0);
 HEAP8[$scevgep4>>0] = 0;
 $33 = (($16) + ($12))|0;
 $34 = HEAP8[$this>>0]|0;
 $35 = $34 & 1;
 $36 = ($35<<24>>24)==(0);
 if ($36) {
  $38 = $33 << 1;
  $39 = $38&255;
  HEAP8[$this>>0] = $39;
  STACKTOP = sp;return ($this|0);
 } else {
  $37 = (($this) + 4|0);
  HEAP32[$37>>2] = $33;
  STACKTOP = sp;return ($this|0);
 }
 return (0)|0;
}
function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e) {
 $__b = $__b|0;
 $__n = $__n|0;
 $__e = $__e|0;
 var $$ = 0, $$pr = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__b) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)!=(612|0);
 $3 = HEAP32[$__e>>2]|0;
 $4 = HEAP32[$__b>>2]|0;
 $5 = $3;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = ($7>>>0)<(2147483647);
 $9 = $7 << 1;
 $$ = $8 ? $9 : -1;
 $10 = HEAP32[$__n>>2]|0;
 $11 = $10;
 $12 = (($11) - ($6))|0;
 $13 = $12 >> 2;
 if ($2) {
  $14 = $4;
 } else {
  $14 = 0;
 }
 $15 = (_realloc($14,$$)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  __ZSt17__throw_bad_allocv();
 }
 do {
  if ($2) {
   HEAP32[$__b>>2] = $15;
   $25 = $15;
  } else {
   $$pr = HEAP32[$__b>>2]|0;
   HEAP32[$__b>>2] = $15;
   $17 = ($$pr|0)==(0|0);
   if ($17) {
    $25 = $15;
   } else {
    $18 = HEAP32[$0>>2]|0;
    __THREW__ = 0;
    invoke_vi($18|0,($$pr|0));
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if ($20) {
     $21 = ___cxa_find_matching_catch(0|0)|0;
     $22 = tempRet0;
     ___clang_call_terminate($21);
     // unreachable;
    } else {
     $$pre = HEAP32[$__b>>2]|0;
     $25 = $$pre;
     break;
    }
   }
  }
 } while(0);
 HEAP32[$0>>2] = 603;
 $23 = $$ >>> 2;
 $24 = (($25) + ($13<<2)|0);
 HEAP32[$__n>>2] = $24;
 $26 = HEAP32[$__b>>2]|0;
 $27 = (($26) + ($23<<2)|0);
 HEAP32[$__e>>2] = $27;
 STACKTOP = sp;return;
}
function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this,$__first,$__last) {
 $this = $this|0;
 $__first = $__first|0;
 $__last = $__last|0;
 var $$01 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$02 = 0, $phitmp$i = 0, $scevgep = 0, $scevgep5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $__first;
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $4 = $1&255;
  $5 = $4 >>> 1;
  $16 = 1;$17 = $5;$46 = $1;
 } else {
  $6 = (($this) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = HEAP32[$this>>2]|0;
  $9 = $8 & -2;
  $phitmp$i = (($9) + -1)|0;
  $10 = $8&255;
  $16 = $phitmp$i;$17 = $7;$46 = $10;
 }
 $11 = $__last;
 $12 = (($11) - ($0))|0;
 $13 = $12 >> 2;
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return ($this|0);
 }
 $15 = (($16) - ($17))|0;
 $18 = ($15>>>0)<($13>>>0);
 if ($18) {
  $19 = (($17) + ($13))|0;
  $20 = (($19) - ($16))|0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$16,$20,$17,$17,0,0);
  $$pre = HEAP8[$this>>0]|0;
  $22 = $$pre;
 } else {
  $22 = $46;
 }
 $21 = $22 & 1;
 $23 = ($21<<24>>24)==(0);
 if ($23) {
  $26 = (($this) + 4|0);
  $28 = $26;
 } else {
  $24 = (($this) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $28 = $25;
 }
 $27 = (($28) + ($17<<2)|0);
 $29 = ($__first|0)==($__last|0);
 if ($29) {
  $__p$0$lcssa = $27;
 } else {
  $scevgep = (($__last) + -4|0);
  $30 = $scevgep;
  $31 = (($30) - ($0))|0;
  $32 = $31 >>> 2;
  $33 = (($17) + ($32))|0;
  $34 = (($33) + 1)|0;
  $$01 = $__first;$__p$02 = $27;
  while(1) {
   $35 = HEAP32[$$01>>2]|0;
   HEAP32[$__p$02>>2] = $35;
   $36 = (($__p$02) + 4|0);
   $37 = (($$01) + 4|0);
   $38 = ($37|0)==($__last|0);
   if ($38) {
    break;
   } else {
    $$01 = $37;$__p$02 = $36;
   }
  }
  $scevgep5 = (($28) + ($34<<2)|0);
  $__p$0$lcssa = $scevgep5;
 }
 HEAP32[$__p$0$lcssa>>2] = 0;
 $39 = (($17) + ($13))|0;
 $40 = HEAP8[$this>>0]|0;
 $41 = $40 & 1;
 $42 = ($41<<24>>24)==(0);
 if ($42) {
  $44 = $39 << 1;
  $45 = $44&255;
  HEAP8[$this>>0] = $45;
  STACKTOP = sp;return ($this|0);
 } else {
  $43 = (($this) + 4|0);
  HEAP32[$43>>2] = $39;
  STACKTOP = sp;return ($this|0);
 }
 return (0)|0;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = 0;
 $0 = (($this) + 4|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 8|0);
 HEAP32[$1>>2] = 0;
 $2 = (($this) + 128|0);
 HEAP8[$2>>0] = 0;
 $3 = ($__n|0)==(0);
 if ($3) {
  STACKTOP = sp;return;
 }
 __THREW__ = 0;
 invoke_vii(699,($this|0),($__n|0));
 $4 = __THREW__; __THREW__ = 0;
 $5 = $4&1;
 if ($5) {
  $6 = ___cxa_find_matching_catch()|0;
  $7 = tempRet0;
  __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this);
  ___resumeException($6|0);
  // unreachable;
 }
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10808)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10848)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12416)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12408)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12480)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12488)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12544)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12552)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12560)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12568)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(10920)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11040)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11104)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11200)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11792)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11856)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11920)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11984)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12024)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12104)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12160)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12208)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11312)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11464)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11696)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(11728)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12248)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this,$f) {
 $this = $this|0;
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__ZNSt3__16locale2id5__getEv(12288)|0);
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$0);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  STACKTOP = sp;return;
 }
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($0|0);
 if (!($4)) {
  $__new_last2$i$i = $0;
  $scevgep$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i;
  $6 = (($5) - ($__new_last2$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i;
 }
 $9 = (($this) + 16|0);
 $10 = ($9|0)==($0|0);
 if ($10) {
  $11 = (($this) + 128|0);
  HEAP8[$11>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this,$__sz) {
 $this = $this|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i = 0, $scevgep$i$i = 0, $scevgep4$i$i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$this>>2]|0;
 $3 = $1;
 $4 = $2;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 $7 = ($6>>>0)<($__sz>>>0);
 if ($7) {
  $8 = (($__sz) - ($6))|0;
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$8);
  STACKTOP = sp;return;
 }
 $9 = ($6>>>0)>($__sz>>>0);
 if (!($9)) {
  STACKTOP = sp;return;
 }
 $10 = (($2) + ($__sz<<2)|0);
 $11 = ($1|0)==($10|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $__new_last2$i$i = $10;
 $scevgep$i$i = (($1) + -4|0);
 $12 = $scevgep$i$i;
 $13 = (($12) - ($__new_last2$i$i))|0;
 $14 = $13 >>> 2;
 $15 = $14 ^ -1;
 $scevgep4$i$i = (($1) + ($15<<2)|0);
 HEAP32[$0>>2] = $scevgep4$i$i;
 STACKTOP = sp;return;
}
function __ZNKSt3__16locale5__imp9has_facetEl($this,$id) {
 $this = $this|0;
 $id = $id|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)>($id>>>0);
 if (!($8)) {
  $12 = 0;
  STACKTOP = sp;return ($12|0);
 }
 $9 = (($3) + ($id<<2)|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 $12 = $11;
 STACKTOP = sp;return ($12|0);
}
function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp|0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($__vp) + 4|0);
 $$field = HEAPU8[$0>>0]|(HEAPU8[$0+1>>0]<<8)|(HEAPU8[$0+2>>0]<<16)|(HEAPU8[$0+3>>0]<<24);
 $$index1 = (($0) + 4|0);
 $$field2 = HEAPU8[$$index1>>0]|(HEAPU8[$$index1+1>>0]<<8)|(HEAPU8[$$index1+2>>0]<<16)|(HEAPU8[$$index1+3>>0]<<24);
 $1 = HEAP32[$__vp>>2]|0;
 $2 = $$field2 >> 1;
 $3 = (($1) + ($2)|0);
 $4 = $$field2 & 1;
 $5 = ($4|0)==(0);
 if ($5) {
  $9 = $$field;
  $10 = $9;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 } else {
  $6 = HEAP32[$3>>2]|0;
  $7 = (($6) + ($$field)|0);
  $8 = HEAP32[$7>>2]|0;
  $10 = $8;
  FUNCTION_TABLE_vi[$10 & 1023]($3);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = $frm_end;
 $12 = HEAP32[$frm_nxt>>2]|0;
 $13 = ($12>>>0)<($frm_end>>>0);
 if (!($13)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $14 = $to_end;
 $16 = $12;
 L10: while(1) {
  $15 = HEAP16[$16>>1]|0;
  $17 = $15&65535;
  $18 = ($17>>>0)>($Maxcode>>>0);
  if ($18) {
   $$0 = 2;
   label = 26;
   break;
  }
  $19 = ($15&65535)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($14) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $24 = $15&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($15&65535)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($14) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $31 = $17 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $17 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($15&65535)<(55296);
    if ($40) {
     $41 = HEAP32[$to_nxt>>2]|0;
     $42 = $41;
     $43 = (($14) - ($42))|0;
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $45 = $17 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $17 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $17 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    }
    $60 = ($15&65535)<(56320);
    if (!($60)) {
     $112 = ($15&65535)<(57344);
     if ($112) {
      $$0 = 2;
      label = 26;
      break L10;
     }
     $113 = HEAP32[$to_nxt>>2]|0;
     $114 = $113;
     $115 = (($14) - ($114))|0;
     $116 = ($115|0)<(3);
     if ($116) {
      $$0 = 1;
      label = 26;
      break L10;
     }
     $117 = $17 >>> 12;
     $118 = $117 | 224;
     $119 = $118&255;
     $120 = (($113) + 1|0);
     HEAP32[$to_nxt>>2] = $120;
     HEAP8[$113>>0] = $119;
     $121 = $17 >>> 6;
     $122 = $121 & 63;
     $123 = $122 | 128;
     $124 = $123&255;
     $125 = HEAP32[$to_nxt>>2]|0;
     $126 = (($125) + 1|0);
     HEAP32[$to_nxt>>2] = $126;
     HEAP8[$125>>0] = $124;
     $127 = $17 & 63;
     $128 = $127 | 128;
     $129 = $128&255;
     $130 = HEAP32[$to_nxt>>2]|0;
     $131 = (($130) + 1|0);
     HEAP32[$to_nxt>>2] = $131;
     HEAP8[$130>>0] = $129;
     break;
    }
    $61 = $16;
    $62 = (($11) - ($61))|0;
    $63 = ($62|0)<(4);
    if ($63) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $64 = (($16) + 2|0);
    $65 = HEAP16[$64>>1]|0;
    $66 = $65&65535;
    $67 = $66 & 64512;
    $68 = ($67|0)==(56320);
    if (!($68)) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    $69 = HEAP32[$to_nxt>>2]|0;
    $70 = $69;
    $71 = (($14) - ($70))|0;
    $72 = ($71|0)<(4);
    if ($72) {
     $$0 = 1;
     label = 26;
     break L10;
    }
    $73 = $17 & 960;
    $74 = $73 << 10;
    $75 = (($74) + 65536)|0;
    $76 = $17 << 10;
    $77 = $76 & 64512;
    $78 = $75 | $77;
    $79 = $66 & 1023;
    $80 = $78 | $79;
    $81 = ($80>>>0)>($Maxcode>>>0);
    if ($81) {
     $$0 = 2;
     label = 26;
     break L10;
    }
    HEAP32[$frm_nxt>>2] = $64;
    $82 = $73 >>> 6;
    $83 = (($82) + 1)|0;
    $84 = $83 >>> 2;
    $85 = $84 | 240;
    $86 = $85&255;
    $87 = HEAP32[$to_nxt>>2]|0;
    $88 = (($87) + 1|0);
    HEAP32[$to_nxt>>2] = $88;
    HEAP8[$87>>0] = $86;
    $89 = $83 << 4;
    $90 = $89 & 48;
    $91 = $17 >>> 2;
    $92 = $91 & 15;
    $93 = $92 | $90;
    $94 = $93 | 128;
    $95 = $94&255;
    $96 = HEAP32[$to_nxt>>2]|0;
    $97 = (($96) + 1|0);
    HEAP32[$to_nxt>>2] = $97;
    HEAP8[$96>>0] = $95;
    $98 = $17 << 4;
    $99 = $98 & 48;
    $100 = $66 >>> 6;
    $101 = $100 & 15;
    $102 = $99 | $101;
    $103 = $102 | 128;
    $104 = $103&255;
    $105 = HEAP32[$to_nxt>>2]|0;
    $106 = (($105) + 1|0);
    HEAP32[$to_nxt>>2] = $106;
    HEAP8[$105>>0] = $104;
    $107 = $66 & 63;
    $108 = $107 | 128;
    $109 = $108&255;
    $110 = HEAP32[$to_nxt>>2]|0;
    $111 = (($110) + 1|0);
    HEAP32[$to_nxt>>2] = $111;
    HEAP8[$110>>0] = $109;
   }
  } while(0);
  $132 = HEAP32[$frm_nxt>>2]|0;
  $133 = (($132) + 2|0);
  HEAP32[$frm_nxt>>2] = $133;
  $134 = ($133>>>0)<($frm_end>>>0);
  if ($134) {
   $16 = $133;
  } else {
   $$0 = 0;
   label = 26;
   break;
  }
 }
 if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $18 = $to_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $20 = $$pre1;$22 = $16;
   L10: while(1) {
    $19 = ($20>>>0)<($to_end>>>0);
    if (!($19)) {
     $135 = $22;
     break L8;
    }
    $21 = HEAP8[$22>>0]|0;
    $23 = $21&255;
    $24 = ($23>>>0)>($Maxcode>>>0);
    if ($24) {
     $$0 = 2;
     label = 41;
     break;
    }
    $25 = ($21<<24>>24)>(-1);
    do {
     if ($25) {
      $26 = $21&255;
      HEAP16[$20>>1] = $26;
      $27 = (($22) + 1|0);
      HEAP32[$frm_nxt>>2] = $27;
     } else {
      $28 = ($21&255)<(194);
      if ($28) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $29 = ($21&255)<(224);
      if ($29) {
       $30 = $22;
       $31 = (($17) - ($30))|0;
       $32 = ($31|0)<(2);
       if ($32) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $33 = (($22) + 1|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = $34&255;
       $36 = $35 & 192;
       $37 = ($36|0)==(128);
       if (!($37)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $38 = $23 << 6;
       $39 = $38 & 1984;
       $40 = $35 & 63;
       $41 = $40 | $39;
       $42 = ($41>>>0)>($Maxcode>>>0);
       if ($42) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $43 = $41&65535;
       HEAP16[$20>>1] = $43;
       $44 = (($22) + 2|0);
       HEAP32[$frm_nxt>>2] = $44;
       break;
      }
      $45 = ($21&255)<(240);
      if ($45) {
       $46 = $22;
       $47 = (($17) - ($46))|0;
       $48 = ($47|0)<(3);
       if ($48) {
        $$0 = 1;
        label = 41;
        break L10;
       }
       $49 = (($22) + 1|0);
       $50 = HEAP8[$49>>0]|0;
       $51 = (($22) + 2|0);
       $52 = HEAP8[$51>>0]|0;
       if ((($23|0) == 237)) {
        $55 = $50 & -32;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else if ((($23|0) == 224)) {
        $53 = $50 & -32;
        $54 = ($53<<24>>24)==(-96);
        if (!($54)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       } else {
        $57 = $50 & -64;
        $58 = ($57<<24>>24)==(-128);
        if (!($58)) {
         $$0 = 2;
         label = 41;
         break L10;
        }
       }
       $59 = $52&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $62 = $23 << 12;
       $63 = $50&255;
       $64 = $63 << 6;
       $65 = $64 & 4032;
       $66 = $65 | $62;
       $67 = $59 & 63;
       $68 = $66 | $67;
       $69 = $68 & 65535;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $$0 = 2;
        label = 41;
        break L10;
       }
       $71 = $68&65535;
       HEAP16[$20>>1] = $71;
       $72 = (($22) + 3|0);
       HEAP32[$frm_nxt>>2] = $72;
       break;
      }
      $73 = ($21&255)<(245);
      if (!($73)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $74 = $22;
      $75 = (($17) - ($74))|0;
      $76 = ($75|0)<(4);
      if ($76) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $77 = (($22) + 1|0);
      $78 = HEAP8[$77>>0]|0;
      $79 = (($22) + 2|0);
      $80 = HEAP8[$79>>0]|0;
      $81 = (($22) + 3|0);
      $82 = HEAP8[$81>>0]|0;
      if ((($23|0) == 244)) {
       $84 = $78 & -16;
       $85 = ($84<<24>>24)==(-128);
       if (!($85)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else if ((($23|0) == 240)) {
       $$off = (($78) + 112)<<24>>24;
       $83 = ($$off&255)<(48);
       if (!($83)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      } else {
       $86 = $78 & -64;
       $87 = ($86<<24>>24)==(-128);
       if (!($87)) {
        $$0 = 2;
        label = 41;
        break L10;
       }
      }
      $88 = $80&255;
      $89 = $88 & 192;
      $90 = ($89|0)==(128);
      if (!($90)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $91 = $82&255;
      $92 = $91 & 192;
      $93 = ($92|0)==(128);
      if (!($93)) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $94 = $20;
      $95 = (($18) - ($94))|0;
      $96 = ($95|0)<(4);
      if ($96) {
       $$0 = 1;
       label = 41;
       break L10;
      }
      $97 = $23 & 7;
      $98 = $97 << 18;
      $99 = $78&255;
      $100 = $99 << 12;
      $101 = $100 & 258048;
      $102 = $101 | $98;
      $103 = $88 << 6;
      $104 = $103 & 4032;
      $105 = $102 | $104;
      $106 = $91 & 63;
      $107 = $105 | $106;
      $108 = ($107>>>0)>($Maxcode>>>0);
      if ($108) {
       $$0 = 2;
       label = 41;
       break L10;
      }
      $109 = $97 << 2;
      $110 = $99 >>> 4;
      $111 = $110 & 3;
      $112 = $111 | $109;
      $113 = $112 << 6;
      $114 = (($113) + 16320)|0;
      $115 = $99 << 2;
      $116 = $115 & 60;
      $117 = $88 >>> 4;
      $118 = $117 & 3;
      $119 = $116 | $118;
      $120 = $119 | $114;
      $121 = $120 | 55296;
      $122 = $121&65535;
      HEAP16[$20>>1] = $122;
      $123 = $103 & 960;
      $124 = $106 | $123;
      $125 = $124 | 56320;
      $126 = $125&65535;
      $127 = (($20) + 2|0);
      HEAP32[$to_nxt>>2] = $127;
      HEAP16[$127>>1] = $126;
      $128 = HEAP32[$frm_nxt>>2]|0;
      $129 = (($128) + 4|0);
      HEAP32[$frm_nxt>>2] = $129;
     }
    } while(0);
    $130 = HEAP32[$to_nxt>>2]|0;
    $131 = (($130) + 2|0);
    HEAP32[$to_nxt>>2] = $131;
    $132 = HEAP32[$frm_nxt>>2]|0;
    $133 = ($132>>>0)<($frm_end>>>0);
    if ($133) {
     $20 = $131;$22 = $132;
    } else {
     $135 = $132;
     break L8;
    }
   }
   if ((label|0) == 41) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $135 = $16;
  }
 } while(0);
 $134 = ($135>>>0)<($frm_end>>>0);
 $136 = $134&1;
 $$0 = $136;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond15 = $15 & $16;
 L7: do {
  if ($or$cond15) {
   $17 = $frm_end;
   $frm_nxt$117 = $frm_nxt$1$ph;$nchar16_t$016 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$117>>0]|0;
    $19 = $18&255;
    $20 = ($19>>>0)>($Maxcode>>>0);
    if ($20) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     break L7;
    }
    $21 = ($18<<24>>24)>(-1);
    do {
     if ($21) {
      $22 = (($frm_nxt$117) + 1|0);
      $frm_nxt$2 = $22;$nchar16_t$1 = $nchar16_t$016;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$117;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $28 = (($frm_nxt$117) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $38 = (($frm_nxt$117) + 2|0);
       $frm_nxt$2 = $38;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$117;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $43 = (($frm_nxt$117) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$117) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$117;
        break L7;
       }
       $71 = (($frm_nxt$117) + 3|0);
       $frm_nxt$2 = $71;$nchar16_t$1 = $nchar16_t$016;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $73 = $frm_nxt$117;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      $76 = (($mx) - ($nchar16_t$016))|0;
      $77 = ($76>>>0)<(2);
      $or$cond2 = $75 | $77;
      if ($or$cond2) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $78 = (($frm_nxt$117) + 1|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$117) + 2|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = (($frm_nxt$117) + 3|0);
      $83 = HEAP8[$82>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($79) + 112)<<24>>24;
       $84 = ($$off&255)<(48);
       if (!($84)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $87 = $79 & -16;
       $88 = ($87<<24>>24)==(-128);
       if (!($88)) {
        label = 35;
        break L9;
       }
      } else {
       $91 = $79 & -64;
       $92 = ($91<<24>>24)==(-128);
       if (!($92)) {
        label = 37;
        break L9;
       }
      }
      $95 = $81&255;
      $96 = $95 & 192;
      $97 = ($96|0)==(128);
      if (!($97)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $98 = $83&255;
      $99 = $98 & 192;
      $100 = ($99|0)==(128);
      if (!($100)) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $101 = $19 << 18;
      $102 = $101 & 1835008;
      $103 = $79&255;
      $104 = $103 << 12;
      $105 = $104 & 258048;
      $106 = $105 | $102;
      $107 = $95 << 6;
      $108 = $107 & 4032;
      $109 = $106 | $108;
      $110 = $98 & 63;
      $111 = $109 | $110;
      $112 = ($111>>>0)>($Maxcode>>>0);
      if ($112) {
       $frm_nxt$1$lcssa = $frm_nxt$117;
       break L7;
      }
      $113 = (($nchar16_t$016) + 1)|0;
      $114 = (($frm_nxt$117) + 4|0);
      $frm_nxt$2 = $114;$nchar16_t$1 = $113;
     }
    } while(0);
    $115 = (($nchar16_t$1) + 1)|0;
    $116 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $117 = ($115>>>0)<($mx>>>0);
    $or$cond = $116 & $117;
    if ($or$cond) {
     $frm_nxt$117 = $frm_nxt$2;$nchar16_t$016 = $115;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $85 = $frm;
    $86 = (($73) - ($85))|0;
    $$0 = $86;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $89 = $frm;
    $90 = (($73) - ($89))|0;
    $$0 = $90;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $93 = $frm;
    $94 = (($73) - ($93))|0;
    $$0 = $94;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $118 = $frm_nxt$1$lcssa;
 $119 = $frm;
 $120 = (($118) - ($119))|0;
 $$0 = $120;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 2;
 $1 = ($0|0)==(0);
 do {
  if (!($1)) {
   $2 = $to_end;
   $3 = $to;
   $4 = (($2) - ($3))|0;
   $5 = ($4|0)<(3);
   if ($5) {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   } else {
    $6 = (($to) + 1|0);
    HEAP32[$to_nxt>>2] = $6;
    HEAP8[$to>>0] = -17;
    $7 = HEAP32[$to_nxt>>2]|0;
    $8 = (($7) + 1|0);
    HEAP32[$to_nxt>>2] = $8;
    HEAP8[$7>>0] = -69;
    $9 = HEAP32[$to_nxt>>2]|0;
    $10 = (($9) + 1|0);
    HEAP32[$to_nxt>>2] = $10;
    HEAP8[$9>>0] = -65;
    break;
   }
  }
 } while(0);
 $11 = HEAP32[$frm_nxt>>2]|0;
 $12 = ($11>>>0)<($frm_end>>>0);
 if (!($12)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = $to_end;
 $15 = $11;
 L10: while(1) {
  $14 = HEAP32[$15>>2]|0;
  $16 = $14 & -2048;
  $17 = ($16|0)==(55296);
  $18 = ($14>>>0)>($Maxcode>>>0);
  $or$cond = $17 | $18;
  if ($or$cond) {
   $$0 = 2;
   label = 19;
   break;
  }
  $19 = ($14>>>0)<(128);
  do {
   if ($19) {
    $20 = HEAP32[$to_nxt>>2]|0;
    $21 = $20;
    $22 = (($13) - ($21))|0;
    $23 = ($22|0)<(1);
    if ($23) {
     $$0 = 1;
     label = 19;
     break L10;
    }
    $24 = $14&255;
    $25 = (($20) + 1|0);
    HEAP32[$to_nxt>>2] = $25;
    HEAP8[$20>>0] = $24;
   } else {
    $26 = ($14>>>0)<(2048);
    if ($26) {
     $27 = HEAP32[$to_nxt>>2]|0;
     $28 = $27;
     $29 = (($13) - ($28))|0;
     $30 = ($29|0)<(2);
     if ($30) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $31 = $14 >>> 6;
     $32 = $31 | 192;
     $33 = $32&255;
     $34 = (($27) + 1|0);
     HEAP32[$to_nxt>>2] = $34;
     HEAP8[$27>>0] = $33;
     $35 = $14 & 63;
     $36 = $35 | 128;
     $37 = $36&255;
     $38 = HEAP32[$to_nxt>>2]|0;
     $39 = (($38) + 1|0);
     HEAP32[$to_nxt>>2] = $39;
     HEAP8[$38>>0] = $37;
     break;
    }
    $40 = ($14>>>0)<(65536);
    $41 = HEAP32[$to_nxt>>2]|0;
    $42 = $41;
    $43 = (($13) - ($42))|0;
    if ($40) {
     $44 = ($43|0)<(3);
     if ($44) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $45 = $14 >>> 12;
     $46 = $45 | 224;
     $47 = $46&255;
     $48 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $48;
     HEAP8[$41>>0] = $47;
     $49 = $14 >>> 6;
     $50 = $49 & 63;
     $51 = $50 | 128;
     $52 = $51&255;
     $53 = HEAP32[$to_nxt>>2]|0;
     $54 = (($53) + 1|0);
     HEAP32[$to_nxt>>2] = $54;
     HEAP8[$53>>0] = $52;
     $55 = $14 & 63;
     $56 = $55 | 128;
     $57 = $56&255;
     $58 = HEAP32[$to_nxt>>2]|0;
     $59 = (($58) + 1|0);
     HEAP32[$to_nxt>>2] = $59;
     HEAP8[$58>>0] = $57;
     break;
    } else {
     $60 = ($43|0)<(4);
     if ($60) {
      $$0 = 1;
      label = 19;
      break L10;
     }
     $61 = $14 >>> 18;
     $62 = $61 | 240;
     $63 = $62&255;
     $64 = (($41) + 1|0);
     HEAP32[$to_nxt>>2] = $64;
     HEAP8[$41>>0] = $63;
     $65 = $14 >>> 12;
     $66 = $65 & 63;
     $67 = $66 | 128;
     $68 = $67&255;
     $69 = HEAP32[$to_nxt>>2]|0;
     $70 = (($69) + 1|0);
     HEAP32[$to_nxt>>2] = $70;
     HEAP8[$69>>0] = $68;
     $71 = $14 >>> 6;
     $72 = $71 & 63;
     $73 = $72 | 128;
     $74 = $73&255;
     $75 = HEAP32[$to_nxt>>2]|0;
     $76 = (($75) + 1|0);
     HEAP32[$to_nxt>>2] = $76;
     HEAP8[$75>>0] = $74;
     $77 = $14 & 63;
     $78 = $77 | 128;
     $79 = $78&255;
     $80 = HEAP32[$to_nxt>>2]|0;
     $81 = (($80) + 1|0);
     HEAP32[$to_nxt>>2] = $81;
     HEAP8[$80>>0] = $79;
     break;
    }
   }
  } while(0);
  $82 = HEAP32[$frm_nxt>>2]|0;
  $83 = (($82) + 4|0);
  HEAP32[$frm_nxt>>2] = $83;
  $84 = ($83>>>0)<($frm_end>>>0);
  if ($84) {
   $15 = $83;
  } else {
   $$0 = 0;
   label = 19;
   break;
  }
 }
 if ((label|0) == 19) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $frm_nxt = $frm_nxt|0;
 $to = $to|0;
 $to_end = $to_end|0;
 $to_nxt = $to_nxt|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$off = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$frm_nxt>>2] = $frm;
 HEAP32[$to_nxt>>2] = $to;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 $$pre = HEAP32[$frm_nxt>>2]|0;
 if ($1) {
  $16 = $$pre;
 } else {
  $2 = $frm_end;
  $3 = $$pre;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$$pre>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($$pre) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($$pre) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     if ($13) {
      $14 = (($$pre) + 3|0);
      HEAP32[$frm_nxt>>2] = $14;
      $16 = $14;
     } else {
      $16 = $$pre;
     }
    } else {
     $16 = $$pre;
    }
   } else {
    $16 = $$pre;
   }
  } else {
   $16 = $$pre;
  }
 }
 $15 = ($16>>>0)<($frm_end>>>0);
 L8: do {
  if ($15) {
   $17 = $frm_end;
   $$pre1 = HEAP32[$to_nxt>>2]|0;
   $19 = $$pre1;$21 = $16;
   while(1) {
    $18 = ($19>>>0)<($to_end>>>0);
    if (!($18)) {
     $108 = $21;
     label = 39;
     break L8;
    }
    $20 = HEAP8[$21>>0]|0;
    $22 = $20&255;
    $23 = ($20<<24>>24)>(-1);
    do {
     if ($23) {
      $24 = ($22>>>0)>($Maxcode>>>0);
      if ($24) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $22;
      $25 = (($21) + 1|0);
      HEAP32[$frm_nxt>>2] = $25;
     } else {
      $26 = ($20&255)<(194);
      if ($26) {
       $$0 = 2;
       break L8;
      }
      $27 = ($20&255)<(224);
      if ($27) {
       $28 = $21;
       $29 = (($17) - ($28))|0;
       $30 = ($29|0)<(2);
       if ($30) {
        $$0 = 1;
        break L8;
       }
       $31 = (($21) + 1|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32&255;
       $34 = $33 & 192;
       $35 = ($34|0)==(128);
       if (!($35)) {
        $$0 = 2;
        break L8;
       }
       $36 = $22 << 6;
       $37 = $36 & 1984;
       $38 = $33 & 63;
       $39 = $38 | $37;
       $40 = ($39>>>0)>($Maxcode>>>0);
       if ($40) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $39;
       $41 = (($21) + 2|0);
       HEAP32[$frm_nxt>>2] = $41;
       break;
      }
      $42 = ($20&255)<(240);
      if ($42) {
       $43 = $21;
       $44 = (($17) - ($43))|0;
       $45 = ($44|0)<(3);
       if ($45) {
        $$0 = 1;
        break L8;
       }
       $46 = (($21) + 1|0);
       $47 = HEAP8[$46>>0]|0;
       $48 = (($21) + 2|0);
       $49 = HEAP8[$48>>0]|0;
       if ((($22|0) == 224)) {
        $50 = $47 & -32;
        $51 = ($50<<24>>24)==(-96);
        if (!($51)) {
         $$0 = 2;
         break L8;
        }
       } else if ((($22|0) == 237)) {
        $52 = $47 & -32;
        $53 = ($52<<24>>24)==(-128);
        if (!($53)) {
         $$0 = 2;
         break L8;
        }
       } else {
        $54 = $47 & -64;
        $55 = ($54<<24>>24)==(-128);
        if (!($55)) {
         $$0 = 2;
         break L8;
        }
       }
       $56 = $49&255;
       $57 = $56 & 192;
       $58 = ($57|0)==(128);
       if (!($58)) {
        $$0 = 2;
        break L8;
       }
       $59 = $22 << 12;
       $60 = $59 & 61440;
       $61 = $47&255;
       $62 = $61 << 6;
       $63 = $62 & 4032;
       $64 = $63 | $60;
       $65 = $56 & 63;
       $66 = $64 | $65;
       $67 = ($66>>>0)>($Maxcode>>>0);
       if ($67) {
        $$0 = 2;
        break L8;
       }
       HEAP32[$19>>2] = $66;
       $68 = (($21) + 3|0);
       HEAP32[$frm_nxt>>2] = $68;
       break;
      }
      $69 = ($20&255)<(245);
      if (!($69)) {
       $$0 = 2;
       break L8;
      }
      $70 = $21;
      $71 = (($17) - ($70))|0;
      $72 = ($71|0)<(4);
      if ($72) {
       $$0 = 1;
       break L8;
      }
      $73 = (($21) + 1|0);
      $74 = HEAP8[$73>>0]|0;
      $75 = (($21) + 2|0);
      $76 = HEAP8[$75>>0]|0;
      $77 = (($21) + 3|0);
      $78 = HEAP8[$77>>0]|0;
      if ((($22|0) == 240)) {
       $$off = (($74) + 112)<<24>>24;
       $79 = ($$off&255)<(48);
       if (!($79)) {
        $$0 = 2;
        break L8;
       }
      } else if ((($22|0) == 244)) {
       $80 = $74 & -16;
       $81 = ($80<<24>>24)==(-128);
       if (!($81)) {
        $$0 = 2;
        break L8;
       }
      } else {
       $82 = $74 & -64;
       $83 = ($82<<24>>24)==(-128);
       if (!($83)) {
        $$0 = 2;
        break L8;
       }
      }
      $84 = $76&255;
      $85 = $84 & 192;
      $86 = ($85|0)==(128);
      if (!($86)) {
       $$0 = 2;
       break L8;
      }
      $87 = $78&255;
      $88 = $87 & 192;
      $89 = ($88|0)==(128);
      if (!($89)) {
       $$0 = 2;
       break L8;
      }
      $90 = $22 << 18;
      $91 = $90 & 1835008;
      $92 = $74&255;
      $93 = $92 << 12;
      $94 = $93 & 258048;
      $95 = $94 | $91;
      $96 = $84 << 6;
      $97 = $96 & 4032;
      $98 = $95 | $97;
      $99 = $87 & 63;
      $100 = $98 | $99;
      $101 = ($100>>>0)>($Maxcode>>>0);
      if ($101) {
       $$0 = 2;
       break L8;
      }
      HEAP32[$19>>2] = $100;
      $102 = (($21) + 4|0);
      HEAP32[$frm_nxt>>2] = $102;
     }
    } while(0);
    $103 = HEAP32[$to_nxt>>2]|0;
    $104 = (($103) + 4|0);
    HEAP32[$to_nxt>>2] = $104;
    $105 = HEAP32[$frm_nxt>>2]|0;
    $106 = ($105>>>0)<($frm_end>>>0);
    if ($106) {
     $19 = $104;$21 = $105;
    } else {
     $108 = $105;
     label = 39;
     break;
    }
   }
  } else {
   $108 = $16;
   label = 39;
  }
 } while(0);
 if ((label|0) == 39) {
  $107 = ($108>>>0)<($frm_end>>>0);
  $109 = $107&1;
  $$0 = $109;
 }
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm,$frm_end,$mx,$Maxcode,$mode) {
 $frm = $frm|0;
 $frm_end = $frm_end|0;
 $mx = $mx|0;
 $Maxcode = $Maxcode|0;
 $mode = $mode|0;
 var $$0 = 0, $$frm = 0, $$off = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, $or$cond = 0, $or$cond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $mode & 4;
 $1 = ($0|0)==(0);
 if ($1) {
  $frm_nxt$1$ph = $frm;
 } else {
  $2 = $frm_end;
  $3 = $frm;
  $4 = (($2) - ($3))|0;
  $5 = ($4|0)>(2);
  if ($5) {
   $6 = HEAP8[$frm>>0]|0;
   $7 = ($6<<24>>24)==(-17);
   if ($7) {
    $8 = (($frm) + 1|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(-69);
    if ($10) {
     $11 = (($frm) + 2|0);
     $12 = HEAP8[$11>>0]|0;
     $13 = ($12<<24>>24)==(-65);
     $14 = (($frm) + 3|0);
     $$frm = $13 ? $14 : $frm;
     $frm_nxt$1$ph = $$frm;
    } else {
     $frm_nxt$1$ph = $frm;
    }
   } else {
    $frm_nxt$1$ph = $frm;
   }
  } else {
   $frm_nxt$1$ph = $frm;
  }
 }
 $15 = ($frm_nxt$1$ph>>>0)<($frm_end>>>0);
 $16 = ($mx|0)!=(0);
 $or$cond13 = $15 & $16;
 L7: do {
  if ($or$cond13) {
   $17 = $frm_end;
   $frm_nxt$115 = $frm_nxt$1$ph;$nchar32_t$014 = 0;
   L9: while(1) {
    $18 = HEAP8[$frm_nxt$115>>0]|0;
    $19 = $18&255;
    $20 = ($18<<24>>24)>(-1);
    do {
     if ($20) {
      $21 = ($19>>>0)>($Maxcode>>>0);
      if ($21) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $22 = (($frm_nxt$115) + 1|0);
      $frm_nxt$2 = $22;
     } else {
      $23 = ($18&255)<(194);
      if ($23) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $24 = ($18&255)<(224);
      if ($24) {
       $25 = $frm_nxt$115;
       $26 = (($17) - ($25))|0;
       $27 = ($26|0)<(2);
       if ($27) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $28 = (($frm_nxt$115) + 1|0);
       $29 = HEAP8[$28>>0]|0;
       $30 = $29&255;
       $31 = $30 & 192;
       $32 = ($31|0)==(128);
       if (!($32)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $33 = $19 << 6;
       $34 = $33 & 1984;
       $35 = $30 & 63;
       $36 = $35 | $34;
       $37 = ($36>>>0)>($Maxcode>>>0);
       if ($37) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $38 = (($frm_nxt$115) + 2|0);
       $frm_nxt$2 = $38;
       break;
      }
      $39 = ($18&255)<(240);
      if ($39) {
       $40 = $frm_nxt$115;
       $41 = (($17) - ($40))|0;
       $42 = ($41|0)<(3);
       if ($42) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $43 = (($frm_nxt$115) + 1|0);
       $44 = HEAP8[$43>>0]|0;
       $45 = (($frm_nxt$115) + 2|0);
       $46 = HEAP8[$45>>0]|0;
       if ((($19|0) == 237)) {
        $51 = $44 & -32;
        $52 = ($51<<24>>24)==(-128);
        if (!($52)) {
         label = 23;
         break L9;
        }
       } else if ((($19|0) == 224)) {
        $47 = $44 & -32;
        $48 = ($47<<24>>24)==(-96);
        if (!($48)) {
         label = 21;
         break L9;
        }
       } else {
        $55 = $44 & -64;
        $56 = ($55<<24>>24)==(-128);
        if (!($56)) {
         label = 25;
         break L9;
        }
       }
       $59 = $46&255;
       $60 = $59 & 192;
       $61 = ($60|0)==(128);
       if (!($61)) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $62 = $19 << 12;
       $63 = $62 & 61440;
       $64 = $44&255;
       $65 = $64 << 6;
       $66 = $65 & 4032;
       $67 = $66 | $63;
       $68 = $59 & 63;
       $69 = $67 | $68;
       $70 = ($69>>>0)>($Maxcode>>>0);
       if ($70) {
        $frm_nxt$1$lcssa = $frm_nxt$115;
        break L7;
       }
       $71 = (($frm_nxt$115) + 3|0);
       $frm_nxt$2 = $71;
       break;
      }
      $72 = ($18&255)<(245);
      if (!($72)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $73 = $frm_nxt$115;
      $74 = (($17) - ($73))|0;
      $75 = ($74|0)<(4);
      if ($75) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $76 = (($frm_nxt$115) + 1|0);
      $77 = HEAP8[$76>>0]|0;
      $78 = (($frm_nxt$115) + 2|0);
      $79 = HEAP8[$78>>0]|0;
      $80 = (($frm_nxt$115) + 3|0);
      $81 = HEAP8[$80>>0]|0;
      if ((($19|0) == 240)) {
       $$off = (($77) + 112)<<24>>24;
       $82 = ($$off&255)<(48);
       if (!($82)) {
        label = 33;
        break L9;
       }
      } else if ((($19|0) == 244)) {
       $85 = $77 & -16;
       $86 = ($85<<24>>24)==(-128);
       if (!($86)) {
        label = 35;
        break L9;
       }
      } else {
       $89 = $77 & -64;
       $90 = ($89<<24>>24)==(-128);
       if (!($90)) {
        label = 37;
        break L9;
       }
      }
      $93 = $79&255;
      $94 = $93 & 192;
      $95 = ($94|0)==(128);
      if (!($95)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $96 = $81&255;
      $97 = $96 & 192;
      $98 = ($97|0)==(128);
      if (!($98)) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $99 = $19 << 18;
      $100 = $99 & 1835008;
      $101 = $77&255;
      $102 = $101 << 12;
      $103 = $102 & 258048;
      $104 = $103 | $100;
      $105 = $93 << 6;
      $106 = $105 & 4032;
      $107 = $104 | $106;
      $108 = $96 & 63;
      $109 = $107 | $108;
      $110 = ($109>>>0)>($Maxcode>>>0);
      if ($110) {
       $frm_nxt$1$lcssa = $frm_nxt$115;
       break L7;
      }
      $111 = (($frm_nxt$115) + 4|0);
      $frm_nxt$2 = $111;
     }
    } while(0);
    $112 = (($nchar32_t$014) + 1)|0;
    $113 = ($frm_nxt$2>>>0)<($frm_end>>>0);
    $114 = ($112>>>0)<($mx>>>0);
    $or$cond = $113 & $114;
    if ($or$cond) {
     $frm_nxt$115 = $frm_nxt$2;$nchar32_t$014 = $112;
    } else {
     $frm_nxt$1$lcssa = $frm_nxt$2;
     break L7;
    }
   }
   if ((label|0) == 21) {
    $49 = $frm;
    $50 = (($40) - ($49))|0;
    $$0 = $50;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 23) {
    $53 = $frm;
    $54 = (($40) - ($53))|0;
    $$0 = $54;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 25) {
    $57 = $frm;
    $58 = (($40) - ($57))|0;
    $$0 = $58;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 33) {
    $83 = $frm;
    $84 = (($73) - ($83))|0;
    $$0 = $84;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 35) {
    $87 = $frm;
    $88 = (($73) - ($87))|0;
    $$0 = $88;
    STACKTOP = sp;return ($$0|0);
   }
   else if ((label|0) == 37) {
    $91 = $frm;
    $92 = (($73) - ($91))|0;
    $$0 = $92;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  }
 } while(0);
 $115 = $frm_nxt$1$lcssa;
 $116 = $frm;
 $117 = (($115) - ($116))|0;
 $$0 = $117;
 STACKTOP = sp;return ($$0|0);
}
function ___cxx_global_array_dtor112($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((19760 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(19760);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor97($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((19224 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(19224);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor73($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((18712 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(18712);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor48($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17872 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(17872);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor45($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 276|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 264|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 252|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 240|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 228|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 216|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 204|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 192|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 180|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 168|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 156|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 144|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 132|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 120|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 108|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 96|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 84|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 72|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 60|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 48|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 36|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 24|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(((17560 + 12|0)));
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(17560);
 STACKTOP = sp;return;
}
function ___cxx_global_array_dtor($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 276|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 264|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 252|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 240|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 228|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 216|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 204|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 192|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 180|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 168|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 156|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 144|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 132|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 120|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 108|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 96|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 84|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 72|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 60|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 48|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 36|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 24|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(((17232 + 12|0)));
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(17232);
 STACKTOP = sp;return;
}
function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 4|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $27 = HEAP32[$21>>2]|0;
    $28 = $27;
    $29 = $28;
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 4)|0;
    $32 = $31;
    $33 = HEAP32[$32>>2]|0;
    $34 = HEAP32[$22>>2]|0;
    $35 = (($__extbuf) + ($__nread$0)|0);
    $36 = HEAP32[$34>>2]|0;
    $37 = (($36) + 16|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = (FUNCTION_TABLE_iiiiiiiii[$38 & 511]($34,$27,$__extbuf,$35,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($39|0) == 3)) {
     label = 14;
     break;
    } else if ((($39|0) == 2)) {
     $$0 = -1;
     label = 22;
     break;
    } else if (!((($39|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $40 = HEAP32[$21>>2]|0;
    $41 = $40;
    $42 = $41;
    HEAP32[$42>>2] = $30;
    $43 = (($41) + 4)|0;
    $44 = $43;
    HEAP32[$44>>2] = $33;
    $45 = ($__nread$0|0)==(8);
    if ($45) {
     $$0 = -1;
     label = 22;
     break;
    }
    $46 = HEAP32[$24>>2]|0;
    $47 = (_getc(($46|0))|0);
    $48 = ($47|0)==(-1);
    if ($48) {
     $$0 = -1;
     label = 22;
     break;
    }
    $51 = $47&255;
    HEAP8[$35>>0] = $51;
    $52 = (($__nread$0) + 1)|0;
    $__nread$0 = $52;
   }
   if ((label|0) == 14) {
    $49 = HEAP8[$__extbuf>>0]|0;
    $50 = $49 << 24 >> 24;
    HEAP32[$__1buf>>2] = $50;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 22) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   $26 = $25 << 24 >> 24;
   HEAP32[$__1buf>>2] = $26;
   $__nread$2 = $8;
  }
 } while(0);
 if ($__consume) {
  $62 = HEAP32[$__1buf>>2]|0;
  $63 = (($this) + 48|0);
  HEAP32[$63>>2] = $62;
  $$0 = $62;
  STACKTOP = sp;return ($$0|0);
 }
 $53 = (($this) + 32|0);
 $__i2$0 = $__nread$2;
 while(1) {
  $54 = ($__i2$0|0)>(0);
  if (!($54)) {
   break;
  }
  $55 = (($__i2$0) + -1)|0;
  $56 = (($__extbuf) + ($55)|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57 << 24 >> 24;
  $59 = HEAP32[$53>>2]|0;
  $60 = (_ungetc(($58|0),($59|0))|0);
  $61 = ($60|0)==(-1);
  if ($61) {
   $$0 = -1;
   label = 22;
   break;
  } else {
   $__i2$0 = $55;
  }
 }
 if ((label|0) == 22) {
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$__1buf>>2]|0;
 $$0 = $$pre;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume) {
 $this = $this|0;
 $__consume = $__consume|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__extbuf = sp + 16|0;
 $__1buf = sp + 8|0;
 $__enxt = sp + 4|0;
 $__inxt = sp;
 $0 = (($this) + 52|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = (($this) + 48|0);
  $4 = HEAP32[$3>>2]|0;
  if (!($__consume)) {
   $$0 = $4;
   STACKTOP = sp;return ($$0|0);
  }
  HEAP32[$3>>2] = -1;
  HEAP8[$0>>0] = 0;
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = (($this) + 44|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(1);
 $8 = $7 ? $6 : 1;
 $9 = ($8|0)>(0);
 L8: do {
  if ($9) {
   $10 = (($this) + 32|0);
   $__i$09 = 0;
   while(1) {
    $11 = HEAP32[$10>>2]|0;
    $12 = (_getc(($11|0))|0);
    $13 = ($12|0)==(-1);
    if ($13) {
     $$0 = -1;
     break;
    }
    $14 = $12&255;
    $15 = (($__extbuf) + ($__i$09)|0);
    HEAP8[$15>>0] = $14;
    $16 = (($__i$09) + 1)|0;
    $17 = ($16|0)<($8|0);
    if ($17) {
     $__i$09 = $16;
    } else {
     break L8;
    }
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $18 = (($this) + 53|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ($19<<24>>24)==(0);
 L15: do {
  if ($20) {
   $21 = (($this) + 40|0);
   $22 = (($this) + 36|0);
   $23 = (($__1buf) + 1|0);
   $24 = (($this) + 32|0);
   $__nread$0 = $8;
   while(1) {
    $26 = HEAP32[$21>>2]|0;
    $27 = $26;
    $28 = $27;
    $29 = HEAP32[$28>>2]|0;
    $30 = (($27) + 4)|0;
    $31 = $30;
    $32 = HEAP32[$31>>2]|0;
    $33 = HEAP32[$22>>2]|0;
    $34 = (($__extbuf) + ($__nread$0)|0);
    $35 = HEAP32[$33>>2]|0;
    $36 = (($35) + 16|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = (FUNCTION_TABLE_iiiiiiiii[$37 & 511]($33,$26,$__extbuf,$34,$__enxt,$__1buf,$23,$__inxt)|0);
    if ((($38|0) == 3)) {
     label = 14;
     break;
    } else if ((($38|0) == 2)) {
     $$0 = -1;
     label = 23;
     break;
    } else if (!((($38|0) == 1))) {
     $__nread$2 = $__nread$0;
     break L15;
    }
    $39 = HEAP32[$21>>2]|0;
    $40 = $39;
    $41 = $40;
    HEAP32[$41>>2] = $29;
    $42 = (($40) + 4)|0;
    $43 = $42;
    HEAP32[$43>>2] = $32;
    $44 = ($__nread$0|0)==(8);
    if ($44) {
     $$0 = -1;
     label = 23;
     break;
    }
    $45 = HEAP32[$24>>2]|0;
    $46 = (_getc(($45|0))|0);
    $47 = ($46|0)==(-1);
    if ($47) {
     $$0 = -1;
     label = 23;
     break;
    }
    $49 = $46&255;
    HEAP8[$34>>0] = $49;
    $50 = (($__nread$0) + 1)|0;
    $__nread$0 = $50;
   }
   if ((label|0) == 14) {
    $48 = HEAP8[$__extbuf>>0]|0;
    HEAP8[$__1buf>>0] = $48;
    $__nread$2 = $__nread$0;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $25 = HEAP8[$__extbuf>>0]|0;
   HEAP8[$__1buf>>0] = $25;
   $__nread$2 = $8;
  }
 } while(0);
 do {
  if ($__consume) {
   $60 = HEAP8[$__1buf>>0]|0;
   $61 = $60&255;
   $62 = (($this) + 48|0);
   HEAP32[$62>>2] = $61;
   $64 = $60;
  } else {
   $51 = (($this) + 32|0);
   $__i2$0 = $__nread$2;
   while(1) {
    $52 = ($__i2$0|0)>(0);
    if (!($52)) {
     label = 21;
     break;
    }
    $53 = (($__i2$0) + -1)|0;
    $54 = (($__extbuf) + ($53)|0);
    $55 = HEAP8[$54>>0]|0;
    $56 = $55&255;
    $57 = HEAP32[$51>>2]|0;
    $58 = (_ungetc(($56|0),($57|0))|0);
    $59 = ($58|0)==(-1);
    if ($59) {
     $$0 = -1;
     label = 23;
     break;
    } else {
     $__i2$0 = $53;
    }
   }
   if ((label|0) == 21) {
    $$pre = HEAP8[$__1buf>>0]|0;
    $64 = $$pre;
    break;
   }
   else if ((label|0) == 23) {
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $63 = $64&255;
 $$0 = $63;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ($6|0)==(34);
 do {
  if ($10) {
   HEAP32[$__err>>2] = 4;
   $21 = ($5|0)>(0);
   $22 = ($4>>>0)>(0);
   $23 = ($5|0)==(0);
   $24 = $23 & $22;
   $25 = $21 | $24;
   if ($25) {
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $11 = ($5|0)<(-1);
   $12 = ($4>>>0)<(2147483648);
   $13 = ($5|0)==(-1);
   $14 = $13 & $12;
   $15 = $11 | $14;
   if ($15) {
    HEAP32[$__err>>2] = 4;
    break;
   }
   $16 = ($5|0)>(0);
   $17 = ($4>>>0)>(2147483647);
   $18 = ($5|0)==(0);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    HEAP32[$__err>>2] = 4;
    $$0 = 2147483647;
    STACKTOP = sp;return ($$0|0);
   } else {
    $$0 = $4;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 $$0 = -2147483648;
 STACKTOP = sp;return ($$0|0);
}
function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (_strtoll_l($__a,$__p2,$__base,$3)|0);
 $5 = tempRet0;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  HEAP32[$1>>2] = $2;
 }
 $8 = HEAP32[$__p2>>2]|0;
 $9 = ($8|0)==($__a_end|0);
 if (!($9)) {
  HEAP32[$__err>>2] = 4;
  $18 = 0;$19 = 0;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 $10 = ($6|0)==(34);
 if ($10) {
  HEAP32[$__err>>2] = 4;
  $11 = ($5|0)>(0);
  $12 = ($4>>>0)>(0);
  $13 = ($5|0)==(0);
  $14 = $13 & $12;
  $15 = $11 | $14;
  $16 = $15 ? -1 : 0;
  $17 = $15 ? 2147483647 : -2147483648;
  tempRet0 = $17;
  STACKTOP = sp;return ($16|0);
 } else {
  $18 = $5;$19 = $4;
  tempRet0 = $18;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $__p2 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(65535);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $18 = $6&65535;
  $$0 = $18;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0;
 var $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = HEAP8[$__a>>0]|0;
 $2 = ($1<<24>>24)==(45);
 if ($2) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = (___errno_location()|0);
 $4 = HEAP32[$3>>2]|0;
 HEAP32[$3>>2] = 0;
 $5 = (__ZNSt3__16__clocEv()|0);
 $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
 $7 = tempRet0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$3>>2] = $4;
 }
 $10 = HEAP32[$__p2>>2]|0;
 $11 = ($10|0)==($__a_end|0);
 if (!($11)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $12 = ($8|0)==(34);
 $13 = ($7>>>0)>(0);
 $14 = ($6>>>0)>(4294967295);
 $15 = ($7|0)==(0);
 $16 = $15 & $14;
 $17 = $13 | $16;
 $or$cond = $12 | $17;
 if ($or$cond) {
  HEAP32[$__err>>2] = 4;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 } else {
  $$0 = $6;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 $__base = $__base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $13 = 0;$14 = 0;
  } else {
   $1 = HEAP8[$__a>>0]|0;
   $2 = ($1<<24>>24)==(45);
   if ($2) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $3 = (___errno_location()|0);
   $4 = HEAP32[$3>>2]|0;
   HEAP32[$3>>2] = 0;
   $5 = (__ZNSt3__16__clocEv()|0);
   $6 = (_strtoull_l($__a,$__p2,$__base,$5)|0);
   $7 = tempRet0;
   $8 = HEAP32[$3>>2]|0;
   $9 = ($8|0)==(0);
   if ($9) {
    HEAP32[$3>>2] = $4;
   }
   $10 = HEAP32[$__p2>>2]|0;
   $11 = ($10|0)==($__a_end|0);
   if (!($11)) {
    HEAP32[$__err>>2] = 4;
    $13 = 0;$14 = 0;
    break;
   }
   $12 = ($8|0)==(34);
   if ($12) {
    HEAP32[$__err>>2] = 4;
    $13 = -1;$14 = -1;
   } else {
    $13 = $7;$14 = $6;
   }
  }
 } while(0);
 tempRet0 = $13;
 STACKTOP = sp;return ($14|0);
}
function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $10 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 if ($0) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $1 = (___errno_location()|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$1>>2] = 0;
 $3 = (__ZNSt3__16__clocEv()|0);
 $4 = (+_strtold_l($__a,$__p2,$3));
 $5 = HEAP32[$1>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  HEAP32[$1>>2] = $2;
 }
 $7 = HEAP32[$__p2>>2]|0;
 $8 = ($7|0)==($__a_end|0);
 if (!($8)) {
  HEAP32[$__err>>2] = 4;
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $9 = ($5|0)==(34);
 if ($9) {
  HEAP32[$__err>>2] = 4;
 }
 $10 = $4;
 $$0 = $10;
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err) {
 $__a = $__a|0;
 $__a_end = $__a_end|0;
 $__err = $__err|0;
 var $$0 = 0.0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__p2 = sp;
 $0 = ($__a|0)==($__a_end|0);
 do {
  if ($0) {
   HEAP32[$__err>>2] = 4;
   $$0 = 0.0;
  } else {
   $1 = (___errno_location()|0);
   $2 = HEAP32[$1>>2]|0;
   HEAP32[$1>>2] = 0;
   $3 = (__ZNSt3__16__clocEv()|0);
   $4 = (+_strtold_l($__a,$__p2,$3));
   $5 = HEAP32[$1>>2]|0;
   $6 = ($5|0)==(0);
   if ($6) {
    HEAP32[$1>>2] = $2;
   }
   $7 = HEAP32[$__p2>>2]|0;
   $8 = ($7|0)==($__a_end|0);
   if (!($8)) {
    HEAP32[$__err>>2] = 4;
    $$0 = 0.0;
    break;
   }
   $9 = ($5|0)==(34);
   if ($9) {
    HEAP32[$__err>>2] = 4;
    $$0 = $4;
   } else {
    $$0 = $4;
   }
  }
 } while(0);
 STACKTOP = sp;return (+$$0);
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i$i = 0, $$not$i$i = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n>>>0)>(1073741823);
 if ($0) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = (($this) + 128|0);
 $2 = HEAP8[$1>>0]|0;
 $$not$i$i = ($2<<24>>24)==(0);
 $3 = ($__n>>>0)<(29);
 $or$cond$i$i = $$not$i$i & $3;
 if ($or$cond$i$i) {
  $4 = (($this) + 16|0);
  HEAP8[$1>>0] = 1;
  $$0$i$i = $4;
 } else {
  $5 = $__n << 2;
  $6 = (__Znwj($5)|0);
  $$0$i$i = $6;
 }
 $7 = (($this) + 4|0);
 HEAP32[$7>>2] = $$0$i$i;
 HEAP32[$this>>2] = $$0$i$i;
 $8 = (($$0$i$i) + ($__n<<2)|0);
 $9 = (($this) + 8|0);
 HEAP32[$9>>2] = $8;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__v = sp;
 $0 = (($this) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = ($7>>>0)<($__n>>>0);
 if (!($8)) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n);
  STACKTOP = sp;return;
 }
 $9 = (($this) + 16|0);
 $10 = HEAP32[$this>>2]|0;
 $11 = $10;
 $12 = (($5) - ($11))|0;
 $13 = $12 >> 2;
 $14 = (($13) + ($__n))|0;
 $15 = ($14>>>0)>(1073741823);
 if ($15) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $16 = (($4) - ($11))|0;
 $17 = $16 >> 2;
 $18 = ($17>>>0)<(536870911);
 if ($18) {
  $19 = $16 >> 1;
  $20 = ($19>>>0)<($14>>>0);
  $21 = $20 ? $14 : $19;
  $$0$i = $21;
 } else {
  $$0$i = 1073741823;
 }
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v,$$0$i,$13,$9);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v,$__n);
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v);
 __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $$not$i$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 12|0);
 HEAP32[$0>>2] = 0;
 $1 = (($this) + 16|0);
 HEAP32[$1>>2] = $__a;
 $2 = ($__cap|0)==(0);
 do {
  if ($2) {
   $8 = 0;
  } else {
   $3 = (($__a) + 112|0);
   $4 = HEAP8[$3>>0]|0;
   $$not$i$i = ($4<<24>>24)==(0);
   $5 = ($__cap>>>0)<(29);
   $or$cond$i$i = $$not$i$i & $5;
   if ($or$cond$i$i) {
    HEAP8[$3>>0] = 1;
    $8 = $__a;
    break;
   } else {
    $6 = $__cap << 2;
    $7 = (__Znwj($6)|0);
    $8 = $7;
    break;
   }
  }
 } while(0);
 HEAP32[$this>>2] = $8;
 $9 = (($8) + ($__start<<2)|0);
 $10 = (($this) + 8|0);
 HEAP32[$10>>2] = $9;
 $11 = (($this) + 4|0);
 HEAP32[$11>>2] = $9;
 $12 = (($8) + ($__cap<<2)|0);
 HEAP32[$0>>2] = $12;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $$0 = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 8|0);
 $$pre = HEAP32[$0>>2]|0;
 $$0 = $__n;$2 = $$pre;
 while(1) {
  $1 = ($2|0)==(0|0);
  if ($1) {
   $4 = 0;
  } else {
   HEAP32[$2>>2] = 0;
   $$pre1 = HEAP32[$0>>2]|0;
   $4 = $$pre1;
  }
  $3 = (($4) + 4|0);
  HEAP32[$0>>2] = $3;
  $5 = (($$0) + -1)|0;
  $6 = ($5|0)==(0);
  if ($6) {
   break;
  } else {
   $$0 = $5;$2 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($this) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($__v) + 4|0);
 $4 = $2;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 $8 = HEAP32[$3>>2]|0;
 $9 = (0 - ($7))|0;
 $10 = (($8) + ($9<<2)|0);
 HEAP32[$3>>2] = $10;
 _memcpy(($10|0),($0|0),($6|0))|0;
 $11 = HEAP32[$this>>2]|0;
 $12 = HEAP32[$3>>2]|0;
 HEAP32[$this>>2] = $12;
 HEAP32[$3>>2] = $11;
 $13 = (($__v) + 8|0);
 $14 = HEAP32[$1>>2]|0;
 $15 = HEAP32[$13>>2]|0;
 HEAP32[$1>>2] = $15;
 HEAP32[$13>>2] = $14;
 $16 = (($this) + 8|0);
 $17 = (($__v) + 12|0);
 $18 = HEAP32[$16>>2]|0;
 $19 = HEAP32[$17>>2]|0;
 HEAP32[$16>>2] = $19;
 HEAP32[$17>>2] = $18;
 $20 = HEAP32[$3>>2]|0;
 HEAP32[$__v>>2] = $20;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_last2$i$i$i = 0, $scevgep$i$i$i = 0, $scevgep4$i$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($this) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==($1|0);
 if (!($4)) {
  $__new_last2$i$i$i = $1;
  $scevgep$i$i$i = (($3) + -4|0);
  $5 = $scevgep$i$i$i;
  $6 = (($5) - ($__new_last2$i$i$i))|0;
  $7 = $6 >>> 2;
  $8 = $7 ^ -1;
  $scevgep4$i$i$i = (($3) + ($8<<2)|0);
  HEAP32[$2>>2] = $scevgep4$i$i$i;
 }
 $9 = HEAP32[$this>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = (($this) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($9|0);
 if ($13) {
  $14 = (($12) + 112|0);
  HEAP8[$14>>0] = 0;
  STACKTOP = sp;return;
 } else {
  __ZdlPv($9);
  STACKTOP = sp;return;
 }
}
function _strtoull_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoull($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _strtoll_l($s,$p,$base,$loc) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtoll($s,$p,$base)|0);
 $1 = tempRet0;
 tempRet0 = $1;
 STACKTOP = sp;return ($0|0);
}
function _isdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $0 = $isdigit&1;
 STACKTOP = sp;return ($0|0);
}
function _isxdigit_l($c,$l) {
 $c = $c|0;
 $l = $l|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_isxdigit($c)|0);
 STACKTOP = sp;return ($0|0);
}
function _mbrlen($s,$n,$st) {
 $s = $s|0;
 $n = $n|0;
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)!=(0|0);
 $1 = $0 ? $st : 20280;
 $2 = (_mbrtowc(0,$s,$n,$1)|0);
 STACKTOP = sp;return ($2|0);
}
function _mbrtowc($wc,$src,$n,$st) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($st|0)==(0|0);
 $$01 = $1 ? 20288 : $st;
 $2 = HEAP32[$$01>>2]|0;
 $3 = ($src|0)==(0|0);
 L1: do {
  if ($3) {
   $4 = ($2|0)==(0);
   if ($4) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $5 = ($wc|0)==(0|0);
   if ($5) {
    HEAP32[$0>>2] = $0;
    $11 = $0;
   } else {
    $11 = $wc;
   }
   $6 = ($n|0)==(0);
   if ($6) {
    $$0 = -2;
    STACKTOP = sp;return ($$0|0);
   }
   $7 = ($2|0)==(0);
   do {
    if ($7) {
     $8 = HEAP8[$src>>0]|0;
     $9 = $8&255;
     $10 = ($8<<24>>24)>(-1);
     if ($10) {
      HEAP32[$11>>2] = $9;
      $12 = ($8<<24>>24)!=(0);
      $13 = $12&1;
      $$0 = $13;
      STACKTOP = sp;return ($$0|0);
     } else {
      $14 = (($9) + -194)|0;
      $15 = ($14>>>0)>(50);
      if ($15) {
       break L1;
      }
      $16 = (($src) + 1|0);
      $17 = (20072 + ($14<<2)|0);
      $18 = HEAP32[$17>>2]|0;
      $19 = (($n) + -1)|0;
      $$02 = $19;$c$0 = $18;$s$0 = $16;
      break;
     }
    } else {
     $$02 = $n;$c$0 = $2;$s$0 = $src;
    }
   } while(0);
   $20 = ($$02|0)==(0);
   L19: do {
    if ($20) {
     $c$2 = $c$0;
    } else {
     $21 = HEAP8[$s$0>>0]|0;
     $22 = $21&255;
     $23 = $22 >>> 3;
     $24 = (($23) + -16)|0;
     $25 = $c$0 >> 26;
     $26 = (($23) + ($25))|0;
     $27 = $24 | $26;
     $28 = ($27>>>0)>(7);
     if ($28) {
      break L1;
     } else {
      $$1 = $$02;$32 = $21;$c$1 = $c$0;$s$1 = $s$0;
     }
     while(1) {
      $29 = $c$1 << 6;
      $30 = (($s$1) + 1|0);
      $31 = $32&255;
      $33 = (($31) + -128)|0;
      $34 = $33 | $29;
      $35 = (($$1) + -1)|0;
      $36 = ($34|0)<(0);
      if (!($36)) {
       break;
      }
      $38 = ($35|0)==(0);
      if ($38) {
       $c$2 = $34;
       break L19;
      }
      $39 = HEAP8[$30>>0]|0;
      $40 = $39 & -64;
      $41 = ($40<<24>>24)==(-128);
      if ($41) {
       $$1 = $35;$32 = $39;$c$1 = $34;$s$1 = $30;
      } else {
       break L1;
      }
     }
     HEAP32[$$01>>2] = 0;
     HEAP32[$11>>2] = $34;
     $37 = (($n) - ($35))|0;
     $$0 = $37;
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   HEAP32[$$01>>2] = $c$2;
   $$0 = -2;
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 HEAP32[$$01>>2] = 0;
 $42 = (___errno_location()|0);
 HEAP32[$42>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbsinit($st) {
 $st = $st|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($st|0)==(0|0);
 if ($0) {
  $4 = 1;
 } else {
  $1 = HEAP32[$st>>2]|0;
  $2 = ($1|0)==(0);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _mbsnrtowcs($wcs,$src,$n,$wn,$st) {
 $wcs = $wcs|0;
 $src = $src|0;
 $n = $n|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$ = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$030 = 0, $ws$1 = 0;
 var $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $wbuf = sp + 8|0;
 $s = sp;
 $0 = HEAP32[$src>>2]|0;
 HEAP32[$s>>2] = $0;
 $1 = ($wcs|0)!=(0|0);
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 $2 = ($0|0)!=(0|0);
 $3 = ($wn$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $wn$;$$031 = $n;$32 = $0;$cnt$029 = 0;$ws$030 = $wcs$;
   while(1) {
    $4 = $$031 >>> 2;
    $5 = ($4>>>0)>=($$01428>>>0);
    $6 = ($$031>>>0)>(131);
    $or$cond13 = $5 | $6;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$18 = $32;$cnt$0$lcssa = $cnt$029;$ws$0$lcssa = $ws$030;
     label = 7;
     break L1;
    }
    $$014$ = $5 ? $$01428 : $4;
    $7 = (($$031) - ($$014$))|0;
    $8 = (_mbsrtowcs($ws$030,$s,$$014$,$st)|0);
    $9 = ($8|0)==(-1);
    if ($9) {
     $cnt$3 = -1;
     break L1;
    }
    $10 = ($ws$030|0)==($wbuf|0);
    if ($10) {
     $$115 = $$01428;$ws$1 = $wbuf;
    } else {
     $11 = (($ws$030) + ($8<<2)|0);
     $12 = (($$01428) - ($8))|0;
     $$115 = $12;$ws$1 = $11;
    }
    $13 = (($8) + ($cnt$029))|0;
    $14 = HEAP32[$s>>2]|0;
    $15 = ($14|0)!=(0|0);
    $16 = ($$115|0)!=(0);
    $or$cond = $15 & $16;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $7;$32 = $14;$cnt$029 = $13;$ws$030 = $ws$1;
    } else {
     $$0$lcssa = $7;$$014$lcssa = $$115;$18 = $14;$cnt$0$lcssa = $13;$ws$0$lcssa = $ws$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$014$lcssa = $wn$;$18 = $0;$cnt$0$lcssa = 0;$ws$0$lcssa = $wcs$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $17 = ($18|0)!=(0|0);
   $19 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $17 & $19;
   $20 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $20;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $18;$cnt$2 = $cnt$0$lcssa;$ws$2 = $ws$0$lcssa;
    while(1) {
     $22 = (_mbrtowc($ws$2,$21,$$2,$st)|0);
     $23 = (($22) + 2)|0;
     $24 = ($23>>>0)<(3);
     if ($24) {
      break;
     }
     $25 = HEAP32[$s>>2]|0;
     $26 = (($25) + ($22)|0);
     HEAP32[$s>>2] = $26;
     $27 = (($$2) - ($22))|0;
     $28 = (($ws$2) + 4|0);
     $29 = (($$3) + -1)|0;
     $30 = (($cnt$2) + 1)|0;
     $$old4 = ($29|0)!=(0);
     $$old7 = ($$2|0)!=($22|0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $27;$$3 = $29;$21 = $26;$cnt$2 = $30;$ws$2 = $28;
     } else {
      $cnt$3 = $30;
      break L9;
     }
    }
    if ((($22|0) == -1)) {
     $cnt$3 = -1;
     break;
    } else if ((($22|0) == 0)) {
     HEAP32[$s>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    } else {
     HEAP32[$st>>2] = 0;
     $cnt$3 = $cnt$2;
     break;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $31 = HEAP32[$s>>2]|0;
 HEAP32[$src>>2] = $31;
 STACKTOP = sp;return ($cnt$3|0);
}
function _mbsrtowcs($ws,$src,$wn,$st) {
 $ws = $ws|0;
 $src = $src|0;
 $wn = $wn|0;
 $st = $st|0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$148 = 0, $$2 = 0, $$25 = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0;
 var $$830 = 0, $$in = 0, $$old1 = 0, $$pre$pre = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $or$cond = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0;
 var $s$1033 = 0, $s$1034 = 0, $s$19 = 0, $s$2 = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $s$9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$src>>2]|0;
 $1 = ($st|0)==(0|0);
 if ($1) {
  label = 5;
 } else {
  $2 = HEAP32[$st>>2]|0;
  $3 = ($2|0)==(0);
  if ($3) {
   label = 5;
  } else {
   $4 = ($ws|0)==(0|0);
   if ($4) {
    $$36 = $wn;$c$2 = $2;$s$3 = $0;
    label = 16;
   } else {
    HEAP32[$st>>2] = 0;
    $$3 = $ws;$$7 = $wn;$c$4 = $2;$s$8 = $0;
    label = 36;
   }
  }
 }
 if ((label|0) == 5) {
  $5 = ($ws|0)==(0|0);
  if ($5) {
   $$03 = $wn;$s$0 = $0;
   label = 7;
  } else {
   $$02$ph = $ws;$$47$ph = $wn;$s$5$ph = $0;
   label = 6;
  }
 }
 L7: while(1) {
  if ((label|0) == 6) {
   label = 0;
   $6 = ($$47$ph|0)==(0);
   if ($6) {
    $s$5$lcssa = $s$5$ph;
    label = 26;
    break;
   } else {
    $$0217 = $$02$ph;$$4716 = $$47$ph;$s$518 = $s$5$ph;
   }
   while(1) {
    $63 = HEAP8[$s$518>>0]|0;
    $64 = $63&255;
    $65 = (($64) + -1)|0;
    $66 = ($65>>>0)<(127);
    L12: do {
     if ($66) {
      $67 = $s$518;
      $68 = $67 & 3;
      $69 = ($68|0)==(0);
      $70 = ($$4716>>>0)>(4);
      $or$cond = $69 & $70;
      if ($or$cond) {
       $$1 = $$0217;$$5 = $$4716;$s$6 = $s$518;
       while(1) {
        $71 = HEAP32[$s$6>>2]|0;
        $72 = (($71) + -16843009)|0;
        $73 = $72 | $71;
        $74 = $73 & -2139062144;
        $75 = ($74|0)==(0);
        $76 = $71&255;
        if (!($75)) {
         $$2 = $$1;$$6 = $$5;$94 = $76;$s$7 = $s$6;
         break L12;
        }
        $77 = (($s$6) + 1|0);
        $78 = $71 & 255;
        $79 = (($$1) + 4|0);
        HEAP32[$$1>>2] = $78;
        $80 = (($s$6) + 2|0);
        $81 = HEAP8[$77>>0]|0;
        $82 = $81&255;
        $83 = (($$1) + 8|0);
        HEAP32[$79>>2] = $82;
        $84 = (($s$6) + 3|0);
        $85 = HEAP8[$80>>0]|0;
        $86 = $85&255;
        $87 = (($$1) + 12|0);
        HEAP32[$83>>2] = $86;
        $88 = (($s$6) + 4|0);
        $89 = HEAP8[$84>>0]|0;
        $90 = $89&255;
        $91 = (($$1) + 16|0);
        HEAP32[$87>>2] = $90;
        $92 = (($$5) + -4)|0;
        $$old1 = ($92>>>0)>(4);
        if ($$old1) {
         $$1 = $91;$$5 = $92;$s$6 = $88;
        } else {
         break;
        }
       }
       $$pre$pre = HEAP8[$88>>0]|0;
       $$2 = $91;$$6 = $92;$94 = $$pre$pre;$s$7 = $88;
      } else {
       $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
      }
     } else {
      $$2 = $$0217;$$6 = $$4716;$94 = $63;$s$7 = $s$518;
     }
    } while(0);
    $93 = $94&255;
    $95 = (($93) + -1)|0;
    $96 = ($95>>>0)<(127);
    if (!($96)) {
     break;
    }
    $97 = (($s$7) + 1|0);
    $98 = (($$2) + 4|0);
    HEAP32[$$2>>2] = $93;
    $99 = (($$6) + -1)|0;
    $100 = ($99|0)==(0);
    if ($100) {
     $s$5$lcssa = $97;
     label = 26;
     break L7;
    } else {
     $$0217 = $98;$$4716 = $99;$s$518 = $97;
    }
   }
   $101 = (($93) + -194)|0;
   $102 = ($101>>>0)>(50);
   if ($102) {
    $$432 = $$2;$$830 = $$6;$s$1034 = $s$7;
    label = 47;
    break;
   }
   $103 = (($s$7) + 1|0);
   $104 = (20072 + ($101<<2)|0);
   $105 = HEAP32[$104>>2]|0;
   $$3 = $$2;$$7 = $$6;$c$4 = $105;$s$8 = $103;
   label = 36;
   continue;
  }
  else if ((label|0) == 7) {
   label = 0;
   $7 = HEAP8[$s$0>>0]|0;
   $8 = $7&255;
   $9 = (($8) + -1)|0;
   $10 = ($9>>>0)<(127);
   if ($10) {
    $11 = $s$0;
    $12 = $11 & 3;
    $13 = ($12|0)==(0);
    if ($13) {
     $14 = HEAP32[$s$0>>2]|0;
     $15 = (($14) + -16843009)|0;
     $16 = $15 | $14;
     $17 = $16 & -2139062144;
     $18 = ($17|0)==(0);
     if ($18) {
      $$148 = $$03;$s$19 = $s$0;
      while(1) {
       $19 = (($s$19) + 4|0);
       $20 = (($$148) + -4)|0;
       $21 = HEAP32[$19>>2]|0;
       $22 = (($21) + -16843009)|0;
       $23 = $22 | $21;
       $24 = $23 & -2139062144;
       $25 = ($24|0)==(0);
       if ($25) {
        $$148 = $20;$s$19 = $19;
       } else {
        $$14$lcssa = $20;$$in = $21;$s$1$lcssa = $19;
        break;
       }
      }
     } else {
      $$14$lcssa = $$03;$$in = $14;$s$1$lcssa = $s$0;
     }
     $26 = $$in&255;
     $$25 = $$14$lcssa;$28 = $26;$s$2 = $s$1$lcssa;
    } else {
     $$25 = $$03;$28 = $7;$s$2 = $s$0;
    }
   } else {
    $$25 = $$03;$28 = $7;$s$2 = $s$0;
   }
   $27 = $28&255;
   $29 = (($27) + -1)|0;
   $30 = ($29>>>0)<(127);
   if ($30) {
    $31 = (($s$2) + 1|0);
    $32 = (($$25) + -1)|0;
    $$03 = $32;$s$0 = $31;
    label = 7;
    continue;
   }
   $33 = (($27) + -194)|0;
   $34 = ($33>>>0)>(50);
   if ($34) {
    $$432 = $ws;$$830 = $$25;$s$1034 = $s$2;
    label = 47;
    break;
   }
   $35 = (($s$2) + 1|0);
   $36 = (20072 + ($33<<2)|0);
   $37 = HEAP32[$36>>2]|0;
   $$36 = $$25;$c$2 = $37;$s$3 = $35;
   label = 16;
   continue;
  }
  else if ((label|0) == 16) {
   label = 0;
   $38 = HEAP8[$s$3>>0]|0;
   $39 = $38&255;
   $40 = $39 >>> 3;
   $41 = (($40) + -16)|0;
   $42 = $c$2 >> 26;
   $43 = (($40) + ($42))|0;
   $44 = $41 | $43;
   $45 = ($44>>>0)>(7);
   if ($45) {
    label = 17;
    break;
   }
   $47 = (($s$3) + 1|0);
   $48 = $c$2 & 33554432;
   $49 = ($48|0)==(0);
   if ($49) {
    $s$4 = $47;
   } else {
    $50 = HEAP8[$47>>0]|0;
    $51 = $50 & -64;
    $52 = ($51<<24>>24)==(-128);
    if (!($52)) {
     label = 20;
     break;
    }
    $54 = (($s$3) + 2|0);
    $55 = $c$2 & 524288;
    $56 = ($55|0)==(0);
    if ($56) {
     $s$4 = $54;
    } else {
     $57 = HEAP8[$54>>0]|0;
     $58 = $57 & -64;
     $59 = ($58<<24>>24)==(-128);
     if (!($59)) {
      label = 23;
      break;
     }
     $61 = (($s$3) + 3|0);
     $s$4 = $61;
    }
   }
   $62 = (($$36) + -1)|0;
   $$03 = $62;$s$0 = $s$4;
   label = 7;
   continue;
  }
  else if ((label|0) == 36) {
   label = 0;
   $106 = HEAP8[$s$8>>0]|0;
   $107 = $106&255;
   $108 = $107 >>> 3;
   $109 = (($108) + -16)|0;
   $110 = $c$4 >> 26;
   $111 = (($108) + ($110))|0;
   $112 = $109 | $111;
   $113 = ($112>>>0)>(7);
   if ($113) {
    label = 37;
    break;
   }
   $115 = $c$4 << 6;
   $116 = (($s$8) + 1|0);
   $117 = (($107) + -128)|0;
   $118 = $117 | $115;
   $119 = ($118|0)<(0);
   if ($119) {
    $120 = HEAP8[$116>>0]|0;
    $121 = $120&255;
    $122 = $121 & 192;
    $123 = ($122|0)==(128);
    if (!($123)) {
     label = 40;
     break;
    }
    $125 = $118 << 6;
    $126 = (($s$8) + 2|0);
    $127 = (($121) + -128)|0;
    $128 = $127 | $125;
    $129 = ($128|0)<(0);
    if ($129) {
     $130 = HEAP8[$126>>0]|0;
     $131 = $130&255;
     $132 = $131 & 192;
     $133 = ($132|0)==(128);
     if (!($133)) {
      label = 43;
      break;
     }
     $135 = $128 << 6;
     $136 = (($s$8) + 3|0);
     $137 = (($131) + -128)|0;
     $138 = $137 | $135;
     $c$5 = $138;$s$9 = $136;
    } else {
     $c$5 = $128;$s$9 = $126;
    }
   } else {
    $c$5 = $118;$s$9 = $116;
   }
   $139 = (($$3) + 4|0);
   HEAP32[$$3>>2] = $c$5;
   $140 = (($$7) + -1)|0;
   $$02$ph = $139;$$47$ph = $140;$s$5$ph = $s$9;
   label = 6;
   continue;
  }
 }
 if ((label|0) == 17) {
  $46 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $46;
  label = 46;
 }
 else if ((label|0) == 20) {
  $53 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $53;
  label = 46;
 }
 else if ((label|0) == 23) {
  $60 = (($s$3) + -1|0);
  $$4 = $ws;$$8 = $$36;$c$6 = $c$2;$s$10 = $60;
  label = 46;
 }
 else if ((label|0) == 26) {
  HEAP32[$src>>2] = $s$5$lcssa;
  $$0 = $wn;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 37) {
  $114 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $c$4;$s$10 = $114;
  label = 46;
 }
 else if ((label|0) == 40) {
  $124 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $118;$s$10 = $124;
  label = 46;
 }
 else if ((label|0) == 43) {
  $134 = (($s$8) + -1|0);
  $$4 = $$3;$$8 = $$7;$c$6 = $128;$s$10 = $134;
  label = 46;
 }
 if ((label|0) == 46) {
  $141 = ($c$6|0)==(0);
  if ($141) {
   $$432 = $$4;$$830 = $$8;$s$1034 = $s$10;
   label = 47;
  } else {
   $$431 = $$4;$s$1033 = $s$10;
  }
 }
 if ((label|0) == 47) {
  $142 = HEAP8[$s$1034>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = ($$432|0)==(0|0);
   if (!($144)) {
    HEAP32[$$432>>2] = 0;
    HEAP32[$src>>2] = 0;
   }
   $145 = (($wn) - ($$830))|0;
   $$0 = $145;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$431 = $$432;$s$1033 = $s$1034;
  }
 }
 $146 = (___errno_location()|0);
 HEAP32[$146>>2] = 84;
 $147 = ($$431|0)==(0|0);
 if ($147) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 HEAP32[$src>>2] = $s$1033;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($wc,$src,$n) {
 $wc = $wc|0;
 $src = $src|0;
 $n = $n|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp;
 HEAP32[$0>>2] = $wc;
 $1 = ($src|0)==(0|0);
 if ($1) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = ($n|0)==(0);
 do {
  if (!($2)) {
   $3 = ($wc|0)==(0|0);
   if ($3) {
    HEAP32[$0>>2] = $0;
    $7 = $0;
   } else {
    $7 = $wc;
   }
   $4 = HEAP8[$src>>0]|0;
   $5 = $4&255;
   $6 = ($4<<24>>24)>(-1);
   if ($6) {
    HEAP32[$7>>2] = $5;
    $8 = ($4<<24>>24)!=(0);
    $9 = $8&1;
    $$0 = $9;
    STACKTOP = sp;return ($$0|0);
   }
   $10 = (($5) + -194)|0;
   $11 = ($10>>>0)>(50);
   if (!($11)) {
    $12 = (($src) + 1|0);
    $13 = (20072 + ($10<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($n>>>0)<(4);
    if ($15) {
     $16 = ($n*6)|0;
     $17 = (($16) + -6)|0;
     $18 = -2147483648 >>> $17;
     $19 = $14 & $18;
     $20 = ($19|0)==(0);
     if (!($20)) {
      break;
     }
    }
    $21 = HEAP8[$12>>0]|0;
    $22 = $21&255;
    $23 = $22 >>> 3;
    $24 = (($23) + -16)|0;
    $25 = $14 >> 26;
    $26 = (($23) + ($25))|0;
    $27 = $24 | $26;
    $28 = ($27>>>0)>(7);
    if (!($28)) {
     $29 = $14 << 6;
     $30 = (($22) + -128)|0;
     $31 = $30 | $29;
     $32 = ($31|0)<(0);
     if (!($32)) {
      HEAP32[$7>>2] = $31;
      $$0 = 2;
      STACKTOP = sp;return ($$0|0);
     }
     $33 = (($src) + 2|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34&255;
     $36 = $35 & 192;
     $37 = ($36|0)==(128);
     if ($37) {
      $38 = $31 << 6;
      $39 = (($35) + -128)|0;
      $40 = $39 | $38;
      $41 = ($40|0)<(0);
      if (!($41)) {
       HEAP32[$7>>2] = $40;
       $$0 = 3;
       STACKTOP = sp;return ($$0|0);
      }
      $42 = (($src) + 3|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = $43&255;
      $45 = $44 & 192;
      $46 = ($45|0)==(128);
      if ($46) {
       $47 = $40 << 6;
       $48 = (($44) + -128)|0;
       $49 = $48 | $47;
       HEAP32[$7>>2] = $49;
       $$0 = 4;
       STACKTOP = sp;return ($$0|0);
      }
     }
    }
   }
  }
 } while(0);
 $50 = (___errno_location()|0);
 HEAP32[$50>>2] = 84;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _wcsnrtombs($dst,$wcs,$wn,$n,$st) {
 $dst = $dst|0;
 $wcs = $wcs|0;
 $wn = $wn|0;
 $n = $n|0;
 $st = $st|0;
 var $$0$lcssa = 0, $$014$$0 = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$old4 = 0, $$old7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $or$cond = 0, $or$cond10 = 0, $or$cond13 = 0, $or$cond27 = 0, $or$cond5 = 0, $or$cond8 = 0, $s$0$lcssa = 0, $s$030 = 0, $s$1 = 0;
 var $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp + 8|0;
 $ws = sp;
 $0 = HEAP32[$wcs>>2]|0;
 HEAP32[$ws>>2] = $0;
 $1 = ($dst|0)!=(0|0);
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 $2 = ($0|0)!=(0|0);
 $3 = ($n$|0)!=(0);
 $or$cond27 = $2 & $3;
 L1: do {
  if ($or$cond27) {
   $$01428 = $n$;$$031 = $wn;$33 = $0;$cnt$029 = 0;$s$030 = $dst$;
   while(1) {
    $4 = ($$031>>>0)>=($$01428>>>0);
    $5 = ($$031>>>0)>(32);
    $or$cond13 = $4 | $5;
    if (!($or$cond13)) {
     $$0$lcssa = $$031;$$014$lcssa = $$01428;$17 = $33;$cnt$0$lcssa = $cnt$029;$s$0$lcssa = $s$030;
     label = 7;
     break L1;
    }
    $$014$$0 = $4 ? $$01428 : $$031;
    $6 = (($$031) - ($$014$$0))|0;
    $7 = (_wcsrtombs($s$030,$ws,$$014$$0,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $cnt$3 = -1;
     break L1;
    }
    $9 = ($s$030|0)==($buf|0);
    if ($9) {
     $$115 = $$01428;$s$1 = $buf;
    } else {
     $10 = (($s$030) + ($7)|0);
     $11 = (($$01428) - ($7))|0;
     $$115 = $11;$s$1 = $10;
    }
    $12 = (($7) + ($cnt$029))|0;
    $13 = HEAP32[$ws>>2]|0;
    $14 = ($13|0)!=(0|0);
    $15 = ($$115|0)!=(0);
    $or$cond = $14 & $15;
    if ($or$cond) {
     $$01428 = $$115;$$031 = $6;$33 = $13;$cnt$029 = $12;$s$030 = $s$1;
    } else {
     $$0$lcssa = $6;$$014$lcssa = $$115;$17 = $13;$cnt$0$lcssa = $12;$s$0$lcssa = $s$1;
     label = 7;
     break;
    }
   }
  } else {
   $$0$lcssa = $wn;$$014$lcssa = $n$;$17 = $0;$cnt$0$lcssa = 0;$s$0$lcssa = $dst$;
   label = 7;
  }
 } while(0);
 L9: do {
  if ((label|0) == 7) {
   $16 = ($17|0)!=(0|0);
   $18 = ($$014$lcssa|0)!=(0);
   $or$cond5 = $16 & $18;
   $19 = ($$0$lcssa|0)!=(0);
   $or$cond8 = $or$cond5 & $19;
   if ($or$cond8) {
    $$2 = $$0$lcssa;$$3 = $$014$lcssa;$21 = $17;$cnt$2 = $cnt$0$lcssa;$s$2 = $s$0$lcssa;
    while(1) {
     $20 = HEAP32[$21>>2]|0;
     $22 = (_wcrtomb($s$2,$20,0)|0);
     $23 = (($22) + 1)|0;
     $24 = ($23>>>0)<(2);
     if ($24) {
      break;
     }
     $26 = HEAP32[$ws>>2]|0;
     $27 = (($26) + 4|0);
     HEAP32[$ws>>2] = $27;
     $28 = (($$2) + -1)|0;
     $29 = (($s$2) + ($22)|0);
     $30 = (($$3) - ($22))|0;
     $31 = (($cnt$2) + 1)|0;
     $$old4 = ($$3|0)!=($22|0);
     $$old7 = ($28|0)!=(0);
     $or$cond10 = $$old4 & $$old7;
     if ($or$cond10) {
      $$2 = $28;$$3 = $30;$21 = $27;$cnt$2 = $31;$s$2 = $29;
     } else {
      $cnt$3 = $31;
      break L9;
     }
    }
    $25 = ($22|0)==(0);
    if ($25) {
     HEAP32[$ws>>2] = 0;
     $cnt$3 = $cnt$2;
    } else {
     $cnt$3 = -1;
    }
   } else {
    $cnt$3 = $cnt$0$lcssa;
   }
  }
 } while(0);
 if (!($1)) {
  STACKTOP = sp;return ($cnt$3|0);
 }
 $32 = HEAP32[$ws>>2]|0;
 HEAP32[$wcs>>2] = $32;
 STACKTOP = sp;return ($cnt$3|0);
}
function _wcsrtombs($s,$ws,$n,$st) {
 $s = $s|0;
 $ws = $ws|0;
 $n = $n|0;
 $st = $st|0;
 var $$0 = 0, $$01$lcssa = 0, $$0125 = 0, $$026 = 0, $$1 = 0, $$13 = 0, $$215 = 0, $$24$lcssa = 0, $$2424 = 0, $$3 = 0, $$35 = 0, $$414 = 0, $$5 = 0, $$pn = 0, $$pre = 0, $$pre39 = 0, $$pre40 = 0, $$pre41 = 0, $0 = 0, $1 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $ws2$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buf = sp;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $2 = HEAP32[$ws>>2]|0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)==(0);
  if ($4) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$026 = 0;$6 = $3;$ws2$07 = $2;
  }
  while(1) {
   $5 = ($6>>>0)>(127);
   if ($5) {
    $7 = (_wcrtomb($buf,$6,0)|0);
    $8 = ($7|0)==(-1);
    if ($8) {
     $$0 = -1;
     label = 26;
     break;
    } else {
     $$pn = $7;
    }
   } else {
    $$pn = 1;
   }
   $$13 = (($$pn) + ($$026))|0;
   $9 = (($ws2$07) + 4|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $$0 = $$13;
    label = 26;
    break;
   } else {
    $$026 = $$13;$6 = $10;$ws2$07 = $9;
   }
  }
  if ((label|0) == 26) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1 = ($n>>>0)>(3);
 L14: do {
  if ($1) {
   $$pre40 = HEAP32[$ws>>2]|0;
   $$0125 = $s;$$2424 = $n;$14 = $$pre40;
   while(1) {
    $13 = HEAP32[$14>>2]|0;
    $15 = (($13) + -1)|0;
    $16 = ($15>>>0)>(126);
    if ($16) {
     $17 = ($13|0)==(0);
     if ($17) {
      break;
     }
     $19 = (_wcrtomb($$0125,$13,0)|0);
     $20 = ($19|0)==(-1);
     if ($20) {
      $$0 = -1;
      label = 26;
      break;
     }
     $21 = (($$0125) + ($19)|0);
     $22 = (($$2424) - ($19))|0;
     $$1 = $21;$$35 = $22;$27 = $14;
    } else {
     $23 = $13&255;
     $24 = (($$0125) + 1|0);
     HEAP8[$$0125>>0] = $23;
     $25 = (($$2424) + -1)|0;
     $$pre41 = HEAP32[$ws>>2]|0;
     $$1 = $24;$$35 = $25;$27 = $$pre41;
    }
    $26 = (($27) + 4|0);
    HEAP32[$ws>>2] = $26;
    $28 = ($$35>>>0)>(3);
    if ($28) {
     $$0125 = $$1;$$2424 = $$35;$14 = $26;
    } else {
     $$01$lcssa = $$1;$$24$lcssa = $$35;
     break L14;
    }
   }
   if ((label|0) == 26) {
    STACKTOP = sp;return ($$0|0);
   }
   HEAP8[$$0125>>0] = 0;
   HEAP32[$ws>>2] = 0;
   $18 = (($n) - ($$2424))|0;
   $$0 = $18;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$01$lcssa = $s;$$24$lcssa = $n;
  }
 } while(0);
 $12 = ($$24$lcssa|0)==(0);
 if ($12) {
  $$0 = $n;
  STACKTOP = sp;return ($$0|0);
 }
 $$pre = HEAP32[$ws>>2]|0;
 $$215 = $$01$lcssa;$$414 = $$24$lcssa;$30 = $$pre;
 while(1) {
  $29 = HEAP32[$30>>2]|0;
  $31 = (($29) + -1)|0;
  $32 = ($31>>>0)>(126);
  if ($32) {
   $33 = ($29|0)==(0);
   if ($33) {
    label = 19;
    break;
   }
   $35 = (_wcrtomb($buf,$29,0)|0);
   $36 = ($35|0)==(-1);
   if ($36) {
    $$0 = -1;
    label = 26;
    break;
   }
   $37 = ($$414>>>0)<($35>>>0);
   if ($37) {
    label = 22;
    break;
   }
   $39 = HEAP32[$30>>2]|0;
   (_wcrtomb($$215,$39,0)|0);
   $40 = (($$215) + ($35)|0);
   $41 = (($$414) - ($35))|0;
   $$3 = $40;$$5 = $41;$46 = $30;
  } else {
   $42 = $29&255;
   $43 = (($$215) + 1|0);
   HEAP8[$$215>>0] = $42;
   $44 = (($$414) + -1)|0;
   $$pre39 = HEAP32[$ws>>2]|0;
   $$3 = $43;$$5 = $44;$46 = $$pre39;
  }
  $45 = (($46) + 4|0);
  HEAP32[$ws>>2] = $45;
  $47 = ($$5|0)==(0);
  if ($47) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$215 = $$3;$$414 = $$5;$30 = $45;
  }
 }
 if ((label|0) == 19) {
  HEAP8[$$215>>0] = 0;
  HEAP32[$ws>>2] = 0;
  $34 = (($n) - ($$414))|0;
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 22) {
  $38 = (($n) - ($$414))|0;
  $$0 = $38;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 26) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___string_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k$0 = 0, $k$0$len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 84|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($len) + 256)|0;
 $3 = (_memchr($1,0,$2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $k$0 = $2;
 } else {
  $5 = $3;
  $6 = $1;
  $7 = (($5) - ($6))|0;
  $k$0 = $7;
 }
 $8 = ($k$0>>>0)<($len>>>0);
 $k$0$len = $8 ? $k$0 : $len;
 _memcpy(($buf|0),($1|0),($k$0$len|0))|0;
 $9 = (($1) + ($k$0$len)|0);
 $10 = (($f) + 4|0);
 HEAP32[$10>>2] = $9;
 $11 = (($1) + ($k$0)|0);
 $12 = (($f) + 8|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$0>>2] = $11;
 STACKTOP = sp;return ($k$0$len|0);
}
function _sscanf($s,$fmt,$varargs) {
 $s = $s|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsscanf($s,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _vasprintf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $vacopy_currentptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp;
 $0 = (_malloc(240)|0);
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $$0 = -1;
  } else {
   $vacopy_currentptr = HEAP32[$ap>>2]|0;
   HEAP32[$ap2>>2] = $vacopy_currentptr;
   $2 = (_vsnprintf($0,240,$fmt,$ap2)|0);
   $3 = ($2>>>0)<(240);
   if ($3) {
    $4 = (($2) + 1)|0;
    $5 = (_realloc($0,$4)|0);
    $6 = ($5|0)!=(0|0);
    $7 = $6 ? $5 : $0;
    HEAP32[$s>>2] = $7;
    $$0 = $2;
    break;
   }
   _free($0);
   $8 = ($2|0)<(0);
   if ($8) {
    $$0 = -1;
   } else {
    $9 = (($2) + 1)|0;
    $10 = (_malloc($9)|0);
    HEAP32[$s>>2] = $10;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $$0 = -1;
    } else {
     $12 = (_vsnprintf($10,$9,$fmt,$ap)|0);
     $$0 = $12;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _MUSL_vfscanf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$10 = 0, $$11 = 0, $$12 = 0, $$13 = 0, $$8 = 0, $$lcssa21 = 0, $$not = 0, $$old4 = 0, $$pre = 0, $$pre$phi243Z2D = 0, $$pre229 = 0, $$pre231 = 0, $$pre235 = 0, $$pre237 = 0, $$pre238 = 0, $$pre240 = 0, $$pre241 = 0, $$pre242 = 0, $$size$0 = 0;
 var $$width$0 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0;
 var $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0.0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alloc$0 = 0, $alloc$0224 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $base$0 = 0, $c$030 = 0, $dest$0 = 0;
 var $factor = 0, $factor17 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph49 = 0, $i$0$ph49$lcssa = 0, $i$0$ph49$us56 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigit = 0, $isdigit7 = 0, $isdigit723 = 0, $isdigittmp = 0, $isdigittmp6 = 0, $isdigittmp622 = 0;
 var $k$0$ph = 0, $k$1$ph = 0, $matches$0$ = 0, $matches$0135 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $not$ = 0, $or$cond$us = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond9 = 0, $p$0141 = 0, $p$1 = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$324 = 0, $p$4 = 0;
 var $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0140 = 0, $pos$1 = 0, $pos$2 = 0, $s$0133 = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0;
 var $st = 0, $vacopy_currentptr = 0, $wc = 0, $wcs$0134 = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph165 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$025 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2$i = sp + 16|0;
 $st = sp + 8|0;
 $scanset = sp + 33|0;
 $wc = sp;
 $0 = sp + 32|0;
 $1 = HEAP8[$fmt>>0]|0;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $matches$3 = 0;
  STACKTOP = sp;return ($matches$3|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 $5 = (($f) + 108|0);
 $6 = (($f) + 8|0);
 $7 = (($scanset) + 10|0);
 $8 = (($scanset) + 33|0);
 $9 = (($st) + 4|0);
 $10 = (($scanset) + 46|0);
 $11 = (($scanset) + 94|0);
 $13 = $1;$matches$0135 = 0;$p$0141 = $fmt;$pos$0140 = 0;$s$0133 = 0;$wcs$0134 = 0;
 L4: while(1) {
  $12 = $13&255;
  $14 = (_isspace($12)|0);
  $15 = ($14|0)==(0);
  L6: do {
   if ($15) {
    $42 = HEAP8[$p$0141>>0]|0;
    $43 = ($42<<24>>24)==(37);
    L21: do {
     if ($43) {
      $44 = (($p$0141) + 1|0);
      $45 = HEAP8[$44>>0]|0;
      do {
       if ((($45<<24>>24) == 42)) {
        $66 = (($p$0141) + 2|0);
        $dest$0 = 0;$p$2 = $66;
       } else if ((($45<<24>>24) == 37)) {
        break L21;
       } else {
        $67 = $45&255;
        $isdigittmp = (($67) + -48)|0;
        $isdigit = ($isdigittmp>>>0)<(10);
        if ($isdigit) {
         $68 = (($p$0141) + 2|0);
         $69 = HEAP8[$68>>0]|0;
         $70 = ($69<<24>>24)==(36);
         if ($70) {
          $vacopy_currentptr = HEAP32[$ap>>2]|0;
          HEAP32[$ap2$i>>2] = $vacopy_currentptr;
          $i$0$i = $isdigittmp;
          while(1) {
           $71 = ($i$0$i>>>0)>(1);
           $arglist_current = HEAP32[$ap2$i>>2]|0;
           $72 = HEAP32[$arglist_current>>2]|0;
           $arglist_next = (($arglist_current) + 4|0);
           HEAP32[$ap2$i>>2] = $arglist_next;
           $73 = (($i$0$i) + -1)|0;
           if ($71) {
            $i$0$i = $73;
           } else {
            break;
           }
          }
          $74 = (($p$0141) + 3|0);
          $dest$0 = $72;$p$2 = $74;
          break;
         }
        }
        $arglist_current2 = HEAP32[$ap>>2]|0;
        $75 = HEAP32[$arglist_current2>>2]|0;
        $arglist_next3 = (($arglist_current2) + 4|0);
        HEAP32[$ap>>2] = $arglist_next3;
        $dest$0 = $75;$p$2 = $44;
       }
      } while(0);
      $76 = HEAP8[$p$2>>0]|0;
      $77 = $76&255;
      $isdigittmp622 = (($77) + -48)|0;
      $isdigit723 = ($isdigittmp622>>>0)<(10);
      if ($isdigit723) {
       $81 = $77;$p$324 = $p$2;$width$025 = 0;
       while(1) {
        $78 = ($width$025*10)|0;
        $79 = (($78) + -48)|0;
        $80 = (($79) + ($81))|0;
        $82 = (($p$324) + 1|0);
        $83 = HEAP8[$82>>0]|0;
        $84 = $83&255;
        $isdigittmp6 = (($84) + -48)|0;
        $isdigit7 = ($isdigittmp6>>>0)<(10);
        if ($isdigit7) {
         $81 = $84;$p$324 = $82;$width$025 = $80;
        } else {
         $$lcssa21 = $83;$p$3$lcssa = $82;$width$0$lcssa = $80;
         break;
        }
       }
      } else {
       $$lcssa21 = $76;$p$3$lcssa = $p$2;$width$0$lcssa = 0;
      }
      $85 = ($$lcssa21<<24>>24)==(109);
      if ($85) {
       $86 = ($dest$0|0)!=(0|0);
       $87 = $86&1;
       $88 = (($p$3$lcssa) + 1|0);
       $$pre = HEAP8[$88>>0]|0;
       $91 = $$pre;$alloc$0 = $87;$p$4 = $88;$s$1 = 0;$wcs$1 = 0;
      } else {
       $91 = $$lcssa21;$alloc$0 = 0;$p$4 = $p$3$lcssa;$s$1 = $s$0133;$wcs$1 = $wcs$0134;
      }
      $89 = (($p$4) + 1|0);
      $90 = $91&255;
      switch ($90|0) {
      case 106:  {
       $p$5 = $89;$size$0 = 3;
       break;
      }
      case 76:  {
       $p$5 = $89;$size$0 = 2;
       break;
      }
      case 110: case 112: case 67: case 83: case 91: case 99: case 115: case 88: case 71: case 70: case 69: case 65: case 103: case 102: case 101: case 97: case 120: case 117: case 111: case 105: case 100:  {
       $p$5 = $p$4;$size$0 = 0;
       break;
      }
      case 104:  {
       $92 = HEAP8[$89>>0]|0;
       $93 = ($92<<24>>24)==(104);
       $94 = (($p$4) + 2|0);
       $$10 = $93 ? $94 : $89;
       $$11 = $93 ? -2 : -1;
       $p$5 = $$10;$size$0 = $$11;
       break;
      }
      case 108:  {
       $95 = HEAP8[$89>>0]|0;
       $96 = ($95<<24>>24)==(108);
       $97 = (($p$4) + 2|0);
       $$12 = $96 ? $97 : $89;
       $$13 = $96 ? 3 : 1;
       $p$5 = $$12;$size$0 = $$13;
       break;
      }
      case 116: case 122:  {
       $p$5 = $89;$size$0 = 1;
       break;
      }
      default: {
       $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
       label = 162;
       break L4;
      }
      }
      $98 = HEAP8[$p$5>>0]|0;
      $99 = $98&255;
      $100 = $99 & 47;
      $101 = ($100|0)==(3);
      $102 = $99 | 32;
      $$ = $101 ? $102 : $99;
      $$size$0 = $101 ? 1 : $size$0;
      if ((($$|0) == 91)) {
       $pos$1 = $pos$0140;$width$1 = $width$0$lcssa;
      } else if ((($$|0) == 99)) {
       $103 = ($width$0$lcssa|0)<(1);
       $$width$0 = $103 ? 1 : $width$0$lcssa;
       $pos$1 = $pos$0140;$width$1 = $$width$0;
      } else if ((($$|0) == 110)) {
       $104 = ($pos$0140|0)<(0);
       $105 = $104 << 31 >> 31;
       $106 = ($dest$0|0)==(0|0);
       if ($106) {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       switch ($$size$0|0) {
       case -1:  {
        $108 = $pos$0140&65535;
        HEAP16[$dest$0>>1] = $108;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 0:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 3:  {
        $109 = $dest$0;
        $110 = $109;
        HEAP32[$110>>2] = $pos$0140;
        $111 = (($109) + 4)|0;
        $112 = $111;
        HEAP32[$112>>2] = $105;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case 1:  {
        HEAP32[$dest$0>>2] = $pos$0140;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       case -2:  {
        $107 = $pos$0140&255;
        HEAP8[$dest$0>>0] = $107;
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
        break;
       }
       default: {
        $matches$1 = $matches$0135;$p$11 = $p$5;$pos$2 = $pos$0140;$s$5 = $s$1;$wcs$6 = $wcs$1;
        break L6;
       }
       }
      } else {
       ___shlim($f,0);
       while(1) {
        $113 = HEAP32[$3>>2]|0;
        $114 = HEAP32[$4>>2]|0;
        $115 = ($113>>>0)<($114>>>0);
        if ($115) {
         $116 = (($113) + 1|0);
         HEAP32[$3>>2] = $116;
         $117 = HEAP8[$113>>0]|0;
         $118 = $117&255;
         $120 = $118;
        } else {
         $119 = (___shgetc($f)|0);
         $120 = $119;
        }
        $121 = (_isspace($120)|0);
        $122 = ($121|0)==(0);
        if ($122) {
         break;
        }
       }
       $123 = HEAP32[$4>>2]|0;
       $124 = ($123|0)==(0|0);
       $$pre229 = HEAP32[$3>>2]|0;
       if ($124) {
        $129 = $$pre229;
       } else {
        $125 = (($$pre229) + -1|0);
        HEAP32[$3>>2] = $125;
        $129 = $125;
       }
       $126 = HEAP32[$5>>2]|0;
       $127 = HEAP32[$6>>2]|0;
       $128 = $129;
       $130 = $127;
       $131 = (($126) + ($pos$0140))|0;
       $132 = (($131) + ($128))|0;
       $133 = (($132) - ($130))|0;
       $pos$1 = $133;$width$1 = $width$0$lcssa;
      }
      ___shlim($f,$width$1);
      $134 = HEAP32[$3>>2]|0;
      $135 = HEAP32[$4>>2]|0;
      $136 = ($134>>>0)<($135>>>0);
      if ($136) {
       $137 = (($134) + 1|0);
       HEAP32[$3>>2] = $137;
       $141 = $135;
      } else {
       $138 = (___shgetc($f)|0);
       $139 = ($138|0)<(0);
       if ($139) {
        $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
        label = 162;
        break L4;
       }
       $$pre231 = HEAP32[$4>>2]|0;
       $141 = $$pre231;
      }
      $140 = ($141|0)==(0|0);
      if (!($140)) {
       $142 = HEAP32[$3>>2]|0;
       $143 = (($142) + -1|0);
       HEAP32[$3>>2] = $143;
      }
      L78: do {
       switch ($$|0) {
       case 111:  {
        $base$0 = 8;
        label = 144;
        break;
       }
       case 117: case 100:  {
        $base$0 = 10;
        label = 144;
        break;
       }
       case 105:  {
        $base$0 = 0;
        label = 144;
        break;
       }
       case 71: case 103: case 70: case 102: case 69: case 101: case 65: case 97:  {
        $324 = (+___floatscan($f,$$size$0,0));
        $325 = HEAP32[$5>>2]|0;
        $326 = HEAP32[$3>>2]|0;
        $327 = HEAP32[$6>>2]|0;
        $328 = $326;
        $329 = $327;
        $330 = (($329) - ($328))|0;
        $331 = ($325|0)==($330|0);
        if ($331) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $332 = ($dest$0|0)==(0|0);
        if ($332) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         if ((($$size$0|0) == 0)) {
          $333 = $324;
          HEAPF32[$dest$0>>2] = $333;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 1)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else if ((($$size$0|0) == 2)) {
          HEAPF64[$dest$0>>3] = $324;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         } else {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L78;
         }
        }
        break;
       }
       case 91: case 99: case 115:  {
        $144 = ($$|0)==(99);
        $145 = $$ & 239;
        $146 = ($145|0)==(99);
        L90: do {
         if ($146) {
          $147 = ($$|0)==(115);
          _memset(($scanset|0),-1,257)|0;
          HEAP8[$scanset>>0] = 0;
          if ($147) {
           HEAP8[$8>>0] = 0;
           ;HEAP8[$7+0>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;HEAP8[$7+4>>0]=0|0;
           $p$9 = $p$5;
          } else {
           $p$9 = $p$5;
          }
         } else {
          $148 = (($p$5) + 1|0);
          $149 = HEAP8[$148>>0]|0;
          $150 = ($149<<24>>24)==(94);
          $151 = (($p$5) + 2|0);
          $invert$0 = $150&1;
          $p$6 = $150 ? $151 : $148;
          $152 = $150&1;
          _memset(($scanset|0),($152|0),257)|0;
          HEAP8[$scanset>>0] = 0;
          $153 = HEAP8[$p$6>>0]|0;
          if ((($153<<24>>24) == 93)) {
           $157 = (($p$6) + 1|0);
           $158 = $invert$0 ^ 1;
           $159 = $158&255;
           HEAP8[$11>>0] = $159;
           $$pre$phi243Z2D = $159;$p$7$ph = $157;
          } else if ((($153<<24>>24) == 45)) {
           $154 = (($p$6) + 1|0);
           $155 = $invert$0 ^ 1;
           $156 = $155&255;
           HEAP8[$10>>0] = $156;
           $$pre$phi243Z2D = $156;$p$7$ph = $154;
          } else {
           $$pre241 = $invert$0 ^ 1;
           $$pre242 = $$pre241&255;
           $$pre$phi243Z2D = $$pre242;$p$7$ph = $p$6;
          }
          $p$7 = $p$7$ph;
          while(1) {
           $160 = HEAP8[$p$7>>0]|0;
           if ((($160<<24>>24) == 0)) {
            $alloc$0224 = $alloc$0;$s$6 = $s$1;$wcs$7 = $wcs$1;
            label = 162;
            break L4;
           } else if ((($160<<24>>24) == 93)) {
            $p$9 = $p$7;
            break L90;
           } else if ((($160<<24>>24) == 45)) {
            $161 = (($p$7) + 1|0);
            $162 = HEAP8[$161>>0]|0;
            if ((($162<<24>>24) == 93) | (($162<<24>>24) == 0)) {
             $173 = 45;$p$8 = $p$7;
            } else {
             $163 = (($p$7) + -1|0);
             $164 = HEAP8[$163>>0]|0;
             $165 = ($164&255)<($162&255);
             if ($165) {
              $166 = $164&255;
              $c$030 = $166;
              while(1) {
               $167 = (($c$030) + 1)|0;
               $168 = (($scanset) + ($167)|0);
               HEAP8[$168>>0] = $$pre$phi243Z2D;
               $169 = HEAP8[$161>>0]|0;
               $170 = $169&255;
               $171 = ($167|0)<($170|0);
               if ($171) {
                $c$030 = $167;
               } else {
                $173 = $169;$p$8 = $161;
                break;
               }
              }
             } else {
              $173 = $162;$p$8 = $161;
             }
            }
           } else {
            $173 = $160;$p$8 = $p$7;
           }
           $172 = $173&255;
           $174 = (($172) + 1)|0;
           $175 = (($scanset) + ($174)|0);
           HEAP8[$175>>0] = $$pre$phi243Z2D;
           $176 = (($p$8) + 1|0);
           $p$7 = $176;
          }
         }
        } while(0);
        $177 = (($width$1) + 1)|0;
        $$8 = $144 ? $177 : 31;
        $178 = ($$size$0|0)==(1);
        $179 = ($alloc$0|0)!=(0);
        L109: do {
         if ($178) {
          if ($179) {
           $180 = $$8 << 2;
           $181 = (_malloc($180)|0);
           $182 = ($181|0)==(0|0);
           if ($182) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $181;
            label = 162;
            break L4;
           } else {
            $wcs$2 = $181;
           }
          } else {
           $wcs$2 = $dest$0;
          }
          HEAP32[$st>>2] = 0;
          HEAP32[$9>>2] = 0;
          $i$0$ph = 0;$k$0$ph = $$8;$wcs$3$ph = $wcs$2;
          L144: while(1) {
           $183 = ($wcs$3$ph|0)==(0|0);
           if ($183) {
            while(1) {
             $186 = HEAP32[$3>>2]|0;
             $197 = HEAP32[$4>>2]|0;
             $198 = ($186>>>0)<($197>>>0);
             if ($198) {
              $185 = (($186) + 1|0);
              HEAP32[$3>>2] = $185;
              $187 = HEAP8[$186>>0]|0;
              $188 = $187&255;
              $190 = $188;
             } else {
              $184 = (___shgetc($f)|0);
              $190 = $184;
             }
             $189 = (($190) + 1)|0;
             $191 = (($scanset) + ($189)|0);
             $192 = HEAP8[$191>>0]|0;
             $193 = ($192<<24>>24)==(0);
             if ($193) {
              $i$0$ph49$lcssa = $i$0$ph;$wcs$3$ph165 = 0;
              break L144;
             }
             $194 = $190&255;
             HEAP8[$0>>0] = $194;
             $195 = (_mbrtowc($wc,$0,1,$st)|0);
             if ((($195|0) == -2)) {
              continue;
             } else if ((($195|0) == -1)) {
              $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
              label = 162;
              break L4;
             }
             $196 = ($i$0$ph|0)==($k$0$ph|0);
             $or$cond$us = $179 & $196;
             if ($or$cond$us) {
              $i$1$lcssa = $i$0$ph;
              break;
             }
            }
           } else {
            if ($179) {
             $i$0$ph49$us56 = $i$0$ph;
            } else {
             $i$0$ph49 = $i$0$ph;
             label = 98;
             break;
            }
            while(1) {
             while(1) {
              $201 = HEAP32[$3>>2]|0;
              $215 = HEAP32[$4>>2]|0;
              $216 = ($201>>>0)<($215>>>0);
              if ($216) {
               $200 = (($201) + 1|0);
               HEAP32[$3>>2] = $200;
               $202 = HEAP8[$201>>0]|0;
               $203 = $202&255;
               $205 = $203;
              } else {
               $199 = (___shgetc($f)|0);
               $205 = $199;
              }
              $204 = (($205) + 1)|0;
              $206 = (($scanset) + ($204)|0);
              $207 = HEAP8[$206>>0]|0;
              $208 = ($207<<24>>24)==(0);
              if ($208) {
               $i$0$ph49$lcssa = $i$0$ph49$us56;$wcs$3$ph165 = $wcs$3$ph;
               break L144;
              }
              $209 = $205&255;
              HEAP8[$0>>0] = $209;
              $210 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($210|0) == -1)) {
               $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($210|0) == -2))) {
               break;
              }
             }
             $211 = HEAP32[$wc>>2]|0;
             $212 = (($i$0$ph49$us56) + 1)|0;
             $213 = (($wcs$3$ph) + ($i$0$ph49$us56<<2)|0);
             HEAP32[$213>>2] = $211;
             $214 = ($212|0)==($k$0$ph|0);
             if ($214) {
              $i$1$lcssa = $k$0$ph;
              break;
             } else {
              $i$0$ph49$us56 = $212;
             }
            }
           }
           $factor = $k$0$ph << 1;
           $234 = $factor | 1;
           $235 = $234 << 2;
           $236 = (_realloc($wcs$3$ph,$235)|0);
           $237 = ($236|0)==(0|0);
           if ($237) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
            label = 162;
            break L4;
           }
           $i$0$ph = $i$1$lcssa;$k$0$ph = $234;$wcs$3$ph = $236;
          }
          L168: do {
           if ((label|0) == 98) {
            while(1) {
             label = 0;
             while(1) {
              $217 = HEAP32[$3>>2]|0;
              $218 = HEAP32[$4>>2]|0;
              $219 = ($217>>>0)<($218>>>0);
              if ($219) {
               $220 = (($217) + 1|0);
               HEAP32[$3>>2] = $220;
               $221 = HEAP8[$217>>0]|0;
               $222 = $221&255;
               $225 = $222;
              } else {
               $223 = (___shgetc($f)|0);
               $225 = $223;
              }
              $224 = (($225) + 1)|0;
              $226 = (($scanset) + ($224)|0);
              $227 = HEAP8[$226>>0]|0;
              $228 = ($227<<24>>24)==(0);
              if ($228) {
               $i$0$ph49$lcssa = $i$0$ph49;$wcs$3$ph165 = $wcs$3$ph;
               break L168;
              }
              $229 = $225&255;
              HEAP8[$0>>0] = $229;
              $230 = (_mbrtowc($wc,$0,1,$st)|0);
              if ((($230|0) == -1)) {
               $alloc$0224 = 0;$s$6 = 0;$wcs$7 = $wcs$3$ph;
               label = 162;
               break L4;
              } else if (!((($230|0) == -2))) {
               break;
              }
             }
             $231 = HEAP32[$wc>>2]|0;
             $232 = (($i$0$ph49) + 1)|0;
             $233 = (($wcs$3$ph) + ($i$0$ph49<<2)|0);
             HEAP32[$233>>2] = $231;
             $i$0$ph49 = $232;
             label = 98;
            }
           }
          } while(0);
          $238 = (_mbsinit($st)|0);
          $239 = ($238|0)==(0);
          if ($239) {
           $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = $wcs$3$ph165;
           label = 162;
           break L4;
          } else {
           $i$4 = $i$0$ph49$lcssa;$s$3 = 0;$wcs$4 = $wcs$3$ph165;
          }
         } else {
          if ($179) {
           $240 = (_malloc($$8)|0);
           $241 = ($240|0)==(0|0);
           if ($241) {
            $alloc$0224 = $alloc$0;$s$6 = 0;$wcs$7 = 0;
            label = 162;
            break L4;
           } else {
            $i$2$ph = 0;$k$1$ph = $$8;$s$2$ph = $240;
           }
           while(1) {
            $i$2 = $i$2$ph;
            while(1) {
             $242 = HEAP32[$3>>2]|0;
             $243 = HEAP32[$4>>2]|0;
             $244 = ($242>>>0)<($243>>>0);
             if ($244) {
              $245 = (($242) + 1|0);
              HEAP32[$3>>2] = $245;
              $246 = HEAP8[$242>>0]|0;
              $247 = $246&255;
              $250 = $247;
             } else {
              $248 = (___shgetc($f)|0);
              $250 = $248;
             }
             $249 = (($250) + 1)|0;
             $251 = (($scanset) + ($249)|0);
             $252 = HEAP8[$251>>0]|0;
             $253 = ($252<<24>>24)==(0);
             if ($253) {
              $i$4 = $i$2;$s$3 = $s$2$ph;$wcs$4 = 0;
              break L109;
             }
             $254 = $250&255;
             $255 = (($i$2) + 1)|0;
             $256 = (($s$2$ph) + ($i$2)|0);
             HEAP8[$256>>0] = $254;
             $257 = ($255|0)==($k$1$ph|0);
             if ($257) {
              break;
             } else {
              $i$2 = $255;
             }
            }
            $factor17 = $k$1$ph << 1;
            $258 = $factor17 | 1;
            $259 = (_realloc($s$2$ph,$258)|0);
            $260 = ($259|0)==(0|0);
            if ($260) {
             $alloc$0224 = $alloc$0;$s$6 = $s$2$ph;$wcs$7 = 0;
             label = 162;
             break L4;
            } else {
             $i$2$ph$phi = $k$1$ph;$k$1$ph = $258;$s$2$ph = $259;$i$2$ph = $i$2$ph$phi;
            }
           }
          }
          $261 = ($dest$0|0)==(0|0);
          if ($261) {
           $279 = $141;
           while(1) {
            $277 = HEAP32[$3>>2]|0;
            $278 = ($277>>>0)<($279>>>0);
            if ($278) {
             $280 = (($277) + 1|0);
             HEAP32[$3>>2] = $280;
             $281 = HEAP8[$277>>0]|0;
             $282 = $281&255;
             $285 = $282;
            } else {
             $283 = (___shgetc($f)|0);
             $285 = $283;
            }
            $284 = (($285) + 1)|0;
            $286 = (($scanset) + ($284)|0);
            $287 = HEAP8[$286>>0]|0;
            $288 = ($287<<24>>24)==(0);
            if ($288) {
             $i$4 = 0;$s$3 = 0;$wcs$4 = 0;
             break L109;
            }
            $$pre237 = HEAP32[$4>>2]|0;
            $279 = $$pre237;
           }
          } else {
           $264 = $141;$i$3 = 0;
           while(1) {
            $262 = HEAP32[$3>>2]|0;
            $263 = ($262>>>0)<($264>>>0);
            if ($263) {
             $265 = (($262) + 1|0);
             HEAP32[$3>>2] = $265;
             $266 = HEAP8[$262>>0]|0;
             $267 = $266&255;
             $270 = $267;
            } else {
             $268 = (___shgetc($f)|0);
             $270 = $268;
            }
            $269 = (($270) + 1)|0;
            $271 = (($scanset) + ($269)|0);
            $272 = HEAP8[$271>>0]|0;
            $273 = ($272<<24>>24)==(0);
            if ($273) {
             $i$4 = $i$3;$s$3 = $dest$0;$wcs$4 = 0;
             break L109;
            }
            $274 = $270&255;
            $275 = (($i$3) + 1)|0;
            $276 = (($dest$0) + ($i$3)|0);
            HEAP8[$276>>0] = $274;
            $$pre238 = HEAP32[$4>>2]|0;
            $264 = $$pre238;$i$3 = $275;
           }
          }
         }
        } while(0);
        $289 = HEAP32[$4>>2]|0;
        $290 = ($289|0)==(0|0);
        $$pre235 = HEAP32[$3>>2]|0;
        if ($290) {
         $295 = $$pre235;
        } else {
         $291 = (($$pre235) + -1|0);
         HEAP32[$3>>2] = $291;
         $295 = $291;
        }
        $292 = HEAP32[$5>>2]|0;
        $293 = HEAP32[$6>>2]|0;
        $294 = $295;
        $296 = $293;
        $297 = (($294) - ($296))|0;
        $298 = (($297) + ($292))|0;
        $299 = ($298|0)==(0);
        if ($299) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        $$not = $144 ^ 1;
        $300 = ($298|0)==($width$1|0);
        $or$cond9 = $300 | $$not;
        if (!($or$cond9)) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$3;$wcs$9 = $wcs$4;
         break L4;
        }
        do {
         if ($179) {
          if ($178) {
           HEAP32[$dest$0>>2] = $wcs$4;
           break;
          } else {
           HEAP32[$dest$0>>2] = $s$3;
           break;
          }
         }
        } while(0);
        if ($144) {
         $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
        } else {
         $301 = ($wcs$4|0)==(0|0);
         if (!($301)) {
          $302 = (($wcs$4) + ($i$4<<2)|0);
          HEAP32[$302>>2] = 0;
         }
         $303 = ($s$3|0)==(0|0);
         if ($303) {
          $p$10 = $p$9;$s$4 = 0;$wcs$5 = $wcs$4;
         } else {
          $304 = (($s$3) + ($i$4)|0);
          HEAP8[$304>>0] = 0;
          $p$10 = $p$9;$s$4 = $s$3;$wcs$5 = $wcs$4;
         }
        }
        break;
       }
       case 120: case 88: case 112:  {
        $base$0 = 16;
        label = 144;
        break;
       }
       default: {
        $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
       }
       }
      } while(0);
      L197: do {
       if ((label|0) == 144) {
        label = 0;
        $305 = (___intscan($f,$base$0,0,-1,-1)|0);
        $306 = tempRet0;
        $307 = HEAP32[$5>>2]|0;
        $308 = HEAP32[$3>>2]|0;
        $309 = HEAP32[$6>>2]|0;
        $310 = $308;
        $311 = $309;
        $312 = (($311) - ($310))|0;
        $313 = ($307|0)==($312|0);
        if ($313) {
         $alloc$2 = $alloc$0;$matches$2 = $matches$0135;$s$8 = $s$1;$wcs$9 = $wcs$1;
         break L4;
        }
        $314 = ($$|0)==(112);
        $315 = ($dest$0|0)!=(0|0);
        $or$cond3 = $314 & $315;
        if ($or$cond3) {
         $316 = $305;
         HEAP32[$dest$0>>2] = $316;
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
         break;
        }
        $317 = ($dest$0|0)==(0|0);
        if ($317) {
         $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
        } else {
         switch ($$size$0|0) {
         case -1:  {
          $319 = $305&65535;
          HEAP16[$dest$0>>1] = $319;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 0:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 1:  {
          HEAP32[$dest$0>>2] = $305;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case 3:  {
          $320 = $dest$0;
          $321 = $320;
          HEAP32[$321>>2] = $305;
          $322 = (($320) + 4)|0;
          $323 = $322;
          HEAP32[$323>>2] = $306;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         case -2:  {
          $318 = $305&255;
          HEAP8[$dest$0>>0] = $318;
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
          break;
         }
         default: {
          $p$10 = $p$5;$s$4 = $s$1;$wcs$5 = $wcs$1;
          break L197;
         }
         }
        }
       }
      } while(0);
      $334 = HEAP32[$5>>2]|0;
      $335 = HEAP32[$3>>2]|0;
      $336 = HEAP32[$6>>2]|0;
      $337 = $335;
      $338 = $336;
      $339 = (($334) + ($pos$1))|0;
      $340 = (($339) + ($337))|0;
      $341 = (($340) - ($338))|0;
      $not$ = ($dest$0|0)!=(0|0);
      $342 = $not$&1;
      $matches$0$ = (($342) + ($matches$0135))|0;
      $matches$1 = $matches$0$;$p$11 = $p$10;$pos$2 = $341;$s$5 = $s$4;$wcs$6 = $wcs$5;
      break L6;
     }
    } while(0);
    $46 = $43&1;
    $47 = (($p$0141) + ($46)|0);
    ___shlim($f,0);
    $48 = HEAP32[$3>>2]|0;
    $49 = HEAP32[$4>>2]|0;
    $50 = ($48>>>0)<($49>>>0);
    if ($50) {
     $51 = (($48) + 1|0);
     HEAP32[$3>>2] = $51;
     $52 = HEAP8[$48>>0]|0;
     $53 = $52&255;
     $58 = $53;
    } else {
     $54 = (___shgetc($f)|0);
     $58 = $54;
    }
    $55 = HEAP8[$47>>0]|0;
    $56 = $55&255;
    $57 = ($58|0)==($56|0);
    if (!($57)) {
     label = 19;
     break L4;
    }
    $65 = (($pos$0140) + 1)|0;
    $matches$1 = $matches$0135;$p$11 = $47;$pos$2 = $65;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   } else {
    $p$1 = $p$0141;
    while(1) {
     $16 = (($p$1) + 1|0);
     $17 = HEAP8[$16>>0]|0;
     $18 = $17&255;
     $19 = (_isspace($18)|0);
     $20 = ($19|0)==(0);
     if ($20) {
      break;
     } else {
      $p$1 = $16;
     }
    }
    ___shlim($f,0);
    while(1) {
     $21 = HEAP32[$3>>2]|0;
     $22 = HEAP32[$4>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = (($21) + 1|0);
      HEAP32[$3>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $28 = $26;
     } else {
      $27 = (___shgetc($f)|0);
      $28 = $27;
     }
     $29 = (_isspace($28)|0);
     $30 = ($29|0)==(0);
     if ($30) {
      break;
     }
    }
    $31 = HEAP32[$4>>2]|0;
    $32 = ($31|0)==(0|0);
    $$pre240 = HEAP32[$3>>2]|0;
    if ($32) {
     $37 = $$pre240;
    } else {
     $33 = (($$pre240) + -1|0);
     HEAP32[$3>>2] = $33;
     $37 = $33;
    }
    $34 = HEAP32[$5>>2]|0;
    $35 = HEAP32[$6>>2]|0;
    $36 = $37;
    $38 = $35;
    $39 = (($34) + ($pos$0140))|0;
    $40 = (($39) + ($36))|0;
    $41 = (($40) - ($38))|0;
    $matches$1 = $matches$0135;$p$11 = $p$1;$pos$2 = $41;$s$5 = $s$0133;$wcs$6 = $wcs$0134;
   }
  } while(0);
  $343 = (($p$11) + 1|0);
  $344 = HEAP8[$343>>0]|0;
  $345 = ($344<<24>>24)==(0);
  if ($345) {
   $matches$3 = $matches$1;
   label = 166;
   break;
  } else {
   $13 = $344;$matches$0135 = $matches$1;$p$0141 = $343;$pos$0140 = $pos$2;$s$0133 = $s$5;$wcs$0134 = $wcs$6;
  }
 }
 if ((label|0) == 19) {
  $59 = HEAP32[$4>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = HEAP32[$3>>2]|0;
   $62 = (($61) + -1|0);
   HEAP32[$3>>2] = $62;
  }
  $63 = ($58|0)>(-1);
  $64 = ($matches$0135|0)!=(0);
  $or$cond5 = $63 | $64;
  if ($or$cond5) {
   $matches$3 = $matches$0135;
   STACKTOP = sp;return ($matches$3|0);
  } else {
   $alloc$1 = 0;$s$7 = $s$0133;$wcs$8 = $wcs$0134;
   label = 163;
  }
 }
 else if ((label|0) == 162) {
  $$old4 = ($matches$0135|0)==(0);
  if ($$old4) {
   $alloc$1 = $alloc$0224;$s$7 = $s$6;$wcs$8 = $wcs$7;
   label = 163;
  } else {
   $alloc$2 = $alloc$0224;$matches$2 = $matches$0135;$s$8 = $s$6;$wcs$9 = $wcs$7;
  }
 }
 else if ((label|0) == 166) {
  STACKTOP = sp;return ($matches$3|0);
 }
 if ((label|0) == 163) {
  $alloc$2 = $alloc$1;$matches$2 = -1;$s$8 = $s$7;$wcs$9 = $wcs$8;
 }
 $346 = ($alloc$2|0)==(0);
 if ($346) {
  $matches$3 = $matches$2;
  STACKTOP = sp;return ($matches$3|0);
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;return ($matches$3|0);
}
function _vsscanf($s,$fmt,$ap) {
 $s = $s|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $f = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 dest=$f+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f) + 32|0);
 HEAP32[$0>>2] = 700;
 $1 = (($f) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = (($f) + 76|0);
 HEAP32[$2>>2] = -1;
 $3 = (($f) + 84|0);
 HEAP32[$3>>2] = $s;
 $4 = (_MUSL_vfscanf($f,$fmt,$ap)|0);
 STACKTOP = sp;return ($4|0);
}
function _wcslen($s) {
 $s = $s|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP32[$$0>>2]|0;
  $1 = ($0|0)==(0);
  $2 = (($$0) + 4|0);
  if ($1) {
   break;
  } else {
   $$0 = $2;
  }
 }
 $3 = $$0;
 $4 = $s;
 $5 = (($3) - ($4))|0;
 $6 = $5 >> 2;
 STACKTOP = sp;return ($6|0);
}
function _wmemcpy($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  STACKTOP = sp;return ($d|0);
 } else {
  $$014 = $n;$$023 = $s;$$05 = $d;
 }
 while(1) {
  $1 = (($$014) + -1)|0;
  $2 = (($$023) + 4|0);
  $3 = HEAP32[$$023>>2]|0;
  $4 = (($$05) + 4|0);
  HEAP32[$$05>>2] = $3;
  $5 = ($1|0)==(0);
  if ($5) {
   break;
  } else {
   $$014 = $1;$$023 = $2;$$05 = $4;
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemmove($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $d;
 $1 = $s;
 $2 = (($0) - ($1))|0;
 $3 = $2 >> 2;
 $4 = ($3>>>0)<($n>>>0);
 $5 = ($n|0)==(0);
 if ($4) {
  if (!($5)) {
   $$in = $n;
   while(1) {
    $6 = (($$in) + -1)|0;
    $7 = (($s) + ($6<<2)|0);
    $8 = HEAP32[$7>>2]|0;
    $9 = (($d) + ($6<<2)|0);
    HEAP32[$9>>2] = $8;
    $10 = ($6|0)==(0);
    if ($10) {
     break;
    } else {
     $$in = $6;
    }
   }
  }
 } else {
  if (!($5)) {
   $$025 = $s;$$07 = $d;$$16 = $n;
   while(1) {
    $11 = (($$16) + -1)|0;
    $12 = (($$025) + 4|0);
    $13 = HEAP32[$$025>>2]|0;
    $14 = (($$07) + 4|0);
    HEAP32[$$07>>2] = $13;
    $15 = ($11|0)==(0);
    if ($15) {
     break;
    } else {
     $$025 = $12;$$07 = $14;$$16 = $11;
    }
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _wmemset($d,$c,$n) {
 $d = $d|0;
 $c = $c|0;
 $n = $n|0;
 var $$012 = 0, $$03 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if (!($0)) {
  $$012 = $n;$$03 = $d;
  while(1) {
   $1 = (($$012) + -1)|0;
   $2 = (($$03) + 4|0);
   HEAP32[$$03>>2] = $c;
   $3 = ($1|0)==(0);
   if ($3) {
    break;
   } else {
    $$012 = $1;$$03 = $2;
   }
  }
 }
 STACKTOP = sp;return ($d|0);
}
function _do_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___string_read($f,$buf,$len)|0);
 STACKTOP = sp;return ($0|0);
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[_stderr>>2]|0;
 (_vfprintf(($0|0),($format|0),($list|0))|0);
 (_fputc(10,($0|0))|0);
 _abort();
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((20488|0),(701|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[20480>>2]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(20496,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 $1 = (_malloc($$size)|0);
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$lcssa = $1;
  STACKTOP = sp;return ($$lcssa|0);
 }
 while(1) {
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 4;
   break;
  }
  FUNCTION_TABLE_v[$3 & 1023]();
  $5 = (_malloc($$size)|0);
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $$lcssa = $5;
   label = 5;
   break;
  }
 }
 if ((label|0) == 4) {
  $7 = (___cxa_allocate_exception(4)|0);
  HEAP32[$7>>2] = ((20664 + 8|0));
  ___cxa_throw(($7|0),(20720|0),(349|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 STACKTOP = sp;return;
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20664 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (20688|0);
}
function __ZSt11__terminatePFvvE($func) {
 $func = $func|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 invoke_v($func|0);
 $0 = __THREW__; __THREW__ = 0;
 $1 = $0&1;
 if (!($1)) {
  __THREW__ = 0;
  invoke_vii(702,(20736|0),($vararg_buffer|0));
  $2 = __THREW__; __THREW__ = 0;
  $3 = $2&1;
  if (!($3)) {
   // unreachable;
  }
 }
 $4 = ___cxa_find_matching_catch(0|0)|0;
 $5 = tempRet0;
 (___cxa_begin_catch(($4|0))|0);
 __THREW__ = 0;
 invoke_vii(702,(20776|0),($vararg_buffer1|0));
 $6 = __THREW__; __THREW__ = 0;
 $7 = $6&1;
 if (!($7)) {
  // unreachable;
 }
 $8 = ___cxa_find_matching_catch(0|0)|0;
 $9 = tempRet0;
 __THREW__ = 0;
 invoke_v(464);
 $10 = __THREW__; __THREW__ = 0;
 $11 = $10&1;
 if ($11) {
  $12 = ___cxa_find_matching_catch(0|0)|0;
  $13 = tempRet0;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  ___clang_call_terminate($8);
  // unreachable;
 }
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 __THREW__ = 0;
 $0 = (invoke_i(703)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $21 = ___cxa_find_matching_catch(0|0)|0;
  $22 = tempRet0;
  ___clang_call_terminate($21);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = (($4) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = (($4) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __ZSt11__terminatePFvvE($18);
    // unreachable;
   }
  }
 }
 $19 = HEAP32[5074]|0;HEAP32[5074] = (($19+0)|0);
 $20 = $19;
 __ZSt11__terminatePFvvE($20);
 // unreachable;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[20832>>2]|0;HEAP32[20832>>2] = (($0+0)|0);
 $1 = $0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20864 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((20888 + 8|0));
 $0 = (($this) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 STACKTOP = sp;return;
}
function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 STACKTOP = sp;return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNSt8bad_castC2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = ((21112 + 8|0));
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNSt8bad_castD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return (21136|0);
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$1 = 1;
  STACKTOP = sp;return ($$1|0);
 }
 $1 = ($thrown_type|0)==(0|0);
 if ($1) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $2 = (___dynamic_cast($thrown_type,21248,21304,0)|0);
 $3 = ($2|0)==(0|0);
 if ($3) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 dest=$info+0|0; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$info>>2] = $2;
 $4 = (($info) + 8|0);
 HEAP32[$4>>2] = $this;
 $5 = (($info) + 12|0);
 HEAP32[$5>>2] = -1;
 $6 = (($info) + 48|0);
 HEAP32[$6>>2] = 1;
 $7 = HEAP32[$2>>2]|0;
 $8 = (($7) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = HEAP32[$adjustedPtr>>2]|0;
 FUNCTION_TABLE_viiii[$9 & 1023]($2,$info,$10,1);
 $11 = (($info) + 24|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(1);
 if (!($13)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $14 = (($info) + 16|0);
 $15 = HEAP32[$14>>2]|0;
 HEAP32[$adjustedPtr>>2] = $15;
 $$1 = 1;
 STACKTOP = sp;return ($$1|0);
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  HEAP32[$0>>2] = $adjustedPtr;
  $3 = (($info) + 24|0);
  HEAP32[$3>>2] = $path_below;
  $4 = (($info) + 36|0);
  HEAP32[$4>>2] = 1;
  STACKTOP = sp;return;
 }
 $5 = ($1|0)==($adjustedPtr|0);
 if (!($5)) {
  $9 = (($info) + 36|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$9>>2] = $11;
  $12 = (($info) + 24|0);
  HEAP32[$12>>2] = 2;
  $13 = (($info) + 54|0);
  HEAP8[$13>>0] = 1;
  STACKTOP = sp;return;
 }
 $6 = (($info) + 24|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(2);
 if (!($8)) {
  STACKTOP = sp;return;
 }
 HEAP32[$6>>2] = $path_below;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 1023]($4,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$adjustedPtr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 28|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($adjustedPtr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiii[$11 & 1023]($8,$info,$12,$15);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($this) + 16|0);
 $4 = (($this) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($this) + ($5<<3)|0) + 16|0);
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($3,$info,$adjustedPtr,$path_below);
 $7 = ($5|0)>(1);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = (($this) + 24|0);
 $9 = (($info) + 54|0);
 $p$0 = $8;
 while(1) {
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0,$info,$adjustedPtr,$path_below);
  $10 = HEAP8[$9>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   label = 7;
   break;
  }
  $12 = (($p$0) + 8|0);
  $13 = ($12>>>0)<($6>>>0);
  if ($13) {
   $p$0 = $12;
  } else {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return;
 }
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = (($0) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2;
 $4 = (($static_ptr) + ($3)|0);
 $5 = (($0) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $7 = (($info) + 4|0);
 HEAP32[$7>>2] = $static_ptr;
 $8 = (($info) + 8|0);
 HEAP32[$8>>2] = $static_type;
 $9 = (($info) + 12|0);
 HEAP32[$9>>2] = $src2dst_offset;
 $10 = (($info) + 16|0);
 $11 = (($info) + 20|0);
 $12 = (($info) + 24|0);
 $13 = (($info) + 28|0);
 $14 = (($info) + 32|0);
 $15 = (($info) + 40|0);
 $16 = ($6|0)==($dst_type|0);
 dest=$10+0|0; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$10+36>>1]=0|0;HEAP8[$10+38>>0]=0|0;
 if ($16) {
  $17 = (($info) + 48|0);
  HEAP32[$17>>2] = 1;
  $18 = HEAP32[$6>>2]|0;
  $19 = (($18) + 20|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_viiiiii[$20 & 1023]($6,$info,$4,$4,1,0);
  $21 = HEAP32[$12>>2]|0;
  $22 = ($21|0)==(1);
  $$ = $22 ? $4 : 0;
  $dst_ptr$0 = $$;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 $23 = (($info) + 36|0);
 $24 = HEAP32[$6>>2]|0;
 $25 = (($24) + 24|0);
 $26 = HEAP32[$25>>2]|0;
 FUNCTION_TABLE_viiiii[$26 & 1023]($6,$info,$4,1,0);
 $27 = HEAP32[$23>>2]|0;
 if ((($27|0) == 0)) {
  $28 = HEAP32[$15>>2]|0;
  $29 = ($28|0)==(1);
  $30 = HEAP32[$13>>2]|0;
  $31 = ($30|0)==(1);
  $or$cond = $29 & $31;
  $32 = HEAP32[$14>>2]|0;
  $33 = ($32|0)==(1);
  $or$cond3 = $or$cond & $33;
  $34 = HEAP32[$11>>2]|0;
  $$8 = $or$cond3 ? $34 : 0;
  $dst_ptr$0 = $$8;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else if ((($27|0) == 1)) {
  $35 = HEAP32[$12>>2]|0;
  $36 = ($35|0)==(1);
  if (!($36)) {
   $37 = HEAP32[$15>>2]|0;
   $38 = ($37|0)==(0);
   $39 = HEAP32[$13>>2]|0;
   $40 = ($39|0)==(1);
   $or$cond5 = $38 & $40;
   $41 = HEAP32[$14>>2]|0;
   $42 = ($41|0)==(1);
   $or$cond7 = $or$cond5 & $42;
   if (!($or$cond7)) {
    $dst_ptr$0 = 0;
    STACKTOP = sp;return ($dst_ptr$0|0);
   }
  }
  $43 = HEAP32[$10>>2]|0;
  $dst_ptr$0 = $43;
  STACKTOP = sp;return ($dst_ptr$0|0);
 } else {
  $dst_ptr$0 = 0;
  STACKTOP = sp;return ($dst_ptr$0|0);
 }
 return (0)|0;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = (($info) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = (($info) + 52|0);
 HEAP8[$4>>0] = 1;
 $5 = (($info) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  HEAP32[$5>>2] = $dst_ptr;
  $8 = (($info) + 24|0);
  HEAP32[$8>>2] = $path_below;
  $9 = (($info) + 36|0);
  HEAP32[$9>>2] = 1;
  $10 = (($info) + 48|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(1);
  $13 = ($path_below|0)==(1);
  $or$cond = $12 & $13;
  if (!($or$cond)) {
   STACKTOP = sp;return;
  }
  $14 = (($info) + 54|0);
  HEAP8[$14>>0] = 1;
  STACKTOP = sp;return;
 }
 $15 = ($6|0)==($dst_ptr|0);
 if (!($15)) {
  $25 = (($info) + 36|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($26) + 1)|0;
  HEAP32[$25>>2] = $27;
  $28 = (($info) + 54|0);
  HEAP8[$28>>0] = 1;
  STACKTOP = sp;return;
 }
 $16 = (($info) + 24|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(2);
 if ($18) {
  HEAP32[$16>>2] = $path_below;
  $23 = $path_below;
 } else {
  $23 = $17;
 }
 $19 = (($info) + 48|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(1);
 $22 = ($23|0)==(1);
 $or$cond1 = $21 & $22;
 if (!($or$cond1)) {
  STACKTOP = sp;return;
 }
 $24 = (($info) + 54|0);
 HEAP8[$24>>0] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off012 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off014 = 0;
 var $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off023 = 0, $is_dst_type_derived_from_static_type$2$off024 = 0, $p$013 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $59 = (($this) + 16|0);
  $60 = (($this) + 12|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($this) + ($61<<3)|0) + 16|0);
  __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($59,$info,$current_ptr,$path_below,$use_strcmp);
  $63 = (($this) + 24|0);
  $64 = ($61|0)>(1);
  if (!($64)) {
   STACKTOP = sp;return;
  }
  $65 = (($this) + 8|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = $66 & 2;
  $68 = ($67|0)==(0);
  if ($68) {
   $69 = (($info) + 36|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = ($70|0)==(1);
   if (!($71)) {
    $77 = $66 & 1;
    $78 = ($77|0)==(0);
    if ($78) {
     $81 = (($info) + 54|0);
     $p2$2 = $63;
     while(1) {
      $90 = HEAP8[$81>>0]|0;
      $91 = ($90<<24>>24)==(0);
      if (!($91)) {
       label = 43;
       break;
      }
      $92 = HEAP32[$69>>2]|0;
      $93 = ($92|0)==(1);
      if ($93) {
       label = 43;
       break;
      }
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2,$info,$current_ptr,$path_below,$use_strcmp);
      $94 = (($p2$2) + 8|0);
      $95 = ($94>>>0)<($62>>>0);
      if ($95) {
       $p2$2 = $94;
      } else {
       label = 43;
       break;
      }
     }
     if ((label|0) == 43) {
      STACKTOP = sp;return;
     }
    }
    $79 = (($info) + 24|0);
    $80 = (($info) + 54|0);
    $p2$1 = $63;
    while(1) {
     $82 = HEAP8[$80>>0]|0;
     $83 = ($82<<24>>24)==(0);
     if (!($83)) {
      label = 43;
      break;
     }
     $84 = HEAP32[$69>>2]|0;
     $85 = ($84|0)==(1);
     if ($85) {
      $86 = HEAP32[$79>>2]|0;
      $87 = ($86|0)==(1);
      if ($87) {
       label = 43;
       break;
      }
     }
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1,$info,$current_ptr,$path_below,$use_strcmp);
     $88 = (($p2$1) + 8|0);
     $89 = ($88>>>0)<($62>>>0);
     if ($89) {
      $p2$1 = $88;
     } else {
      label = 43;
      break;
     }
    }
    if ((label|0) == 43) {
     STACKTOP = sp;return;
    }
   }
  }
  $72 = (($info) + 54|0);
  $p2$0 = $63;
  while(1) {
   $73 = HEAP8[$72>>0]|0;
   $74 = ($73<<24>>24)==(0);
   if (!($74)) {
    label = 43;
    break;
   }
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0,$info,$current_ptr,$path_below,$use_strcmp);
   $75 = (($p2$0) + 8|0);
   $76 = ($75>>>0)<($62>>>0);
   if ($76) {
    $p2$0 = $75;
   } else {
    label = 43;
    break;
   }
  }
  if ((label|0) == 43) {
   STACKTOP = sp;return;
  }
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($this) + 12|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ((($this) + ($24<<3)|0) + 16|0);
   $26 = ($24|0)>(0);
   L54: do {
    if ($26) {
     $27 = (($this) + 16|0);
     $28 = (($info) + 52|0);
     $29 = (($info) + 53|0);
     $30 = (($info) + 54|0);
     $31 = (($this) + 8|0);
     $32 = (($info) + 24|0);
     $does_dst_type_point_to_our_static_type$0$off012 = 0;$is_dst_type_derived_from_static_type$0$off014 = 0;$p$013 = $27;
     L56: while(1) {
      HEAP8[$28>>0] = 0;
      HEAP8[$29>>0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$013,$info,$current_ptr,$current_ptr,1,$use_strcmp);
      $33 = HEAP8[$30>>0]|0;
      $34 = ($33<<24>>24)==(0);
      if (!($34)) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off014;
       break;
      }
      $35 = HEAP8[$29>>0]|0;
      $36 = ($35<<24>>24)==(0);
      do {
       if ($36) {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off014;
       } else {
        $37 = HEAP8[$28>>0]|0;
        $38 = ($37<<24>>24)==(0);
        if ($38) {
         $44 = HEAP32[$31>>2]|0;
         $45 = $44 & 1;
         $46 = ($45|0)==(0);
         if ($46) {
          $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$2$off0 = 1;
          break L56;
         } else {
          $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off012;$is_dst_type_derived_from_static_type$1$off0 = 1;
          break;
         }
        }
        $39 = HEAP32[$32>>2]|0;
        $40 = ($39|0)==(1);
        if ($40) {
         label = 25;
         break L54;
        }
        $41 = HEAP32[$31>>2]|0;
        $42 = $41 & 2;
        $43 = ($42|0)==(0);
        if ($43) {
         label = 25;
         break L54;
        } else {
         $does_dst_type_point_to_our_static_type$1$off0 = 1;$is_dst_type_derived_from_static_type$1$off0 = 1;
        }
       }
      } while(0);
      $47 = (($p$013) + 8|0);
      $48 = ($47>>>0)<($25>>>0);
      if ($48) {
       $does_dst_type_point_to_our_static_type$0$off012 = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$0$off014 = $is_dst_type_derived_from_static_type$1$off0;$p$013 = $47;
      } else {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;$is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off023 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off023 = 0;
     label = 21;
    }
   } while(0);
   if ((label|0) == 21) {
    HEAP32[$14>>2] = $current_ptr;
    $49 = (($info) + 40|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = (($50) + 1)|0;
    HEAP32[$49>>2] = $51;
    $52 = (($info) + 36|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==(1);
    if ($54) {
     $55 = (($info) + 24|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==(2);
     if ($57) {
      $58 = (($info) + 54|0);
      HEAP8[$58>>0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off023) {
       label = 25;
      } else {
       label = 26;
      }
     } else {
      $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
      label = 24;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off024 = $is_dst_type_derived_from_static_type$2$off023;
     label = 24;
    }
   }
   if ((label|0) == 24) {
    if ($is_dst_type_derived_from_static_type$2$off024) {
     label = 25;
    } else {
     label = 26;
    }
   }
   if ((label|0) == 25) {
    HEAP32[$20>>2] = 3;
    STACKTOP = sp;return;
   }
   else if ((label|0) == 26) {
    HEAP32[$20>>2] = 4;
    STACKTOP = sp;return;
   }
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiiii[$11 & 1023]($8,$info,$dst_ptr,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $offset_to_base$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($this) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 >> 8;
 $3 = $1 & 1;
 $4 = ($3|0)==(0);
 if ($4) {
  $offset_to_base$0 = $2;
 } else {
  $5 = HEAP32[$current_ptr>>2]|0;
  $6 = (($5) + ($2)|0);
  $7 = HEAP32[$6>>2]|0;
  $offset_to_base$0 = $7;
 }
 $8 = HEAP32[$this>>2]|0;
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 24|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($current_ptr) + ($offset_to_base$0)|0);
 $13 = $1 & 2;
 $14 = ($13|0)!=(0);
 $15 = $14 ? $path_below : 2;
 FUNCTION_TABLE_viiiii[$11 & 1023]($8,$info,$12,$15,$use_strcmp);
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($this|0)==($9|0);
 if (!($10)) {
  $43 = (($this) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = HEAP32[$44>>2]|0;
  $46 = (($45) + 24|0);
  $47 = HEAP32[$46>>2]|0;
  FUNCTION_TABLE_viiiii[$47 & 1023]($44,$info,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   $20 = (($info) + 44|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(4);
   if ($22) {
    STACKTOP = sp;return;
   }
   $23 = (($info) + 52|0);
   HEAP8[$23>>0] = 0;
   $24 = (($info) + 53|0);
   HEAP8[$24>>0] = 0;
   $25 = (($this) + 8|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 20|0);
   $29 = HEAP32[$28>>2]|0;
   FUNCTION_TABLE_viiiiii[$29 & 1023]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
   $30 = HEAP8[$24>>0]|0;
   $31 = ($30<<24>>24)==(0);
   if ($31) {
    $is_dst_type_derived_from_static_type$0$off01 = 0;
    label = 13;
   } else {
    $32 = HEAP8[$23>>0]|0;
    $not$ = ($32<<24>>24)==(0);
    if ($not$) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
   }
   do {
    if ((label|0) == 13) {
     HEAP32[$14>>2] = $current_ptr;
     $33 = (($info) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = (($34) + 1)|0;
     HEAP32[$33>>2] = $35;
     $36 = (($info) + 36|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = ($37|0)==(1);
     if ($38) {
      $39 = (($info) + 24|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(2);
      if ($41) {
       $42 = (($info) + 54|0);
       HEAP8[$42>>0] = 1;
       if ($is_dst_type_derived_from_static_type$0$off01) {
        break;
       }
      } else {
       label = 16;
      }
     } else {
      label = 16;
     }
     if ((label|0) == 16) {
      if ($is_dst_type_derived_from_static_type$0$off01) {
       break;
      }
     }
     HEAP32[$20>>2] = 4;
     STACKTOP = sp;return;
    }
   } while(0);
   HEAP32[$20>>2] = 3;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if ($2) {
  $3 = (($info) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==($current_ptr|0);
  if (!($5)) {
   STACKTOP = sp;return;
  }
  $6 = (($info) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(1);
  if ($8) {
   STACKTOP = sp;return;
  }
  HEAP32[$6>>2] = $path_below;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[$info>>2]|0;
 $10 = ($9|0)==($this|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = (($info) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==($current_ptr|0);
 if (!($13)) {
  $14 = (($info) + 20|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==($current_ptr|0);
  if (!($16)) {
   $19 = (($info) + 32|0);
   HEAP32[$19>>2] = $path_below;
   HEAP32[$14>>2] = $current_ptr;
   $20 = (($info) + 40|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = (($21) + 1)|0;
   HEAP32[$20>>2] = $22;
   $23 = (($info) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(1);
   if ($25) {
    $26 = (($info) + 24|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(2);
    if ($28) {
     $29 = (($info) + 54|0);
     HEAP8[$29>>0] = 1;
    }
   }
   $30 = (($info) + 44|0);
   HEAP32[$30>>2] = 4;
   STACKTOP = sp;return;
  }
 }
 $17 = ($path_below|0)==(1);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = (($info) + 32|0);
 HEAP32[$18>>2] = 1;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 }
 $3 = (($info) + 52|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = (($info) + 53|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($this) + 16|0);
 $8 = (($this) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($this) + ($9<<3)|0) + 16|0);
 HEAP8[$3>>0] = 0;
 HEAP8[$5>>0] = 0;
 __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($7,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 $11 = ($9|0)>(1);
 L5: do {
  if ($11) {
   $12 = (($this) + 24|0);
   $13 = (($info) + 24|0);
   $14 = (($this) + 8|0);
   $15 = (($info) + 54|0);
   $p$0 = $12;
   while(1) {
    $16 = HEAP8[$15>>0]|0;
    $17 = ($16<<24>>24)==(0);
    if (!($17)) {
     break L5;
    }
    $18 = HEAP8[$3>>0]|0;
    $19 = ($18<<24>>24)==(0);
    if ($19) {
     $25 = HEAP8[$5>>0]|0;
     $26 = ($25<<24>>24)==(0);
     if (!($26)) {
      $27 = HEAP32[$14>>2]|0;
      $28 = $27 & 1;
      $29 = ($28|0)==(0);
      if ($29) {
       break L5;
      }
     }
    } else {
     $20 = HEAP32[$13>>2]|0;
     $21 = ($20|0)==(1);
     if ($21) {
      break L5;
     }
     $22 = HEAP32[$14>>2]|0;
     $23 = $22 & 2;
     $24 = ($23|0)==(0);
     if ($24) {
      break L5;
     }
    }
    HEAP8[$3>>0] = 0;
    HEAP8[$5>>0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
    $30 = (($p$0) + 8|0);
    $31 = ($30>>>0)<($10>>>0);
    if ($31) {
     $p$0 = $30;
    } else {
     break;
    }
   }
  }
 } while(0);
 HEAP8[$3>>0] = $4;
 HEAP8[$5>>0] = $6;
 STACKTOP = sp;return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
  STACKTOP = sp;return;
 } else {
  $3 = (($this) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = (($5) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 1023]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
  STACKTOP = sp;return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($info) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==($this|0);
 if (!($2)) {
  STACKTOP = sp;return;
 }
 __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 STACKTOP = sp;return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = (($1) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 1023]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if (!($4)) {
  STACKTOP = sp;return ($5|0);
 }
 $6 = HEAP32[$temp>>2]|0;
 HEAP32[$thrown>>2] = $6;
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,21248,21416,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 STACKTOP = sp;return ($2|0);
}
function __ZSt17__throw_bad_allocv() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(4)|0);
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw(($0|0),(20720|0),(349|0));
 // unreachable;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if ($1) {
  _abort_message(20464,$vararg_buffer10);
  // unreachable;
 }
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  _abort_message(20464,$vararg_buffer10);
  // unreachable;
 }
 $4 = (($2) + 80|0);
 $5 = (($2) + 48|0);
 $6 = $5;
 $7 = $6;
 $8 = HEAP32[$7>>2]|0;
 $9 = (($6) + 4)|0;
 $10 = $9;
 $11 = HEAP32[$10>>2]|0;
 $12 = $8 & -256;
 $13 = ($12|0)==(1126902528);
 $14 = ($11|0)==(1129074247);
 $15 = $13 & $14;
 if (!($15)) {
  $36 = HEAP32[20304>>2]|0;
  HEAP32[$vararg_buffer7>>2] = $36;
  _abort_message(20424,$vararg_buffer7);
  // unreachable;
 }
 $16 = ($8|0)==(1126902529);
 $17 = ($11|0)==(1129074247);
 $18 = $16 & $17;
 if ($18) {
  $19 = (($2) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20;
 } else {
  $21 = $4;
 }
 HEAP32[$thrown_object>>2] = $21;
 $22 = HEAP32[$2>>2]|0;
 $23 = (($22) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[20856>>2]|0;
 $26 = (($25) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = (FUNCTION_TABLE_iiii[$27 & 1023](20856,$22,$thrown_object)|0);
 if ($28) {
  $29 = HEAP32[$thrown_object>>2]|0;
  $30 = HEAP32[20304>>2]|0;
  $31 = HEAP32[$29>>2]|0;
  $32 = (($31) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = (FUNCTION_TABLE_ii[$33 & 1023]($29)|0);
  HEAP32[$vararg_buffer>>2] = $30;
  $vararg_ptr1 = (($vararg_buffer) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $24;
  $vararg_ptr2 = (($vararg_buffer) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $34;
  _abort_message(20328,$vararg_buffer);
  // unreachable;
 } else {
  $35 = HEAP32[20304>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $35;
  $vararg_ptr6 = (($vararg_buffer3) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $24;
  _abort_message(20376,$vararg_buffer3);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((20480|0),(704|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(20552,$vararg_buffer);
  // unreachable;
 }
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = (($0) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = HEAP32[$this>>2]|0;
 $6 = (($5) + -12|0);
 __ZdlPv($6);
 STACKTOP = sp;return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[20480>>2]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(20608,$vararg_buffer);
  // unreachable;
 }
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i23$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre58$i$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i12$i = 0, $$sum$i13$i = 0;
 var $$sum$i16$i = 0, $$sum$i19$i = 0, $$sum$i2338 = 0, $$sum$i32 = 0, $$sum$i39 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i14$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum10$pre$i$i = 0, $$sum102$i = 0, $$sum103$i = 0, $$sum104$i = 0, $$sum105$i = 0, $$sum106$i = 0;
 var $$sum107$i = 0, $$sum108$i = 0, $$sum109$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum11$i22$i = 0, $$sum110$i = 0, $$sum111$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum14$pre$i = 0, $$sum15$i = 0;
 var $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0, $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i15$i = 0, $$sum2$i17$i = 0, $$sum2$i21$i = 0, $$sum2$pre$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0;
 var $$sum25$i$i = 0, $$sum26$pre$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i$i = 0, $$sum3$i27 = 0, $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0;
 var $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0, $$sum8$pre = 0, $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0;
 var $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0;
 var $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0;
 var $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0;
 var $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0;
 var $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0;
 var $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0;
 var $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0;
 var $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0;
 var $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0;
 var $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0;
 var $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0;
 var $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0;
 var $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0;
 var $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0;
 var $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0;
 var $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0;
 var $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0;
 var $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0;
 var $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0;
 var $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0;
 var $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0;
 var $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0;
 var $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0;
 var $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0;
 var $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0;
 var $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0;
 var $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0;
 var $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0;
 var $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0;
 var $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0;
 var $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0;
 var $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0;
 var $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0;
 var $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0;
 var $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0;
 var $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0;
 var $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0;
 var $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0;
 var $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0;
 var $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$c$i$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$027$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0;
 var $R$0$i = 0, $R$0$i$i = 0, $R$0$i18 = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i17 = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$026$i = 0, $T$052$i$i = 0, $br$0$i = 0, $br$030$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0;
 var $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i27$i = 0, $or$cond$i29 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond24$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond47$i = 0, $or$cond5$i = 0, $or$cond6$i = 0, $or$cond8$i = 0;
 var $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$073$i = 0, $sp$166$i = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0;
 var $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   if ($1) {
    $5 = 16;
   } else {
    $2 = (($bytes) + 11)|0;
    $3 = $2 & -8;
    $5 = $3;
   }
   $4 = $5 >>> 3;
   $6 = HEAP32[21664>>2]|0;
   $7 = $6 >>> $4;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($4))|0;
    $13 = $12 << 1;
    $14 = ((21664 + ($13<<2)|0) + 40|0);
    $$sum10 = (($13) + 2)|0;
    $15 = ((21664 + ($$sum10<<2)|0) + 40|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (($16) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[21664>>2] = $22;
     } else {
      $23 = HEAP32[((21664 + 16|0))>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = (($18) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = (($16) + 4|0);
    HEAP32[$30>>2] = $29;
    $$sum1112 = $28 | 4;
    $31 = (($16) + ($$sum1112)|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = $32 | 1;
    HEAP32[$31>>2] = $33;
    $mem$0 = $17;
    STACKTOP = sp;return ($mem$0|0);
   }
   $34 = HEAP32[((21664 + 8|0))>>2]|0;
   $35 = ($5>>>0)>($34>>>0);
   if ($35) {
    $36 = ($7|0)==(0);
    if (!($36)) {
     $37 = $7 << $4;
     $38 = 2 << $4;
     $39 = (0 - ($38))|0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = (0 - ($41))|0;
     $43 = $41 & $42;
     $44 = (($43) + -1)|0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = (($62) + ($63))|0;
     $65 = $64 << 1;
     $66 = ((21664 + ($65<<2)|0) + 40|0);
     $$sum4 = (($65) + 2)|0;
     $67 = ((21664 + ($$sum4<<2)|0) + 40|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = (($68) + 8|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($66|0)==($70|0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       HEAP32[21664>>2] = $74;
       $89 = $34;
      } else {
       $75 = HEAP32[((21664 + 16|0))>>2]|0;
       $76 = ($70>>>0)<($75>>>0);
       if ($76) {
        _abort();
        // unreachable;
       }
       $77 = (($70) + 12|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)==($68|0);
       if ($79) {
        HEAP32[$77>>2] = $66;
        HEAP32[$67>>2] = $70;
        $$pre = HEAP32[((21664 + 8|0))>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $80 = $64 << 3;
     $81 = (($80) - ($5))|0;
     $82 = $5 | 3;
     $83 = (($68) + 4|0);
     HEAP32[$83>>2] = $82;
     $84 = (($68) + ($5)|0);
     $85 = $81 | 1;
     $$sum56 = $5 | 4;
     $86 = (($68) + ($$sum56)|0);
     HEAP32[$86>>2] = $85;
     $87 = (($68) + ($80)|0);
     HEAP32[$87>>2] = $81;
     $88 = ($89|0)==(0);
     if (!($88)) {
      $90 = HEAP32[((21664 + 20|0))>>2]|0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = ((21664 + ($92<<2)|0) + 40|0);
      $94 = HEAP32[21664>>2]|0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96|0)==(0);
      if ($97) {
       $98 = $94 | $95;
       HEAP32[21664>>2] = $98;
       $$sum8$pre = (($92) + 2)|0;
       $$pre105 = ((21664 + ($$sum8$pre<<2)|0) + 40|0);
       $$pre$phiZ2D = $$pre105;$F4$0 = $93;
      } else {
       $$sum9 = (($92) + 2)|0;
       $99 = ((21664 + ($$sum9<<2)|0) + 40|0);
       $100 = HEAP32[$99>>2]|0;
       $101 = HEAP32[((21664 + 16|0))>>2]|0;
       $102 = ($100>>>0)<($101>>>0);
       if ($102) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $99;$F4$0 = $100;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $90;
      $103 = (($F4$0) + 12|0);
      HEAP32[$103>>2] = $90;
      $104 = (($90) + 8|0);
      HEAP32[$104>>2] = $F4$0;
      $105 = (($90) + 12|0);
      HEAP32[$105>>2] = $93;
     }
     HEAP32[((21664 + 8|0))>>2] = $81;
     HEAP32[((21664 + 20|0))>>2] = $84;
     $mem$0 = $69;
     STACKTOP = sp;return ($mem$0|0);
    }
    $106 = HEAP32[((21664 + 4|0))>>2]|0;
    $107 = ($106|0)==(0);
    if ($107) {
     $nb$0 = $5;
    } else {
     $108 = (0 - ($106))|0;
     $109 = $106 & $108;
     $110 = (($109) + -1)|0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = (($128) + ($129))|0;
     $131 = ((21664 + ($130<<2)|0) + 304|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = (($132) + 4|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = $134 & -8;
     $136 = (($135) - ($5))|0;
     $rsize$0$i = $136;$t$0$i = $132;$v$0$i = $132;
     while(1) {
      $137 = (($t$0$i) + 16|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = ($138|0)==(0|0);
      if ($139) {
       $140 = (($t$0$i) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = (($144) + 4|0);
      $145 = HEAP32[$143>>2]|0;
      $146 = $145 & -8;
      $147 = (($146) - ($5))|0;
      $148 = ($147>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $144;$v$0$i = $$v$0$i;
     }
     $149 = HEAP32[((21664 + 16|0))>>2]|0;
     $150 = ($v$0$i>>>0)<($149>>>0);
     if ($150) {
      _abort();
      // unreachable;
     }
     $151 = (($v$0$i) + ($5)|0);
     $152 = ($v$0$i>>>0)<($151>>>0);
     if (!($152)) {
      _abort();
      // unreachable;
     }
     $153 = (($v$0$i) + 24|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = (($v$0$i) + 12|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ($156|0)==($v$0$i|0);
     do {
      if ($157) {
       $167 = (($v$0$i) + 20|0);
       $168 = HEAP32[$167>>2]|0;
       $169 = ($168|0)==(0|0);
       if ($169) {
        $170 = (($v$0$i) + 16|0);
        $171 = HEAP32[$170>>2]|0;
        $172 = ($171|0)==(0|0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;$RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;$RP$0$i = $167;
       }
       while(1) {
        $173 = (($R$0$i) + 20|0);
        $174 = HEAP32[$173>>2]|0;
        $175 = ($174|0)==(0|0);
        if (!($175)) {
         $R$0$i = $174;$RP$0$i = $173;
         continue;
        }
        $176 = (($R$0$i) + 16|0);
        $177 = HEAP32[$176>>2]|0;
        $178 = ($177|0)==(0|0);
        if ($178) {
         break;
        } else {
         $R$0$i = $177;$RP$0$i = $176;
        }
       }
       $179 = ($RP$0$i>>>0)<($149>>>0);
       if ($179) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$0$i>>2] = 0;
        $R$1$i = $R$0$i;
        break;
       }
      } else {
       $158 = (($v$0$i) + 8|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159>>>0)<($149>>>0);
       if ($160) {
        _abort();
        // unreachable;
       }
       $161 = (($159) + 12|0);
       $162 = HEAP32[$161>>2]|0;
       $163 = ($162|0)==($v$0$i|0);
       if (!($163)) {
        _abort();
        // unreachable;
       }
       $164 = (($156) + 8|0);
       $165 = HEAP32[$164>>2]|0;
       $166 = ($165|0)==($v$0$i|0);
       if ($166) {
        HEAP32[$161>>2] = $156;
        HEAP32[$164>>2] = $159;
        $R$1$i = $156;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $180 = ($154|0)==(0|0);
     do {
      if (!($180)) {
       $181 = (($v$0$i) + 28|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ((21664 + ($182<<2)|0) + 304|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($v$0$i|0)==($184|0);
       if ($185) {
        HEAP32[$183>>2] = $R$1$i;
        $cond$i = ($R$1$i|0)==(0|0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = HEAP32[((21664 + 4|0))>>2]|0;
         $189 = $188 & $187;
         HEAP32[((21664 + 4|0))>>2] = $189;
         break;
        }
       } else {
        $190 = HEAP32[((21664 + 16|0))>>2]|0;
        $191 = ($154>>>0)<($190>>>0);
        if ($191) {
         _abort();
         // unreachable;
        }
        $192 = (($154) + 16|0);
        $193 = HEAP32[$192>>2]|0;
        $194 = ($193|0)==($v$0$i|0);
        if ($194) {
         HEAP32[$192>>2] = $R$1$i;
        } else {
         $195 = (($154) + 20|0);
         HEAP32[$195>>2] = $R$1$i;
        }
        $196 = ($R$1$i|0)==(0|0);
        if ($196) {
         break;
        }
       }
       $197 = HEAP32[((21664 + 16|0))>>2]|0;
       $198 = ($R$1$i>>>0)<($197>>>0);
       if ($198) {
        _abort();
        // unreachable;
       }
       $199 = (($R$1$i) + 24|0);
       HEAP32[$199>>2] = $154;
       $200 = (($v$0$i) + 16|0);
       $201 = HEAP32[$200>>2]|0;
       $202 = ($201|0)==(0|0);
       do {
        if (!($202)) {
         $203 = ($201>>>0)<($197>>>0);
         if ($203) {
          _abort();
          // unreachable;
         } else {
          $204 = (($R$1$i) + 16|0);
          HEAP32[$204>>2] = $201;
          $205 = (($201) + 24|0);
          HEAP32[$205>>2] = $R$1$i;
          break;
         }
        }
       } while(0);
       $206 = (($v$0$i) + 20|0);
       $207 = HEAP32[$206>>2]|0;
       $208 = ($207|0)==(0|0);
       if (!($208)) {
        $209 = HEAP32[((21664 + 16|0))>>2]|0;
        $210 = ($207>>>0)<($209>>>0);
        if ($210) {
         _abort();
         // unreachable;
        } else {
         $211 = (($R$1$i) + 20|0);
         HEAP32[$211>>2] = $207;
         $212 = (($207) + 24|0);
         HEAP32[$212>>2] = $R$1$i;
         break;
        }
       }
      }
     } while(0);
     $213 = ($rsize$0$i>>>0)<(16);
     if ($213) {
      $214 = (($rsize$0$i) + ($5))|0;
      $215 = $214 | 3;
      $216 = (($v$0$i) + 4|0);
      HEAP32[$216>>2] = $215;
      $$sum4$i = (($214) + 4)|0;
      $217 = (($v$0$i) + ($$sum4$i)|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = $218 | 1;
      HEAP32[$217>>2] = $219;
     } else {
      $220 = $5 | 3;
      $221 = (($v$0$i) + 4|0);
      HEAP32[$221>>2] = $220;
      $222 = $rsize$0$i | 1;
      $$sum$i39 = $5 | 4;
      $223 = (($v$0$i) + ($$sum$i39)|0);
      HEAP32[$223>>2] = $222;
      $$sum1$i = (($rsize$0$i) + ($5))|0;
      $224 = (($v$0$i) + ($$sum1$i)|0);
      HEAP32[$224>>2] = $rsize$0$i;
      $225 = HEAP32[((21664 + 8|0))>>2]|0;
      $226 = ($225|0)==(0);
      if (!($226)) {
       $227 = HEAP32[((21664 + 20|0))>>2]|0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = ((21664 + ($229<<2)|0) + 40|0);
       $231 = HEAP32[21664>>2]|0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $231 | $232;
        HEAP32[21664>>2] = $235;
        $$sum2$pre$i = (($229) + 2)|0;
        $$pre$i = ((21664 + ($$sum2$pre$i<<2)|0) + 40|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $230;
       } else {
        $$sum3$i = (($229) + 2)|0;
        $236 = ((21664 + ($$sum3$i<<2)|0) + 40|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[((21664 + 16|0))>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $236;$F1$0$i = $237;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $227;
       $240 = (($F1$0$i) + 12|0);
       HEAP32[$240>>2] = $227;
       $241 = (($227) + 8|0);
       HEAP32[$241>>2] = $F1$0$i;
       $242 = (($227) + 12|0);
       HEAP32[$242>>2] = $230;
      }
      HEAP32[((21664 + 8|0))>>2] = $rsize$0$i;
      HEAP32[((21664 + 20|0))>>2] = $151;
     }
     $243 = (($v$0$i) + 8|0);
     $mem$0 = $243;
     STACKTOP = sp;return ($mem$0|0);
    }
   } else {
    $nb$0 = $5;
   }
  } else {
   $244 = ($bytes>>>0)>(4294967231);
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = (($bytes) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[((21664 + 4|0))>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = ((21664 + ($idx$0$i<<2)|0) + 304|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L126: do {
      if ($277) {
       $rsize$2$i = $249;$t$1$i = 0;$v$2$i = 0;
      } else {
       $278 = ($idx$0$i|0)==(31);
       if ($278) {
        $282 = 0;
       } else {
        $279 = $idx$0$i >>> 1;
        $280 = (25 - ($279))|0;
        $282 = $280;
       }
       $281 = $246 << $282;
       $rsize$0$i15 = $249;$rst$0$i = 0;$sizebits$0$i = $281;$t$0$i14 = $276;$v$0$i16 = 0;
       while(1) {
        $283 = (($t$0$i14) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($rsize$0$i15>>>0);
        if ($287) {
         $288 = ($285|0)==($246|0);
         if ($288) {
          $rsize$2$i = $286;$t$1$i = $t$0$i14;$v$2$i = $t$0$i14;
          break L126;
         } else {
          $rsize$1$i = $286;$v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;$v$1$i = $v$0$i16;
        }
        $289 = (($t$0$i14) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ((($t$0$i14) + ($291<<2)|0) + 16|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;$t$1$i = $rst$1$i;$v$2$i = $v$1$i;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $297;$t$0$i14 = $293;$v$0$i16 = $v$1$i;
        }
       }
      }
     } while(0);
     $298 = ($t$1$i|0)==(0|0);
     $299 = ($v$2$i|0)==(0|0);
     $or$cond$i = $298 & $299;
     if ($or$cond$i) {
      $300 = 2 << $idx$0$i;
      $301 = (0 - ($300))|0;
      $302 = $300 | $301;
      $303 = $247 & $302;
      $304 = ($303|0)==(0);
      if ($304) {
       $nb$0 = $246;
       break;
      }
      $305 = (0 - ($303))|0;
      $306 = $303 & $305;
      $307 = (($306) + -1)|0;
      $308 = $307 >>> 12;
      $309 = $308 & 16;
      $310 = $307 >>> $309;
      $311 = $310 >>> 5;
      $312 = $311 & 8;
      $313 = $312 | $309;
      $314 = $310 >>> $312;
      $315 = $314 >>> 2;
      $316 = $315 & 4;
      $317 = $313 | $316;
      $318 = $314 >>> $316;
      $319 = $318 >>> 1;
      $320 = $319 & 2;
      $321 = $317 | $320;
      $322 = $318 >>> $320;
      $323 = $322 >>> 1;
      $324 = $323 & 1;
      $325 = $321 | $324;
      $326 = $322 >>> $324;
      $327 = (($325) + ($326))|0;
      $328 = ((21664 + ($327<<2)|0) + 304|0);
      $329 = HEAP32[$328>>2]|0;
      $t$2$ph$i = $329;
     } else {
      $t$2$ph$i = $t$1$i;
     }
     $330 = ($t$2$ph$i|0)==(0|0);
     if ($330) {
      $rsize$3$lcssa$i = $rsize$2$i;$v$3$lcssa$i = $v$2$i;
     } else {
      $rsize$331$i = $rsize$2$i;$t$230$i = $t$2$ph$i;$v$332$i = $v$2$i;
      while(1) {
       $331 = (($t$230$i) + 4|0);
       $332 = HEAP32[$331>>2]|0;
       $333 = $332 & -8;
       $334 = (($333) - ($246))|0;
       $335 = ($334>>>0)<($rsize$331$i>>>0);
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = (($t$230$i) + 16|0);
       $337 = HEAP32[$336>>2]|0;
       $338 = ($337|0)==(0|0);
       if (!($338)) {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $337;$v$332$i = $t$2$v$3$i;
        continue;
       }
       $339 = (($t$230$i) + 20|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;$v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;$t$230$i = $340;$v$332$i = $t$2$v$3$i;
       }
      }
     }
     $342 = ($v$3$lcssa$i|0)==(0|0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = HEAP32[((21664 + 8|0))>>2]|0;
      $344 = (($343) - ($246))|0;
      $345 = ($rsize$3$lcssa$i>>>0)<($344>>>0);
      if ($345) {
       $346 = HEAP32[((21664 + 16|0))>>2]|0;
       $347 = ($v$3$lcssa$i>>>0)<($346>>>0);
       if ($347) {
        _abort();
        // unreachable;
       }
       $348 = (($v$3$lcssa$i) + ($246)|0);
       $349 = ($v$3$lcssa$i>>>0)<($348>>>0);
       if (!($349)) {
        _abort();
        // unreachable;
       }
       $350 = (($v$3$lcssa$i) + 24|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($v$3$lcssa$i) + 12|0);
       $353 = HEAP32[$352>>2]|0;
       $354 = ($353|0)==($v$3$lcssa$i|0);
       do {
        if ($354) {
         $364 = (($v$3$lcssa$i) + 20|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==(0|0);
         if ($366) {
          $367 = (($v$3$lcssa$i) + 16|0);
          $368 = HEAP32[$367>>2]|0;
          $369 = ($368|0)==(0|0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;$RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;$RP$0$i17 = $364;
         }
         while(1) {
          $370 = (($R$0$i18) + 20|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if (!($372)) {
           $R$0$i18 = $371;$RP$0$i17 = $370;
           continue;
          }
          $373 = (($R$0$i18) + 16|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if ($375) {
           break;
          } else {
           $R$0$i18 = $374;$RP$0$i17 = $373;
          }
         }
         $376 = ($RP$0$i17>>>0)<($346>>>0);
         if ($376) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$0$i17>>2] = 0;
          $R$1$i20 = $R$0$i18;
          break;
         }
        } else {
         $355 = (($v$3$lcssa$i) + 8|0);
         $356 = HEAP32[$355>>2]|0;
         $357 = ($356>>>0)<($346>>>0);
         if ($357) {
          _abort();
          // unreachable;
         }
         $358 = (($356) + 12|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359|0)==($v$3$lcssa$i|0);
         if (!($360)) {
          _abort();
          // unreachable;
         }
         $361 = (($353) + 8|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$3$lcssa$i|0);
         if ($363) {
          HEAP32[$358>>2] = $353;
          HEAP32[$361>>2] = $356;
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $377 = ($351|0)==(0|0);
       do {
        if (!($377)) {
         $378 = (($v$3$lcssa$i) + 28|0);
         $379 = HEAP32[$378>>2]|0;
         $380 = ((21664 + ($379<<2)|0) + 304|0);
         $381 = HEAP32[$380>>2]|0;
         $382 = ($v$3$lcssa$i|0)==($381|0);
         if ($382) {
          HEAP32[$380>>2] = $R$1$i20;
          $cond$i21 = ($R$1$i20|0)==(0|0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = HEAP32[((21664 + 4|0))>>2]|0;
           $386 = $385 & $384;
           HEAP32[((21664 + 4|0))>>2] = $386;
           break;
          }
         } else {
          $387 = HEAP32[((21664 + 16|0))>>2]|0;
          $388 = ($351>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = (($351) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($v$3$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $R$1$i20;
          } else {
           $392 = (($351) + 20|0);
           HEAP32[$392>>2] = $R$1$i20;
          }
          $393 = ($R$1$i20|0)==(0|0);
          if ($393) {
           break;
          }
         }
         $394 = HEAP32[((21664 + 16|0))>>2]|0;
         $395 = ($R$1$i20>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = (($R$1$i20) + 24|0);
         HEAP32[$396>>2] = $351;
         $397 = (($v$3$lcssa$i) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = (($R$1$i20) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = (($398) + 24|0);
            HEAP32[$402>>2] = $R$1$i20;
            break;
           }
          }
         } while(0);
         $403 = (($v$3$lcssa$i) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if (!($405)) {
          $406 = HEAP32[((21664 + 16|0))>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = (($R$1$i20) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = (($404) + 24|0);
           HEAP32[$409>>2] = $R$1$i20;
           break;
          }
         }
        }
       } while(0);
       $410 = ($rsize$3$lcssa$i>>>0)<(16);
       L204: do {
        if ($410) {
         $411 = (($rsize$3$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$413>>2] = $412;
         $$sum18$i = (($411) + 4)|0;
         $414 = (($v$3$lcssa$i) + ($$sum18$i)|0);
         $415 = HEAP32[$414>>2]|0;
         $416 = $415 | 1;
         HEAP32[$414>>2] = $416;
        } else {
         $417 = $246 | 3;
         $418 = (($v$3$lcssa$i) + 4|0);
         HEAP32[$418>>2] = $417;
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2338 = $246 | 4;
         $420 = (($v$3$lcssa$i) + ($$sum$i2338)|0);
         HEAP32[$420>>2] = $419;
         $$sum1$i24 = (($rsize$3$lcssa$i) + ($246))|0;
         $421 = (($v$3$lcssa$i) + ($$sum1$i24)|0);
         HEAP32[$421>>2] = $rsize$3$lcssa$i;
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = ($rsize$3$lcssa$i>>>0)<(256);
         if ($423) {
          $424 = $422 << 1;
          $425 = ((21664 + ($424<<2)|0) + 40|0);
          $426 = HEAP32[21664>>2]|0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428|0)==(0);
          do {
           if ($429) {
            $430 = $426 | $427;
            HEAP32[21664>>2] = $430;
            $$sum14$pre$i = (($424) + 2)|0;
            $$pre$i25 = ((21664 + ($$sum14$pre$i<<2)|0) + 40|0);
            $$pre$phi$i26Z2D = $$pre$i25;$F5$0$i = $425;
           } else {
            $$sum17$i = (($424) + 2)|0;
            $431 = ((21664 + ($$sum17$i<<2)|0) + 40|0);
            $432 = HEAP32[$431>>2]|0;
            $433 = HEAP32[((21664 + 16|0))>>2]|0;
            $434 = ($432>>>0)<($433>>>0);
            if (!($434)) {
             $$pre$phi$i26Z2D = $431;$F5$0$i = $432;
             break;
            }
            _abort();
            // unreachable;
           }
          } while(0);
          HEAP32[$$pre$phi$i26Z2D>>2] = $348;
          $435 = (($F5$0$i) + 12|0);
          HEAP32[$435>>2] = $348;
          $$sum15$i = (($246) + 8)|0;
          $436 = (($v$3$lcssa$i) + ($$sum15$i)|0);
          HEAP32[$436>>2] = $F5$0$i;
          $$sum16$i = (($246) + 12)|0;
          $437 = (($v$3$lcssa$i) + ($$sum16$i)|0);
          HEAP32[$437>>2] = $425;
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438|0)==(0);
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = ($rsize$3$lcssa$i>>>0)>(16777215);
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = (($438) + 1048320)|0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = (($444) + 520192)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = (($449) + 245760)|0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = (14 - ($453))|0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = (($454) + ($456))|0;
           $458 = $457 << 1;
           $459 = (($457) + 7)|0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = ((21664 + ($I7$0$i<<2)|0) + 304|0);
         $$sum2$i = (($246) + 28)|0;
         $464 = (($v$3$lcssa$i) + ($$sum2$i)|0);
         HEAP32[$464>>2] = $I7$0$i;
         $$sum3$i27 = (($246) + 16)|0;
         $465 = (($v$3$lcssa$i) + ($$sum3$i27)|0);
         $$sum4$i28 = (($246) + 20)|0;
         $466 = (($v$3$lcssa$i) + ($$sum4$i28)|0);
         HEAP32[$466>>2] = 0;
         HEAP32[$465>>2] = 0;
         $467 = HEAP32[((21664 + 4|0))>>2]|0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469|0)==(0);
         if ($470) {
          $471 = $467 | $468;
          HEAP32[((21664 + 4|0))>>2] = $471;
          HEAP32[$463>>2] = $348;
          $$sum5$i = (($246) + 24)|0;
          $472 = (($v$3$lcssa$i) + ($$sum5$i)|0);
          HEAP32[$472>>2] = $463;
          $$sum6$i = (($246) + 12)|0;
          $473 = (($v$3$lcssa$i) + ($$sum6$i)|0);
          HEAP32[$473>>2] = $348;
          $$sum7$i = (($246) + 8)|0;
          $474 = (($v$3$lcssa$i) + ($$sum7$i)|0);
          HEAP32[$474>>2] = $348;
          break;
         }
         $475 = HEAP32[$463>>2]|0;
         $476 = ($I7$0$i|0)==(31);
         if ($476) {
          $484 = 0;
         } else {
          $477 = $I7$0$i >>> 1;
          $478 = (25 - ($477))|0;
          $484 = $478;
         }
         $479 = (($475) + 4|0);
         $480 = HEAP32[$479>>2]|0;
         $481 = $480 & -8;
         $482 = ($481|0)==($rsize$3$lcssa$i|0);
         L225: do {
          if ($482) {
           $T$0$lcssa$i = $475;
          } else {
           $483 = $rsize$3$lcssa$i << $484;
           $K12$027$i = $483;$T$026$i = $475;
           while(1) {
            $491 = $K12$027$i >>> 31;
            $492 = ((($T$026$i) + ($491<<2)|0) + 16|0);
            $487 = HEAP32[$492>>2]|0;
            $493 = ($487|0)==(0|0);
            if ($493) {
             break;
            }
            $485 = $K12$027$i << 1;
            $486 = (($487) + 4|0);
            $488 = HEAP32[$486>>2]|0;
            $489 = $488 & -8;
            $490 = ($489|0)==($rsize$3$lcssa$i|0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L225;
            } else {
             $K12$027$i = $485;$T$026$i = $487;
            }
           }
           $494 = HEAP32[((21664 + 16|0))>>2]|0;
           $495 = ($492>>>0)<($494>>>0);
           if ($495) {
            _abort();
            // unreachable;
           } else {
            HEAP32[$492>>2] = $348;
            $$sum11$i = (($246) + 24)|0;
            $496 = (($v$3$lcssa$i) + ($$sum11$i)|0);
            HEAP32[$496>>2] = $T$026$i;
            $$sum12$i = (($246) + 12)|0;
            $497 = (($v$3$lcssa$i) + ($$sum12$i)|0);
            HEAP32[$497>>2] = $348;
            $$sum13$i = (($246) + 8)|0;
            $498 = (($v$3$lcssa$i) + ($$sum13$i)|0);
            HEAP32[$498>>2] = $348;
            break L204;
           }
          }
         } while(0);
         $499 = (($T$0$lcssa$i) + 8|0);
         $500 = HEAP32[$499>>2]|0;
         $501 = HEAP32[((21664 + 16|0))>>2]|0;
         $502 = ($T$0$lcssa$i>>>0)>=($501>>>0);
         $503 = ($500>>>0)>=($501>>>0);
         $or$cond24$i = $502 & $503;
         if ($or$cond24$i) {
          $504 = (($500) + 12|0);
          HEAP32[$504>>2] = $348;
          HEAP32[$499>>2] = $348;
          $$sum8$i = (($246) + 8)|0;
          $505 = (($v$3$lcssa$i) + ($$sum8$i)|0);
          HEAP32[$505>>2] = $500;
          $$sum9$i = (($246) + 12)|0;
          $506 = (($v$3$lcssa$i) + ($$sum9$i)|0);
          HEAP32[$506>>2] = $T$0$lcssa$i;
          $$sum10$i = (($246) + 24)|0;
          $507 = (($v$3$lcssa$i) + ($$sum10$i)|0);
          HEAP32[$507>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $508 = (($v$3$lcssa$i) + 8|0);
       $mem$0 = $508;
       STACKTOP = sp;return ($mem$0|0);
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[((21664 + 8|0))>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[((21664 + 20|0))>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[((21664 + 20|0))>>2] = $514;
   HEAP32[((21664 + 8|0))>>2] = $511;
   $515 = $511 | 1;
   $$sum2 = (($nb$0) + 4)|0;
   $516 = (($512) + ($$sum2)|0);
   HEAP32[$516>>2] = $515;
   $517 = (($512) + ($509)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = (($512) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[((21664 + 8|0))>>2] = 0;
   HEAP32[((21664 + 20|0))>>2] = 0;
   $520 = $509 | 3;
   $521 = (($512) + 4|0);
   HEAP32[$521>>2] = $520;
   $$sum1 = (($509) + 4)|0;
   $522 = (($512) + ($$sum1)|0);
   $523 = HEAP32[$522>>2]|0;
   $524 = $523 | 1;
   HEAP32[$522>>2] = $524;
  }
  $525 = (($512) + 8|0);
  $mem$0 = $525;
  STACKTOP = sp;return ($mem$0|0);
 }
 $526 = HEAP32[((21664 + 12|0))>>2]|0;
 $527 = ($526>>>0)>($nb$0>>>0);
 if ($527) {
  $528 = (($526) - ($nb$0))|0;
  HEAP32[((21664 + 12|0))>>2] = $528;
  $529 = HEAP32[((21664 + 24|0))>>2]|0;
  $530 = (($529) + ($nb$0)|0);
  HEAP32[((21664 + 24|0))>>2] = $530;
  $531 = $528 | 1;
  $$sum = (($nb$0) + 4)|0;
  $532 = (($529) + ($$sum)|0);
  HEAP32[$532>>2] = $531;
  $533 = $nb$0 | 3;
  $534 = (($529) + 4|0);
  HEAP32[$534>>2] = $533;
  $535 = (($529) + 8|0);
  $mem$0 = $535;
  STACKTOP = sp;return ($mem$0|0);
 }
 $536 = HEAP32[22136>>2]|0;
 $537 = ($536|0)==(0);
 do {
  if ($537) {
   $538 = (_sysconf(30)|0);
   $539 = (($538) + -1)|0;
   $540 = $539 & $538;
   $541 = ($540|0)==(0);
   if ($541) {
    HEAP32[((22136 + 8|0))>>2] = $538;
    HEAP32[((22136 + 4|0))>>2] = $538;
    HEAP32[((22136 + 12|0))>>2] = -1;
    HEAP32[((22136 + 16|0))>>2] = -1;
    HEAP32[((22136 + 20|0))>>2] = 0;
    HEAP32[((21664 + 444|0))>>2] = 0;
    $542 = (_time((0|0))|0);
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    HEAP32[22136>>2] = $544;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $545 = (($nb$0) + 48)|0;
 $546 = HEAP32[((22136 + 8|0))>>2]|0;
 $547 = (($nb$0) + 47)|0;
 $548 = (($546) + ($547))|0;
 $549 = (0 - ($546))|0;
 $550 = $548 & $549;
 $551 = ($550>>>0)>($nb$0>>>0);
 if (!($551)) {
  $mem$0 = 0;
  STACKTOP = sp;return ($mem$0|0);
 }
 $552 = HEAP32[((21664 + 440|0))>>2]|0;
 $553 = ($552|0)==(0);
 if (!($553)) {
  $554 = HEAP32[((21664 + 432|0))>>2]|0;
  $555 = (($554) + ($550))|0;
  $556 = ($555>>>0)<=($554>>>0);
  $557 = ($555>>>0)>($552>>>0);
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $558 = HEAP32[((21664 + 444|0))>>2]|0;
 $559 = $558 & 4;
 $560 = ($559|0)==(0);
 L266: do {
  if ($560) {
   $561 = HEAP32[((21664 + 24|0))>>2]|0;
   $562 = ($561|0)==(0|0);
   L268: do {
    if ($562) {
     label = 181;
    } else {
     $sp$0$i$i = ((21664 + 448|0));
     while(1) {
      $563 = HEAP32[$sp$0$i$i>>2]|0;
      $564 = ($563>>>0)>($561>>>0);
      if (!($564)) {
       $565 = (($sp$0$i$i) + 4|0);
       $566 = HEAP32[$565>>2]|0;
       $567 = (($563) + ($566)|0);
       $568 = ($567>>>0)>($561>>>0);
       if ($568) {
        break;
       }
      }
      $569 = (($sp$0$i$i) + 8|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = ($570|0)==(0|0);
      if ($571) {
       label = 181;
       break L268;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $572 = ($sp$0$i$i|0)==(0|0);
     if ($572) {
      label = 181;
     } else {
      $595 = HEAP32[((21664 + 12|0))>>2]|0;
      $596 = (($548) - ($595))|0;
      $597 = $596 & $549;
      $598 = ($597>>>0)<(2147483647);
      if ($598) {
       $599 = (_sbrk(($597|0))|0);
       $600 = HEAP32[$sp$0$i$i>>2]|0;
       $601 = HEAP32[$565>>2]|0;
       $602 = (($600) + ($601)|0);
       $603 = ($599|0)==($602|0);
       if ($603) {
        $br$0$i = $599;$ssize$1$i = $597;
        label = 190;
       } else {
        $br$030$i = $599;$ssize$129$i = $597;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 181) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if ($574) {
      $tsize$03141$i = 0;
     } else {
      $575 = $573;
      $576 = HEAP32[((22136 + 4|0))>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $550;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($550) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[((21664 + 432|0))>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i29 = $587 & $588;
      if ($or$cond$i29) {
       $589 = HEAP32[((21664 + 440|0))>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         $tsize$03141$i = 0;
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $br$0$i = $573;$ssize$1$i = $ssize$0$i;
        label = 190;
       } else {
        $br$030$i = $593;$ssize$129$i = $ssize$0$i;
        label = 191;
       }
      } else {
       $tsize$03141$i = 0;
      }
     }
    }
   } while(0);
   L288: do {
    if ((label|0) == 190) {
     $604 = ($br$0$i|0)==((-1)|0);
     if ($604) {
      $tsize$03141$i = $ssize$1$i;
     } else {
      $tbase$245$i = $br$0$i;$tsize$244$i = $ssize$1$i;
      label = 201;
      break L266;
     }
    }
    else if ((label|0) == 191) {
     $605 = (0 - ($ssize$129$i))|0;
     $606 = ($br$030$i|0)!=((-1)|0);
     $607 = ($ssize$129$i>>>0)<(2147483647);
     $or$cond5$i = $606 & $607;
     $608 = ($545>>>0)>($ssize$129$i>>>0);
     $or$cond4$i = $or$cond5$i & $608;
     do {
      if ($or$cond4$i) {
       $609 = HEAP32[((22136 + 8|0))>>2]|0;
       $610 = (($547) - ($ssize$129$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         $tsize$03141$i = 0;
         break L288;
        } else {
         $617 = (($613) + ($ssize$129$i))|0;
         $ssize$2$i = $617;
         break;
        }
       } else {
        $ssize$2$i = $ssize$129$i;
       }
      } else {
       $ssize$2$i = $ssize$129$i;
      }
     } while(0);
     $618 = ($br$030$i|0)==((-1)|0);
     if ($618) {
      $tsize$03141$i = 0;
     } else {
      $tbase$245$i = $br$030$i;$tsize$244$i = $ssize$2$i;
      label = 201;
      break L266;
     }
    }
   } while(0);
   $619 = HEAP32[((21664 + 444|0))>>2]|0;
   $620 = $619 | 4;
   HEAP32[((21664 + 444|0))>>2] = $620;
   $tsize$1$i = $tsize$03141$i;
   label = 198;
  } else {
   $tsize$1$i = 0;
   label = 198;
  }
 } while(0);
 if ((label|0) == 198) {
  $621 = ($550>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($550|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond3$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond6$i = $or$cond3$i & $626;
   if ($or$cond6$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $631 = ($629>>>0)>($630>>>0);
    $$tsize$1$i = $631 ? $629 : $tsize$1$i;
    if ($631) {
     $tbase$245$i = $622;$tsize$244$i = $$tsize$1$i;
     label = 201;
    }
   }
  }
 }
 if ((label|0) == 201) {
  $632 = HEAP32[((21664 + 432|0))>>2]|0;
  $633 = (($632) + ($tsize$244$i))|0;
  HEAP32[((21664 + 432|0))>>2] = $633;
  $634 = HEAP32[((21664 + 436|0))>>2]|0;
  $635 = ($633>>>0)>($634>>>0);
  if ($635) {
   HEAP32[((21664 + 436|0))>>2] = $633;
  }
  $636 = HEAP32[((21664 + 24|0))>>2]|0;
  $637 = ($636|0)==(0|0);
  L308: do {
   if ($637) {
    $638 = HEAP32[((21664 + 16|0))>>2]|0;
    $639 = ($638|0)==(0|0);
    $640 = ($tbase$245$i>>>0)<($638>>>0);
    $or$cond8$i = $639 | $640;
    if ($or$cond8$i) {
     HEAP32[((21664 + 16|0))>>2] = $tbase$245$i;
    }
    HEAP32[((21664 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((21664 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((21664 + 460|0))>>2] = 0;
    $641 = HEAP32[22136>>2]|0;
    HEAP32[((21664 + 36|0))>>2] = $641;
    HEAP32[((21664 + 32|0))>>2] = -1;
    $i$02$i$i = 0;
    while(1) {
     $642 = $i$02$i$i << 1;
     $643 = ((21664 + ($642<<2)|0) + 40|0);
     $$sum$i$i = (($642) + 3)|0;
     $644 = ((21664 + ($$sum$i$i<<2)|0) + 40|0);
     HEAP32[$644>>2] = $643;
     $$sum1$i$i = (($642) + 2)|0;
     $645 = ((21664 + ($$sum1$i$i<<2)|0) + 40|0);
     HEAP32[$645>>2] = $643;
     $646 = (($i$02$i$i) + 1)|0;
     $exitcond$i$i = ($646|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $646;
     }
    }
    $647 = (($tsize$244$i) + -40)|0;
    $648 = (($tbase$245$i) + 8|0);
    $649 = $648;
    $650 = $649 & 7;
    $651 = ($650|0)==(0);
    if ($651) {
     $655 = 0;
    } else {
     $652 = (0 - ($649))|0;
     $653 = $652 & 7;
     $655 = $653;
    }
    $654 = (($tbase$245$i) + ($655)|0);
    $656 = (($647) - ($655))|0;
    HEAP32[((21664 + 24|0))>>2] = $654;
    HEAP32[((21664 + 12|0))>>2] = $656;
    $657 = $656 | 1;
    $$sum$i12$i = (($655) + 4)|0;
    $658 = (($tbase$245$i) + ($$sum$i12$i)|0);
    HEAP32[$658>>2] = $657;
    $$sum2$i$i = (($tsize$244$i) + -36)|0;
    $659 = (($tbase$245$i) + ($$sum2$i$i)|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[((22136 + 16|0))>>2]|0;
    HEAP32[((21664 + 28|0))>>2] = $660;
   } else {
    $sp$073$i = ((21664 + 448|0));
    while(1) {
     $661 = HEAP32[$sp$073$i>>2]|0;
     $662 = (($sp$073$i) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$245$i|0)==($664|0);
     if ($665) {
      label = 213;
      break;
     }
     $666 = (($sp$073$i) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$073$i = $667;
     }
    }
    if ((label|0) == 213) {
     $669 = (($sp$073$i) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($636>>>0)>=($661>>>0);
      $674 = ($636>>>0)<($tbase$245$i>>>0);
      $or$cond47$i = $673 & $674;
      if ($or$cond47$i) {
       $675 = (($663) + ($tsize$244$i))|0;
       HEAP32[$662>>2] = $675;
       $676 = HEAP32[((21664 + 12|0))>>2]|0;
       $677 = (($676) + ($tsize$244$i))|0;
       $678 = (($636) + 8|0);
       $679 = $678;
       $680 = $679 & 7;
       $681 = ($680|0)==(0);
       if ($681) {
        $685 = 0;
       } else {
        $682 = (0 - ($679))|0;
        $683 = $682 & 7;
        $685 = $683;
       }
       $684 = (($636) + ($685)|0);
       $686 = (($677) - ($685))|0;
       HEAP32[((21664 + 24|0))>>2] = $684;
       HEAP32[((21664 + 12|0))>>2] = $686;
       $687 = $686 | 1;
       $$sum$i16$i = (($685) + 4)|0;
       $688 = (($636) + ($$sum$i16$i)|0);
       HEAP32[$688>>2] = $687;
       $$sum2$i17$i = (($677) + 4)|0;
       $689 = (($636) + ($$sum2$i17$i)|0);
       HEAP32[$689>>2] = 40;
       $690 = HEAP32[((22136 + 16|0))>>2]|0;
       HEAP32[((21664 + 28|0))>>2] = $690;
       break;
      }
     }
    }
    $691 = HEAP32[((21664 + 16|0))>>2]|0;
    $692 = ($tbase$245$i>>>0)<($691>>>0);
    if ($692) {
     HEAP32[((21664 + 16|0))>>2] = $tbase$245$i;
     $756 = $tbase$245$i;
    } else {
     $756 = $691;
    }
    $693 = (($tbase$245$i) + ($tsize$244$i)|0);
    $sp$166$i = ((21664 + 448|0));
    while(1) {
     $694 = HEAP32[$sp$166$i>>2]|0;
     $695 = ($694|0)==($693|0);
     if ($695) {
      label = 223;
      break;
     }
     $696 = (($sp$166$i) + 8|0);
     $697 = HEAP32[$696>>2]|0;
     $698 = ($697|0)==(0|0);
     if ($698) {
      break;
     } else {
      $sp$166$i = $697;
     }
    }
    if ((label|0) == 223) {
     $699 = (($sp$166$i) + 12|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = $700 & 8;
     $702 = ($701|0)==(0);
     if ($702) {
      HEAP32[$sp$166$i>>2] = $tbase$245$i;
      $703 = (($sp$166$i) + 4|0);
      $704 = HEAP32[$703>>2]|0;
      $705 = (($704) + ($tsize$244$i))|0;
      HEAP32[$703>>2] = $705;
      $706 = (($tbase$245$i) + 8|0);
      $707 = $706;
      $708 = $707 & 7;
      $709 = ($708|0)==(0);
      if ($709) {
       $713 = 0;
      } else {
       $710 = (0 - ($707))|0;
       $711 = $710 & 7;
       $713 = $711;
      }
      $712 = (($tbase$245$i) + ($713)|0);
      $$sum102$i = (($tsize$244$i) + 8)|0;
      $714 = (($tbase$245$i) + ($$sum102$i)|0);
      $715 = $714;
      $716 = $715 & 7;
      $717 = ($716|0)==(0);
      if ($717) {
       $720 = 0;
      } else {
       $718 = (0 - ($715))|0;
       $719 = $718 & 7;
       $720 = $719;
      }
      $$sum103$i = (($720) + ($tsize$244$i))|0;
      $721 = (($tbase$245$i) + ($$sum103$i)|0);
      $722 = $721;
      $723 = $712;
      $724 = (($722) - ($723))|0;
      $$sum$i19$i = (($713) + ($nb$0))|0;
      $725 = (($tbase$245$i) + ($$sum$i19$i)|0);
      $726 = (($724) - ($nb$0))|0;
      $727 = $nb$0 | 3;
      $$sum1$i20$i = (($713) + 4)|0;
      $728 = (($tbase$245$i) + ($$sum1$i20$i)|0);
      HEAP32[$728>>2] = $727;
      $729 = ($721|0)==($636|0);
      L345: do {
       if ($729) {
        $730 = HEAP32[((21664 + 12|0))>>2]|0;
        $731 = (($730) + ($726))|0;
        HEAP32[((21664 + 12|0))>>2] = $731;
        HEAP32[((21664 + 24|0))>>2] = $725;
        $732 = $731 | 1;
        $$sum42$i$i = (($$sum$i19$i) + 4)|0;
        $733 = (($tbase$245$i) + ($$sum42$i$i)|0);
        HEAP32[$733>>2] = $732;
       } else {
        $734 = HEAP32[((21664 + 20|0))>>2]|0;
        $735 = ($721|0)==($734|0);
        if ($735) {
         $736 = HEAP32[((21664 + 8|0))>>2]|0;
         $737 = (($736) + ($726))|0;
         HEAP32[((21664 + 8|0))>>2] = $737;
         HEAP32[((21664 + 20|0))>>2] = $725;
         $738 = $737 | 1;
         $$sum40$i$i = (($$sum$i19$i) + 4)|0;
         $739 = (($tbase$245$i) + ($$sum40$i$i)|0);
         HEAP32[$739>>2] = $738;
         $$sum41$i$i = (($737) + ($$sum$i19$i))|0;
         $740 = (($tbase$245$i) + ($$sum41$i$i)|0);
         HEAP32[$740>>2] = $737;
         break;
        }
        $$sum2$i21$i = (($tsize$244$i) + 4)|0;
        $$sum104$i = (($$sum2$i21$i) + ($720))|0;
        $741 = (($tbase$245$i) + ($$sum104$i)|0);
        $742 = HEAP32[$741>>2]|0;
        $743 = $742 & 3;
        $744 = ($743|0)==(1);
        if ($744) {
         $745 = $742 & -8;
         $746 = $742 >>> 3;
         $747 = ($742>>>0)<(256);
         L353: do {
          if ($747) {
           $$sum3738$i$i = $720 | 8;
           $$sum114$i = (($$sum3738$i$i) + ($tsize$244$i))|0;
           $748 = (($tbase$245$i) + ($$sum114$i)|0);
           $749 = HEAP32[$748>>2]|0;
           $$sum39$i$i = (($tsize$244$i) + 12)|0;
           $$sum115$i = (($$sum39$i$i) + ($720))|0;
           $750 = (($tbase$245$i) + ($$sum115$i)|0);
           $751 = HEAP32[$750>>2]|0;
           $752 = $746 << 1;
           $753 = ((21664 + ($752<<2)|0) + 40|0);
           $754 = ($749|0)==($753|0);
           do {
            if (!($754)) {
             $755 = ($749>>>0)<($756>>>0);
             if ($755) {
              _abort();
              // unreachable;
             }
             $757 = (($749) + 12|0);
             $758 = HEAP32[$757>>2]|0;
             $759 = ($758|0)==($721|0);
             if ($759) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $760 = ($751|0)==($749|0);
           if ($760) {
            $761 = 1 << $746;
            $762 = $761 ^ -1;
            $763 = HEAP32[21664>>2]|0;
            $764 = $763 & $762;
            HEAP32[21664>>2] = $764;
            break;
           }
           $765 = ($751|0)==($753|0);
           do {
            if ($765) {
             $$pre58$i$i = (($751) + 8|0);
             $$pre$phi59$i$iZ2D = $$pre58$i$i;
            } else {
             $766 = ($751>>>0)<($756>>>0);
             if ($766) {
              _abort();
              // unreachable;
             }
             $767 = (($751) + 8|0);
             $768 = HEAP32[$767>>2]|0;
             $769 = ($768|0)==($721|0);
             if ($769) {
              $$pre$phi59$i$iZ2D = $767;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $770 = (($749) + 12|0);
           HEAP32[$770>>2] = $751;
           HEAP32[$$pre$phi59$i$iZ2D>>2] = $749;
          } else {
           $$sum34$i$i = $720 | 24;
           $$sum105$i = (($$sum34$i$i) + ($tsize$244$i))|0;
           $771 = (($tbase$245$i) + ($$sum105$i)|0);
           $772 = HEAP32[$771>>2]|0;
           $$sum5$i$i = (($tsize$244$i) + 12)|0;
           $$sum106$i = (($$sum5$i$i) + ($720))|0;
           $773 = (($tbase$245$i) + ($$sum106$i)|0);
           $774 = HEAP32[$773>>2]|0;
           $775 = ($774|0)==($721|0);
           do {
            if ($775) {
             $$sum67$i$i = $720 | 16;
             $$sum112$i = (($$sum2$i21$i) + ($$sum67$i$i))|0;
             $785 = (($tbase$245$i) + ($$sum112$i)|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = ($786|0)==(0|0);
             if ($787) {
              $$sum113$i = (($$sum67$i$i) + ($tsize$244$i))|0;
              $788 = (($tbase$245$i) + ($$sum113$i)|0);
              $789 = HEAP32[$788>>2]|0;
              $790 = ($789|0)==(0|0);
              if ($790) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $789;$RP$0$i$i = $788;
              }
             } else {
              $R$0$i$i = $786;$RP$0$i$i = $785;
             }
             while(1) {
              $791 = (($R$0$i$i) + 20|0);
              $792 = HEAP32[$791>>2]|0;
              $793 = ($792|0)==(0|0);
              if (!($793)) {
               $R$0$i$i = $792;$RP$0$i$i = $791;
               continue;
              }
              $794 = (($R$0$i$i) + 16|0);
              $795 = HEAP32[$794>>2]|0;
              $796 = ($795|0)==(0|0);
              if ($796) {
               break;
              } else {
               $R$0$i$i = $795;$RP$0$i$i = $794;
              }
             }
             $797 = ($RP$0$i$i>>>0)<($756>>>0);
             if ($797) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$0$i$i>>2] = 0;
              $R$1$i$i = $R$0$i$i;
              break;
             }
            } else {
             $$sum3536$i$i = $720 | 8;
             $$sum107$i = (($$sum3536$i$i) + ($tsize$244$i))|0;
             $776 = (($tbase$245$i) + ($$sum107$i)|0);
             $777 = HEAP32[$776>>2]|0;
             $778 = ($777>>>0)<($756>>>0);
             if ($778) {
              _abort();
              // unreachable;
             }
             $779 = (($777) + 12|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==($721|0);
             if (!($781)) {
              _abort();
              // unreachable;
             }
             $782 = (($774) + 8|0);
             $783 = HEAP32[$782>>2]|0;
             $784 = ($783|0)==($721|0);
             if ($784) {
              HEAP32[$779>>2] = $774;
              HEAP32[$782>>2] = $777;
              $R$1$i$i = $774;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $798 = ($772|0)==(0|0);
           if ($798) {
            break;
           }
           $$sum30$i$i = (($tsize$244$i) + 28)|0;
           $$sum108$i = (($$sum30$i$i) + ($720))|0;
           $799 = (($tbase$245$i) + ($$sum108$i)|0);
           $800 = HEAP32[$799>>2]|0;
           $801 = ((21664 + ($800<<2)|0) + 304|0);
           $802 = HEAP32[$801>>2]|0;
           $803 = ($721|0)==($802|0);
           do {
            if ($803) {
             HEAP32[$801>>2] = $R$1$i$i;
             $cond$i$i = ($R$1$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $804 = 1 << $800;
             $805 = $804 ^ -1;
             $806 = HEAP32[((21664 + 4|0))>>2]|0;
             $807 = $806 & $805;
             HEAP32[((21664 + 4|0))>>2] = $807;
             break L353;
            } else {
             $808 = HEAP32[((21664 + 16|0))>>2]|0;
             $809 = ($772>>>0)<($808>>>0);
             if ($809) {
              _abort();
              // unreachable;
             }
             $810 = (($772) + 16|0);
             $811 = HEAP32[$810>>2]|0;
             $812 = ($811|0)==($721|0);
             if ($812) {
              HEAP32[$810>>2] = $R$1$i$i;
             } else {
              $813 = (($772) + 20|0);
              HEAP32[$813>>2] = $R$1$i$i;
             }
             $814 = ($R$1$i$i|0)==(0|0);
             if ($814) {
              break L353;
             }
            }
           } while(0);
           $815 = HEAP32[((21664 + 16|0))>>2]|0;
           $816 = ($R$1$i$i>>>0)<($815>>>0);
           if ($816) {
            _abort();
            // unreachable;
           }
           $817 = (($R$1$i$i) + 24|0);
           HEAP32[$817>>2] = $772;
           $$sum3132$i$i = $720 | 16;
           $$sum109$i = (($$sum3132$i$i) + ($tsize$244$i))|0;
           $818 = (($tbase$245$i) + ($$sum109$i)|0);
           $819 = HEAP32[$818>>2]|0;
           $820 = ($819|0)==(0|0);
           do {
            if (!($820)) {
             $821 = ($819>>>0)<($815>>>0);
             if ($821) {
              _abort();
              // unreachable;
             } else {
              $822 = (($R$1$i$i) + 16|0);
              HEAP32[$822>>2] = $819;
              $823 = (($819) + 24|0);
              HEAP32[$823>>2] = $R$1$i$i;
              break;
             }
            }
           } while(0);
           $$sum110$i = (($$sum2$i21$i) + ($$sum3132$i$i))|0;
           $824 = (($tbase$245$i) + ($$sum110$i)|0);
           $825 = HEAP32[$824>>2]|0;
           $826 = ($825|0)==(0|0);
           if ($826) {
            break;
           }
           $827 = HEAP32[((21664 + 16|0))>>2]|0;
           $828 = ($825>>>0)<($827>>>0);
           if ($828) {
            _abort();
            // unreachable;
           } else {
            $829 = (($R$1$i$i) + 20|0);
            HEAP32[$829>>2] = $825;
            $830 = (($825) + 24|0);
            HEAP32[$830>>2] = $R$1$i$i;
            break;
           }
          }
         } while(0);
         $$sum9$i$i = $745 | $720;
         $$sum111$i = (($$sum9$i$i) + ($tsize$244$i))|0;
         $831 = (($tbase$245$i) + ($$sum111$i)|0);
         $832 = (($745) + ($726))|0;
         $oldfirst$0$i$i = $831;$qsize$0$i$i = $832;
        } else {
         $oldfirst$0$i$i = $721;$qsize$0$i$i = $726;
        }
        $833 = (($oldfirst$0$i$i) + 4|0);
        $834 = HEAP32[$833>>2]|0;
        $835 = $834 & -2;
        HEAP32[$833>>2] = $835;
        $836 = $qsize$0$i$i | 1;
        $$sum10$i$i = (($$sum$i19$i) + 4)|0;
        $837 = (($tbase$245$i) + ($$sum10$i$i)|0);
        HEAP32[$837>>2] = $836;
        $$sum11$i22$i = (($qsize$0$i$i) + ($$sum$i19$i))|0;
        $838 = (($tbase$245$i) + ($$sum11$i22$i)|0);
        HEAP32[$838>>2] = $qsize$0$i$i;
        $839 = $qsize$0$i$i >>> 3;
        $840 = ($qsize$0$i$i>>>0)<(256);
        if ($840) {
         $841 = $839 << 1;
         $842 = ((21664 + ($841<<2)|0) + 40|0);
         $843 = HEAP32[21664>>2]|0;
         $844 = 1 << $839;
         $845 = $843 & $844;
         $846 = ($845|0)==(0);
         do {
          if ($846) {
           $847 = $843 | $844;
           HEAP32[21664>>2] = $847;
           $$sum26$pre$i$i = (($841) + 2)|0;
           $$pre$i23$i = ((21664 + ($$sum26$pre$i$i<<2)|0) + 40|0);
           $$pre$phi$i24$iZ2D = $$pre$i23$i;$F4$0$i$i = $842;
          } else {
           $$sum29$i$i = (($841) + 2)|0;
           $848 = ((21664 + ($$sum29$i$i<<2)|0) + 40|0);
           $849 = HEAP32[$848>>2]|0;
           $850 = HEAP32[((21664 + 16|0))>>2]|0;
           $851 = ($849>>>0)<($850>>>0);
           if (!($851)) {
            $$pre$phi$i24$iZ2D = $848;$F4$0$i$i = $849;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i24$iZ2D>>2] = $725;
         $852 = (($F4$0$i$i) + 12|0);
         HEAP32[$852>>2] = $725;
         $$sum27$i$i = (($$sum$i19$i) + 8)|0;
         $853 = (($tbase$245$i) + ($$sum27$i$i)|0);
         HEAP32[$853>>2] = $F4$0$i$i;
         $$sum28$i$i = (($$sum$i19$i) + 12)|0;
         $854 = (($tbase$245$i) + ($$sum28$i$i)|0);
         HEAP32[$854>>2] = $842;
         break;
        }
        $855 = $qsize$0$i$i >>> 8;
        $856 = ($855|0)==(0);
        do {
         if ($856) {
          $I7$0$i$i = 0;
         } else {
          $857 = ($qsize$0$i$i>>>0)>(16777215);
          if ($857) {
           $I7$0$i$i = 31;
           break;
          }
          $858 = (($855) + 1048320)|0;
          $859 = $858 >>> 16;
          $860 = $859 & 8;
          $861 = $855 << $860;
          $862 = (($861) + 520192)|0;
          $863 = $862 >>> 16;
          $864 = $863 & 4;
          $865 = $864 | $860;
          $866 = $861 << $864;
          $867 = (($866) + 245760)|0;
          $868 = $867 >>> 16;
          $869 = $868 & 2;
          $870 = $865 | $869;
          $871 = (14 - ($870))|0;
          $872 = $866 << $869;
          $873 = $872 >>> 15;
          $874 = (($871) + ($873))|0;
          $875 = $874 << 1;
          $876 = (($874) + 7)|0;
          $877 = $qsize$0$i$i >>> $876;
          $878 = $877 & 1;
          $879 = $878 | $875;
          $I7$0$i$i = $879;
         }
        } while(0);
        $880 = ((21664 + ($I7$0$i$i<<2)|0) + 304|0);
        $$sum12$i$i = (($$sum$i19$i) + 28)|0;
        $881 = (($tbase$245$i) + ($$sum12$i$i)|0);
        HEAP32[$881>>2] = $I7$0$i$i;
        $$sum13$i$i = (($$sum$i19$i) + 16)|0;
        $882 = (($tbase$245$i) + ($$sum13$i$i)|0);
        $$sum14$i$i = (($$sum$i19$i) + 20)|0;
        $883 = (($tbase$245$i) + ($$sum14$i$i)|0);
        HEAP32[$883>>2] = 0;
        HEAP32[$882>>2] = 0;
        $884 = HEAP32[((21664 + 4|0))>>2]|0;
        $885 = 1 << $I7$0$i$i;
        $886 = $884 & $885;
        $887 = ($886|0)==(0);
        if ($887) {
         $888 = $884 | $885;
         HEAP32[((21664 + 4|0))>>2] = $888;
         HEAP32[$880>>2] = $725;
         $$sum15$i$i = (($$sum$i19$i) + 24)|0;
         $889 = (($tbase$245$i) + ($$sum15$i$i)|0);
         HEAP32[$889>>2] = $880;
         $$sum16$i$i = (($$sum$i19$i) + 12)|0;
         $890 = (($tbase$245$i) + ($$sum16$i$i)|0);
         HEAP32[$890>>2] = $725;
         $$sum17$i$i = (($$sum$i19$i) + 8)|0;
         $891 = (($tbase$245$i) + ($$sum17$i$i)|0);
         HEAP32[$891>>2] = $725;
         break;
        }
        $892 = HEAP32[$880>>2]|0;
        $893 = ($I7$0$i$i|0)==(31);
        if ($893) {
         $901 = 0;
        } else {
         $894 = $I7$0$i$i >>> 1;
         $895 = (25 - ($894))|0;
         $901 = $895;
        }
        $896 = (($892) + 4|0);
        $897 = HEAP32[$896>>2]|0;
        $898 = $897 & -8;
        $899 = ($898|0)==($qsize$0$i$i|0);
        L442: do {
         if ($899) {
          $T$0$lcssa$i26$i = $892;
         } else {
          $900 = $qsize$0$i$i << $901;
          $K8$053$i$i = $900;$T$052$i$i = $892;
          while(1) {
           $908 = $K8$053$i$i >>> 31;
           $909 = ((($T$052$i$i) + ($908<<2)|0) + 16|0);
           $904 = HEAP32[$909>>2]|0;
           $910 = ($904|0)==(0|0);
           if ($910) {
            break;
           }
           $902 = $K8$053$i$i << 1;
           $903 = (($904) + 4|0);
           $905 = HEAP32[$903>>2]|0;
           $906 = $905 & -8;
           $907 = ($906|0)==($qsize$0$i$i|0);
           if ($907) {
            $T$0$lcssa$i26$i = $904;
            break L442;
           } else {
            $K8$053$i$i = $902;$T$052$i$i = $904;
           }
          }
          $911 = HEAP32[((21664 + 16|0))>>2]|0;
          $912 = ($909>>>0)<($911>>>0);
          if ($912) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$909>>2] = $725;
           $$sum23$i$i = (($$sum$i19$i) + 24)|0;
           $913 = (($tbase$245$i) + ($$sum23$i$i)|0);
           HEAP32[$913>>2] = $T$052$i$i;
           $$sum24$i$i = (($$sum$i19$i) + 12)|0;
           $914 = (($tbase$245$i) + ($$sum24$i$i)|0);
           HEAP32[$914>>2] = $725;
           $$sum25$i$i = (($$sum$i19$i) + 8)|0;
           $915 = (($tbase$245$i) + ($$sum25$i$i)|0);
           HEAP32[$915>>2] = $725;
           break L345;
          }
         }
        } while(0);
        $916 = (($T$0$lcssa$i26$i) + 8|0);
        $917 = HEAP32[$916>>2]|0;
        $918 = HEAP32[((21664 + 16|0))>>2]|0;
        $919 = ($T$0$lcssa$i26$i>>>0)>=($918>>>0);
        $920 = ($917>>>0)>=($918>>>0);
        $or$cond$i27$i = $919 & $920;
        if ($or$cond$i27$i) {
         $921 = (($917) + 12|0);
         HEAP32[$921>>2] = $725;
         HEAP32[$916>>2] = $725;
         $$sum20$i$i = (($$sum$i19$i) + 8)|0;
         $922 = (($tbase$245$i) + ($$sum20$i$i)|0);
         HEAP32[$922>>2] = $917;
         $$sum21$i$i = (($$sum$i19$i) + 12)|0;
         $923 = (($tbase$245$i) + ($$sum21$i$i)|0);
         HEAP32[$923>>2] = $T$0$lcssa$i26$i;
         $$sum22$i$i = (($$sum$i19$i) + 24)|0;
         $924 = (($tbase$245$i) + ($$sum22$i$i)|0);
         HEAP32[$924>>2] = 0;
         break;
        } else {
         _abort();
         // unreachable;
        }
       }
      } while(0);
      $$sum1819$i$i = $713 | 8;
      $925 = (($tbase$245$i) + ($$sum1819$i$i)|0);
      $mem$0 = $925;
      STACKTOP = sp;return ($mem$0|0);
     }
    }
    $sp$0$i$i$i = ((21664 + 448|0));
    while(1) {
     $926 = HEAP32[$sp$0$i$i$i>>2]|0;
     $927 = ($926>>>0)>($636>>>0);
     if (!($927)) {
      $928 = (($sp$0$i$i$i) + 4|0);
      $929 = HEAP32[$928>>2]|0;
      $930 = (($926) + ($929)|0);
      $931 = ($930>>>0)>($636>>>0);
      if ($931) {
       break;
      }
     }
     $932 = (($sp$0$i$i$i) + 8|0);
     $933 = HEAP32[$932>>2]|0;
     $sp$0$i$i$i = $933;
    }
    $$sum$i13$i = (($929) + -47)|0;
    $$sum1$i14$i = (($929) + -39)|0;
    $934 = (($926) + ($$sum1$i14$i)|0);
    $935 = $934;
    $936 = $935 & 7;
    $937 = ($936|0)==(0);
    if ($937) {
     $940 = 0;
    } else {
     $938 = (0 - ($935))|0;
     $939 = $938 & 7;
     $940 = $939;
    }
    $$sum2$i15$i = (($$sum$i13$i) + ($940))|0;
    $941 = (($926) + ($$sum2$i15$i)|0);
    $942 = (($636) + 16|0);
    $943 = ($941>>>0)<($942>>>0);
    $944 = $943 ? $636 : $941;
    $945 = (($944) + 8|0);
    $946 = (($tsize$244$i) + -40)|0;
    $947 = (($tbase$245$i) + 8|0);
    $948 = $947;
    $949 = $948 & 7;
    $950 = ($949|0)==(0);
    if ($950) {
     $954 = 0;
    } else {
     $951 = (0 - ($948))|0;
     $952 = $951 & 7;
     $954 = $952;
    }
    $953 = (($tbase$245$i) + ($954)|0);
    $955 = (($946) - ($954))|0;
    HEAP32[((21664 + 24|0))>>2] = $953;
    HEAP32[((21664 + 12|0))>>2] = $955;
    $956 = $955 | 1;
    $$sum$i$i$i = (($954) + 4)|0;
    $957 = (($tbase$245$i) + ($$sum$i$i$i)|0);
    HEAP32[$957>>2] = $956;
    $$sum2$i$i$i = (($tsize$244$i) + -36)|0;
    $958 = (($tbase$245$i) + ($$sum2$i$i$i)|0);
    HEAP32[$958>>2] = 40;
    $959 = HEAP32[((22136 + 16|0))>>2]|0;
    HEAP32[((21664 + 28|0))>>2] = $959;
    $960 = (($944) + 4|0);
    HEAP32[$960>>2] = 27;
    ;HEAP32[$945+0>>2]=HEAP32[((21664 + 448|0))+0>>2]|0;HEAP32[$945+4>>2]=HEAP32[((21664 + 448|0))+4>>2]|0;HEAP32[$945+8>>2]=HEAP32[((21664 + 448|0))+8>>2]|0;HEAP32[$945+12>>2]=HEAP32[((21664 + 448|0))+12>>2]|0;
    HEAP32[((21664 + 448|0))>>2] = $tbase$245$i;
    HEAP32[((21664 + 452|0))>>2] = $tsize$244$i;
    HEAP32[((21664 + 460|0))>>2] = 0;
    HEAP32[((21664 + 456|0))>>2] = $945;
    $961 = (($944) + 28|0);
    HEAP32[$961>>2] = 7;
    $962 = (($944) + 32|0);
    $963 = ($962>>>0)<($930>>>0);
    if ($963) {
     $965 = $961;
     while(1) {
      $964 = (($965) + 4|0);
      HEAP32[$964>>2] = 7;
      $966 = (($965) + 8|0);
      $967 = ($966>>>0)<($930>>>0);
      if ($967) {
       $965 = $964;
      } else {
       break;
      }
     }
    }
    $968 = ($944|0)==($636|0);
    if (!($968)) {
     $969 = $944;
     $970 = $636;
     $971 = (($969) - ($970))|0;
     $972 = (($636) + ($971)|0);
     $$sum3$i$i = (($971) + 4)|0;
     $973 = (($636) + ($$sum3$i$i)|0);
     $974 = HEAP32[$973>>2]|0;
     $975 = $974 & -2;
     HEAP32[$973>>2] = $975;
     $976 = $971 | 1;
     $977 = (($636) + 4|0);
     HEAP32[$977>>2] = $976;
     HEAP32[$972>>2] = $971;
     $978 = $971 >>> 3;
     $979 = ($971>>>0)<(256);
     if ($979) {
      $980 = $978 << 1;
      $981 = ((21664 + ($980<<2)|0) + 40|0);
      $982 = HEAP32[21664>>2]|0;
      $983 = 1 << $978;
      $984 = $982 & $983;
      $985 = ($984|0)==(0);
      do {
       if ($985) {
        $986 = $982 | $983;
        HEAP32[21664>>2] = $986;
        $$sum10$pre$i$i = (($980) + 2)|0;
        $$pre$i$i = ((21664 + ($$sum10$pre$i$i<<2)|0) + 40|0);
        $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $981;
       } else {
        $$sum11$i$i = (($980) + 2)|0;
        $987 = ((21664 + ($$sum11$i$i<<2)|0) + 40|0);
        $988 = HEAP32[$987>>2]|0;
        $989 = HEAP32[((21664 + 16|0))>>2]|0;
        $990 = ($988>>>0)<($989>>>0);
        if (!($990)) {
         $$pre$phi$i$iZ2D = $987;$F$0$i$i = $988;
         break;
        }
        _abort();
        // unreachable;
       }
      } while(0);
      HEAP32[$$pre$phi$i$iZ2D>>2] = $636;
      $991 = (($F$0$i$i) + 12|0);
      HEAP32[$991>>2] = $636;
      $992 = (($636) + 8|0);
      HEAP32[$992>>2] = $F$0$i$i;
      $993 = (($636) + 12|0);
      HEAP32[$993>>2] = $981;
      break;
     }
     $994 = $971 >>> 8;
     $995 = ($994|0)==(0);
     if ($995) {
      $I1$0$i$i = 0;
     } else {
      $996 = ($971>>>0)>(16777215);
      if ($996) {
       $I1$0$i$i = 31;
      } else {
       $997 = (($994) + 1048320)|0;
       $998 = $997 >>> 16;
       $999 = $998 & 8;
       $1000 = $994 << $999;
       $1001 = (($1000) + 520192)|0;
       $1002 = $1001 >>> 16;
       $1003 = $1002 & 4;
       $1004 = $1003 | $999;
       $1005 = $1000 << $1003;
       $1006 = (($1005) + 245760)|0;
       $1007 = $1006 >>> 16;
       $1008 = $1007 & 2;
       $1009 = $1004 | $1008;
       $1010 = (14 - ($1009))|0;
       $1011 = $1005 << $1008;
       $1012 = $1011 >>> 15;
       $1013 = (($1010) + ($1012))|0;
       $1014 = $1013 << 1;
       $1015 = (($1013) + 7)|0;
       $1016 = $971 >>> $1015;
       $1017 = $1016 & 1;
       $1018 = $1017 | $1014;
       $I1$0$i$i = $1018;
      }
     }
     $1019 = ((21664 + ($I1$0$i$i<<2)|0) + 304|0);
     $1020 = (($636) + 28|0);
     $I1$0$c$i$i = $I1$0$i$i;
     HEAP32[$1020>>2] = $I1$0$c$i$i;
     $1021 = (($636) + 20|0);
     HEAP32[$1021>>2] = 0;
     $1022 = (($636) + 16|0);
     HEAP32[$1022>>2] = 0;
     $1023 = HEAP32[((21664 + 4|0))>>2]|0;
     $1024 = 1 << $I1$0$i$i;
     $1025 = $1023 & $1024;
     $1026 = ($1025|0)==(0);
     if ($1026) {
      $1027 = $1023 | $1024;
      HEAP32[((21664 + 4|0))>>2] = $1027;
      HEAP32[$1019>>2] = $636;
      $1028 = (($636) + 24|0);
      HEAP32[$1028>>2] = $1019;
      $1029 = (($636) + 12|0);
      HEAP32[$1029>>2] = $636;
      $1030 = (($636) + 8|0);
      HEAP32[$1030>>2] = $636;
      break;
     }
     $1031 = HEAP32[$1019>>2]|0;
     $1032 = ($I1$0$i$i|0)==(31);
     if ($1032) {
      $1040 = 0;
     } else {
      $1033 = $I1$0$i$i >>> 1;
      $1034 = (25 - ($1033))|0;
      $1040 = $1034;
     }
     $1035 = (($1031) + 4|0);
     $1036 = HEAP32[$1035>>2]|0;
     $1037 = $1036 & -8;
     $1038 = ($1037|0)==($971|0);
     L493: do {
      if ($1038) {
       $T$0$lcssa$i$i = $1031;
      } else {
       $1039 = $971 << $1040;
       $K2$015$i$i = $1039;$T$014$i$i = $1031;
       while(1) {
        $1047 = $K2$015$i$i >>> 31;
        $1048 = ((($T$014$i$i) + ($1047<<2)|0) + 16|0);
        $1043 = HEAP32[$1048>>2]|0;
        $1049 = ($1043|0)==(0|0);
        if ($1049) {
         break;
        }
        $1041 = $K2$015$i$i << 1;
        $1042 = (($1043) + 4|0);
        $1044 = HEAP32[$1042>>2]|0;
        $1045 = $1044 & -8;
        $1046 = ($1045|0)==($971|0);
        if ($1046) {
         $T$0$lcssa$i$i = $1043;
         break L493;
        } else {
         $K2$015$i$i = $1041;$T$014$i$i = $1043;
        }
       }
       $1050 = HEAP32[((21664 + 16|0))>>2]|0;
       $1051 = ($1048>>>0)<($1050>>>0);
       if ($1051) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$1048>>2] = $636;
        $1052 = (($636) + 24|0);
        HEAP32[$1052>>2] = $T$014$i$i;
        $1053 = (($636) + 12|0);
        HEAP32[$1053>>2] = $636;
        $1054 = (($636) + 8|0);
        HEAP32[$1054>>2] = $636;
        break L308;
       }
      }
     } while(0);
     $1055 = (($T$0$lcssa$i$i) + 8|0);
     $1056 = HEAP32[$1055>>2]|0;
     $1057 = HEAP32[((21664 + 16|0))>>2]|0;
     $1058 = ($T$0$lcssa$i$i>>>0)>=($1057>>>0);
     $1059 = ($1056>>>0)>=($1057>>>0);
     $or$cond$i$i = $1058 & $1059;
     if ($or$cond$i$i) {
      $1060 = (($1056) + 12|0);
      HEAP32[$1060>>2] = $636;
      HEAP32[$1055>>2] = $636;
      $1061 = (($636) + 8|0);
      HEAP32[$1061>>2] = $1056;
      $1062 = (($636) + 12|0);
      HEAP32[$1062>>2] = $T$0$lcssa$i$i;
      $1063 = (($636) + 24|0);
      HEAP32[$1063>>2] = 0;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   }
  } while(0);
  $1064 = HEAP32[((21664 + 12|0))>>2]|0;
  $1065 = ($1064>>>0)>($nb$0>>>0);
  if ($1065) {
   $1066 = (($1064) - ($nb$0))|0;
   HEAP32[((21664 + 12|0))>>2] = $1066;
   $1067 = HEAP32[((21664 + 24|0))>>2]|0;
   $1068 = (($1067) + ($nb$0)|0);
   HEAP32[((21664 + 24|0))>>2] = $1068;
   $1069 = $1066 | 1;
   $$sum$i32 = (($nb$0) + 4)|0;
   $1070 = (($1067) + ($$sum$i32)|0);
   HEAP32[$1070>>2] = $1069;
   $1071 = $nb$0 | 3;
   $1072 = (($1067) + 4|0);
   HEAP32[$1072>>2] = $1071;
   $1073 = (($1067) + 8|0);
   $mem$0 = $1073;
   STACKTOP = sp;return ($mem$0|0);
  }
 }
 $1074 = (___errno_location()|0);
 HEAP32[$1074>>2] = 12;
 $mem$0 = 0;
 STACKTOP = sp;return ($mem$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$pre = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$pre65 = 0, $$pre67 = 0, $$sum = 0, $$sum16$pre = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum2324 = 0, $$sum25 = 0, $$sum26 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0;
 var $$sum31 = 0, $$sum32 = 0, $$sum33 = 0, $$sum34 = 0, $$sum35 = 0, $$sum36 = 0, $$sum37 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $I18$0$c = 0, $K19$058 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0;
 var $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$057 = 0, $cond = 0, $cond54 = 0, $or$cond = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  STACKTOP = sp;return;
 }
 $1 = (($mem) + -8|0);
 $2 = HEAP32[((21664 + 16|0))>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = (($mem) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $$sum = (($8) + -8)|0;
 $9 = (($mem) + ($$sum)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    STACKTOP = sp;return;
   }
   $$sum2 = (-8 - ($12))|0;
   $14 = (($mem) + ($$sum2)|0);
   $15 = (($12) + ($8))|0;
   $16 = ($14>>>0)<($2>>>0);
   if ($16) {
    _abort();
    // unreachable;
   }
   $17 = HEAP32[((21664 + 20|0))>>2]|0;
   $18 = ($14|0)==($17|0);
   if ($18) {
    $$sum3 = (($8) + -4)|0;
    $103 = (($mem) + ($$sum3)|0);
    $104 = HEAP32[$103>>2]|0;
    $105 = $104 & 3;
    $106 = ($105|0)==(3);
    if (!($106)) {
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    HEAP32[((21664 + 8|0))>>2] = $15;
    $107 = $104 & -2;
    HEAP32[$103>>2] = $107;
    $108 = $15 | 1;
    $$sum26 = (($$sum2) + 4)|0;
    $109 = (($mem) + ($$sum26)|0);
    HEAP32[$109>>2] = $108;
    HEAP32[$9>>2] = $15;
    STACKTOP = sp;return;
   }
   $19 = $12 >>> 3;
   $20 = ($12>>>0)<(256);
   if ($20) {
    $$sum36 = (($$sum2) + 8)|0;
    $21 = (($mem) + ($$sum36)|0);
    $22 = HEAP32[$21>>2]|0;
    $$sum37 = (($$sum2) + 12)|0;
    $23 = (($mem) + ($$sum37)|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = $19 << 1;
    $26 = ((21664 + ($25<<2)|0) + 40|0);
    $27 = ($22|0)==($26|0);
    if (!($27)) {
     $28 = ($22>>>0)<($2>>>0);
     if ($28) {
      _abort();
      // unreachable;
     }
     $29 = (($22) + 12|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==($14|0);
     if (!($31)) {
      _abort();
      // unreachable;
     }
    }
    $32 = ($24|0)==($22|0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = HEAP32[21664>>2]|0;
     $36 = $35 & $34;
     HEAP32[21664>>2] = $36;
     $p$0 = $14;$psize$0 = $15;
     break;
    }
    $37 = ($24|0)==($26|0);
    if ($37) {
     $$pre67 = (($24) + 8|0);
     $$pre$phi68Z2D = $$pre67;
    } else {
     $38 = ($24>>>0)<($2>>>0);
     if ($38) {
      _abort();
      // unreachable;
     }
     $39 = (($24) + 8|0);
     $40 = HEAP32[$39>>2]|0;
     $41 = ($40|0)==($14|0);
     if ($41) {
      $$pre$phi68Z2D = $39;
     } else {
      _abort();
      // unreachable;
     }
    }
    $42 = (($22) + 12|0);
    HEAP32[$42>>2] = $24;
    HEAP32[$$pre$phi68Z2D>>2] = $22;
    $p$0 = $14;$psize$0 = $15;
    break;
   }
   $$sum28 = (($$sum2) + 24)|0;
   $43 = (($mem) + ($$sum28)|0);
   $44 = HEAP32[$43>>2]|0;
   $$sum29 = (($$sum2) + 12)|0;
   $45 = (($mem) + ($$sum29)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($46|0)==($14|0);
   do {
    if ($47) {
     $$sum31 = (($$sum2) + 20)|0;
     $57 = (($mem) + ($$sum31)|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = ($58|0)==(0|0);
     if ($59) {
      $$sum30 = (($$sum2) + 16)|0;
      $60 = (($mem) + ($$sum30)|0);
      $61 = HEAP32[$60>>2]|0;
      $62 = ($61|0)==(0|0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;$RP$0 = $60;
      }
     } else {
      $R$0 = $58;$RP$0 = $57;
     }
     while(1) {
      $63 = (($R$0) + 20|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $R$0 = $64;$RP$0 = $63;
       continue;
      }
      $66 = (($R$0) + 16|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0|0);
      if ($68) {
       break;
      } else {
       $R$0 = $67;$RP$0 = $66;
      }
     }
     $69 = ($RP$0>>>0)<($2>>>0);
     if ($69) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum35 = (($$sum2) + 8)|0;
     $48 = (($mem) + ($$sum35)|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ($49>>>0)<($2>>>0);
     if ($50) {
      _abort();
      // unreachable;
     }
     $51 = (($49) + 12|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = ($52|0)==($14|0);
     if (!($53)) {
      _abort();
      // unreachable;
     }
     $54 = (($46) + 8|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==($14|0);
     if ($56) {
      HEAP32[$51>>2] = $46;
      HEAP32[$54>>2] = $49;
      $R$1 = $46;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $70 = ($44|0)==(0|0);
   if ($70) {
    $p$0 = $14;$psize$0 = $15;
   } else {
    $$sum32 = (($$sum2) + 28)|0;
    $71 = (($mem) + ($$sum32)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ((21664 + ($72<<2)|0) + 304|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = ($14|0)==($74|0);
    if ($75) {
     HEAP32[$73>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = HEAP32[((21664 + 4|0))>>2]|0;
      $79 = $78 & $77;
      HEAP32[((21664 + 4|0))>>2] = $79;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    } else {
     $80 = HEAP32[((21664 + 16|0))>>2]|0;
     $81 = ($44>>>0)<($80>>>0);
     if ($81) {
      _abort();
      // unreachable;
     }
     $82 = (($44) + 16|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==($14|0);
     if ($84) {
      HEAP32[$82>>2] = $R$1;
     } else {
      $85 = (($44) + 20|0);
      HEAP32[$85>>2] = $R$1;
     }
     $86 = ($R$1|0)==(0|0);
     if ($86) {
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
    $87 = HEAP32[((21664 + 16|0))>>2]|0;
    $88 = ($R$1>>>0)<($87>>>0);
    if ($88) {
     _abort();
     // unreachable;
    }
    $89 = (($R$1) + 24|0);
    HEAP32[$89>>2] = $44;
    $$sum33 = (($$sum2) + 16)|0;
    $90 = (($mem) + ($$sum33)|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(0|0);
    do {
     if (!($92)) {
      $93 = ($91>>>0)<($87>>>0);
      if ($93) {
       _abort();
       // unreachable;
      } else {
       $94 = (($R$1) + 16|0);
       HEAP32[$94>>2] = $91;
       $95 = (($91) + 24|0);
       HEAP32[$95>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum34 = (($$sum2) + 20)|0;
    $96 = (($mem) + ($$sum34)|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==(0|0);
    if ($98) {
     $p$0 = $14;$psize$0 = $15;
    } else {
     $99 = HEAP32[((21664 + 16|0))>>2]|0;
     $100 = ($97>>>0)<($99>>>0);
     if ($100) {
      _abort();
      // unreachable;
     } else {
      $101 = (($R$1) + 20|0);
      HEAP32[$101>>2] = $97;
      $102 = (($97) + 24|0);
      HEAP32[$102>>2] = $R$1;
      $p$0 = $14;$psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;$psize$0 = $8;
  }
 } while(0);
 $110 = ($p$0>>>0)<($9>>>0);
 if (!($110)) {
  _abort();
  // unreachable;
 }
 $$sum25 = (($8) + -4)|0;
 $111 = (($mem) + ($$sum25)|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 1;
 $114 = ($113|0)==(0);
 if ($114) {
  _abort();
  // unreachable;
 }
 $115 = $112 & 2;
 $116 = ($115|0)==(0);
 if ($116) {
  $117 = HEAP32[((21664 + 24|0))>>2]|0;
  $118 = ($9|0)==($117|0);
  if ($118) {
   $119 = HEAP32[((21664 + 12|0))>>2]|0;
   $120 = (($119) + ($psize$0))|0;
   HEAP32[((21664 + 12|0))>>2] = $120;
   HEAP32[((21664 + 24|0))>>2] = $p$0;
   $121 = $120 | 1;
   $122 = (($p$0) + 4|0);
   HEAP32[$122>>2] = $121;
   $123 = HEAP32[((21664 + 20|0))>>2]|0;
   $124 = ($p$0|0)==($123|0);
   if (!($124)) {
    STACKTOP = sp;return;
   }
   HEAP32[((21664 + 20|0))>>2] = 0;
   HEAP32[((21664 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $125 = HEAP32[((21664 + 20|0))>>2]|0;
  $126 = ($9|0)==($125|0);
  if ($126) {
   $127 = HEAP32[((21664 + 8|0))>>2]|0;
   $128 = (($127) + ($psize$0))|0;
   HEAP32[((21664 + 8|0))>>2] = $128;
   HEAP32[((21664 + 20|0))>>2] = $p$0;
   $129 = $128 | 1;
   $130 = (($p$0) + 4|0);
   HEAP32[$130>>2] = $129;
   $131 = (($p$0) + ($128)|0);
   HEAP32[$131>>2] = $128;
   STACKTOP = sp;return;
  }
  $132 = $112 & -8;
  $133 = (($132) + ($psize$0))|0;
  $134 = $112 >>> 3;
  $135 = ($112>>>0)<(256);
  do {
   if ($135) {
    $136 = (($mem) + ($8)|0);
    $137 = HEAP32[$136>>2]|0;
    $$sum2324 = $8 | 4;
    $138 = (($mem) + ($$sum2324)|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = $134 << 1;
    $141 = ((21664 + ($140<<2)|0) + 40|0);
    $142 = ($137|0)==($141|0);
    if (!($142)) {
     $143 = HEAP32[((21664 + 16|0))>>2]|0;
     $144 = ($137>>>0)<($143>>>0);
     if ($144) {
      _abort();
      // unreachable;
     }
     $145 = (($137) + 12|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==($9|0);
     if (!($147)) {
      _abort();
      // unreachable;
     }
    }
    $148 = ($139|0)==($137|0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = HEAP32[21664>>2]|0;
     $152 = $151 & $150;
     HEAP32[21664>>2] = $152;
     break;
    }
    $153 = ($139|0)==($141|0);
    if ($153) {
     $$pre65 = (($139) + 8|0);
     $$pre$phi66Z2D = $$pre65;
    } else {
     $154 = HEAP32[((21664 + 16|0))>>2]|0;
     $155 = ($139>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     }
     $156 = (($139) + 8|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($9|0);
     if ($158) {
      $$pre$phi66Z2D = $156;
     } else {
      _abort();
      // unreachable;
     }
    }
    $159 = (($137) + 12|0);
    HEAP32[$159>>2] = $139;
    HEAP32[$$pre$phi66Z2D>>2] = $137;
   } else {
    $$sum5 = (($8) + 16)|0;
    $160 = (($mem) + ($$sum5)|0);
    $161 = HEAP32[$160>>2]|0;
    $$sum67 = $8 | 4;
    $162 = (($mem) + ($$sum67)|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ($163|0)==($9|0);
    do {
     if ($164) {
      $$sum9 = (($8) + 12)|0;
      $175 = (($mem) + ($$sum9)|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==(0|0);
      if ($177) {
       $$sum8 = (($8) + 8)|0;
       $178 = (($mem) + ($$sum8)|0);
       $179 = HEAP32[$178>>2]|0;
       $180 = ($179|0)==(0|0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;$RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;$RP9$0 = $175;
      }
      while(1) {
       $181 = (($R7$0) + 20|0);
       $182 = HEAP32[$181>>2]|0;
       $183 = ($182|0)==(0|0);
       if (!($183)) {
        $R7$0 = $182;$RP9$0 = $181;
        continue;
       }
       $184 = (($R7$0) + 16|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if ($186) {
        break;
       } else {
        $R7$0 = $185;$RP9$0 = $184;
       }
      }
      $187 = HEAP32[((21664 + 16|0))>>2]|0;
      $188 = ($RP9$0>>>0)<($187>>>0);
      if ($188) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $165 = (($mem) + ($8)|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = HEAP32[((21664 + 16|0))>>2]|0;
      $168 = ($166>>>0)<($167>>>0);
      if ($168) {
       _abort();
       // unreachable;
      }
      $169 = (($166) + 12|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==($9|0);
      if (!($171)) {
       _abort();
       // unreachable;
      }
      $172 = (($163) + 8|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($9|0);
      if ($174) {
       HEAP32[$169>>2] = $163;
       HEAP32[$172>>2] = $166;
       $R7$1 = $163;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $189 = ($161|0)==(0|0);
    if (!($189)) {
     $$sum18 = (($8) + 20)|0;
     $190 = (($mem) + ($$sum18)|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ((21664 + ($191<<2)|0) + 304|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = ($9|0)==($193|0);
     if ($194) {
      HEAP32[$192>>2] = $R7$1;
      $cond54 = ($R7$1|0)==(0|0);
      if ($cond54) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = HEAP32[((21664 + 4|0))>>2]|0;
       $198 = $197 & $196;
       HEAP32[((21664 + 4|0))>>2] = $198;
       break;
      }
     } else {
      $199 = HEAP32[((21664 + 16|0))>>2]|0;
      $200 = ($161>>>0)<($199>>>0);
      if ($200) {
       _abort();
       // unreachable;
      }
      $201 = (($161) + 16|0);
      $202 = HEAP32[$201>>2]|0;
      $203 = ($202|0)==($9|0);
      if ($203) {
       HEAP32[$201>>2] = $R7$1;
      } else {
       $204 = (($161) + 20|0);
       HEAP32[$204>>2] = $R7$1;
      }
      $205 = ($R7$1|0)==(0|0);
      if ($205) {
       break;
      }
     }
     $206 = HEAP32[((21664 + 16|0))>>2]|0;
     $207 = ($R7$1>>>0)<($206>>>0);
     if ($207) {
      _abort();
      // unreachable;
     }
     $208 = (($R7$1) + 24|0);
     HEAP32[$208>>2] = $161;
     $$sum19 = (($8) + 8)|0;
     $209 = (($mem) + ($$sum19)|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     do {
      if (!($211)) {
       $212 = ($210>>>0)<($206>>>0);
       if ($212) {
        _abort();
        // unreachable;
       } else {
        $213 = (($R7$1) + 16|0);
        HEAP32[$213>>2] = $210;
        $214 = (($210) + 24|0);
        HEAP32[$214>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum20 = (($8) + 12)|0;
     $215 = (($mem) + ($$sum20)|0);
     $216 = HEAP32[$215>>2]|0;
     $217 = ($216|0)==(0|0);
     if (!($217)) {
      $218 = HEAP32[((21664 + 16|0))>>2]|0;
      $219 = ($216>>>0)<($218>>>0);
      if ($219) {
       _abort();
       // unreachable;
      } else {
       $220 = (($R7$1) + 20|0);
       HEAP32[$220>>2] = $216;
       $221 = (($216) + 24|0);
       HEAP32[$221>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $222 = $133 | 1;
  $223 = (($p$0) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($p$0) + ($133)|0);
  HEAP32[$224>>2] = $133;
  $225 = HEAP32[((21664 + 20|0))>>2]|0;
  $226 = ($p$0|0)==($225|0);
  if ($226) {
   HEAP32[((21664 + 8|0))>>2] = $133;
   STACKTOP = sp;return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  HEAP32[$111>>2] = $227;
  $228 = $psize$0 | 1;
  $229 = (($p$0) + 4|0);
  HEAP32[$229>>2] = $228;
  $230 = (($p$0) + ($psize$0)|0);
  HEAP32[$230>>2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = ($psize$1>>>0)<(256);
 if ($232) {
  $233 = $231 << 1;
  $234 = ((21664 + ($233<<2)|0) + 40|0);
  $235 = HEAP32[21664>>2]|0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237|0)==(0);
  if ($238) {
   $239 = $235 | $236;
   HEAP32[21664>>2] = $239;
   $$sum16$pre = (($233) + 2)|0;
   $$pre = ((21664 + ($$sum16$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $234;
  } else {
   $$sum17 = (($233) + 2)|0;
   $240 = ((21664 + ($$sum17<<2)|0) + 40|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = HEAP32[((21664 + 16|0))>>2]|0;
   $243 = ($241>>>0)<($242>>>0);
   if ($243) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $240;$F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$0;
  $244 = (($F16$0) + 12|0);
  HEAP32[$244>>2] = $p$0;
  $245 = (($p$0) + 8|0);
  HEAP32[$245>>2] = $F16$0;
  $246 = (($p$0) + 12|0);
  HEAP32[$246>>2] = $234;
  STACKTOP = sp;return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247|0)==(0);
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = ($psize$1>>>0)>(16777215);
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = (($247) + 1048320)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = (($253) + 520192)|0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = (($258) + 245760)|0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = (14 - ($262))|0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = (($263) + ($265))|0;
   $267 = $266 << 1;
   $268 = (($266) + 7)|0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = ((21664 + ($I18$0<<2)|0) + 304|0);
 $273 = (($p$0) + 28|0);
 $I18$0$c = $I18$0;
 HEAP32[$273>>2] = $I18$0$c;
 $274 = (($p$0) + 20|0);
 HEAP32[$274>>2] = 0;
 $275 = (($p$0) + 16|0);
 HEAP32[$275>>2] = 0;
 $276 = HEAP32[((21664 + 4|0))>>2]|0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278|0)==(0);
 L199: do {
  if ($279) {
   $280 = $276 | $277;
   HEAP32[((21664 + 4|0))>>2] = $280;
   HEAP32[$272>>2] = $p$0;
   $281 = (($p$0) + 24|0);
   HEAP32[$281>>2] = $272;
   $282 = (($p$0) + 12|0);
   HEAP32[$282>>2] = $p$0;
   $283 = (($p$0) + 8|0);
   HEAP32[$283>>2] = $p$0;
  } else {
   $284 = HEAP32[$272>>2]|0;
   $285 = ($I18$0|0)==(31);
   if ($285) {
    $293 = 0;
   } else {
    $286 = $I18$0 >>> 1;
    $287 = (25 - ($286))|0;
    $293 = $287;
   }
   $288 = (($284) + 4|0);
   $289 = HEAP32[$288>>2]|0;
   $290 = $289 & -8;
   $291 = ($290|0)==($psize$1|0);
   L205: do {
    if ($291) {
     $T$0$lcssa = $284;
    } else {
     $292 = $psize$1 << $293;
     $K19$058 = $292;$T$057 = $284;
     while(1) {
      $300 = $K19$058 >>> 31;
      $301 = ((($T$057) + ($300<<2)|0) + 16|0);
      $296 = HEAP32[$301>>2]|0;
      $302 = ($296|0)==(0|0);
      if ($302) {
       break;
      }
      $294 = $K19$058 << 1;
      $295 = (($296) + 4|0);
      $297 = HEAP32[$295>>2]|0;
      $298 = $297 & -8;
      $299 = ($298|0)==($psize$1|0);
      if ($299) {
       $T$0$lcssa = $296;
       break L205;
      } else {
       $K19$058 = $294;$T$057 = $296;
      }
     }
     $303 = HEAP32[((21664 + 16|0))>>2]|0;
     $304 = ($301>>>0)<($303>>>0);
     if ($304) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$301>>2] = $p$0;
      $305 = (($p$0) + 24|0);
      HEAP32[$305>>2] = $T$057;
      $306 = (($p$0) + 12|0);
      HEAP32[$306>>2] = $p$0;
      $307 = (($p$0) + 8|0);
      HEAP32[$307>>2] = $p$0;
      break L199;
     }
    }
   } while(0);
   $308 = (($T$0$lcssa) + 8|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = HEAP32[((21664 + 16|0))>>2]|0;
   $311 = ($T$0$lcssa>>>0)>=($310>>>0);
   $312 = ($309>>>0)>=($310>>>0);
   $or$cond = $311 & $312;
   if ($or$cond) {
    $313 = (($309) + 12|0);
    HEAP32[$313>>2] = $p$0;
    HEAP32[$308>>2] = $p$0;
    $314 = (($p$0) + 8|0);
    HEAP32[$314>>2] = $309;
    $315 = (($p$0) + 12|0);
    HEAP32[$315>>2] = $T$0$lcssa;
    $316 = (($p$0) + 24|0);
    HEAP32[$316>>2] = 0;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $317 = HEAP32[((21664 + 32|0))>>2]|0;
 $318 = (($317) + -1)|0;
 HEAP32[((21664 + 32|0))>>2] = $318;
 $319 = ($318|0)==(0);
 if ($319) {
  $sp$0$in$i = ((21664 + 456|0));
 } else {
  STACKTOP = sp;return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $320 = ($sp$0$i|0)==(0|0);
  $321 = (($sp$0$i) + 8|0);
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 HEAP32[((21664 + 32|0))>>2] = -1;
 STACKTOP = sp;return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 do {
  if ($0) {
   $1 = (_malloc($bytes)|0);
   $mem$0 = $1;
  } else {
   $2 = ($bytes>>>0)>(4294967231);
   if ($2) {
    $3 = (___errno_location()|0);
    HEAP32[$3>>2] = 12;
    $mem$0 = 0;
    break;
   }
   $4 = ($bytes>>>0)<(11);
   if ($4) {
    $8 = 16;
   } else {
    $5 = (($bytes) + 11)|0;
    $6 = $5 & -8;
    $8 = $6;
   }
   $7 = (($oldmem) + -8|0);
   $9 = (_try_realloc_chunk($7,$8)|0);
   $10 = ($9|0)==(0|0);
   if (!($10)) {
    $11 = (($9) + 8|0);
    $mem$0 = $11;
    break;
   }
   $12 = (_malloc($bytes)|0);
   $13 = ($12|0)==(0|0);
   if ($13) {
    $mem$0 = 0;
   } else {
    $14 = (($oldmem) + -4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & -8;
    $17 = $15 & 3;
    $18 = ($17|0)==(0);
    $19 = $18 ? 8 : 4;
    $20 = (($16) - ($19))|0;
    $21 = ($20>>>0)<($bytes>>>0);
    $22 = $21 ? $20 : $bytes;
    _memcpy(($12|0),($oldmem|0),($22|0))|0;
    _free($oldmem);
    $mem$0 = $12;
   }
  }
 } while(0);
 STACKTOP = sp;return ($mem$0|0);
}
function _isdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($c) + -48)|0;
 $1 = ($0>>>0)<(10);
 $2 = $1&1;
 STACKTOP = sp;return ($2|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 if ($0) {
  $4 = 1;
 } else {
  $1 = (($c) + -9)|0;
  $2 = ($1>>>0)<(5);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function _isxdigit($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $isdigit = 0, $isdigittmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $isdigittmp = (($c) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 if ($isdigit) {
  $4 = 1;
 } else {
  $0 = $c | 32;
  $1 = (($0) + -97)|0;
  $2 = ($1>>>0)<(6);
  $4 = $2;
 }
 $3 = $4&1;
 STACKTOP = sp;return ($3|0);
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$125 = 0, $$126 = 0, $$base24 = 0, $$lcssa = 0, $$sum = 0, $$sum17 = 0, $$sum1737 = 0, $$sum18 = 0, $$sum19 = 0, $$sum20 = 0, $$sum21 = 0, $$sum2155 = 0, $$sum22 = 0, $$sum23 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$127 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$362 = 0, $c$4$be = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$747 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $x$073 = 0, $x$138 = 0, $x$256 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 if ($2) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $279 = 0;$280 = 0;
  tempRet0 = $279;
  STACKTOP = sp;return ($280|0);
 }
 $3 = (($f) + 4|0);
 $4 = (($f) + 100|0);
 while(1) {
  $6 = HEAP32[$3>>2]|0;
  $7 = HEAP32[$4>>2]|0;
  $8 = ($6>>>0)<($7>>>0);
  if ($8) {
   $9 = (($6) + 1|0);
   HEAP32[$3>>2] = $9;
   $10 = HEAP8[$6>>0]|0;
   $11 = $10&255;
   $13 = $11;
  } else {
   $12 = (___shgetc($f)|0);
   $13 = $12;
  }
  $14 = (_isspace($13)|0);
  $15 = ($14|0)==(0);
  if ($15) {
   break;
  }
 }
 $16 = ($13|0)==(45);
 do {
  if ((($13|0) == 43) | (($13|0) == 45)) {
   $17 = $16 << 31 >> 31;
   $18 = HEAP32[$3>>2]|0;
   $19 = HEAP32[$4>>2]|0;
   $20 = ($18>>>0)<($19>>>0);
   if ($20) {
    $21 = (($18) + 1|0);
    HEAP32[$3>>2] = $21;
    $22 = HEAP8[$18>>0]|0;
    $23 = $22&255;
    $c$0 = $23;$neg$0 = $17;
    break;
   } else {
    $24 = (___shgetc($f)|0);
    $c$0 = $24;$neg$0 = $17;
    break;
   }
  } else {
   $c$0 = $13;$neg$0 = 0;
  }
 } while(0);
 $25 = ($base|0)==(0);
 $26 = $base & -17;
 $27 = ($26|0)==(0);
 $28 = ($c$0|0)==(48);
 $or$cond5 = $27 & $28;
 do {
  if ($or$cond5) {
   $29 = HEAP32[$3>>2]|0;
   $30 = HEAP32[$4>>2]|0;
   $31 = ($29>>>0)<($30>>>0);
   if ($31) {
    $32 = (($29) + 1|0);
    HEAP32[$3>>2] = $32;
    $33 = HEAP8[$29>>0]|0;
    $34 = $33&255;
    $37 = $34;
   } else {
    $35 = (___shgetc($f)|0);
    $37 = $35;
   }
   $36 = $37 | 32;
   $38 = ($36|0)==(120);
   if (!($38)) {
    if ($25) {
     $$126 = 8;$c$127 = $37;
     label = 46;
     break;
    } else {
     $$1 = $base;$c$1 = $37;
     label = 32;
     break;
    }
   }
   $39 = HEAP32[$3>>2]|0;
   $40 = HEAP32[$4>>2]|0;
   $41 = ($39>>>0)<($40>>>0);
   if ($41) {
    $42 = (($39) + 1|0);
    HEAP32[$3>>2] = $42;
    $43 = HEAP8[$39>>0]|0;
    $44 = $43&255;
    $46 = $44;
   } else {
    $45 = (___shgetc($f)|0);
    $46 = $45;
   }
   $$sum23 = (($46) + 1)|0;
   $47 = (22160 + ($$sum23)|0);
   $48 = HEAP8[$47>>0]|0;
   $49 = ($48&255)>(15);
   if ($49) {
    $50 = HEAP32[$4>>2]|0;
    $51 = ($50|0)==(0|0);
    if (!($51)) {
     $52 = HEAP32[$3>>2]|0;
     $53 = (($52) + -1|0);
     HEAP32[$3>>2] = $53;
    }
    $54 = ($pok|0)==(0);
    if ($54) {
     ___shlim($f,0);
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    if ($51) {
     $279 = 0;$280 = 0;
     tempRet0 = $279;
     STACKTOP = sp;return ($280|0);
    }
    $55 = HEAP32[$3>>2]|0;
    $56 = (($55) + -1|0);
    HEAP32[$3>>2] = $56;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   } else {
    $$126 = 16;$c$127 = $46;
    label = 46;
   }
  } else {
   $$base24 = $25 ? 10 : $base;
   $$sum = (($c$0) + 1)|0;
   $57 = (22160 + ($$sum)|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = ($59>>>0)<($$base24>>>0);
   if ($60) {
    $$1 = $$base24;$c$1 = $c$0;
    label = 32;
   } else {
    $61 = HEAP32[$4>>2]|0;
    $62 = ($61|0)==(0|0);
    if (!($62)) {
     $63 = HEAP32[$3>>2]|0;
     $64 = (($63) + -1|0);
     HEAP32[$3>>2] = $64;
    }
    ___shlim($f,0);
    $65 = (___errno_location()|0);
    HEAP32[$65>>2] = 22;
    $279 = 0;$280 = 0;
    tempRet0 = $279;
    STACKTOP = sp;return ($280|0);
   }
  }
 } while(0);
 if ((label|0) == 32) {
  $66 = ($$1|0)==(10);
  if ($66) {
   $67 = (($c$1) + -48)|0;
   $68 = ($67>>>0)<(10);
   if ($68) {
    $71 = $67;$x$073 = 0;
    while(1) {
     $69 = ($x$073*10)|0;
     $70 = (($69) + ($71))|0;
     $72 = HEAP32[$3>>2]|0;
     $73 = HEAP32[$4>>2]|0;
     $74 = ($72>>>0)<($73>>>0);
     if ($74) {
      $75 = (($72) + 1|0);
      HEAP32[$3>>2] = $75;
      $76 = HEAP8[$72>>0]|0;
      $77 = $76&255;
      $c$2$be = $77;
     } else {
      $78 = (___shgetc($f)|0);
      $c$2$be = $78;
     }
     $79 = (($c$2$be) + -48)|0;
     $80 = ($79>>>0)<(10);
     $81 = ($70>>>0)<(429496729);
     $or$cond7 = $80 & $81;
     if ($or$cond7) {
      $71 = $79;$x$073 = $70;
     } else {
      break;
     }
    }
    $281 = $70;$282 = 0;$c$2$lcssa = $c$2$be;
   } else {
    $281 = 0;$282 = 0;$c$2$lcssa = $c$1;
   }
   $82 = (($c$2$lcssa) + -48)|0;
   $83 = ($82>>>0)<(10);
   if ($83) {
    $84 = $281;$85 = $282;$89 = $82;$c$362 = $c$2$lcssa;
    while(1) {
     $86 = (___muldi3(($84|0),($85|0),10,0)|0);
     $87 = tempRet0;
     $88 = ($89|0)<(0);
     $90 = $88 << 31 >> 31;
     $91 = $89 ^ -1;
     $92 = $90 ^ -1;
     $93 = ($87>>>0)>($92>>>0);
     $94 = ($86>>>0)>($91>>>0);
     $95 = ($87|0)==($92|0);
     $96 = $95 & $94;
     $97 = $93 | $96;
     if ($97) {
      $$lcssa = $89;$283 = $84;$284 = $85;$c$3$lcssa = $c$362;
      break;
     }
     $98 = (_i64Add(($86|0),($87|0),($89|0),($90|0))|0);
     $99 = tempRet0;
     $100 = HEAP32[$3>>2]|0;
     $101 = HEAP32[$4>>2]|0;
     $102 = ($100>>>0)<($101>>>0);
     if ($102) {
      $103 = (($100) + 1|0);
      HEAP32[$3>>2] = $103;
      $104 = HEAP8[$100>>0]|0;
      $105 = $104&255;
      $c$3$be = $105;
     } else {
      $106 = (___shgetc($f)|0);
      $c$3$be = $106;
     }
     $107 = (($c$3$be) + -48)|0;
     $108 = ($107>>>0)<(10);
     $109 = ($99>>>0)<(429496729);
     $110 = ($98>>>0)<(2576980378);
     $111 = ($99|0)==(429496729);
     $112 = $111 & $110;
     $113 = $109 | $112;
     $or$cond9 = $108 & $113;
     if ($or$cond9) {
      $84 = $98;$85 = $99;$89 = $107;$c$362 = $c$3$be;
     } else {
      $$lcssa = $107;$283 = $98;$284 = $99;$c$3$lcssa = $c$3$be;
      break;
     }
    }
    $114 = ($$lcssa>>>0)>(9);
    if ($114) {
     $253 = $284;$255 = $283;
    } else {
     $$125 = 10;$285 = $283;$286 = $284;$c$8 = $c$3$lcssa;
     label = 72;
    }
   } else {
    $253 = $282;$255 = $281;
   }
  } else {
   $$126 = $$1;$c$127 = $c$1;
   label = 46;
  }
 }
 L69: do {
  if ((label|0) == 46) {
   $115 = (($$126) + -1)|0;
   $116 = $115 & $$126;
   $117 = ($116|0)==(0);
   if ($117) {
    $122 = ($$126*23)|0;
    $123 = $122 >>> 5;
    $124 = $123 & 7;
    $125 = (22424 + ($124)|0);
    $126 = HEAP8[$125>>0]|0;
    $127 = $126 << 24 >> 24;
    $$sum1737 = (($c$127) + 1)|0;
    $128 = (22160 + ($$sum1737)|0);
    $129 = HEAP8[$128>>0]|0;
    $130 = $129&255;
    $131 = ($130>>>0)<($$126>>>0);
    if ($131) {
     $134 = $130;$x$138 = 0;
     while(1) {
      $132 = $x$138 << $127;
      $133 = $134 | $132;
      $135 = HEAP32[$3>>2]|0;
      $136 = HEAP32[$4>>2]|0;
      $137 = ($135>>>0)<($136>>>0);
      if ($137) {
       $138 = (($135) + 1|0);
       HEAP32[$3>>2] = $138;
       $139 = HEAP8[$135>>0]|0;
       $140 = $139&255;
       $c$4$be = $140;
      } else {
       $141 = (___shgetc($f)|0);
       $c$4$be = $141;
      }
      $$sum17 = (($c$4$be) + 1)|0;
      $142 = (22160 + ($$sum17)|0);
      $143 = HEAP8[$142>>0]|0;
      $144 = $143&255;
      $145 = ($144>>>0)<($$126>>>0);
      $146 = ($133>>>0)<(134217728);
      $or$cond11 = $145 & $146;
      if ($or$cond11) {
       $134 = $144;$x$138 = $133;
      } else {
       break;
      }
     }
     $150 = $143;$153 = 0;$155 = $133;$c$4$lcssa = $c$4$be;
    } else {
     $150 = $129;$153 = 0;$155 = 0;$c$4$lcssa = $c$127;
    }
    $147 = (_bitshift64Lshr(-1,-1,($127|0))|0);
    $148 = tempRet0;
    $149 = $150&255;
    $151 = ($149>>>0)>=($$126>>>0);
    $152 = ($153>>>0)>($148>>>0);
    $154 = ($155>>>0)>($147>>>0);
    $156 = ($153|0)==($148|0);
    $157 = $156 & $154;
    $158 = $152 | $157;
    $or$cond31 = $151 | $158;
    if ($or$cond31) {
     $$125 = $$126;$285 = $155;$286 = $153;$c$8 = $c$4$lcssa;
     label = 72;
     break;
    } else {
     $159 = $155;$160 = $153;$164 = $150;
    }
    while(1) {
     $161 = (_bitshift64Shl(($159|0),($160|0),($127|0))|0);
     $162 = tempRet0;
     $163 = $164&255;
     $165 = $163 | $161;
     $166 = HEAP32[$3>>2]|0;
     $167 = HEAP32[$4>>2]|0;
     $168 = ($166>>>0)<($167>>>0);
     if ($168) {
      $169 = (($166) + 1|0);
      HEAP32[$3>>2] = $169;
      $170 = HEAP8[$166>>0]|0;
      $171 = $170&255;
      $c$5$be = $171;
     } else {
      $172 = (___shgetc($f)|0);
      $c$5$be = $172;
     }
     $$sum18 = (($c$5$be) + 1)|0;
     $173 = (22160 + ($$sum18)|0);
     $174 = HEAP8[$173>>0]|0;
     $175 = $174&255;
     $176 = ($175>>>0)>=($$126>>>0);
     $177 = ($162>>>0)>($148>>>0);
     $178 = ($165>>>0)>($147>>>0);
     $179 = ($162|0)==($148|0);
     $180 = $179 & $178;
     $181 = $177 | $180;
     $or$cond = $176 | $181;
     if ($or$cond) {
      $$125 = $$126;$285 = $165;$286 = $162;$c$8 = $c$5$be;
      label = 72;
      break L69;
     } else {
      $159 = $165;$160 = $162;$164 = $174;
     }
    }
   }
   $$sum2155 = (($c$127) + 1)|0;
   $118 = (22160 + ($$sum2155)|0);
   $119 = HEAP8[$118>>0]|0;
   $120 = $119&255;
   $121 = ($120>>>0)<($$126>>>0);
   if ($121) {
    $184 = $120;$x$256 = 0;
    while(1) {
     $182 = Math_imul($x$256, $$126)|0;
     $183 = (($184) + ($182))|0;
     $185 = HEAP32[$3>>2]|0;
     $186 = HEAP32[$4>>2]|0;
     $187 = ($185>>>0)<($186>>>0);
     if ($187) {
      $188 = (($185) + 1|0);
      HEAP32[$3>>2] = $188;
      $189 = HEAP8[$185>>0]|0;
      $190 = $189&255;
      $c$6$be = $190;
     } else {
      $191 = (___shgetc($f)|0);
      $c$6$be = $191;
     }
     $$sum21 = (($c$6$be) + 1)|0;
     $192 = (22160 + ($$sum21)|0);
     $193 = HEAP8[$192>>0]|0;
     $194 = $193&255;
     $195 = ($194>>>0)<($$126>>>0);
     $196 = ($183>>>0)<(119304647);
     $or$cond13 = $195 & $196;
     if ($or$cond13) {
      $184 = $194;$x$256 = $183;
     } else {
      break;
     }
    }
    $198 = $193;$287 = $183;$288 = 0;$c$6$lcssa = $c$6$be;
   } else {
    $198 = $119;$287 = 0;$288 = 0;$c$6$lcssa = $c$127;
   }
   $197 = $198&255;
   $199 = ($197>>>0)<($$126>>>0);
   if ($199) {
    $200 = (___udivdi3(-1,-1,($$126|0),0)|0);
    $201 = tempRet0;
    $203 = $288;$205 = $287;$212 = $198;$c$747 = $c$6$lcssa;
    while(1) {
     $202 = ($203>>>0)>($201>>>0);
     $204 = ($205>>>0)>($200>>>0);
     $206 = ($203|0)==($201|0);
     $207 = $206 & $204;
     $208 = $202 | $207;
     if ($208) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $209 = (___muldi3(($205|0),($203|0),($$126|0),0)|0);
     $210 = tempRet0;
     $211 = $212&255;
     $213 = $211 ^ -1;
     $214 = ($210>>>0)>(4294967295);
     $215 = ($209>>>0)>($213>>>0);
     $216 = ($210|0)==(-1);
     $217 = $216 & $215;
     $218 = $214 | $217;
     if ($218) {
      $$125 = $$126;$285 = $205;$286 = $203;$c$8 = $c$747;
      label = 72;
      break L69;
     }
     $219 = (_i64Add(($211|0),0,($209|0),($210|0))|0);
     $220 = tempRet0;
     $221 = HEAP32[$3>>2]|0;
     $222 = HEAP32[$4>>2]|0;
     $223 = ($221>>>0)<($222>>>0);
     if ($223) {
      $224 = (($221) + 1|0);
      HEAP32[$3>>2] = $224;
      $225 = HEAP8[$221>>0]|0;
      $226 = $225&255;
      $c$7$be = $226;
     } else {
      $227 = (___shgetc($f)|0);
      $c$7$be = $227;
     }
     $$sum22 = (($c$7$be) + 1)|0;
     $228 = (22160 + ($$sum22)|0);
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = ($230>>>0)<($$126>>>0);
     if ($231) {
      $203 = $220;$205 = $219;$212 = $229;$c$747 = $c$7$be;
     } else {
      $$125 = $$126;$285 = $219;$286 = $220;$c$8 = $c$7$be;
      label = 72;
      break;
     }
    }
   } else {
    $$125 = $$126;$285 = $287;$286 = $288;$c$8 = $c$6$lcssa;
    label = 72;
   }
  }
 } while(0);
 if ((label|0) == 72) {
  $$sum19 = (($c$8) + 1)|0;
  $232 = (22160 + ($$sum19)|0);
  $233 = HEAP8[$232>>0]|0;
  $234 = $233&255;
  $235 = ($234>>>0)<($$125>>>0);
  if ($235) {
   while(1) {
    $236 = HEAP32[$3>>2]|0;
    $237 = HEAP32[$4>>2]|0;
    $238 = ($236>>>0)<($237>>>0);
    if ($238) {
     $239 = (($236) + 1|0);
     HEAP32[$3>>2] = $239;
     $240 = HEAP8[$236>>0]|0;
     $241 = $240&255;
     $c$9$be = $241;
    } else {
     $242 = (___shgetc($f)|0);
     $c$9$be = $242;
    }
    $$sum20 = (($c$9$be) + 1)|0;
    $243 = (22160 + ($$sum20)|0);
    $244 = HEAP8[$243>>0]|0;
    $245 = $244&255;
    $246 = ($245>>>0)<($$125>>>0);
    if (!($246)) {
     break;
    }
   }
   $247 = (___errno_location()|0);
   HEAP32[$247>>2] = 34;
   $253 = $1;$255 = $0;
  } else {
   $253 = $286;$255 = $285;
  }
 }
 $248 = HEAP32[$4>>2]|0;
 $249 = ($248|0)==(0|0);
 if (!($249)) {
  $250 = HEAP32[$3>>2]|0;
  $251 = (($250) + -1|0);
  HEAP32[$3>>2] = $251;
 }
 $252 = ($253>>>0)<($1>>>0);
 $254 = ($255>>>0)<($0>>>0);
 $256 = ($253|0)==($1|0);
 $257 = $256 & $254;
 $258 = $252 | $257;
 if (!($258)) {
  $259 = $0 & 1;
  $260 = ($259|0)!=(0);
  $261 = (0)!=(0);
  $262 = $260 | $261;
  $263 = ($neg$0|0)!=(0);
  $or$cond15 = $262 | $263;
  if (!($or$cond15)) {
   $264 = (___errno_location()|0);
   HEAP32[$264>>2] = 34;
   $265 = (_i64Add(($0|0),($1|0),-1,-1)|0);
   $266 = tempRet0;
   $279 = $266;$280 = $265;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
  $267 = ($253>>>0)>($1>>>0);
  $268 = ($255>>>0)>($0>>>0);
  $269 = ($253|0)==($1|0);
  $270 = $269 & $268;
  $271 = $267 | $270;
  if ($271) {
   $272 = (___errno_location()|0);
   HEAP32[$272>>2] = 34;
   $279 = $1;$280 = $0;
   tempRet0 = $279;
   STACKTOP = sp;return ($280|0);
  }
 }
 $273 = ($neg$0|0)<(0);
 $274 = $273 << 31 >> 31;
 $275 = $255 ^ $neg$0;
 $276 = $253 ^ $274;
 $277 = (_i64Subtract(($275|0),($276|0),($neg$0|0),($274|0))|0);
 $278 = tempRet0;
 $279 = $278;$280 = $277;
 tempRet0 = $279;
 STACKTOP = sp;return ($280|0);
}
function ___floatscan($f,$prec,$pok) {
 $f = $f|0;
 $prec = $prec|0;
 $pok = $pok|0;
 var $$$i = 0, $$0 = 0.0, $$011$i = 0, $$012$i = 0, $$01231$i = 0, $$01232$i = 0, $$06$i = 0, $$0611$i = 0, $$0612$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$13$i = 0, $$2$i = 0, $$20$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3120$i = 0, $$in = 0, $$k$0$i = 0, $$lcssa60$i = 0;
 var $$lnz$0$i = 0, $$neg37$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$promoted$i = 0, $$sink$off0$us$i = 0, $$sink$off0$us70$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0.0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0.0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0.0, $314 = 0.0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0.0, $474 = 0, $475 = 0.0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0, $489 = 0, $49 = 0.0, $490 = 0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0.0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0.0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0.0, $65 = 0, $650 = 0.0, $651 = 0.0, $652 = 0, $653 = 0.0, $654 = 0.0, $655 = 0.0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0.0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0, $671 = 0.0, $672 = 0.0, $673 = 0, $674 = 0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0.0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0;
 var $684 = 0.0, $685 = 0.0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0.0, $692 = 0, $693 = 0, $694 = 0, $695 = 0.0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0.0, $708 = 0, $709 = 0, $71 = 0, $710 = 0.0, $711 = 0.0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a$0$lcssa182$i = 0, $a$078$i = 0, $a$1$i = 0, $a$2$ph57$i = 0, $a$3$i = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$444$i = 0, $a$5$i = 0, $bias$0$i = 0.0, $bias$0$i25 = 0.0, $bits$0$ph = 0, $brmerge = 0;
 var $brmerge108 = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$171 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$369 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$080$i = 0, $carry1$0$us$i = 0, $carry1$0$us66$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us71$i = 0, $carry3$047$i = 0;
 var $cond$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$029$i = 0, $denormal$030$i = 0, $denormal$1$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us61$i = 0, $e2$1$i = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $exitcond$i = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0;
 var $gotdig$0$i = 0, $gotdig$0$i11 = 0, $gotdig$2$i = 0, $gotdig$2$i12 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3116$i = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i13 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1117$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$042$i = 0, $i$070 = 0;
 var $i$1 = 0, $i$1$i = 0, $i$268 = 0, $i$3 = 0, $i$4 = 0, $j$0$lcssa$i = 0, $j$0108$i = 0, $j$0109$i = 0, $j$0110$i = 0, $j$0119$i = 0, $j$2$i = 0, $j$388$i = 0, $k$0$lcssa$i = 0, $k$0104$i = 0, $k$0105$i = 0, $k$0106$i = 0, $k$0118$i = 0, $k$2$i = 0, $k$3$i = 0, $k$479$i = 0;
 var $k$5$in$us$i = 0, $k$5$in$us65$i = 0, $k$5$us$i = 0, $k$5$us67$i = 0, $k$5$z$2$us$i = 0, $k$5$z$2$us73$i = 0, $k$645$i = 0, $lnz$0$lcssa$i = 0, $lnz$0100$i = 0, $lnz$0115$i = 0, $lnz$098$i = 0, $lnz$099$i = 0, $lnz$2$i = 0, $notlhs = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i15 = 0, $or$cond10$i = 0, $or$cond112$i = 0;
 var $or$cond15$i = 0, $or$cond17$i = 0, $or$cond18$i = 0, $or$cond187$i = 0, $or$cond19$us$i = 0, $or$cond19$us72$i = 0, $or$cond21$i = 0, $or$cond22$i = 0, $or$cond3$i = 0, $or$cond3$i16 = 0, $or$cond5 = 0, $or$cond5$i = 0, $or$cond5$i17 = 0, $or$cond7 = 0, $or$cond8$i = 0, $or$cond8$i20 = 0, $or$cond9$not = 0, $rp$0$lcssa183$i = 0, $rp$077$i = 0, $rp$1$i19 = 0;
 var $rp$2$ph55$i = 0, $rp$3$i$ph = 0, $rp$3$ph50$i = 0, $rp$443$i = 0, $rp$5$i = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$318$i = 0, $x$4$lcssa$i = 0, $x$413$i = 0, $x$5$i = 0, $x$6$i = 0;
 var $x$i = 0, $y$0$i = 0.0, $y$1$i = 0.0, $y$1$i24 = 0.0, $y$2$i = 0.0, $y$2$i26 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$314$i = 0.0, $y$4$i = 0.0, $y$5$i = 0.0, $z$0$i = 0, $z$1$ph56$i = 0, $z$1$us$i = 0, $z$1$us62$i = 0, $z$2$us$i = 0, $z$2$us64$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us74$i = 0;
 var $z$4$i = 0, $z$5$ph$i = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $x$i = sp;
 if ((($prec|0) == 0)) {
  $bits$0$ph = 24;$emin$0$ph = -149;
 } else if ((($prec|0) == 1)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else if ((($prec|0) == 2)) {
  $bits$0$ph = 53;$emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;return (+$$0);
 }
 $0 = (($f) + 4|0);
 $1 = (($f) + 100|0);
 while(1) {
  $2 = HEAP32[$0>>2]|0;
  $3 = HEAP32[$1>>2]|0;
  $4 = ($2>>>0)<($3>>>0);
  if ($4) {
   $5 = (($2) + 1|0);
   HEAP32[$0>>2] = $5;
   $6 = HEAP8[$2>>0]|0;
   $7 = $6&255;
   $9 = $7;
  } else {
   $8 = (___shgetc($f)|0);
   $9 = $8;
  }
  $10 = (_isspace($9)|0);
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
 }
 $12 = ($9|0)==(45);
 do {
  if ((($9|0) == 43) | (($9|0) == 45)) {
   $13 = $12&1;
   $14 = $13 << 1;
   $15 = (1 - ($14))|0;
   $16 = HEAP32[$0>>2]|0;
   $17 = HEAP32[$1>>2]|0;
   $18 = ($16>>>0)<($17>>>0);
   if ($18) {
    $19 = (($16) + 1|0);
    HEAP32[$0>>2] = $19;
    $20 = HEAP8[$16>>0]|0;
    $21 = $20&255;
    $c$0 = $21;$sign$0 = $15;
    break;
   } else {
    $22 = (___shgetc($f)|0);
    $c$0 = $22;$sign$0 = $15;
    break;
   }
  } else {
   $c$0 = $9;$sign$0 = 1;
  }
 } while(0);
 $c$171 = $c$0;$i$070 = 0;
 while(1) {
  $23 = $c$171 | 32;
  $24 = (22440 + ($i$070)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25 << 24 >> 24;
  $27 = ($23|0)==($26|0);
  if (!($27)) {
   $c$1$lcssa = $c$171;$i$0$lcssa = $i$070;
   break;
  }
  $28 = ($i$070>>>0)<(7);
  do {
   if ($28) {
    $29 = HEAP32[$0>>2]|0;
    $30 = HEAP32[$1>>2]|0;
    $31 = ($29>>>0)<($30>>>0);
    if ($31) {
     $32 = (($29) + 1|0);
     HEAP32[$0>>2] = $32;
     $33 = HEAP8[$29>>0]|0;
     $34 = $33&255;
     $c$2 = $34;
     break;
    } else {
     $35 = (___shgetc($f)|0);
     $c$2 = $35;
     break;
    }
   } else {
    $c$2 = $c$171;
   }
  } while(0);
  $36 = (($i$070) + 1)|0;
  $37 = ($36>>>0)<(8);
  if ($37) {
   $c$171 = $c$2;$i$070 = $36;
  } else {
   $c$1$lcssa = $c$2;$i$0$lcssa = $36;
   break;
  }
 }
 do {
  if ((($i$0$lcssa|0) == 3)) {
   label = 23;
  } else if (!((($i$0$lcssa|0) == 8))) {
   $38 = ($i$0$lcssa>>>0)>(3);
   $39 = ($pok|0)!=(0);
   $or$cond5 = $38 & $39;
   if ($or$cond5) {
    $40 = ($i$0$lcssa|0)==(8);
    if ($40) {
     break;
    } else {
     label = 23;
     break;
    }
   }
   $51 = ($i$0$lcssa|0)==(0);
   L34: do {
    if ($51) {
     $c$369 = $c$1$lcssa;$i$268 = 0;
     while(1) {
      $52 = $c$369 | 32;
      $53 = (22456 + ($i$268)|0);
      $54 = HEAP8[$53>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($52|0)==($55|0);
      if (!($56)) {
       $c$5 = $c$369;$i$3 = $i$268;
       break L34;
      }
      $57 = ($i$268>>>0)<(2);
      do {
       if ($57) {
        $58 = HEAP32[$0>>2]|0;
        $59 = HEAP32[$1>>2]|0;
        $60 = ($58>>>0)<($59>>>0);
        if ($60) {
         $61 = (($58) + 1|0);
         HEAP32[$0>>2] = $61;
         $62 = HEAP8[$58>>0]|0;
         $63 = $62&255;
         $c$4 = $63;
         break;
        } else {
         $64 = (___shgetc($f)|0);
         $c$4 = $64;
         break;
        }
       } else {
        $c$4 = $c$369;
       }
      } while(0);
      $65 = (($i$268) + 1)|0;
      $66 = ($65>>>0)<(3);
      if ($66) {
       $c$369 = $c$4;$i$268 = $65;
      } else {
       $c$5 = $c$4;$i$3 = $65;
       break;
      }
     }
    } else {
     $c$5 = $c$1$lcssa;$i$3 = $i$0$lcssa;
    }
   } while(0);
   if ((($i$3|0) == 3)) {
    $67 = HEAP32[$0>>2]|0;
    $68 = HEAP32[$1>>2]|0;
    $69 = ($67>>>0)<($68>>>0);
    if ($69) {
     $70 = (($67) + 1|0);
     HEAP32[$0>>2] = $70;
     $71 = HEAP8[$67>>0]|0;
     $72 = $71&255;
     $75 = $72;
    } else {
     $73 = (___shgetc($f)|0);
     $75 = $73;
    }
    $74 = ($75|0)==(40);
    if ($74) {
     $i$4 = 1;
    } else {
     $76 = HEAP32[$1>>2]|0;
     $77 = ($76|0)==(0|0);
     if ($77) {
      $$0 = nan;
      STACKTOP = sp;return (+$$0);
     }
     $78 = HEAP32[$0>>2]|0;
     $79 = (($78) + -1|0);
     HEAP32[$0>>2] = $79;
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    while(1) {
     $80 = HEAP32[$0>>2]|0;
     $81 = HEAP32[$1>>2]|0;
     $82 = ($80>>>0)<($81>>>0);
     if ($82) {
      $83 = (($80) + 1|0);
      HEAP32[$0>>2] = $83;
      $84 = HEAP8[$80>>0]|0;
      $85 = $84&255;
      $88 = $85;
     } else {
      $86 = (___shgetc($f)|0);
      $88 = $86;
     }
     $87 = (($88) + -48)|0;
     $89 = ($87>>>0)<(10);
     $90 = (($88) + -65)|0;
     $91 = ($90>>>0)<(26);
     $or$cond = $89 | $91;
     if (!($or$cond)) {
      $92 = (($88) + -97)|0;
      $93 = ($92>>>0)<(26);
      $94 = ($88|0)==(95);
      $or$cond7 = $93 | $94;
      if (!($or$cond7)) {
       break;
      }
     }
     $106 = (($i$4) + 1)|0;
     $i$4 = $106;
    }
    $95 = ($88|0)==(41);
    if ($95) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    }
    $96 = HEAP32[$1>>2]|0;
    $97 = ($96|0)==(0|0);
    if (!($97)) {
     $98 = HEAP32[$0>>2]|0;
     $99 = (($98) + -1|0);
     HEAP32[$0>>2] = $99;
    }
    if (!($39)) {
     $101 = (___errno_location()|0);
     HEAP32[$101>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $100 = ($i$4|0)==(0);
    $brmerge108 = $100 | $97;
    if ($brmerge108) {
     $$0 = nan;
     STACKTOP = sp;return (+$$0);
    } else {
     $$in = $i$4;
    }
    while(1) {
     $102 = (($$in) + -1)|0;
     $103 = HEAP32[$0>>2]|0;
     $104 = (($103) + -1|0);
     HEAP32[$0>>2] = $104;
     $105 = ($102|0)==(0);
     if ($105) {
      $$0 = nan;
      break;
     } else {
      $$in = $102;
     }
    }
    STACKTOP = sp;return (+$$0);
   } else if ((($i$3|0) == 0)) {
    $112 = ($c$5|0)==(48);
    do {
     if ($112) {
      $113 = HEAP32[$0>>2]|0;
      $114 = HEAP32[$1>>2]|0;
      $115 = ($113>>>0)<($114>>>0);
      if ($115) {
       $116 = (($113) + 1|0);
       HEAP32[$0>>2] = $116;
       $117 = HEAP8[$113>>0]|0;
       $118 = $117&255;
       $121 = $118;
      } else {
       $119 = (___shgetc($f)|0);
       $121 = $119;
      }
      $120 = $121 | 32;
      $122 = ($120|0)==(120);
      if (!($122)) {
       $322 = HEAP32[$1>>2]|0;
       $323 = ($322|0)==(0|0);
       if ($323) {
        $c$6 = 48;
        break;
       }
       $324 = HEAP32[$0>>2]|0;
       $325 = (($324) + -1|0);
       HEAP32[$0>>2] = $325;
       $c$6 = 48;
       break;
      }
      $123 = HEAP32[$0>>2]|0;
      $124 = HEAP32[$1>>2]|0;
      $125 = ($123>>>0)<($124>>>0);
      if ($125) {
       $126 = (($123) + 1|0);
       HEAP32[$0>>2] = $126;
       $127 = HEAP8[$123>>0]|0;
       $128 = $127&255;
       $c$0$i = $128;$gotdig$0$i = 0;
      } else {
       $129 = (___shgetc($f)|0);
       $c$0$i = $129;$gotdig$0$i = 0;
      }
      while(1) {
       if ((($c$0$i|0) == 46)) {
        label = 70;
        break;
       } else if (!((($c$0$i|0) == 48))) {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$0$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 0;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
        break;
       }
       $130 = HEAP32[$0>>2]|0;
       $131 = HEAP32[$1>>2]|0;
       $132 = ($130>>>0)<($131>>>0);
       if ($132) {
        $133 = (($130) + 1|0);
        HEAP32[$0>>2] = $133;
        $134 = HEAP8[$130>>0]|0;
        $135 = $134&255;
        $c$0$i = $135;$gotdig$0$i = 1;
        continue;
       } else {
        $136 = (___shgetc($f)|0);
        $c$0$i = $136;$gotdig$0$i = 1;
        continue;
       }
      }
      if ((label|0) == 70) {
       $137 = HEAP32[$0>>2]|0;
       $138 = HEAP32[$1>>2]|0;
       $139 = ($137>>>0)<($138>>>0);
       if ($139) {
        $140 = (($137) + 1|0);
        HEAP32[$0>>2] = $140;
        $141 = HEAP8[$137>>0]|0;
        $142 = $141&255;
        $c$1$ph$i = $142;
       } else {
        $143 = (___shgetc($f)|0);
        $c$1$ph$i = $143;
       }
       $144 = ($c$1$ph$i|0)==(48);
       if ($144) {
        $152 = 0;$153 = 0;
        while(1) {
         $145 = HEAP32[$0>>2]|0;
         $146 = HEAP32[$1>>2]|0;
         $147 = ($145>>>0)<($146>>>0);
         if ($147) {
          $148 = (($145) + 1|0);
          HEAP32[$0>>2] = $148;
          $149 = HEAP8[$145>>0]|0;
          $150 = $149&255;
          $157 = $150;
         } else {
          $151 = (___shgetc($f)|0);
          $157 = $151;
         }
         $154 = (_i64Add(($152|0),($153|0),-1,-1)|0);
         $155 = tempRet0;
         $156 = ($157|0)==(48);
         if ($156) {
          $152 = $154;$153 = $155;
         } else {
          $168 = 0;$170 = 0;$212 = $154;$214 = $155;$c$2$i = $157;$gotdig$2$i = 1;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
          break;
         }
        }
       } else {
        $168 = 0;$170 = 0;$212 = 0;$214 = 0;$c$2$i = $c$1$ph$i;$gotdig$2$i = $gotdig$0$i;$gotrad$0$i = 1;$gottail$0$i = 0;$scale$0$i = 1.0;$x$0$i = 0;$y$0$i = 0.0;
       }
      }
      L114: while(1) {
       $158 = (($c$2$i) + -48)|0;
       $159 = ($158>>>0)<(10);
       do {
        if ($159) {
         $d$0$i = $158;
         label = 83;
        } else {
         $160 = $c$2$i | 32;
         $161 = (($160) + -97)|0;
         $162 = ($161>>>0)<(6);
         $163 = ($c$2$i|0)==(46);
         $or$cond$i = $162 | $163;
         if (!($or$cond$i)) {
          $c$2$lcssa$i = $c$2$i;
          break L114;
         }
         if ($163) {
          $164 = ($gotrad$0$i|0)==(0);
          if ($164) {
           $713 = $170;$714 = $168;$715 = $170;$716 = $168;$gotdig$3$i = $gotdig$2$i;$gotrad$1$i = 1;$gottail$2$i = $gottail$0$i;$scale$2$i = $scale$0$i;$x$2$i = $x$0$i;$y$2$i = $y$0$i;
           break;
          } else {
           $c$2$lcssa$i = 46;
           break L114;
          }
         } else {
          $165 = ($c$2$i|0)>(57);
          $166 = (($160) + -87)|0;
          $$$i = $165 ? $166 : $158;
          $d$0$i = $$$i;
          label = 83;
          break;
         }
        }
       } while(0);
       if ((label|0) == 83) {
        label = 0;
        $167 = ($168|0)<(0);
        $169 = ($170>>>0)<(8);
        $171 = ($168|0)==(0);
        $172 = $171 & $169;
        $173 = $167 | $172;
        do {
         if ($173) {
          $174 = $x$0$i << 4;
          $175 = (($d$0$i) + ($174))|0;
          $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $175;$y$1$i = $y$0$i;
         } else {
          $176 = ($168|0)<(0);
          $177 = ($170>>>0)<(14);
          $178 = ($168|0)==(0);
          $179 = $178 & $177;
          $180 = $176 | $179;
          if ($180) {
           $181 = (+($d$0$i|0));
           $182 = $scale$0$i * 0.0625;
           $183 = $182 * $181;
           $184 = $y$0$i + $183;
           $gottail$1$i = $gottail$0$i;$scale$1$i = $182;$x$1$i = $x$0$i;$y$1$i = $184;
           break;
          }
          $185 = ($d$0$i|0)==(0);
          $186 = ($gottail$0$i|0)!=(0);
          $or$cond3$i = $185 | $186;
          if ($or$cond3$i) {
           $gottail$1$i = $gottail$0$i;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $y$0$i;
          } else {
           $187 = $scale$0$i * 0.5;
           $188 = $y$0$i + $187;
           $gottail$1$i = 1;$scale$1$i = $scale$0$i;$x$1$i = $x$0$i;$y$1$i = $188;
          }
         }
        } while(0);
        $189 = (_i64Add(($170|0),($168|0),1,0)|0);
        $190 = tempRet0;
        $713 = $212;$714 = $214;$715 = $189;$716 = $190;$gotdig$3$i = 1;$gotrad$1$i = $gotrad$0$i;$gottail$2$i = $gottail$1$i;$scale$2$i = $scale$1$i;$x$2$i = $x$1$i;$y$2$i = $y$1$i;
       }
       $191 = HEAP32[$0>>2]|0;
       $192 = HEAP32[$1>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = (($191) + 1|0);
        HEAP32[$0>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $196;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       } else {
        $197 = (___shgetc($f)|0);
        $168 = $716;$170 = $715;$212 = $713;$214 = $714;$c$2$i = $197;$gotdig$2$i = $gotdig$3$i;$gotrad$0$i = $gotrad$1$i;$gottail$0$i = $gottail$2$i;$scale$0$i = $scale$2$i;$x$0$i = $x$2$i;$y$0$i = $y$2$i;
        continue;
       }
      }
      $198 = ($gotdig$2$i|0)==(0);
      if ($198) {
       $199 = HEAP32[$1>>2]|0;
       $200 = ($199|0)==(0|0);
       if (!($200)) {
        $201 = HEAP32[$0>>2]|0;
        $202 = (($201) + -1|0);
        HEAP32[$0>>2] = $202;
       }
       $203 = ($pok|0)==(0);
       if ($203) {
        ___shlim($f,0);
       } else {
        if (!($200)) {
         $204 = HEAP32[$0>>2]|0;
         $205 = (($204) + -1|0);
         HEAP32[$0>>2] = $205;
         $206 = ($gotrad$0$i|0)==(0);
         if (!($206)) {
          $207 = (($204) + -2|0);
          HEAP32[$0>>2] = $207;
         }
        }
       }
       $208 = (+($sign$0|0));
       $209 = $208 * 0.0;
       $$0 = $209;
       STACKTOP = sp;return (+$$0);
      }
      $210 = ($gotrad$0$i|0)==(0);
      $211 = $210 ? $170 : $212;
      $213 = $210 ? $168 : $214;
      $215 = ($168|0)<(0);
      $216 = ($170>>>0)<(8);
      $217 = ($168|0)==(0);
      $218 = $217 & $216;
      $219 = $215 | $218;
      if ($219) {
       $221 = $170;$222 = $168;$x$318$i = $x$0$i;
       while(1) {
        $220 = $x$318$i << 4;
        $223 = (_i64Add(($221|0),($222|0),1,0)|0);
        $224 = tempRet0;
        $225 = ($224|0)<(0);
        $226 = ($223>>>0)<(8);
        $227 = ($224|0)==(0);
        $228 = $227 & $226;
        $229 = $225 | $228;
        if ($229) {
         $221 = $223;$222 = $224;$x$318$i = $220;
        } else {
         $x$3$lcssa$i = $220;
         break;
        }
       }
      } else {
       $x$3$lcssa$i = $x$0$i;
      }
      $230 = $c$2$lcssa$i | 32;
      $231 = ($230|0)==(112);
      do {
       if ($231) {
        $232 = (_scanexp($f,$pok)|0);
        $233 = tempRet0;
        $234 = ($232|0)==(0);
        $235 = ($233|0)==(-2147483648);
        $236 = $234 & $235;
        if ($236) {
         $237 = ($pok|0)==(0);
         if ($237) {
          ___shlim($f,0);
          $$0 = 0.0;
          STACKTOP = sp;return (+$$0);
         } else {
          $238 = HEAP32[$1>>2]|0;
          $239 = ($238|0)==(0|0);
          if ($239) {
           $250 = 0;$251 = 0;
           break;
          }
          $240 = HEAP32[$0>>2]|0;
          $241 = (($240) + -1|0);
          HEAP32[$0>>2] = $241;
          $250 = 0;$251 = 0;
          break;
         }
        } else {
         $250 = $232;$251 = $233;
        }
       } else {
        $242 = HEAP32[$1>>2]|0;
        $243 = ($242|0)==(0|0);
        if ($243) {
         $250 = 0;$251 = 0;
        } else {
         $244 = HEAP32[$0>>2]|0;
         $245 = (($244) + -1|0);
         HEAP32[$0>>2] = $245;
         $250 = 0;$251 = 0;
        }
       }
      } while(0);
      $246 = (_bitshift64Shl(($211|0),($213|0),2)|0);
      $247 = tempRet0;
      $248 = (_i64Add(($246|0),($247|0),-32,-1)|0);
      $249 = tempRet0;
      $252 = (_i64Add(($248|0),($249|0),($250|0),($251|0))|0);
      $253 = tempRet0;
      $254 = ($x$3$lcssa$i|0)==(0);
      if ($254) {
       $255 = (+($sign$0|0));
       $256 = $255 * 0.0;
       $$0 = $256;
       STACKTOP = sp;return (+$$0);
      }
      $257 = (0 - ($emin$0$ph))|0;
      $258 = ($253|0)>(0);
      $259 = ($252>>>0)>($257>>>0);
      $260 = ($253|0)==(0);
      $261 = $260 & $259;
      $262 = $258 | $261;
      if ($262) {
       $263 = (___errno_location()|0);
       HEAP32[$263>>2] = 34;
       $264 = (+($sign$0|0));
       $265 = $264 * 1.7976931348623157E+308;
       $266 = $265 * 1.7976931348623157E+308;
       $$0 = $266;
       STACKTOP = sp;return (+$$0);
      }
      $267 = (($emin$0$ph) + -106)|0;
      $268 = ($267|0)<(0);
      $269 = $268 << 31 >> 31;
      $270 = ($253|0)<($269|0);
      $271 = ($252>>>0)<($267>>>0);
      $272 = ($253|0)==($269|0);
      $273 = $272 & $271;
      $274 = $270 | $273;
      if ($274) {
       $276 = (___errno_location()|0);
       HEAP32[$276>>2] = 34;
       $277 = (+($sign$0|0));
       $278 = $277 * 2.2250738585072014E-308;
       $279 = $278 * 2.2250738585072014E-308;
       $$0 = $279;
       STACKTOP = sp;return (+$$0);
      }
      $275 = ($x$3$lcssa$i|0)>(-1);
      if ($275) {
       $284 = $252;$285 = $253;$x$413$i = $x$3$lcssa$i;$y$314$i = $y$0$i;
       while(1) {
        $280 = !($y$314$i >= 0.5);
        $281 = $x$413$i << 1;
        if ($280) {
         $$pn$i = $y$314$i;$x$5$i = $281;
        } else {
         $282 = $281 | 1;
         $283 = $y$314$i + -1.0;
         $$pn$i = $283;$x$5$i = $282;
        }
        $y$4$i = $y$314$i + $$pn$i;
        $286 = (_i64Add(($284|0),($285|0),-1,-1)|0);
        $287 = tempRet0;
        $288 = ($x$5$i|0)>(-1);
        if ($288) {
         $284 = $286;$285 = $287;$x$413$i = $x$5$i;$y$314$i = $y$4$i;
        } else {
         $293 = $286;$294 = $287;$x$4$lcssa$i = $x$5$i;$y$3$lcssa$i = $y$4$i;
         break;
        }
       }
      } else {
       $293 = $252;$294 = $253;$x$4$lcssa$i = $x$3$lcssa$i;$y$3$lcssa$i = $y$0$i;
      }
      $289 = ($emin$0$ph|0)<(0);
      $290 = $289 << 31 >> 31;
      $291 = (_i64Subtract(32,0,($emin$0$ph|0),($290|0))|0);
      $292 = tempRet0;
      $295 = (_i64Add(($293|0),($294|0),($291|0),($292|0))|0);
      $296 = tempRet0;
      $297 = (0)>($296|0);
      $298 = ($bits$0$ph>>>0)>($295>>>0);
      $299 = (0)==($296|0);
      $300 = $299 & $298;
      $301 = $297 | $300;
      if ($301) {
       $302 = ($295|0)<(0);
       if ($302) {
        $$0611$i = 0;
        label = 126;
       } else {
        $$06$i = $295;
        label = 124;
       }
      } else {
       $$06$i = $bits$0$ph;
       label = 124;
      }
      if ((label|0) == 124) {
       $303 = ($$06$i|0)<(53);
       if ($303) {
        $$0611$i = $$06$i;
        label = 126;
       } else {
        $$pre$i = (+($sign$0|0));
        $$0612$i = $$06$i;$$pre$phi$iZ2D = $$pre$i;$bias$0$i = 0.0;
       }
      }
      if ((label|0) == 126) {
       $304 = (84 - ($$0611$i))|0;
       $305 = (+_scalbn(1.0,$304));
       $306 = (+($sign$0|0));
       $307 = (+_copysignl($305,$306));
       $$0612$i = $$0611$i;$$pre$phi$iZ2D = $306;$bias$0$i = $307;
      }
      $308 = ($$0612$i|0)<(32);
      $309 = $y$3$lcssa$i != 0.0;
      $or$cond5$i = $308 & $309;
      $310 = $x$4$lcssa$i & 1;
      $311 = ($310|0)==(0);
      $or$cond8$i = $or$cond5$i & $311;
      $312 = $or$cond8$i&1;
      $x$6$i = (($312) + ($x$4$lcssa$i))|0;
      $y$5$i = $or$cond8$i ? 0.0 : $y$3$lcssa$i;
      $313 = (+($x$6$i>>>0));
      $314 = $$pre$phi$iZ2D * $313;
      $315 = $bias$0$i + $314;
      $316 = $$pre$phi$iZ2D * $y$5$i;
      $317 = $316 + $315;
      $318 = $317 - $bias$0$i;
      $319 = $318 != 0.0;
      if (!($319)) {
       $320 = (___errno_location()|0);
       HEAP32[$320>>2] = 34;
      }
      $321 = (+_scalbnl($318,$293));
      $$0 = $321;
      STACKTOP = sp;return (+$$0);
     } else {
      $c$6 = $c$5;
     }
    } while(0);
    $sum$i = (($emin$0$ph) + ($bits$0$ph))|0;
    $326 = (0 - ($sum$i))|0;
    $$011$i = $c$6;$gotdig$0$i11 = 0;
    while(1) {
     if ((($$011$i|0) == 46)) {
      label = 137;
      break;
     } else if (!((($$011$i|0) == 48))) {
      $$2$i = $$011$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 0;
      break;
     }
     $327 = HEAP32[$0>>2]|0;
     $328 = HEAP32[$1>>2]|0;
     $329 = ($327>>>0)<($328>>>0);
     if ($329) {
      $330 = (($327) + 1|0);
      HEAP32[$0>>2] = $330;
      $331 = HEAP8[$327>>0]|0;
      $332 = $331&255;
      $$011$i = $332;$gotdig$0$i11 = 1;
      continue;
     } else {
      $333 = (___shgetc($f)|0);
      $$011$i = $333;$gotdig$0$i11 = 1;
      continue;
     }
    }
    if ((label|0) == 137) {
     $334 = HEAP32[$0>>2]|0;
     $335 = HEAP32[$1>>2]|0;
     $336 = ($334>>>0)<($335>>>0);
     if ($336) {
      $337 = (($334) + 1|0);
      HEAP32[$0>>2] = $337;
      $338 = HEAP8[$334>>0]|0;
      $339 = $338&255;
      $$1$ph$i = $339;
     } else {
      $340 = (___shgetc($f)|0);
      $$1$ph$i = $340;
     }
     $341 = ($$1$ph$i|0)==(48);
     if ($341) {
      $342 = 0;$343 = 0;
      while(1) {
       $344 = (_i64Add(($342|0),($343|0),-1,-1)|0);
       $345 = tempRet0;
       $346 = HEAP32[$0>>2]|0;
       $347 = HEAP32[$1>>2]|0;
       $348 = ($346>>>0)<($347>>>0);
       if ($348) {
        $349 = (($346) + 1|0);
        HEAP32[$0>>2] = $349;
        $350 = HEAP8[$346>>0]|0;
        $351 = $350&255;
        $$1$be$i = $351;
       } else {
        $352 = (___shgetc($f)|0);
        $$1$be$i = $352;
       }
       $353 = ($$1$be$i|0)==(48);
       if ($353) {
        $342 = $344;$343 = $345;
       } else {
        $$2$i = $$1$be$i;$717 = $344;$718 = $345;$gotdig$2$i12 = 1;$gotrad$0$i13 = 1;
        break;
       }
      }
     } else {
      $$2$i = $$1$ph$i;$717 = 0;$718 = 0;$gotdig$2$i12 = $gotdig$0$i11;$gotrad$0$i13 = 1;
     }
    }
    HEAP32[$x$i>>2] = 0;
    $354 = (($$2$i) + -48)|0;
    $355 = ($354>>>0)<(10);
    $356 = ($$2$i|0)==(46);
    $or$cond112$i = $355 | $356;
    L216: do {
     if ($or$cond112$i) {
      $357 = (($x$i) + 496|0);
      $$3120$i = $$2$i;$360 = 0;$361 = 0;$719 = $356;$720 = $354;$721 = $717;$722 = $718;$gotdig$3116$i = $gotdig$2$i12;$gotrad$1117$i = $gotrad$0$i13;$j$0119$i = 0;$k$0118$i = 0;$lnz$0115$i = 0;
      L218: while(1) {
       do {
        if ($719) {
         $cond$i = ($gotrad$1117$i|0)==(0);
         if ($cond$i) {
          $723 = $360;$724 = $361;$725 = $360;$726 = $361;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = 1;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
         } else {
          break L218;
         }
        } else {
         $359 = ($k$0118$i|0)<(125);
         $362 = (_i64Add(($360|0),($361|0),1,0)|0);
         $363 = tempRet0;
         $364 = ($$3120$i|0)!=(48);
         if (!($359)) {
          if (!($364)) {
           $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
           break;
          }
          $374 = HEAP32[$357>>2]|0;
          $375 = $374 | 1;
          HEAP32[$357>>2] = $375;
          $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = $gotdig$3116$i;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $j$0119$i;$k$2$i = $k$0118$i;$lnz$2$i = $lnz$0115$i;
          break;
         }
         $$lnz$0$i = $364 ? $362 : $lnz$0115$i;
         $365 = ($j$0119$i|0)==(0);
         $366 = (($x$i) + ($k$0118$i<<2)|0);
         if ($365) {
          $storemerge$i = $720;
         } else {
          $367 = HEAP32[$366>>2]|0;
          $368 = ($367*10)|0;
          $369 = (($$3120$i) + -48)|0;
          $370 = (($369) + ($368))|0;
          $storemerge$i = $370;
         }
         HEAP32[$366>>2] = $storemerge$i;
         $371 = (($j$0119$i) + 1)|0;
         $372 = ($371|0)==(9);
         $373 = $372&1;
         $$k$0$i = (($373) + ($k$0118$i))|0;
         $$13$i = $372 ? 0 : $371;
         $723 = $721;$724 = $722;$725 = $362;$726 = $363;$gotdig$4$i = 1;$gotrad$2$i = $gotrad$1117$i;$j$2$i = $$13$i;$k$2$i = $$k$0$i;$lnz$2$i = $$lnz$0$i;
        }
       } while(0);
       $376 = HEAP32[$0>>2]|0;
       $377 = HEAP32[$1>>2]|0;
       $378 = ($376>>>0)<($377>>>0);
       if ($378) {
        $379 = (($376) + 1|0);
        HEAP32[$0>>2] = $379;
        $380 = HEAP8[$376>>0]|0;
        $381 = $380&255;
        $$3$be$i = $381;
       } else {
        $382 = (___shgetc($f)|0);
        $$3$be$i = $382;
       }
       $383 = (($$3$be$i) + -48)|0;
       $384 = ($383>>>0)<(10);
       $385 = ($$3$be$i|0)==(46);
       $or$cond$i15 = $384 | $385;
       if ($or$cond$i15) {
        $$3120$i = $$3$be$i;$360 = $725;$361 = $726;$719 = $385;$720 = $383;$721 = $723;$722 = $724;$gotdig$3116$i = $gotdig$4$i;$gotrad$1117$i = $gotrad$2$i;$j$0119$i = $j$2$i;$k$0118$i = $k$2$i;$lnz$0115$i = $lnz$2$i;
       } else {
        $$3$lcssa$i = $$3$be$i;$388 = $725;$389 = $723;$391 = $726;$392 = $724;$gotdig$3$lcssa$i = $gotdig$4$i;$gotrad$1$lcssa$i = $gotrad$2$i;$j$0$lcssa$i = $j$2$i;$k$0$lcssa$i = $k$2$i;$lnz$0$lcssa$i = $lnz$2$i;
        label = 160;
        break L216;
       }
      }
      $358 = ($gotdig$3116$i|0)!=(0);
      $727 = $360;$728 = $361;$729 = $721;$730 = $722;$731 = $358;$j$0110$i = $j$0119$i;$k$0106$i = $k$0118$i;$lnz$0100$i = $lnz$0115$i;
      label = 168;
     } else {
      $$3$lcssa$i = $$2$i;$388 = 0;$389 = $717;$391 = 0;$392 = $718;$gotdig$3$lcssa$i = $gotdig$2$i12;$gotrad$1$lcssa$i = $gotrad$0$i13;$j$0$lcssa$i = 0;$k$0$lcssa$i = 0;$lnz$0$lcssa$i = 0;
      label = 160;
     }
    } while(0);
    do {
     if ((label|0) == 160) {
      $386 = ($gotrad$1$lcssa$i|0)==(0);
      $387 = $386 ? $388 : $389;
      $390 = $386 ? $391 : $392;
      $393 = ($gotdig$3$lcssa$i|0)!=(0);
      $394 = $$3$lcssa$i | 32;
      $395 = ($394|0)==(101);
      $or$cond15$i = $393 & $395;
      if (!($or$cond15$i)) {
       $410 = ($$3$lcssa$i|0)>(-1);
       if ($410) {
        $727 = $388;$728 = $391;$729 = $387;$730 = $390;$731 = $393;$j$0110$i = $j$0$lcssa$i;$k$0106$i = $k$0$lcssa$i;$lnz$0100$i = $lnz$0$lcssa$i;
        label = 168;
        break;
       } else {
        $732 = $388;$733 = $391;$734 = $393;$735 = $387;$736 = $390;$j$0109$i = $j$0$lcssa$i;$k$0105$i = $k$0$lcssa$i;$lnz$099$i = $lnz$0$lcssa$i;
        label = 170;
        break;
       }
      }
      $396 = (_scanexp($f,$pok)|0);
      $397 = tempRet0;
      $398 = ($396|0)==(0);
      $399 = ($397|0)==(-2147483648);
      $400 = $398 & $399;
      do {
       if ($400) {
        $401 = ($pok|0)==(0);
        if ($401) {
         ___shlim($f,0);
         $$0 = 0.0;
         STACKTOP = sp;return (+$$0);
        } else {
         $402 = HEAP32[$1>>2]|0;
         $403 = ($402|0)==(0|0);
         if ($403) {
          $406 = 0;$407 = 0;
          break;
         }
         $404 = HEAP32[$0>>2]|0;
         $405 = (($404) + -1|0);
         HEAP32[$0>>2] = $405;
         $406 = 0;$407 = 0;
         break;
        }
       } else {
        $406 = $396;$407 = $397;
       }
      } while(0);
      $408 = (_i64Add(($406|0),($407|0),($387|0),($390|0))|0);
      $409 = tempRet0;
      $421 = $408;$422 = $388;$424 = $409;$425 = $391;$j$0108$i = $j$0$lcssa$i;$k$0104$i = $k$0$lcssa$i;$lnz$098$i = $lnz$0$lcssa$i;
     }
    } while(0);
    if ((label|0) == 168) {
     $411 = HEAP32[$1>>2]|0;
     $412 = ($411|0)==(0|0);
     if ($412) {
      $732 = $727;$733 = $728;$734 = $731;$735 = $729;$736 = $730;$j$0109$i = $j$0110$i;$k$0105$i = $k$0106$i;$lnz$099$i = $lnz$0100$i;
      label = 170;
     } else {
      $413 = HEAP32[$0>>2]|0;
      $414 = (($413) + -1|0);
      HEAP32[$0>>2] = $414;
      if ($731) {
       $421 = $729;$422 = $727;$424 = $730;$425 = $728;$j$0108$i = $j$0110$i;$k$0104$i = $k$0106$i;$lnz$098$i = $lnz$0100$i;
      } else {
       label = 171;
      }
     }
    }
    if ((label|0) == 170) {
     if ($734) {
      $421 = $735;$422 = $732;$424 = $736;$425 = $733;$j$0108$i = $j$0109$i;$k$0104$i = $k$0105$i;$lnz$098$i = $lnz$099$i;
     } else {
      label = 171;
     }
    }
    if ((label|0) == 171) {
     $415 = (___errno_location()|0);
     HEAP32[$415>>2] = 22;
     ___shlim($f,0);
     $$0 = 0.0;
     STACKTOP = sp;return (+$$0);
    }
    $416 = HEAP32[$x$i>>2]|0;
    $417 = ($416|0)==(0);
    if ($417) {
     $418 = (+($sign$0|0));
     $419 = $418 * 0.0;
     $$0 = $419;
     STACKTOP = sp;return (+$$0);
    }
    $420 = ($421|0)==($422|0);
    $423 = ($424|0)==($425|0);
    $426 = $420 & $423;
    $427 = ($425|0)<(0);
    $428 = ($422>>>0)<(10);
    $429 = ($425|0)==(0);
    $430 = $429 & $428;
    $431 = $427 | $430;
    $or$cond3$i16 = $426 & $431;
    if ($or$cond3$i16) {
     $432 = ($bits$0$ph>>>0)>(30);
     $433 = $416 >>> $bits$0$ph;
     $434 = ($433|0)==(0);
     $or$cond17$i = $432 | $434;
     if ($or$cond17$i) {
      $435 = (+($sign$0|0));
      $436 = (+($416>>>0));
      $437 = $435 * $436;
      $$0 = $437;
      STACKTOP = sp;return (+$$0);
     }
    }
    $438 = (($emin$0$ph|0) / -2)&-1;
    $439 = ($438|0)<(0);
    $440 = $439 << 31 >> 31;
    $441 = ($424|0)>($440|0);
    $442 = ($421>>>0)>($438>>>0);
    $443 = ($424|0)==($440|0);
    $444 = $443 & $442;
    $445 = $441 | $444;
    if ($445) {
     $446 = (___errno_location()|0);
     HEAP32[$446>>2] = 34;
     $447 = (+($sign$0|0));
     $448 = $447 * 1.7976931348623157E+308;
     $449 = $448 * 1.7976931348623157E+308;
     $$0 = $449;
     STACKTOP = sp;return (+$$0);
    }
    $450 = (($emin$0$ph) + -106)|0;
    $451 = ($450|0)<(0);
    $452 = $451 << 31 >> 31;
    $453 = ($424|0)<($452|0);
    $454 = ($421>>>0)<($450>>>0);
    $455 = ($424|0)==($452|0);
    $456 = $455 & $454;
    $457 = $453 | $456;
    if ($457) {
     $458 = (___errno_location()|0);
     HEAP32[$458>>2] = 34;
     $459 = (+($sign$0|0));
     $460 = $459 * 2.2250738585072014E-308;
     $461 = $460 * 2.2250738585072014E-308;
     $$0 = $461;
     STACKTOP = sp;return (+$$0);
    }
    $462 = ($j$0108$i|0)==(0);
    if ($462) {
     $k$3$i = $k$0104$i;
    } else {
     $463 = ($j$0108$i|0)<(9);
     if ($463) {
      $464 = (($x$i) + ($k$0104$i<<2)|0);
      $$promoted$i = HEAP32[$464>>2]|0;
      $466 = $$promoted$i;$j$388$i = $j$0108$i;
      while(1) {
       $465 = ($466*10)|0;
       $467 = (($j$388$i) + 1)|0;
       $exitcond$i = ($467|0)==(9);
       if ($exitcond$i) {
        break;
       } else {
        $466 = $465;$j$388$i = $467;
       }
      }
      HEAP32[$464>>2] = $465;
     }
     $468 = (($k$0104$i) + 1)|0;
     $k$3$i = $468;
    }
    $469 = ($lnz$098$i|0)<(9);
    if ($469) {
     $470 = ($lnz$098$i|0)<=($421|0);
     $471 = ($421|0)<(18);
     $or$cond5$i17 = $470 & $471;
     if ($or$cond5$i17) {
      $472 = ($421|0)==(9);
      if ($472) {
       $473 = (+($sign$0|0));
       $474 = HEAP32[$x$i>>2]|0;
       $475 = (+($474>>>0));
       $476 = $473 * $475;
       $$0 = $476;
       STACKTOP = sp;return (+$$0);
      }
      $477 = ($421|0)<(9);
      if ($477) {
       $478 = (+($sign$0|0));
       $479 = HEAP32[$x$i>>2]|0;
       $480 = (+($479>>>0));
       $481 = $478 * $480;
       $482 = (8 - ($421))|0;
       $483 = (22472 + ($482<<2)|0);
       $484 = HEAP32[$483>>2]|0;
       $485 = (+($484|0));
       $486 = $481 / $485;
       $$0 = $486;
       STACKTOP = sp;return (+$$0);
      }
      $487 = Math_imul($421, -3)|0;
      $$neg37$i = (($bits$0$ph) + 27)|0;
      $488 = (($$neg37$i) + ($487))|0;
      $489 = ($488|0)>(30);
      $$pre$i18 = HEAP32[$x$i>>2]|0;
      $490 = $$pre$i18 >>> $488;
      $491 = ($490|0)==(0);
      $or$cond187$i = $489 | $491;
      if ($or$cond187$i) {
       $492 = (+($sign$0|0));
       $493 = (+($$pre$i18>>>0));
       $494 = $492 * $493;
       $495 = (($421) + -10)|0;
       $496 = (22472 + ($495<<2)|0);
       $497 = HEAP32[$496>>2]|0;
       $498 = (+($497|0));
       $499 = $494 * $498;
       $$0 = $499;
       STACKTOP = sp;return (+$$0);
      }
     }
    }
    $500 = (($421|0) % 9)&-1;
    $501 = ($500|0)==(0);
    if ($501) {
     $a$2$ph57$i = 0;$e2$0$ph$i = 0;$rp$2$ph55$i = $421;$z$1$ph56$i = $k$3$i;
    } else {
     $502 = ($421|0)>(-1);
     $503 = (($500) + 9)|0;
     $504 = $502 ? $500 : $503;
     $505 = (8 - ($504))|0;
     $506 = (22472 + ($505<<2)|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($k$3$i|0)==(0);
     if ($508) {
      $a$0$lcssa182$i = 0;$rp$0$lcssa183$i = $421;$z$0$i = 0;
     } else {
      $509 = (1000000000 / ($507|0))&-1;
      $a$078$i = 0;$carry$080$i = 0;$k$479$i = 0;$rp$077$i = $421;
      while(1) {
       $510 = (($x$i) + ($k$479$i<<2)|0);
       $511 = HEAP32[$510>>2]|0;
       $512 = (($511>>>0) % ($507>>>0))&-1;
       $513 = (($511>>>0) / ($507>>>0))&-1;
       $514 = (($513) + ($carry$080$i))|0;
       HEAP32[$510>>2] = $514;
       $515 = Math_imul($512, $509)|0;
       $516 = ($k$479$i|0)==($a$078$i|0);
       $517 = ($514|0)==(0);
       $or$cond18$i = $516 & $517;
       $518 = (($k$479$i) + 1)|0;
       if ($or$cond18$i) {
        $519 = $518 & 127;
        $520 = (($rp$077$i) + -9)|0;
        $a$1$i = $519;$rp$1$i19 = $520;
       } else {
        $a$1$i = $a$078$i;$rp$1$i19 = $rp$077$i;
       }
       $521 = ($518|0)==($k$3$i|0);
       if ($521) {
        break;
       } else {
        $a$078$i = $a$1$i;$carry$080$i = $515;$k$479$i = $518;$rp$077$i = $rp$1$i19;
       }
      }
      $522 = ($515|0)==(0);
      if ($522) {
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $k$3$i;
      } else {
       $523 = (($k$3$i) + 1)|0;
       $524 = (($x$i) + ($k$3$i<<2)|0);
       HEAP32[$524>>2] = $515;
       $a$0$lcssa182$i = $a$1$i;$rp$0$lcssa183$i = $rp$1$i19;$z$0$i = $523;
      }
     }
     $525 = (9 - ($504))|0;
     $526 = (($525) + ($rp$0$lcssa183$i))|0;
     $a$2$ph57$i = $a$0$lcssa182$i;$e2$0$ph$i = 0;$rp$2$ph55$i = $526;$z$1$ph56$i = $z$0$i;
    }
    L310: while(1) {
     $527 = ($rp$2$ph55$i|0)<(18);
     $528 = (($x$i) + ($a$2$ph57$i<<2)|0);
     if ($527) {
      $e2$0$us$i = $e2$0$ph$i;$z$1$us$i = $z$1$ph56$i;
      while(1) {
       $530 = (($z$1$us$i) + 127)|0;
       $carry1$0$us$i = 0;$k$5$in$us$i = $530;$z$2$us$i = $z$1$us$i;
       while(1) {
        $k$5$us$i = $k$5$in$us$i & 127;
        $531 = (($x$i) + ($k$5$us$i<<2)|0);
        $532 = HEAP32[$531>>2]|0;
        $533 = (_bitshift64Shl(($532|0),0,29)|0);
        $534 = tempRet0;
        $535 = (_i64Add(($533|0),($534|0),($carry1$0$us$i|0),0)|0);
        $536 = tempRet0;
        $537 = ($536>>>0)>(0);
        $538 = ($535>>>0)>(1000000000);
        $539 = ($536|0)==(0);
        $540 = $539 & $538;
        $541 = $537 | $540;
        if ($541) {
         $542 = (___udivdi3(($535|0),($536|0),1000000000,0)|0);
         $543 = tempRet0;
         $544 = (___uremdi3(($535|0),($536|0),1000000000,0)|0);
         $545 = tempRet0;
         $$sink$off0$us$i = $544;$carry1$1$us$i = $542;
        } else {
         $$sink$off0$us$i = $535;$carry1$1$us$i = 0;
        }
        HEAP32[$531>>2] = $$sink$off0$us$i;
        $546 = (($z$2$us$i) + 127)|0;
        $547 = $546 & 127;
        $548 = ($k$5$us$i|0)!=($547|0);
        $549 = ($k$5$us$i|0)==($a$2$ph57$i|0);
        $or$cond19$us$i = $548 | $549;
        if ($or$cond19$us$i) {
         $z$3$us$i = $z$2$us$i;
        } else {
         $550 = ($$sink$off0$us$i|0)==(0);
         $k$5$z$2$us$i = $550 ? $k$5$us$i : $z$2$us$i;
         $z$3$us$i = $k$5$z$2$us$i;
        }
        $551 = (($k$5$us$i) + -1)|0;
        if ($549) {
         break;
        } else {
         $carry1$0$us$i = $carry1$1$us$i;$k$5$in$us$i = $551;$z$2$us$i = $z$3$us$i;
        }
       }
       $552 = (($e2$0$us$i) + -29)|0;
       $553 = ($carry1$1$us$i|0)==(0);
       if ($553) {
        $e2$0$us$i = $552;$z$1$us$i = $z$3$us$i;
       } else {
        $$lcssa60$i = $552;$carry1$1$lcssa$lcssa$i = $carry1$1$us$i;$z$3$lcssa$lcssa$i = $z$3$us$i;
        break;
       }
      }
     } else {
      $529 = ($rp$2$ph55$i|0)==(18);
      if ($529) {
       $e2$0$us61$i = $e2$0$ph$i;$z$1$us62$i = $z$1$ph56$i;
      } else {
       $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$ph$i;$rp$3$ph50$i = $rp$2$ph55$i;$z$5$ph$i = $z$1$ph56$i;
       break;
      }
      while(1) {
       $554 = HEAP32[$528>>2]|0;
       $555 = ($554>>>0)<(9007199);
       if (!($555)) {
        $a$3$ph$i = $a$2$ph57$i;$e2$1$ph$i = $e2$0$us61$i;$rp$3$ph50$i = 18;$z$5$ph$i = $z$1$us62$i;
        break L310;
       }
       $556 = (($z$1$us62$i) + 127)|0;
       $carry1$0$us66$i = 0;$k$5$in$us65$i = $556;$z$2$us64$i = $z$1$us62$i;
       while(1) {
        $k$5$us67$i = $k$5$in$us65$i & 127;
        $557 = (($x$i) + ($k$5$us67$i<<2)|0);
        $558 = HEAP32[$557>>2]|0;
        $559 = (_bitshift64Shl(($558|0),0,29)|0);
        $560 = tempRet0;
        $561 = (_i64Add(($559|0),($560|0),($carry1$0$us66$i|0),0)|0);
        $562 = tempRet0;
        $563 = ($562>>>0)>(0);
        $564 = ($561>>>0)>(1000000000);
        $565 = ($562|0)==(0);
        $566 = $565 & $564;
        $567 = $563 | $566;
        if ($567) {
         $568 = (___udivdi3(($561|0),($562|0),1000000000,0)|0);
         $569 = tempRet0;
         $570 = (___uremdi3(($561|0),($562|0),1000000000,0)|0);
         $571 = tempRet0;
         $$sink$off0$us70$i = $570;$carry1$1$us71$i = $568;
        } else {
         $$sink$off0$us70$i = $561;$carry1$1$us71$i = 0;
        }
        HEAP32[$557>>2] = $$sink$off0$us70$i;
        $572 = (($z$2$us64$i) + 127)|0;
        $573 = $572 & 127;
        $574 = ($k$5$us67$i|0)!=($573|0);
        $575 = ($k$5$us67$i|0)==($a$2$ph57$i|0);
        $or$cond19$us72$i = $574 | $575;
        if ($or$cond19$us72$i) {
         $z$3$us74$i = $z$2$us64$i;
        } else {
         $576 = ($$sink$off0$us70$i|0)==(0);
         $k$5$z$2$us73$i = $576 ? $k$5$us67$i : $z$2$us64$i;
         $z$3$us74$i = $k$5$z$2$us73$i;
        }
        $577 = (($k$5$us67$i) + -1)|0;
        if ($575) {
         break;
        } else {
         $carry1$0$us66$i = $carry1$1$us71$i;$k$5$in$us65$i = $577;$z$2$us64$i = $z$3$us74$i;
        }
       }
       $578 = (($e2$0$us61$i) + -29)|0;
       $579 = ($carry1$1$us71$i|0)==(0);
       if ($579) {
        $e2$0$us61$i = $578;$z$1$us62$i = $z$3$us74$i;
       } else {
        $$lcssa60$i = $578;$carry1$1$lcssa$lcssa$i = $carry1$1$us71$i;$z$3$lcssa$lcssa$i = $z$3$us74$i;
        break;
       }
      }
     }
     $580 = (($rp$2$ph55$i) + 9)|0;
     $581 = (($a$2$ph57$i) + 127)|0;
     $582 = $581 & 127;
     $583 = ($582|0)==($z$3$lcssa$lcssa$i|0);
     if ($583) {
      $584 = (($z$3$lcssa$lcssa$i) + 127)|0;
      $585 = $584 & 127;
      $586 = (($x$i) + ($585<<2)|0);
      $587 = HEAP32[$586>>2]|0;
      $588 = (($z$3$lcssa$lcssa$i) + 126)|0;
      $589 = $588 & 127;
      $590 = (($x$i) + ($589<<2)|0);
      $591 = HEAP32[$590>>2]|0;
      $592 = $591 | $587;
      HEAP32[$590>>2] = $592;
      $z$4$i = $585;
     } else {
      $z$4$i = $z$3$lcssa$lcssa$i;
     }
     $593 = (($x$i) + ($582<<2)|0);
     HEAP32[$593>>2] = $carry1$1$lcssa$lcssa$i;
     $a$2$ph57$i = $582;$e2$0$ph$i = $$lcssa60$i;$rp$2$ph55$i = $580;$z$1$ph56$i = $z$4$i;
    }
    L341: while(1) {
     $630 = (($z$5$ph$i) + 1)|0;
     $628 = $630 & 127;
     $631 = (($z$5$ph$i) + 127)|0;
     $632 = $631 & 127;
     $633 = (($x$i) + ($632<<2)|0);
     $a$3$i$ph = $a$3$ph$i;$e2$1$i$ph = $e2$1$ph$i;$rp$3$i$ph = $rp$3$ph50$i;
     while(1) {
      $606 = ($rp$3$i$ph|0)==(18);
      $634 = ($rp$3$i$ph|0)>(27);
      $$20$i = $634 ? 9 : 1;
      $a$3$i = $a$3$i$ph;$e2$1$i = $e2$1$i$ph;
      while(1) {
       $i$042$i = 0;
       while(1) {
        $596 = (($i$042$i) + ($a$3$i))|0;
        $597 = $596 & 127;
        $598 = ($597|0)==($z$5$ph$i|0);
        if ($598) {
         $i$1$i = 2;
         break;
        }
        $599 = (($x$i) + ($597<<2)|0);
        $600 = HEAP32[$599>>2]|0;
        $601 = (22464 + ($i$042$i<<2)|0);
        $602 = HEAP32[$601>>2]|0;
        $603 = ($600>>>0)<($602>>>0);
        if ($603) {
         $i$1$i = 2;
         break;
        }
        $604 = ($600>>>0)>($602>>>0);
        $595 = (($i$042$i) + 1)|0;
        if ($604) {
         $i$1$i = $i$042$i;
         break;
        }
        $594 = ($595|0)<(2);
        if ($594) {
         $i$042$i = $595;
        } else {
         $i$1$i = $595;
         break;
        }
       }
       $605 = ($i$1$i|0)==(2);
       $or$cond8$i20 = $605 & $606;
       if ($or$cond8$i20) {
        break L341;
       }
       $609 = (($$20$i) + ($e2$1$i))|0;
       $610 = ($a$3$i|0)==($z$5$ph$i|0);
       if ($610) {
        $a$3$i = $z$5$ph$i;$e2$1$i = $609;
       } else {
        break;
       }
      }
      $611 = 1 << $$20$i;
      $612 = (($611) + -1)|0;
      $613 = 1000000000 >>> $$20$i;
      $a$444$i = $a$3$i;$carry3$047$i = 0;$k$645$i = $a$3$i;$rp$443$i = $rp$3$i$ph;
      while(1) {
       $614 = (($x$i) + ($k$645$i<<2)|0);
       $615 = HEAP32[$614>>2]|0;
       $616 = $615 & $612;
       $617 = $615 >>> $$20$i;
       $618 = (($617) + ($carry3$047$i))|0;
       HEAP32[$614>>2] = $618;
       $619 = Math_imul($616, $613)|0;
       $620 = ($k$645$i|0)==($a$444$i|0);
       $621 = ($618|0)==(0);
       $or$cond21$i = $620 & $621;
       $622 = (($k$645$i) + 1)|0;
       $623 = $622 & 127;
       $624 = (($rp$443$i) + -9)|0;
       $rp$5$i = $or$cond21$i ? $624 : $rp$443$i;
       $a$5$i = $or$cond21$i ? $623 : $a$444$i;
       $625 = ($623|0)==($z$5$ph$i|0);
       if ($625) {
        break;
       } else {
        $a$444$i = $a$5$i;$carry3$047$i = $619;$k$645$i = $623;$rp$443$i = $rp$5$i;
       }
      }
      $626 = ($619|0)==(0);
      if ($626) {
       $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
       continue;
      }
      $627 = ($628|0)==($a$5$i|0);
      if (!($627)) {
       break;
      }
      $635 = HEAP32[$633>>2]|0;
      $636 = $635 | 1;
      HEAP32[$633>>2] = $636;
      $a$3$i$ph = $a$5$i;$e2$1$i$ph = $609;$rp$3$i$ph = $rp$5$i;
     }
     $629 = (($x$i) + ($z$5$ph$i<<2)|0);
     HEAP32[$629>>2] = $619;
     $a$3$ph$i = $a$5$i;$e2$1$ph$i = $609;$rp$3$ph50$i = $rp$5$i;$z$5$ph$i = $628;
    }
    $607 = $a$3$i & 127;
    $608 = ($607|0)==($z$5$ph$i|0);
    if ($608) {
     $637 = (($628) + -1)|0;
     $638 = (($x$i) + ($637<<2)|0);
     HEAP32[$638>>2] = 0;
     $z$7$i = $628;
    } else {
     $z$7$i = $z$5$ph$i;
    }
    $639 = (($x$i) + ($607<<2)|0);
    $640 = HEAP32[$639>>2]|0;
    $641 = (+($640>>>0));
    $642 = (($a$3$i) + 1)|0;
    $643 = $642 & 127;
    $644 = ($643|0)==($z$7$i|0);
    if ($644) {
     $703 = (($z$7$i) + 1)|0;
     $704 = $703 & 127;
     $705 = (($704) + -1)|0;
     $706 = (($x$i) + ($705<<2)|0);
     HEAP32[$706>>2] = 0;
     $z$7$1$i = $704;
    } else {
     $z$7$1$i = $z$7$i;
    }
    $707 = $641 * 1.0E+9;
    $708 = (($x$i) + ($643<<2)|0);
    $709 = HEAP32[$708>>2]|0;
    $710 = (+($709>>>0));
    $711 = $707 + $710;
    $668 = (+($sign$0|0));
    $650 = $668 * $711;
    $688 = (($e2$1$i) + 53)|0;
    $646 = (($688) - ($emin$0$ph))|0;
    $712 = ($646|0)<($bits$0$ph|0);
    if ($712) {
     $645 = ($646|0)<(0);
     if ($645) {
      $$01231$i = 0;$denormal$030$i = 1;
      label = 244;
     } else {
      $$012$i = $646;$denormal$0$i = 1;
      label = 243;
     }
    } else {
     $$012$i = $bits$0$ph;$denormal$0$i = 0;
     label = 243;
    }
    if ((label|0) == 243) {
     $647 = ($$012$i|0)<(53);
     if ($647) {
      $$01231$i = $$012$i;$denormal$030$i = $denormal$0$i;
      label = 244;
     } else {
      $$01232$i = $$012$i;$bias$0$i25 = 0.0;$denormal$029$i = $denormal$0$i;$frac$0$i = 0.0;$y$1$i24 = $650;
     }
    }
    if ((label|0) == 244) {
     $648 = (105 - ($$01231$i))|0;
     $649 = (+_scalbn(1.0,$648));
     $651 = (+_copysignl($649,$650));
     $652 = (53 - ($$01231$i))|0;
     $653 = (+_scalbn(1.0,$652));
     $654 = (+_fmodl($650,$653));
     $655 = $650 - $654;
     $656 = $651 + $655;
     $$01232$i = $$01231$i;$bias$0$i25 = $651;$denormal$029$i = $denormal$030$i;$frac$0$i = $654;$y$1$i24 = $656;
    }
    $657 = (($a$3$i) + 2)|0;
    $658 = $657 & 127;
    $659 = ($658|0)==($z$7$1$i|0);
    do {
     if ($659) {
      $frac$2$i = $frac$0$i;
     } else {
      $660 = (($x$i) + ($658<<2)|0);
      $661 = HEAP32[$660>>2]|0;
      $662 = ($661>>>0)<(500000000);
      do {
       if ($662) {
        $663 = ($661|0)==(0);
        if ($663) {
         $664 = (($a$3$i) + 3)|0;
         $665 = $664 & 127;
         $666 = ($665|0)==($z$7$1$i|0);
         if ($666) {
          $frac$1$i = $frac$0$i;
          break;
         }
        }
        $667 = $668 * 0.25;
        $669 = $667 + $frac$0$i;
        $frac$1$i = $669;
       } else {
        $670 = ($661>>>0)>(500000000);
        if ($670) {
         $671 = $668 * 0.75;
         $672 = $671 + $frac$0$i;
         $frac$1$i = $672;
         break;
        }
        $673 = (($a$3$i) + 3)|0;
        $674 = $673 & 127;
        $675 = ($674|0)==($z$7$1$i|0);
        if ($675) {
         $676 = $668 * 0.5;
         $677 = $676 + $frac$0$i;
         $frac$1$i = $677;
         break;
        } else {
         $678 = $668 * 0.75;
         $679 = $678 + $frac$0$i;
         $frac$1$i = $679;
         break;
        }
       }
      } while(0);
      $680 = (53 - ($$01232$i))|0;
      $681 = ($680|0)>(1);
      if (!($681)) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $682 = (+_fmodl($frac$1$i,1.0));
      $683 = $682 != 0.0;
      if ($683) {
       $frac$2$i = $frac$1$i;
       break;
      }
      $684 = $frac$1$i + 1.0;
      $frac$2$i = $684;
     }
    } while(0);
    $685 = $y$1$i24 + $frac$2$i;
    $686 = $685 - $bias$0$i25;
    $687 = $688 & 2147483647;
    $689 = (-2 - ($sum$i))|0;
    $690 = ($687|0)>($689|0);
    do {
     if ($690) {
      $691 = (+Math_abs((+$686)));
      $692 = !($691 >= 9007199254740992.0);
      if ($692) {
       $denormal$2$i = $denormal$029$i;$e2$2$i = $e2$1$i;$y$2$i26 = $686;
      } else {
       $693 = ($denormal$029$i|0)!=(0);
       $694 = ($$01232$i|0)==($646|0);
       $or$cond22$i = $693 & $694;
       $denormal$1$i = $or$cond22$i ? 0 : $denormal$029$i;
       $695 = $686 * 0.5;
       $696 = (($e2$1$i) + 1)|0;
       $denormal$2$i = $denormal$1$i;$e2$2$i = $696;$y$2$i26 = $695;
      }
      $697 = (($e2$2$i) + 50)|0;
      $698 = ($697|0)>($326|0);
      if (!($698)) {
       $699 = ($denormal$2$i|0)!=(0);
       $700 = $frac$2$i != 0.0;
       $or$cond10$i = $699 & $700;
       if (!($or$cond10$i)) {
        $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
        break;
       }
      }
      $701 = (___errno_location()|0);
      HEAP32[$701>>2] = 34;
      $e2$3$i = $e2$2$i;$y$3$i = $y$2$i26;
     } else {
      $e2$3$i = $e2$1$i;$y$3$i = $686;
     }
    } while(0);
    $702 = (+_scalbnl($y$3$i,$e2$3$i));
    $$0 = $702;
    STACKTOP = sp;return (+$$0);
   } else {
    $107 = HEAP32[$1>>2]|0;
    $108 = ($107|0)==(0|0);
    if (!($108)) {
     $109 = HEAP32[$0>>2]|0;
     $110 = (($109) + -1|0);
     HEAP32[$0>>2] = $110;
    }
    $111 = (___errno_location()|0);
    HEAP32[$111>>2] = 22;
    ___shlim($f,0);
    $$0 = 0.0;
    STACKTOP = sp;return (+$$0);
   }
  }
 } while(0);
 if ((label|0) == 23) {
  $41 = HEAP32[$1>>2]|0;
  $42 = ($41|0)==(0|0);
  if (!($42)) {
   $43 = HEAP32[$0>>2]|0;
   $44 = (($43) + -1|0);
   HEAP32[$0>>2] = $44;
  }
  $notlhs = ($pok|0)==(0);
  $notrhs = ($i$0$lcssa>>>0)<(4);
  $or$cond9$not = $notrhs | $notlhs;
  $brmerge = $or$cond9$not | $42;
  if (!($brmerge)) {
   $i$1 = $i$0$lcssa;
   while(1) {
    $45 = HEAP32[$0>>2]|0;
    $46 = (($45) + -1|0);
    HEAP32[$0>>2] = $46;
    $47 = (($i$1) + -1)|0;
    $$old8 = ($47>>>0)>(3);
    if ($$old8) {
     $i$1 = $47;
    } else {
     break;
    }
   }
  }
 }
 $48 = (+($sign$0|0));
 $49 = $48 * inf;
 $50 = $49;
 $$0 = $50;
 STACKTOP = sp;return (+$$0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = (($f) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($f) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $2;
 $6 = $4;
 $7 = (($5) - ($6))|0;
 $8 = (($f) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($lim|0)!=(0);
 $10 = ($7|0)>($lim|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = (($4) + ($lim)|0);
  $12 = (($f) + 100|0);
  HEAP32[$12>>2] = $11;
  STACKTOP = sp;return;
 } else {
  $13 = (($f) + 100|0);
  HEAP32[$13>>2] = $2;
  STACKTOP = sp;return;
 }
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert2 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (($f) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if (!($7)) {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = (($f) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    label = 8;
   } else {
    $11 = (($f) + 4|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = $$pre;
    $14 = $12;
    $15 = (($13) - ($14))|0;
    $16 = (($f) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = (($18) + -1)|0;
    $20 = ($15|0)>($19|0);
    if ($20) {
     $21 = (($12) + ($19)|0);
     $22 = (($f) + 100|0);
     HEAP32[$22>>2] = $21;
    } else {
     label = 8;
    }
   }
   if ((label|0) == 8) {
    $23 = (($f) + 100|0);
    HEAP32[$23>>2] = $$pre;
   }
   $24 = ($$pre|0)==(0|0);
   $$phi$trans$insert2 = (($f) + 4|0);
   $$pre3 = HEAP32[$$phi$trans$insert2>>2]|0;
   if (!($24)) {
    $25 = $$pre;
    $26 = $$pre3;
    $27 = (($f) + 108|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = (($25) + 1)|0;
    $30 = (($29) - ($26))|0;
    $31 = (($30) + ($28))|0;
    HEAP32[$27>>2] = $31;
   }
   $32 = (($$pre3) + -1|0);
   $33 = HEAP8[$32>>0]|0;
   $34 = $33&255;
   $35 = ($34|0)==($6|0);
   if ($35) {
    $$0 = $6;
    STACKTOP = sp;return ($$0|0);
   }
   $36 = $6&255;
   HEAP8[$32>>0] = $36;
   $$0 = $6;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $8 = (($f) + 100|0);
 HEAP32[$8>>2] = 0;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function _copysign($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = $1 & 2147483647;
 $5 = $3 & -2147483648;
 $6 = $5 | $4;
 HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $6;$7 = +HEAPF64[tempDoublePtr>>3];
 STACKTOP = sp;return (+$7);
}
function _copysignl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_copysign($x,$y));
 STACKTOP = sp;return (+$0);
}
function _fmod($x,$y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa10 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0.0, $ex$0$lcssa = 0;
 var $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$33 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $y;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $5 = tempRet0;
 $6 = $4 & 2047;
 $7 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $8 = tempRet0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = (_bitshift64Shl(($2|0),($3|0),1)|0);
 $12 = tempRet0;
 $13 = ($11|0)==(0);
 $14 = ($12|0)==(0);
 $15 = $13 & $14;
 if (!($15)) {
  $16 = $3 & 2147483647;
  $17 = ($16>>>0)>(2146435072);
  $18 = ($2>>>0)>(0);
  $19 = ($16|0)==(2146435072);
  $20 = $19 & $18;
  $21 = $17 | $20;
  $22 = ($6|0)==(2047);
  $or$cond = $21 | $22;
  if (!($or$cond)) {
   $25 = (_bitshift64Shl(($0|0),($1|0),1)|0);
   $26 = tempRet0;
   $27 = ($26>>>0)>($12>>>0);
   $28 = ($25>>>0)>($11>>>0);
   $29 = ($26|0)==($12|0);
   $30 = $29 & $28;
   $31 = $27 | $30;
   if (!($31)) {
    $32 = ($25|0)==($11|0);
    $33 = ($26|0)==($12|0);
    $34 = $32 & $33;
    if (!($34)) {
     $$0 = $x;
     STACKTOP = sp;return (+$$0);
    }
    $35 = $x * 0.0;
    $$0 = $35;
    STACKTOP = sp;return (+$$0);
   }
   $36 = ($6|0)==(0);
   if ($36) {
    $37 = (_bitshift64Shl(($0|0),($1|0),12)|0);
    $38 = tempRet0;
    $39 = ($38|0)>(-1);
    $40 = ($37>>>0)>(4294967295);
    $41 = ($38|0)==(-1);
    $42 = $41 & $40;
    $43 = $39 | $42;
    if ($43) {
     $45 = $37;$46 = $38;$ex$026 = 0;
     while(1) {
      $44 = (($ex$026) + -1)|0;
      $47 = (_bitshift64Shl(($45|0),($46|0),1)|0);
      $48 = tempRet0;
      $49 = ($48|0)>(-1);
      $50 = ($47>>>0)>(4294967295);
      $51 = ($48|0)==(-1);
      $52 = $51 & $50;
      $53 = $49 | $52;
      if ($53) {
       $45 = $47;$46 = $48;$ex$026 = $44;
      } else {
       $ex$0$lcssa = $44;
       break;
      }
     }
    } else {
     $ex$0$lcssa = 0;
    }
    $54 = (1 - ($ex$0$lcssa))|0;
    $55 = (_bitshift64Shl(($0|0),($1|0),($54|0))|0);
    $56 = tempRet0;
    $83 = $55;$84 = $56;$ex$1 = $ex$0$lcssa;
   } else {
    $57 = $1 & 1048575;
    $58 = $57 | 1048576;
    $83 = $0;$84 = $58;$ex$1 = $6;
   }
   $59 = ($9|0)==(0);
   if ($59) {
    $60 = (_bitshift64Shl(($2|0),($3|0),12)|0);
    $61 = tempRet0;
    $62 = ($61|0)>(-1);
    $63 = ($60>>>0)>(4294967295);
    $64 = ($61|0)==(-1);
    $65 = $64 & $63;
    $66 = $62 | $65;
    if ($66) {
     $68 = $60;$69 = $61;$ey$020 = 0;
     while(1) {
      $67 = (($ey$020) + -1)|0;
      $70 = (_bitshift64Shl(($68|0),($69|0),1)|0);
      $71 = tempRet0;
      $72 = ($71|0)>(-1);
      $73 = ($70>>>0)>(4294967295);
      $74 = ($71|0)==(-1);
      $75 = $74 & $73;
      $76 = $72 | $75;
      if ($76) {
       $68 = $70;$69 = $71;$ey$020 = $67;
      } else {
       $ey$0$lcssa = $67;
       break;
      }
     }
    } else {
     $ey$0$lcssa = 0;
    }
    $77 = (1 - ($ey$0$lcssa))|0;
    $78 = (_bitshift64Shl(($2|0),($3|0),($77|0))|0);
    $79 = tempRet0;
    $85 = $78;$86 = $79;$ey$1$ph = $ey$0$lcssa;
   } else {
    $80 = $3 & 1048575;
    $81 = $80 | 1048576;
    $85 = $2;$86 = $81;$ey$1$ph = $9;
   }
   $82 = ($ex$1|0)>($ey$1$ph|0);
   $87 = (_i64Subtract(($83|0),($84|0),($85|0),($86|0))|0);
   $88 = tempRet0;
   $89 = ($88|0)>(-1);
   $90 = ($87>>>0)>(4294967295);
   $91 = ($88|0)==(-1);
   $92 = $91 & $90;
   $93 = $89 | $92;
   L27: do {
    if ($82) {
     $152 = $93;$153 = $87;$154 = $88;$95 = $83;$97 = $84;$ex$212 = $ex$1;
     while(1) {
      if ($152) {
       $94 = ($95|0)==($85|0);
       $96 = ($97|0)==($86|0);
       $98 = $94 & $96;
       if ($98) {
        break;
       } else {
        $100 = $153;$101 = $154;
       }
      } else {
       $100 = $95;$101 = $97;
      }
      $102 = (_bitshift64Shl(($100|0),($101|0),1)|0);
      $103 = tempRet0;
      $104 = (($ex$212) + -1)|0;
      $105 = ($104|0)>($ey$1$ph|0);
      $106 = (_i64Subtract(($102|0),($103|0),($85|0),($86|0))|0);
      $107 = tempRet0;
      $108 = ($107|0)>(-1);
      $109 = ($106>>>0)>(4294967295);
      $110 = ($107|0)==(-1);
      $111 = $110 & $109;
      $112 = $108 | $111;
      if ($105) {
       $152 = $112;$153 = $106;$154 = $107;$95 = $102;$97 = $103;$ex$212 = $104;
      } else {
       $$lcssa10 = $112;$114 = $102;$116 = $103;$155 = $106;$156 = $107;$ex$2$lcssa = $104;
       break L27;
      }
     }
     $99 = $x * 0.0;
     $$0 = $99;
     STACKTOP = sp;return (+$$0);
    } else {
     $$lcssa10 = $93;$114 = $83;$116 = $84;$155 = $87;$156 = $88;$ex$2$lcssa = $ex$1;
    }
   } while(0);
   if ($$lcssa10) {
    $113 = ($114|0)==($85|0);
    $115 = ($116|0)==($86|0);
    $117 = $113 & $115;
    if ($117) {
     $125 = $x * 0.0;
     $$0 = $125;
     STACKTOP = sp;return (+$$0);
    } else {
     $119 = $156;$121 = $155;
    }
   } else {
    $119 = $116;$121 = $114;
   }
   $118 = ($119>>>0)<(1048576);
   $120 = ($121>>>0)<(0);
   $122 = ($119|0)==(1048576);
   $123 = $122 & $120;
   $124 = $118 | $123;
   if ($124) {
    $126 = $121;$127 = $119;$ex$33 = $ex$2$lcssa;
    while(1) {
     $128 = (_bitshift64Shl(($126|0),($127|0),1)|0);
     $129 = tempRet0;
     $130 = (($ex$33) + -1)|0;
     $131 = ($129>>>0)<(1048576);
     $132 = ($128>>>0)<(0);
     $133 = ($129|0)==(1048576);
     $134 = $133 & $132;
     $135 = $131 | $134;
     if ($135) {
      $126 = $128;$127 = $129;$ex$33 = $130;
     } else {
      $137 = $128;$138 = $129;$ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $121;$138 = $119;$ex$3$lcssa = $ex$2$lcssa;
   }
   $136 = ($ex$3$lcssa|0)>(0);
   if ($136) {
    $139 = (_i64Add(($137|0),($138|0),0,-1048576)|0);
    $140 = tempRet0;
    $141 = (_bitshift64Shl(($ex$3$lcssa|0),0,52)|0);
    $142 = tempRet0;
    $143 = $139 | $141;
    $144 = $140 | $142;
    $149 = $144;$150 = $143;
   } else {
    $145 = (1 - ($ex$3$lcssa))|0;
    $146 = (_bitshift64Lshr(($137|0),($138|0),($145|0))|0);
    $147 = tempRet0;
    $149 = $147;$150 = $146;
   }
   $148 = $149 | $10;
   HEAP32[tempDoublePtr>>2] = $150;HEAP32[tempDoublePtr+4>>2] = $148;$151 = +HEAPF64[tempDoublePtr>>3];
   $$0 = $151;
   STACKTOP = sp;return (+$$0);
  }
 }
 $23 = $x * $y;
 $24 = $23 / $23;
 $$0 = $24;
 STACKTOP = sp;return (+$$0);
}
function _fmodl($x,$y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_fmod($x,$y));
 STACKTOP = sp;return (+$0);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 if ((($4|0) == 2047)) {
  $$0 = $x;
  STACKTOP = sp;return (+$$0);
 } else if ((($4|0) == 0)) {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  STACKTOP = sp;return (+$$0);
 } else {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
  STACKTOP = sp;return (+$$0);
 }
 return +(0.0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 STACKTOP = sp;return (+$0);
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 STACKTOP = sp;return (+$18);
}
function _scalbnl($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 STACKTOP = sp;return (+$0);
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $1 = ($wc>>>0)<(128);
 if ($1) {
  $2 = $wc&255;
  HEAP8[$s>>0] = $2;
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = ($wc>>>0)<(2048);
 if ($3) {
  $4 = $wc >>> 6;
  $5 = $4 | 192;
  $6 = $5&255;
  $7 = (($s) + 1|0);
  HEAP8[$s>>0] = $6;
  $8 = $wc & 63;
  $9 = $8 | 128;
  $10 = $9&255;
  HEAP8[$7>>0] = $10;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
 }
 $11 = ($wc>>>0)<(55296);
 $12 = $wc & -8192;
 $13 = ($12|0)==(57344);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $14 = $wc >>> 12;
  $15 = $14 | 224;
  $16 = $15&255;
  $17 = (($s) + 1|0);
  HEAP8[$s>>0] = $16;
  $18 = $wc >>> 6;
  $19 = $18 & 63;
  $20 = $19 | 128;
  $21 = $20&255;
  $22 = (($s) + 2|0);
  HEAP8[$17>>0] = $21;
  $23 = $wc & 63;
  $24 = $23 | 128;
  $25 = $24&255;
  HEAP8[$22>>0] = $25;
  $$0 = 3;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = (($wc) + -65536)|0;
 $27 = ($26>>>0)<(1048576);
 if ($27) {
  $28 = $wc >>> 18;
  $29 = $28 | 240;
  $30 = $29&255;
  $31 = (($s) + 1|0);
  HEAP8[$s>>0] = $30;
  $32 = $wc >>> 12;
  $33 = $32 & 63;
  $34 = $33 | 128;
  $35 = $34&255;
  $36 = (($s) + 2|0);
  HEAP8[$31>>0] = $35;
  $37 = $wc >>> 6;
  $38 = $37 & 63;
  $39 = $38 | 128;
  $40 = $39&255;
  $41 = (($s) + 3|0);
  HEAP8[$36>>0] = $40;
  $42 = $wc & 63;
  $43 = $42 | 128;
  $44 = $43&255;
  HEAP8[$41>>0] = $44;
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 } else {
  $45 = (___errno_location()|0);
  HEAP32[$45>>2] = 84;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = (($f) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($f) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = (($f) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 1023]($f,0,0)|0);
 }
 $13 = (($f) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = (($f) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = (($f) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = (($f) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = $15 & 4;
 $19 = ($18|0)==(0);
 if ($19) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $20 = $15 | 32;
 HEAP32[$f>>2] = $20;
 $$0 = -1;
 STACKTOP = sp;return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = (($f) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = (($f) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = (($f) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (($f) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = (($f) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = (($f) + 48|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = (($13) + ($17)|0);
  $19 = (($f) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = (($f) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = (($f) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 1023]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre5 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   $3 = (___towrite($f)|0);
   $4 = ($3|0)==(0);
   if ($4) {
    $$pre = HEAP32[$0>>2]|0;
    $8 = $$pre;
    break;
   } else {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
  } else {
   $8 = $1;
  }
 } while(0);
 $5 = (($f) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $8;
 $9 = $6;
 $10 = (($7) - ($9))|0;
 $11 = ($10>>>0)<($l>>>0);
 if ($11) {
  $12 = (($f) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (FUNCTION_TABLE_iiii[$13 & 1023]($f,$s,$l)|0);
  $$0 = $14;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = (($f) + 75|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)>(-1);
 L11: do {
  if ($17) {
   $i$0 = $l;
   while(1) {
    $18 = ($i$0|0)==(0);
    if ($18) {
     $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
     break L11;
    }
    $19 = (($i$0) + -1)|0;
    $20 = (($s) + ($19)|0);
    $21 = HEAP8[$20>>0]|0;
    $22 = ($21<<24>>24)==(10);
    if ($22) {
     break;
    } else {
     $i$0 = $19;
    }
   }
   $23 = (($f) + 36|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (FUNCTION_TABLE_iiii[$24 & 1023]($f,$s,$i$0)|0);
   $26 = ($25>>>0)<($i$0>>>0);
   if ($26) {
    $$0 = $i$0;
    STACKTOP = sp;return ($$0|0);
   } else {
    $27 = (($s) + ($i$0)|0);
    $28 = (($l) - ($i$0))|0;
    $$pre5 = HEAP32[$5>>2]|0;
    $$01 = $28;$$02 = $27;$29 = $$pre5;$i$1 = $i$0;
    break;
   }
  } else {
   $$01 = $l;$$02 = $s;$29 = $6;$i$1 = 0;
  }
 } while(0);
 _memcpy(($29|0),($$02|0),($$01|0))|0;
 $30 = HEAP32[$5>>2]|0;
 $31 = (($30) + ($$01)|0);
 HEAP32[$5>>2] = $31;
 $32 = (($i$1) + ($$01))|0;
 $$0 = $32;
 STACKTOP = sp;return ($$0|0);
}
function _snprintf($s,$n,$fmt,$varargs) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = (_vsnprintf($s,$n,$fmt,$ap)|0);
 STACKTOP = sp;return ($0|0);
}
function _MUSL_vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type+0|0; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
  STACKTOP = sp;return ($$0|0);
 }
 $2 = (($f) + 48|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 if ($4) {
  $6 = (($f) + 44|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[$6>>2] = $internal_buf;
  $8 = (($f) + 28|0);
  HEAP32[$8>>2] = $internal_buf;
  $9 = (($f) + 20|0);
  HEAP32[$9>>2] = $internal_buf;
  HEAP32[$2>>2] = 80;
  $10 = (($internal_buf) + 80|0);
  $11 = (($f) + 16|0);
  HEAP32[$11>>2] = $10;
  $12 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $13 = ($7|0)==(0|0);
  if ($13) {
   $ret$1 = $12;
  } else {
   $14 = (($f) + 36|0);
   $15 = HEAP32[$14>>2]|0;
   (FUNCTION_TABLE_iiii[$15 & 1023]($f,0,0)|0);
   $16 = HEAP32[$9>>2]|0;
   $17 = ($16|0)==(0|0);
   $$ = $17 ? -1 : $12;
   HEAP32[$6>>2] = $7;
   HEAP32[$2>>2] = 0;
   HEAP32[$11>>2] = 0;
   HEAP32[$8>>2] = 0;
   HEAP32[$9>>2] = 0;
   $ret$1 = $$;
  }
 } else {
  $5 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
  $ret$1 = $5;
 }
 $$0 = $ret$1;
 STACKTOP = sp;return ($$0|0);
}
function _vsnprintf($s,$n,$fmt,$ap) {
 $s = $s|0;
 $n = $n|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $f = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $b = sp + 112|0;
 $f = sp;
 dest=$f+0|0; src=23072+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $0 = (($n) + -1)|0;
 $1 = ($0>>>0)>(2147483646);
 if ($1) {
  $2 = ($n|0)==(0);
  if ($2) {
   $$01 = $b;$$02 = 1;
  } else {
   $3 = (___errno_location()|0);
   HEAP32[$3>>2] = 75;
   $$0 = -1;
   STACKTOP = sp;return ($$0|0);
  }
 } else {
  $$01 = $s;$$02 = $n;
 }
 $4 = $$01;
 $5 = (-2 - ($4))|0;
 $6 = ($$02>>>0)>($5>>>0);
 $$$02 = $6 ? $5 : $$02;
 $7 = (($f) + 48|0);
 HEAP32[$7>>2] = $$$02;
 $8 = (($f) + 20|0);
 HEAP32[$8>>2] = $$01;
 $9 = (($f) + 44|0);
 HEAP32[$9>>2] = $$01;
 $10 = (($$01) + ($$$02)|0);
 $11 = (($f) + 16|0);
 HEAP32[$11>>2] = $10;
 $12 = (($f) + 28|0);
 HEAP32[$12>>2] = $10;
 $13 = (_MUSL_vfprintf($f,$fmt,$ap)|0);
 $14 = ($$$02|0)==(0);
 if ($14) {
  $$0 = $13;
  STACKTOP = sp;return ($$0|0);
 }
 $15 = HEAP32[$8>>2]|0;
 $16 = HEAP32[$11>>2]|0;
 $17 = ($15|0)==($16|0);
 $18 = $17 << 31 >> 31;
 $19 = (($15) + ($18)|0);
 HEAP8[$19>>0] = 0;
 $$0 = $13;
 STACKTOP = sp;return ($$0|0);
}
function _atof($s) {
 $s = $s|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_strtod($s,0));
 STACKTOP = sp;return (+$0);
}
function _atoi($s) {
 $s = $s|0;
 var $$0 = 0, $$1$ph = 0, $$12 = 0, $$neg1 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n$0$lcssa = 0, $n$03 = 0, $neg$0 = 0, $neg$1$ph = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $s;
 while(1) {
  $0 = HEAP8[$$0>>0]|0;
  $1 = $0 << 24 >> 24;
  $2 = (_isspace($1)|0);
  $3 = ($2|0)==(0);
  $4 = (($$0) + 1|0);
  if ($3) {
   break;
  } else {
   $$0 = $4;
  }
 }
 $5 = HEAP8[$$0>>0]|0;
 $6 = $5 << 24 >> 24;
 if ((($6|0) == 43)) {
  $neg$0 = 0;
  label = 5;
 } else if ((($6|0) == 45)) {
  $neg$0 = 1;
  label = 5;
 } else {
  $$1$ph = $$0;$8 = $5;$neg$1$ph = 0;
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$4>>0]|0;
  $$1$ph = $4;$8 = $$pre;$neg$1$ph = $neg$0;
 }
 $7 = $8 << 24 >> 24;
 $9 = (_isdigit($7)|0);
 $10 = ($9|0)==(0);
 if ($10) {
  $n$0$lcssa = 0;
  $20 = ($neg$1$ph|0)!=(0);
  $21 = (0 - ($n$0$lcssa))|0;
  $22 = $20 ? $n$0$lcssa : $21;
  STACKTOP = sp;return ($22|0);
 } else {
  $$12 = $$1$ph;$n$03 = 0;
 }
 while(1) {
  $11 = ($n$03*10)|0;
  $12 = (($$12) + 1|0);
  $13 = HEAP8[$$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $$neg1 = (($11) + 48)|0;
  $15 = (($$neg1) - ($14))|0;
  $16 = HEAP8[$12>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = (_isdigit($17)|0);
  $19 = ($18|0)==(0);
  if ($19) {
   $n$0$lcssa = $15;
   break;
  } else {
   $$12 = $12;$n$03 = $15;
  }
 }
 $20 = ($neg$1$ph|0)!=(0);
 $21 = (0 - ($n$0$lcssa))|0;
 $22 = $20 ? $n$0$lcssa : $21;
 STACKTOP = sp;return ($22|0);
}
function _strtod($s,$p) {
 $s = $s|0;
 $p = $p|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 dest=$f$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i,0);
 $4 = (+___floatscan($f$i,1,1));
 $5 = (($f$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtold_l($s,$p,$loc) {
 $s = $s|0;
 $p = $p|0;
 $loc = $loc|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f$i$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i$i = sp;
 dest=$f$i$i+0|0; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $0 = (($f$i$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i$i) + 8|0);
 HEAP32[$1>>2] = (-1);
 $2 = (($f$i$i) + 44|0);
 HEAP32[$2>>2] = $s;
 $3 = (($f$i$i) + 76|0);
 HEAP32[$3>>2] = -1;
 ___shlim($f$i$i,0);
 $4 = (+___floatscan($f$i$i,2,1));
 $5 = (($f$i$i) + 108|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$0>>2]|0;
 $8 = HEAP32[$1>>2]|0;
 $9 = $7;
 $10 = $8;
 $11 = (($9) - ($10))|0;
 $12 = (($11) + ($6))|0;
 $13 = ($p|0)==(0|0);
 if ($13) {
  STACKTOP = sp;return (+$4);
 }
 $14 = ($12|0)==(0);
 if ($14) {
  $16 = $s;
 } else {
  $15 = (($s) + ($12)|0);
  $16 = $15;
 }
 HEAP32[$p>>2] = $16;
 STACKTOP = sp;return (+$4);
}
function _strtoull($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,-1,-1)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _strtoll($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $f$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f$i = sp;
 HEAP32[$f$i>>2] = 0;
 $0 = (($f$i) + 4|0);
 HEAP32[$0>>2] = $s;
 $1 = (($f$i) + 44|0);
 HEAP32[$1>>2] = $s;
 $2 = ($s|0)<(0|0);
 if ($2) {
  $3 = (($f$i) + 8|0);
  HEAP32[$3>>2] = (-1);
 } else {
  $4 = (($s) + 2147483647|0);
  $5 = (($f$i) + 8|0);
  HEAP32[$5>>2] = $4;
 }
 $6 = (($f$i) + 76|0);
 HEAP32[$6>>2] = -1;
 ___shlim($f$i,0);
 $7 = (___intscan($f$i,$base,1,0,-2147483648)|0);
 $8 = tempRet0;
 $9 = ($p|0)==(0|0);
 if ($9) {
  tempRet0 = $8;
  STACKTOP = sp;return ($7|0);
 }
 $10 = (($f$i) + 108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$0>>2]|0;
 $13 = (($f$i) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $12;
 $16 = $14;
 $17 = (($15) + ($11))|0;
 $18 = (($17) - ($16))|0;
 $19 = (($s) + ($18)|0);
 HEAP32[$p>>2] = $19;
 tempRet0 = $8;
 STACKTOP = sp;return ($7|0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa36 = 0, $$012 = 0, $$1$lcssa = 0, $$15 = 0, $$22 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $s$0$lcssa = 0, $s$0$lcssa35 = 0, $s$013 = 0, $s$13 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$06 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond11 = $3 & $4;
 L1: do {
  if ($or$cond11) {
   $5 = $c&255;
   $$012 = $n;$s$013 = $src;
   while(1) {
    $6 = HEAP8[$s$013>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa36 = $$012;$s$0$lcssa35 = $s$013;
     label = 6;
     break L1;
    }
    $8 = (($s$013) + 1|0);
    $9 = (($$012) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $12 & $13;
    if ($or$cond) {
     $$012 = $9;$s$013 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa36 = $$0$lcssa;$s$0$lcssa35 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa35>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa36;$s$2 = $s$0$lcssa35;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa36>>>0)>(3);
    L11: do {
     if ($18) {
      $$15 = $$0$lcssa36;$w$06 = $s$0$lcssa35;
      while(1) {
       $19 = HEAP32[$w$06>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$1$lcssa = $$15;$w$0$lcssa = $w$06;
        break L11;
       }
       $26 = (($w$06) + 4|0);
       $27 = (($$15) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$15 = $27;$w$06 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        break;
       }
      }
     } else {
      $$1$lcssa = $$0$lcssa36;$w$0$lcssa = $s$0$lcssa35;
     }
    } while(0);
    $29 = ($$1$lcssa|0)==(0);
    if ($29) {
     $$3 = 0;$s$2 = $w$0$lcssa;
    } else {
     $$22 = $$1$lcssa;$s$13 = $w$0$lcssa;
     while(1) {
      $30 = HEAP8[$s$13>>0]|0;
      $31 = ($30<<24>>24)==($15<<24>>24);
      if ($31) {
       $$3 = $$22;$s$2 = $s$13;
       break L8;
      }
      $32 = (($s$13) + 1|0);
      $33 = (($$22) + -1)|0;
      $34 = ($33|0)==(0);
      if ($34) {
       $$3 = 0;$s$2 = $32;
       break;
      } else {
       $$22 = $33;$s$13 = $32;
      }
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 STACKTOP = sp;return ($36|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$02 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$03 = 0, $r$04 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$02 = $n;$l$03 = $vl;$r$04 = $vr;
   while(1) {
    $1 = HEAP8[$l$03>>0]|0;
    $2 = HEAP8[$r$04>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     break;
    }
    $4 = (($$02) + -1)|0;
    $5 = (($l$03) + 1|0);
    $6 = (($r$04) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$02 = $4;$l$03 = $5;$r$04 = $6;
    }
   }
   $8 = $1&255;
   $9 = $2&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 STACKTOP = sp;return ($11|0);
}
function _sn_write($f,$s,$l) {
 $f = $f|0;
 $s = $s|0;
 $l = $l|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 20|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = $3;
 $6 = (($4) - ($5))|0;
 $7 = ($6>>>0)>($l>>>0);
 $l$ = $7 ? $l : $6;
 _memcpy(($3|0),($s|0),($l$|0))|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = (($8) + ($l$)|0);
 HEAP32[$2>>2] = $9;
 STACKTOP = sp;return ($l|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum2728 = 0, $$sum3 = 0, $$sum4 = 0, $$sum5 = 0, $$sum78 = 0;
 var $$sum910 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$0 = 0, $R$1 = 0, $RP$0 = 0, $cond = 0, $newp$0 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0;
 var $or$cond30 = 0, $storemerge = 0, $storemerge21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[((21664 + 16|0))>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond30 = $or$cond$not & $6;
 if (!($or$cond30)) {
  _abort();
  // unreachable;
 }
 $$sum2728 = $2 | 4;
 $7 = (($p) + ($$sum2728)|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[((22136 + 8|0))>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$0 = $p;
    STACKTOP = sp;return ($newp$0|0);
   }
  }
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$0 = $p;
   STACKTOP = sp;return ($newp$0|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $$sum23 = (($nb) + 4)|0;
  $26 = (($p) + ($$sum23)|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = HEAP32[$7>>2]|0;
  $29 = $28 | 1;
  HEAP32[$7>>2] = $29;
  _dispose_chunk($22,$20);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $30 = HEAP32[((21664 + 24|0))>>2]|0;
 $31 = ($3|0)==($30|0);
 if ($31) {
  $32 = HEAP32[((21664 + 12|0))>>2]|0;
  $33 = (($32) + ($2))|0;
  $34 = ($33>>>0)>($nb>>>0);
  if (!($34)) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $35 = (($33) - ($nb))|0;
  $36 = (($p) + ($nb)|0);
  $37 = $1 & 1;
  $38 = $37 | $nb;
  $39 = $38 | 2;
  HEAP32[$0>>2] = $39;
  $$sum22 = (($nb) + 4)|0;
  $40 = (($p) + ($$sum22)|0);
  $41 = $35 | 1;
  HEAP32[$40>>2] = $41;
  HEAP32[((21664 + 24|0))>>2] = $36;
  HEAP32[((21664 + 12|0))>>2] = $35;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $42 = HEAP32[((21664 + 20|0))>>2]|0;
 $43 = ($3|0)==($42|0);
 if ($43) {
  $44 = HEAP32[((21664 + 8|0))>>2]|0;
  $45 = (($44) + ($2))|0;
  $46 = ($45>>>0)<($nb>>>0);
  if ($46) {
   $newp$0 = 0;
   STACKTOP = sp;return ($newp$0|0);
  }
  $47 = (($45) - ($nb))|0;
  $48 = ($47>>>0)>(15);
  if ($48) {
   $49 = (($p) + ($nb)|0);
   $50 = (($p) + ($45)|0);
   $51 = $1 & 1;
   $52 = $51 | $nb;
   $53 = $52 | 2;
   HEAP32[$0>>2] = $53;
   $$sum19 = (($nb) + 4)|0;
   $54 = (($p) + ($$sum19)|0);
   $55 = $47 | 1;
   HEAP32[$54>>2] = $55;
   HEAP32[$50>>2] = $47;
   $$sum20 = (($45) + 4)|0;
   $56 = (($p) + ($$sum20)|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = $57 & -2;
   HEAP32[$56>>2] = $58;
   $storemerge = $49;$storemerge21 = $47;
  } else {
   $59 = $1 & 1;
   $60 = $59 | $45;
   $61 = $60 | 2;
   HEAP32[$0>>2] = $61;
   $$sum17 = (($45) + 4)|0;
   $62 = (($p) + ($$sum17)|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = $63 | 1;
   HEAP32[$62>>2] = $64;
   $storemerge = 0;$storemerge21 = 0;
  }
  HEAP32[((21664 + 8|0))>>2] = $storemerge21;
  HEAP32[((21664 + 20|0))>>2] = $storemerge;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 $65 = $8 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $67 = $8 & -8;
 $68 = (($67) + ($2))|0;
 $69 = ($68>>>0)<($nb>>>0);
 if ($69) {
  $newp$0 = 0;
  STACKTOP = sp;return ($newp$0|0);
 }
 $70 = (($68) - ($nb))|0;
 $71 = $8 >>> 3;
 $72 = ($8>>>0)<(256);
 do {
  if ($72) {
   $$sum15 = (($2) + 8)|0;
   $73 = (($p) + ($$sum15)|0);
   $74 = HEAP32[$73>>2]|0;
   $$sum16 = (($2) + 12)|0;
   $75 = (($p) + ($$sum16)|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $71 << 1;
   $78 = ((21664 + ($77<<2)|0) + 40|0);
   $79 = ($74|0)==($78|0);
   if (!($79)) {
    $80 = ($74>>>0)<($4>>>0);
    if ($80) {
     _abort();
     // unreachable;
    }
    $81 = (($74) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==($3|0);
    if (!($83)) {
     _abort();
     // unreachable;
    }
   }
   $84 = ($76|0)==($74|0);
   if ($84) {
    $85 = 1 << $71;
    $86 = $85 ^ -1;
    $87 = HEAP32[21664>>2]|0;
    $88 = $87 & $86;
    HEAP32[21664>>2] = $88;
    break;
   }
   $89 = ($76|0)==($78|0);
   if ($89) {
    $$pre = (($76) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $90 = ($76>>>0)<($4>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = (($76) + 8|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==($3|0);
    if ($93) {
     $$pre$phiZ2D = $91;
    } else {
     _abort();
     // unreachable;
    }
   }
   $94 = (($74) + 12|0);
   HEAP32[$94>>2] = $76;
   HEAP32[$$pre$phiZ2D>>2] = $74;
  } else {
   $$sum = (($2) + 24)|0;
   $95 = (($p) + ($$sum)|0);
   $96 = HEAP32[$95>>2]|0;
   $$sum2 = (($2) + 12)|0;
   $97 = (($p) + ($$sum2)|0);
   $98 = HEAP32[$97>>2]|0;
   $99 = ($98|0)==($3|0);
   do {
    if ($99) {
     $$sum4 = (($2) + 20)|0;
     $109 = (($p) + ($$sum4)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==(0|0);
     if ($111) {
      $$sum3 = (($2) + 16)|0;
      $112 = (($p) + ($$sum3)|0);
      $113 = HEAP32[$112>>2]|0;
      $114 = ($113|0)==(0|0);
      if ($114) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $113;$RP$0 = $112;
      }
     } else {
      $R$0 = $110;$RP$0 = $109;
     }
     while(1) {
      $115 = (($R$0) + 20|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(0|0);
      if (!($117)) {
       $R$0 = $116;$RP$0 = $115;
       continue;
      }
      $118 = (($R$0) + 16|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if ($120) {
       break;
      } else {
       $R$0 = $119;$RP$0 = $118;
      }
     }
     $121 = ($RP$0>>>0)<($4>>>0);
     if ($121) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum14 = (($2) + 8)|0;
     $100 = (($p) + ($$sum14)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = ($101>>>0)<($4>>>0);
     if ($102) {
      _abort();
      // unreachable;
     }
     $103 = (($101) + 12|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104|0)==($3|0);
     if (!($105)) {
      _abort();
      // unreachable;
     }
     $106 = (($98) + 8|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if ($108) {
      HEAP32[$103>>2] = $98;
      HEAP32[$106>>2] = $101;
      $R$1 = $98;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $122 = ($96|0)==(0|0);
   if (!($122)) {
    $$sum11 = (($2) + 28)|0;
    $123 = (($p) + ($$sum11)|0);
    $124 = HEAP32[$123>>2]|0;
    $125 = ((21664 + ($124<<2)|0) + 304|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($3|0)==($126|0);
    if ($127) {
     HEAP32[$125>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $128 = 1 << $124;
      $129 = $128 ^ -1;
      $130 = HEAP32[((21664 + 4|0))>>2]|0;
      $131 = $130 & $129;
      HEAP32[((21664 + 4|0))>>2] = $131;
      break;
     }
    } else {
     $132 = HEAP32[((21664 + 16|0))>>2]|0;
     $133 = ($96>>>0)<($132>>>0);
     if ($133) {
      _abort();
      // unreachable;
     }
     $134 = (($96) + 16|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = ($135|0)==($3|0);
     if ($136) {
      HEAP32[$134>>2] = $R$1;
     } else {
      $137 = (($96) + 20|0);
      HEAP32[$137>>2] = $R$1;
     }
     $138 = ($R$1|0)==(0|0);
     if ($138) {
      break;
     }
    }
    $139 = HEAP32[((21664 + 16|0))>>2]|0;
    $140 = ($R$1>>>0)<($139>>>0);
    if ($140) {
     _abort();
     // unreachable;
    }
    $141 = (($R$1) + 24|0);
    HEAP32[$141>>2] = $96;
    $$sum12 = (($2) + 16)|0;
    $142 = (($p) + ($$sum12)|0);
    $143 = HEAP32[$142>>2]|0;
    $144 = ($143|0)==(0|0);
    do {
     if (!($144)) {
      $145 = ($143>>>0)<($139>>>0);
      if ($145) {
       _abort();
       // unreachable;
      } else {
       $146 = (($R$1) + 16|0);
       HEAP32[$146>>2] = $143;
       $147 = (($143) + 24|0);
       HEAP32[$147>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum13 = (($2) + 20)|0;
    $148 = (($p) + ($$sum13)|0);
    $149 = HEAP32[$148>>2]|0;
    $150 = ($149|0)==(0|0);
    if (!($150)) {
     $151 = HEAP32[((21664 + 16|0))>>2]|0;
     $152 = ($149>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     } else {
      $153 = (($R$1) + 20|0);
      HEAP32[$153>>2] = $149;
      $154 = (($149) + 24|0);
      HEAP32[$154>>2] = $R$1;
      break;
     }
    }
   }
  }
 } while(0);
 $155 = ($70>>>0)<(16);
 if ($155) {
  $156 = $1 & 1;
  $157 = $68 | $156;
  $158 = $157 | 2;
  HEAP32[$0>>2] = $158;
  $$sum910 = $68 | 4;
  $159 = (($p) + ($$sum910)|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = $160 | 1;
  HEAP32[$159>>2] = $161;
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 } else {
  $162 = (($p) + ($nb)|0);
  $163 = $1 & 1;
  $164 = $163 | $nb;
  $165 = $164 | 2;
  HEAP32[$0>>2] = $165;
  $$sum5 = (($nb) + 4)|0;
  $166 = (($p) + ($$sum5)|0);
  $167 = $70 | 3;
  HEAP32[$166>>2] = $167;
  $$sum78 = $68 | 4;
  $168 = (($p) + ($$sum78)|0);
  $169 = HEAP32[$168>>2]|0;
  $170 = $169 | 1;
  HEAP32[$168>>2] = $170;
  _dispose_chunk($162,$70);
  $newp$0 = $p;
  STACKTOP = sp;return ($newp$0|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$pre = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$pre56 = 0, $$pre58 = 0, $$sum = 0, $$sum1 = 0, $$sum12$pre = 0, $$sum13 = 0, $$sum14 = 0, $$sum15 = 0, $$sum16 = 0, $$sum17 = 0, $$sum18 = 0, $$sum19 = 0, $$sum2 = 0;
 var $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0, $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum4 = 0, $$sum5 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $I19$0$c = 0, $K20$050 = 0, $R$0 = 0, $R$1 = 0, $R7$0 = 0, $R7$1 = 0, $RP$0 = 0, $RP9$0 = 0, $T$0$lcssa = 0, $T$049 = 0, $cond = 0, $cond46 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = (($p) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    STACKTOP = sp;return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[((21664 + 16|0))>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[((21664 + 20|0))>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $$sum = (($psize) + 4)|0;
    $99 = (($p) + ($$sum)|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$0 = $9;$$02 = $10;
     break;
    }
    HEAP32[((21664 + 8|0))>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $$sum20 = (4 - ($5))|0;
    $105 = (($p) + ($$sum20)|0);
    HEAP32[$105>>2] = $104;
    HEAP32[$0>>2] = $10;
    STACKTOP = sp;return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $$sum30 = (8 - ($5))|0;
    $17 = (($p) + ($$sum30)|0);
    $18 = HEAP32[$17>>2]|0;
    $$sum31 = (12 - ($5))|0;
    $19 = (($p) + ($$sum31)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = ((21664 + ($21<<2)|0) + 40|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = (($18) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[21664>>2]|0;
     $32 = $31 & $30;
     HEAP32[21664>>2] = $32;
     $$0 = $9;$$02 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre58 = (($20) + 8|0);
     $$pre$phi59Z2D = $$pre58;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = (($20) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi59Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = (($18) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi59Z2D>>2] = $18;
    $$0 = $9;$$02 = $10;
    break;
   }
   $$sum22 = (24 - ($5))|0;
   $39 = (($p) + ($$sum22)|0);
   $40 = HEAP32[$39>>2]|0;
   $$sum23 = (12 - ($5))|0;
   $41 = (($p) + ($$sum23)|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $$sum24 = (16 - ($5))|0;
     $$sum25 = (($$sum24) + 4)|0;
     $53 = (($p) + ($$sum25)|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==(0|0);
     if ($55) {
      $56 = (($p) + ($$sum24)|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $57;$RP$0 = $56;
      }
     } else {
      $R$0 = $54;$RP$0 = $53;
     }
     while(1) {
      $59 = (($R$0) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$0 = $60;$RP$0 = $59;
       continue;
      }
      $62 = (($R$0) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       break;
      } else {
       $R$0 = $63;$RP$0 = $62;
      }
     }
     $65 = ($RP$0>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$0>>2] = 0;
      $R$1 = $R$0;
      break;
     }
    } else {
     $$sum29 = (8 - ($5))|0;
     $44 = (($p) + ($$sum29)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = (($45) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = (($42) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$1 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$0 = $9;$$02 = $10;
   } else {
    $$sum26 = (28 - ($5))|0;
    $67 = (($p) + ($$sum26)|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ((21664 + ($68<<2)|0) + 304|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$1;
     $cond = ($R$1|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[((21664 + 4|0))>>2]|0;
      $75 = $74 & $73;
      HEAP32[((21664 + 4|0))>>2] = $75;
      $$0 = $9;$$02 = $10;
      break;
     }
    } else {
     $76 = HEAP32[((21664 + 16|0))>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = (($40) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$1;
     } else {
      $81 = (($40) + 20|0);
      HEAP32[$81>>2] = $R$1;
     }
     $82 = ($R$1|0)==(0|0);
     if ($82) {
      $$0 = $9;$$02 = $10;
      break;
     }
    }
    $83 = HEAP32[((21664 + 16|0))>>2]|0;
    $84 = ($R$1>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = (($R$1) + 24|0);
    HEAP32[$85>>2] = $40;
    $$sum27 = (16 - ($5))|0;
    $86 = (($p) + ($$sum27)|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = (($R$1) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = (($87) + 24|0);
       HEAP32[$91>>2] = $R$1;
       break;
      }
     }
    } while(0);
    $$sum28 = (($$sum27) + 4)|0;
    $92 = (($p) + ($$sum28)|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$0 = $9;$$02 = $10;
    } else {
     $95 = HEAP32[((21664 + 16|0))>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = (($R$1) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = (($93) + 24|0);
      HEAP32[$98>>2] = $R$1;
      $$0 = $9;$$02 = $10;
      break;
     }
    }
   }
  } else {
   $$0 = $p;$$02 = $psize;
  }
 } while(0);
 $106 = HEAP32[((21664 + 16|0))>>2]|0;
 $107 = ($0>>>0)<($106>>>0);
 if ($107) {
  _abort();
  // unreachable;
 }
 $$sum1 = (($psize) + 4)|0;
 $108 = (($p) + ($$sum1)|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = $109 & 2;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = HEAP32[((21664 + 24|0))>>2]|0;
  $113 = ($0|0)==($112|0);
  if ($113) {
   $114 = HEAP32[((21664 + 12|0))>>2]|0;
   $115 = (($114) + ($$02))|0;
   HEAP32[((21664 + 12|0))>>2] = $115;
   HEAP32[((21664 + 24|0))>>2] = $$0;
   $116 = $115 | 1;
   $117 = (($$0) + 4|0);
   HEAP32[$117>>2] = $116;
   $118 = HEAP32[((21664 + 20|0))>>2]|0;
   $119 = ($$0|0)==($118|0);
   if (!($119)) {
    STACKTOP = sp;return;
   }
   HEAP32[((21664 + 20|0))>>2] = 0;
   HEAP32[((21664 + 8|0))>>2] = 0;
   STACKTOP = sp;return;
  }
  $120 = HEAP32[((21664 + 20|0))>>2]|0;
  $121 = ($0|0)==($120|0);
  if ($121) {
   $122 = HEAP32[((21664 + 8|0))>>2]|0;
   $123 = (($122) + ($$02))|0;
   HEAP32[((21664 + 8|0))>>2] = $123;
   HEAP32[((21664 + 20|0))>>2] = $$0;
   $124 = $123 | 1;
   $125 = (($$0) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = (($$0) + ($123)|0);
   HEAP32[$126>>2] = $123;
   STACKTOP = sp;return;
  }
  $127 = $109 & -8;
  $128 = (($127) + ($$02))|0;
  $129 = $109 >>> 3;
  $130 = ($109>>>0)<(256);
  do {
   if ($130) {
    $$sum18 = (($psize) + 8)|0;
    $131 = (($p) + ($$sum18)|0);
    $132 = HEAP32[$131>>2]|0;
    $$sum19 = (($psize) + 12)|0;
    $133 = (($p) + ($$sum19)|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = $129 << 1;
    $136 = ((21664 + ($135<<2)|0) + 40|0);
    $137 = ($132|0)==($136|0);
    if (!($137)) {
     $138 = ($132>>>0)<($106>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = (($132) + 12|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($0|0);
     if (!($141)) {
      _abort();
      // unreachable;
     }
    }
    $142 = ($134|0)==($132|0);
    if ($142) {
     $143 = 1 << $129;
     $144 = $143 ^ -1;
     $145 = HEAP32[21664>>2]|0;
     $146 = $145 & $144;
     HEAP32[21664>>2] = $146;
     break;
    }
    $147 = ($134|0)==($136|0);
    if ($147) {
     $$pre56 = (($134) + 8|0);
     $$pre$phi57Z2D = $$pre56;
    } else {
     $148 = ($134>>>0)<($106>>>0);
     if ($148) {
      _abort();
      // unreachable;
     }
     $149 = (($134) + 8|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($0|0);
     if ($151) {
      $$pre$phi57Z2D = $149;
     } else {
      _abort();
      // unreachable;
     }
    }
    $152 = (($132) + 12|0);
    HEAP32[$152>>2] = $134;
    HEAP32[$$pre$phi57Z2D>>2] = $132;
   } else {
    $$sum2 = (($psize) + 24)|0;
    $153 = (($p) + ($$sum2)|0);
    $154 = HEAP32[$153>>2]|0;
    $$sum3 = (($psize) + 12)|0;
    $155 = (($p) + ($$sum3)|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==($0|0);
    do {
     if ($157) {
      $$sum5 = (($psize) + 20)|0;
      $167 = (($p) + ($$sum5)|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==(0|0);
      if ($169) {
       $$sum4 = (($psize) + 16)|0;
       $170 = (($p) + ($$sum4)|0);
       $171 = HEAP32[$170>>2]|0;
       $172 = ($171|0)==(0|0);
       if ($172) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $171;$RP9$0 = $170;
       }
      } else {
       $R7$0 = $168;$RP9$0 = $167;
      }
      while(1) {
       $173 = (($R7$0) + 20|0);
       $174 = HEAP32[$173>>2]|0;
       $175 = ($174|0)==(0|0);
       if (!($175)) {
        $R7$0 = $174;$RP9$0 = $173;
        continue;
       }
       $176 = (($R7$0) + 16|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if ($178) {
        break;
       } else {
        $R7$0 = $177;$RP9$0 = $176;
       }
      }
      $179 = ($RP9$0>>>0)<($106>>>0);
      if ($179) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$0>>2] = 0;
       $R7$1 = $R7$0;
       break;
      }
     } else {
      $$sum17 = (($psize) + 8)|0;
      $158 = (($p) + ($$sum17)|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = ($159>>>0)<($106>>>0);
      if ($160) {
       _abort();
       // unreachable;
      }
      $161 = (($159) + 12|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162|0)==($0|0);
      if (!($163)) {
       _abort();
       // unreachable;
      }
      $164 = (($156) + 8|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($0|0);
      if ($166) {
       HEAP32[$161>>2] = $156;
       HEAP32[$164>>2] = $159;
       $R7$1 = $156;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $180 = ($154|0)==(0|0);
    if (!($180)) {
     $$sum14 = (($psize) + 28)|0;
     $181 = (($p) + ($$sum14)|0);
     $182 = HEAP32[$181>>2]|0;
     $183 = ((21664 + ($182<<2)|0) + 304|0);
     $184 = HEAP32[$183>>2]|0;
     $185 = ($0|0)==($184|0);
     if ($185) {
      HEAP32[$183>>2] = $R7$1;
      $cond46 = ($R7$1|0)==(0|0);
      if ($cond46) {
       $186 = 1 << $182;
       $187 = $186 ^ -1;
       $188 = HEAP32[((21664 + 4|0))>>2]|0;
       $189 = $188 & $187;
       HEAP32[((21664 + 4|0))>>2] = $189;
       break;
      }
     } else {
      $190 = HEAP32[((21664 + 16|0))>>2]|0;
      $191 = ($154>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      }
      $192 = (($154) + 16|0);
      $193 = HEAP32[$192>>2]|0;
      $194 = ($193|0)==($0|0);
      if ($194) {
       HEAP32[$192>>2] = $R7$1;
      } else {
       $195 = (($154) + 20|0);
       HEAP32[$195>>2] = $R7$1;
      }
      $196 = ($R7$1|0)==(0|0);
      if ($196) {
       break;
      }
     }
     $197 = HEAP32[((21664 + 16|0))>>2]|0;
     $198 = ($R7$1>>>0)<($197>>>0);
     if ($198) {
      _abort();
      // unreachable;
     }
     $199 = (($R7$1) + 24|0);
     HEAP32[$199>>2] = $154;
     $$sum15 = (($psize) + 16)|0;
     $200 = (($p) + ($$sum15)|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(0|0);
     do {
      if (!($202)) {
       $203 = ($201>>>0)<($197>>>0);
       if ($203) {
        _abort();
        // unreachable;
       } else {
        $204 = (($R7$1) + 16|0);
        HEAP32[$204>>2] = $201;
        $205 = (($201) + 24|0);
        HEAP32[$205>>2] = $R7$1;
        break;
       }
      }
     } while(0);
     $$sum16 = (($psize) + 20)|0;
     $206 = (($p) + ($$sum16)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = ($207|0)==(0|0);
     if (!($208)) {
      $209 = HEAP32[((21664 + 16|0))>>2]|0;
      $210 = ($207>>>0)<($209>>>0);
      if ($210) {
       _abort();
       // unreachable;
      } else {
       $211 = (($R7$1) + 20|0);
       HEAP32[$211>>2] = $207;
       $212 = (($207) + 24|0);
       HEAP32[$212>>2] = $R7$1;
       break;
      }
     }
    }
   }
  } while(0);
  $213 = $128 | 1;
  $214 = (($$0) + 4|0);
  HEAP32[$214>>2] = $213;
  $215 = (($$0) + ($128)|0);
  HEAP32[$215>>2] = $128;
  $216 = HEAP32[((21664 + 20|0))>>2]|0;
  $217 = ($$0|0)==($216|0);
  if ($217) {
   HEAP32[((21664 + 8|0))>>2] = $128;
   STACKTOP = sp;return;
  } else {
   $$1 = $128;
  }
 } else {
  $218 = $109 & -2;
  HEAP32[$108>>2] = $218;
  $219 = $$02 | 1;
  $220 = (($$0) + 4|0);
  HEAP32[$220>>2] = $219;
  $221 = (($$0) + ($$02)|0);
  HEAP32[$221>>2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 $223 = ($$1>>>0)<(256);
 if ($223) {
  $224 = $222 << 1;
  $225 = ((21664 + ($224<<2)|0) + 40|0);
  $226 = HEAP32[21664>>2]|0;
  $227 = 1 << $222;
  $228 = $226 & $227;
  $229 = ($228|0)==(0);
  if ($229) {
   $230 = $226 | $227;
   HEAP32[21664>>2] = $230;
   $$sum12$pre = (($224) + 2)|0;
   $$pre = ((21664 + ($$sum12$pre<<2)|0) + 40|0);
   $$pre$phiZ2D = $$pre;$F16$0 = $225;
  } else {
   $$sum13 = (($224) + 2)|0;
   $231 = ((21664 + ($$sum13<<2)|0) + 40|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = HEAP32[((21664 + 16|0))>>2]|0;
   $234 = ($232>>>0)<($233>>>0);
   if ($234) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $231;$F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$0;
  $235 = (($F16$0) + 12|0);
  HEAP32[$235>>2] = $$0;
  $236 = (($$0) + 8|0);
  HEAP32[$236>>2] = $F16$0;
  $237 = (($$0) + 12|0);
  HEAP32[$237>>2] = $225;
  STACKTOP = sp;return;
 }
 $238 = $$1 >>> 8;
 $239 = ($238|0)==(0);
 if ($239) {
  $I19$0 = 0;
 } else {
  $240 = ($$1>>>0)>(16777215);
  if ($240) {
   $I19$0 = 31;
  } else {
   $241 = (($238) + 1048320)|0;
   $242 = $241 >>> 16;
   $243 = $242 & 8;
   $244 = $238 << $243;
   $245 = (($244) + 520192)|0;
   $246 = $245 >>> 16;
   $247 = $246 & 4;
   $248 = $247 | $243;
   $249 = $244 << $247;
   $250 = (($249) + 245760)|0;
   $251 = $250 >>> 16;
   $252 = $251 & 2;
   $253 = $248 | $252;
   $254 = (14 - ($253))|0;
   $255 = $249 << $252;
   $256 = $255 >>> 15;
   $257 = (($254) + ($256))|0;
   $258 = $257 << 1;
   $259 = (($257) + 7)|0;
   $260 = $$1 >>> $259;
   $261 = $260 & 1;
   $262 = $261 | $258;
   $I19$0 = $262;
  }
 }
 $263 = ((21664 + ($I19$0<<2)|0) + 304|0);
 $264 = (($$0) + 28|0);
 $I19$0$c = $I19$0;
 HEAP32[$264>>2] = $I19$0$c;
 $265 = (($$0) + 20|0);
 HEAP32[$265>>2] = 0;
 $266 = (($$0) + 16|0);
 HEAP32[$266>>2] = 0;
 $267 = HEAP32[((21664 + 4|0))>>2]|0;
 $268 = 1 << $I19$0;
 $269 = $267 & $268;
 $270 = ($269|0)==(0);
 if ($270) {
  $271 = $267 | $268;
  HEAP32[((21664 + 4|0))>>2] = $271;
  HEAP32[$263>>2] = $$0;
  $272 = (($$0) + 24|0);
  HEAP32[$272>>2] = $263;
  $273 = (($$0) + 12|0);
  HEAP32[$273>>2] = $$0;
  $274 = (($$0) + 8|0);
  HEAP32[$274>>2] = $$0;
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$263>>2]|0;
 $276 = ($I19$0|0)==(31);
 if ($276) {
  $284 = 0;
 } else {
  $277 = $I19$0 >>> 1;
  $278 = (25 - ($277))|0;
  $284 = $278;
 }
 $279 = (($275) + 4|0);
 $280 = HEAP32[$279>>2]|0;
 $281 = $280 & -8;
 $282 = ($281|0)==($$1|0);
 L194: do {
  if ($282) {
   $T$0$lcssa = $275;
  } else {
   $283 = $$1 << $284;
   $K20$050 = $283;$T$049 = $275;
   while(1) {
    $291 = $K20$050 >>> 31;
    $292 = ((($T$049) + ($291<<2)|0) + 16|0);
    $287 = HEAP32[$292>>2]|0;
    $293 = ($287|0)==(0|0);
    if ($293) {
     break;
    }
    $285 = $K20$050 << 1;
    $286 = (($287) + 4|0);
    $288 = HEAP32[$286>>2]|0;
    $289 = $288 & -8;
    $290 = ($289|0)==($$1|0);
    if ($290) {
     $T$0$lcssa = $287;
     break L194;
    } else {
     $K20$050 = $285;$T$049 = $287;
    }
   }
   $294 = HEAP32[((21664 + 16|0))>>2]|0;
   $295 = ($292>>>0)<($294>>>0);
   if ($295) {
    _abort();
    // unreachable;
   }
   HEAP32[$292>>2] = $$0;
   $296 = (($$0) + 24|0);
   HEAP32[$296>>2] = $T$049;
   $297 = (($$0) + 12|0);
   HEAP32[$297>>2] = $$0;
   $298 = (($$0) + 8|0);
   HEAP32[$298>>2] = $$0;
   STACKTOP = sp;return;
  }
 } while(0);
 $299 = (($T$0$lcssa) + 8|0);
 $300 = HEAP32[$299>>2]|0;
 $301 = HEAP32[((21664 + 16|0))>>2]|0;
 $302 = ($T$0$lcssa>>>0)>=($301>>>0);
 $303 = ($300>>>0)>=($301>>>0);
 $or$cond = $302 & $303;
 if (!($or$cond)) {
  _abort();
  // unreachable;
 }
 $304 = (($300) + 12|0);
 HEAP32[$304>>2] = $$0;
 HEAP32[$299>>2] = $$0;
 $305 = (($$0) + 8|0);
 HEAP32[$305>>2] = $300;
 $306 = (($$0) + 12|0);
 HEAP32[$306>>2] = $T$0$lcssa;
 $307 = (($$0) + 24|0);
 HEAP32[$307>>2] = 0;
 STACKTOP = sp;return;
}
function _scanexp($f,$pok) {
 $f = $f|0;
 $pok = $pok|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0;
 var $c$116 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$29 = 0, $c$3$be = 0, $neg$0 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$017 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($f) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = (($f) + 100|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)<($3>>>0);
 if ($4) {
  $5 = (($1) + 1|0);
  HEAP32[$0>>2] = $5;
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $10 = $7;
 } else {
  $8 = (___shgetc($f)|0);
  $10 = $8;
 }
 $9 = ($10|0)==(45);
 if ((($10|0) == 43) | (($10|0) == 45)) {
  $11 = HEAP32[$0>>2]|0;
  $12 = $9&1;
  $13 = HEAP32[$2>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = (($11) + 1|0);
   HEAP32[$0>>2] = $15;
   $16 = HEAP8[$11>>0]|0;
   $17 = $16&255;
   $20 = $17;
  } else {
   $18 = (___shgetc($f)|0);
   $20 = $18;
  }
  $19 = (($20) + -48)|0;
  $21 = ($19>>>0)>(9);
  $22 = ($pok|0)!=(0);
  $or$cond3 = $21 & $22;
  if ($or$cond3) {
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23|0)==(0|0);
   if ($24) {
    $c$0 = $20;$neg$0 = $12;
   } else {
    $25 = HEAP32[$0>>2]|0;
    $26 = (($25) + -1|0);
    HEAP32[$0>>2] = $26;
    $c$0 = $20;$neg$0 = $12;
   }
  } else {
   $c$0 = $20;$neg$0 = $12;
  }
 } else {
  $c$0 = $10;$neg$0 = 0;
 }
 $27 = (($c$0) + -48)|0;
 $28 = ($27>>>0)>(9);
 if ($28) {
  $29 = HEAP32[$2>>2]|0;
  $30 = ($29|0)==(0|0);
  if ($30) {
   $96 = -2147483648;$97 = 0;
   tempRet0 = $96;
   STACKTOP = sp;return ($97|0);
  }
  $31 = HEAP32[$0>>2]|0;
  $32 = (($31) + -1|0);
  HEAP32[$0>>2] = $32;
  $96 = -2147483648;$97 = 0;
  tempRet0 = $96;
  STACKTOP = sp;return ($97|0);
 } else {
  $c$116 = $c$0;$x$017 = 0;
 }
 while(1) {
  $33 = ($x$017*10)|0;
  $34 = (($c$116) + -48)|0;
  $35 = (($34) + ($33))|0;
  $36 = HEAP32[$0>>2]|0;
  $37 = HEAP32[$2>>2]|0;
  $38 = ($36>>>0)<($37>>>0);
  if ($38) {
   $39 = (($36) + 1|0);
   HEAP32[$0>>2] = $39;
   $40 = HEAP8[$36>>0]|0;
   $41 = $40&255;
   $c$1$be = $41;
  } else {
   $42 = (___shgetc($f)|0);
   $c$1$be = $42;
  }
  $43 = (($c$1$be) + -48)|0;
  $44 = ($43>>>0)<(10);
  $45 = ($35|0)<(214748364);
  $or$cond5 = $44 & $45;
  if ($or$cond5) {
   $c$116 = $c$1$be;$x$017 = $35;
  } else {
   break;
  }
 }
 $46 = ($35|0)<(0);
 $47 = $46 << 31 >> 31;
 $48 = (($c$1$be) + -48)|0;
 $49 = ($48>>>0)<(10);
 if ($49) {
  $52 = $35;$53 = $47;$c$29 = $c$1$be;
  while(1) {
   $54 = (___muldi3(($52|0),($53|0),10,0)|0);
   $55 = tempRet0;
   $56 = ($c$29|0)<(0);
   $57 = $56 << 31 >> 31;
   $58 = (_i64Add(($c$29|0),($57|0),-48,-1)|0);
   $59 = tempRet0;
   $60 = (_i64Add(($58|0),($59|0),($54|0),($55|0))|0);
   $61 = tempRet0;
   $62 = HEAP32[$0>>2]|0;
   $63 = HEAP32[$2>>2]|0;
   $64 = ($62>>>0)<($63>>>0);
   if ($64) {
    $65 = (($62) + 1|0);
    HEAP32[$0>>2] = $65;
    $66 = HEAP8[$62>>0]|0;
    $67 = $66&255;
    $c$2$be = $67;
   } else {
    $68 = (___shgetc($f)|0);
    $c$2$be = $68;
   }
   $69 = (($c$2$be) + -48)|0;
   $70 = ($69>>>0)<(10);
   $71 = ($61|0)<(21474836);
   $72 = ($60>>>0)<(2061584302);
   $73 = ($61|0)==(21474836);
   $74 = $73 & $72;
   $75 = $71 | $74;
   $or$cond7 = $70 & $75;
   if ($or$cond7) {
    $52 = $60;$53 = $61;$c$29 = $c$2$be;
   } else {
    $90 = $60;$91 = $61;$c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $35;$91 = $47;$c$2$lcssa = $c$1$be;
 }
 $50 = (($c$2$lcssa) + -48)|0;
 $51 = ($50>>>0)<(10);
 if ($51) {
  while(1) {
   $76 = HEAP32[$0>>2]|0;
   $77 = HEAP32[$2>>2]|0;
   $78 = ($76>>>0)<($77>>>0);
   if ($78) {
    $79 = (($76) + 1|0);
    HEAP32[$0>>2] = $79;
    $80 = HEAP8[$76>>0]|0;
    $81 = $80&255;
    $c$3$be = $81;
   } else {
    $82 = (___shgetc($f)|0);
    $c$3$be = $82;
   }
   $83 = (($c$3$be) + -48)|0;
   $84 = ($83>>>0)<(10);
   if (!($84)) {
    break;
   }
  }
 }
 $85 = HEAP32[$2>>2]|0;
 $86 = ($85|0)==(0|0);
 if (!($86)) {
  $87 = HEAP32[$0>>2]|0;
  $88 = (($87) + -1|0);
  HEAP32[$0>>2] = $88;
 }
 $89 = ($neg$0|0)!=(0);
 $92 = (_i64Subtract(0,0,($90|0),($91|0))|0);
 $93 = tempRet0;
 $94 = $89 ? $92 : $90;
 $95 = $89 ? $93 : $91;
 $96 = $95;$97 = $94;
 tempRet0 = $96;
 STACKTOP = sp;return ($97|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$5$i = 0, $$$i = 0, $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i102$i = 0, $$0$lcssa$i109$i = 0, $$0$lcssa$i133$i = 0, $$0$lcssa$i148$i = 0, $$0$lcssa$i40 = 0, $$0$lcssa$i44$i = 0, $$0$lcssa$i45 = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i51$i = 0, $$0$lcssa$i53$i = 0, $$0$lcssa$i55 = 0, $$0$lcssa$i61$i = 0, $$0$lcssa$i62 = 0;
 var $$0$lcssa$i68$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i74$i = 0, $$0$lcssa$i79 = 0, $$0$lcssa$i81$i = 0, $$0$lcssa$i89$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i100$i = 0, $$01$i107$i = 0, $$01$i131$i = 0, $$01$i146$i = 0, $$01$i38 = 0, $$01$i42$i = 0, $$01$i49$i = 0, $$01$i53 = 0, $$01$i59$i = 0, $$01$i60 = 0, $$01$i66$i = 0, $$01$i67 = 0;
 var $$01$i72$i = 0, $$01$i77 = 0, $$01$i79$i = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i90$i = 0, $$010$i = 0.0, $$012$i = 0, $$016$i = 0, $$03$i42 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i84$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i117$i = 0, $$117$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i115$i = 0;
 var $$12$i124$i = 0, $$12$i139$i = 0, $$12$i92$i = 0, $$15 = 0, $$19 = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$20 = 0, $$213$$26$i = 0, $$213$$28$i = 0, $$213$i = 0, $$23$i = 0, $$23$us$i = 0, $$24$i = 0, $$25$i = 0.0, $$26$i = 0, $$28$i = 0, $$3$i = 0.0, $$314$i = 0;
 var $$36$i = 0, $$4$i = 0.0, $$415$lcssa$i = 0, $$415171$i = 0, $$5189$i = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us307$i = 0, $$a$3$us308$i = 0, $$a$3309$i = 0, $$a$3310$i = 0, $$fl$4 = 0, $$lcssa292$i = 0, $$mask$i = 0, $$mask$i32 = 0, $$mask1$i = 0, $$mask1$i31 = 0, $$neg156$i = 0, $$neg157$i = 0, $$not$i = 0;
 var $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr151$i = 0, $$pre = 0, $$pre$i = 0, $$pre260 = 0, $$pre261 = 0, $$pre306$i = 0, $$sum$i = 0, $$sum18$i = 0, $$sum19$i = 0, $$z$3$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0;
 var $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0;
 var $1019 = 0, $102 = 0, $1020 = 0.0, $1021 = 0.0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $1029$phi = 0, $103 = 0, $1030 = 0, $1030$phi = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0.0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0.0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0.0, $396 = 0.0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0.0, $415 = 0.0, $416 = 0.0, $417 = 0.0, $418 = 0.0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0.0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0.0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0.0, $562 = 0.0, $563 = 0.0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0.0, $7 = 0, $70 = 0, $700 = 0.0, $701 = 0, $702 = 0.0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0;
 var $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0;
 var $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0;
 var $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0;
 var $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0;
 var $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0;
 var $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0;
 var $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1258$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3244$i = 0, $a$3244$us$i = 0, $a$5$lcssa$i = 0, $a$5218$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0;
 var $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0;
 var $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next30 = 0, $arglist_next33 = 0, $arglist_next36 = 0, $arglist_next39 = 0, $arglist_next42 = 0, $arglist_next45 = 0, $arglist_next48 = 0, $arglist_next51 = 0, $arglist_next54 = 0, $arglist_next57 = 0, $arglist_next6 = 0, $arglist_next60 = 0, $arglist_next63 = 0, $arglist_next9 = 0, $argpos$0 = 0, $big$i = 0;
 var $buf = 0, $buf$i = 0, $carry$0250$i = 0, $carry3$0238$i = 0, $carry3$0238$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $d$0$i = 0, $d$0249$i = 0, $d$0251$i = 0, $d$1237$i = 0, $d$1237$us$i = 0, $d$2$lcssa$i = 0, $d$2217$i = 0, $d$3$i = 0, $d$4180$i = 0, $d$5170$i = 0, $d$6188$i = 0, $e$0233$i = 0, $e$1$i = 0;
 var $e$2213$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $fl$0113 = 0, $fl$0118 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $fmt81$lcssa = 0, $fmt81102 = 0;
 var $fmt82 = 0, $fmt83 = 0, $fmt84 = 0, $fmt86 = 0, $fmt87 = 0, $i$0$lcssa = 0, $i$0$lcssa267 = 0, $i$0166 = 0, $i$0232$i = 0, $i$03$i = 0, $i$03$i24 = 0, $i$1$lcssa$i = 0, $i$1174 = 0, $i$1225$i = 0, $i$2100 = 0, $i$2212$i = 0, $i$3204$i = 0, $i$397 = 0, $isdigit = 0, $isdigit$i = 0;
 var $isdigit$i26 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigit4 = 0, $isdigit6 = 0, $isdigittmp = 0, $isdigittmp$i = 0, $isdigittmp$i25 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp3 = 0, $isdigittmp5 = 0, $j$0$i = 0, $j$0224$i = 0, $j$0226$i = 0, $j$1205$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0;
 var $l$1165 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$us$us$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i105$i = 0, $or$cond$i40$i = 0, $or$cond$i47$i = 0, $or$cond$i51 = 0, $or$cond$i57$i = 0, $or$cond$i58 = 0, $or$cond$i64$i = 0;
 var $or$cond$i65 = 0, $or$cond$i73 = 0, $or$cond$i75 = 0, $or$cond$i77$i = 0, $or$cond$i98$i = 0, $or$cond13 = 0, $or$cond17 = 0, $or$cond271 = 0, $or$cond32$i = 0, $or$cond34$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond7169$i = 0, $or$cond9 = 0, $or$cond9$i = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$4266 = 0;
 var $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1163$i = 0, $round$0162$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0;
 var $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0177$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0165$i = 0, $s9$0$i = 0, $s9$1184$i = 0, $s9$2$i = 0, $sext = 0, $sext93 = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $storemerge = 0, $storemerge2111 = 0, $storemerge2117 = 0;
 var $storemerge7 = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$22$i = 0, $w$35$i = 0, $wc = 0, $ws$0167 = 0, $ws$1175 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i114$i = 0, $y$03$i123$i = 0, $y$03$i138$i = 0, $y$03$i91$i = 0, $z$0$i = 0, $z$0$lcssa = 0;
 var $z$0103 = 0, $z$1$lcssa$i = 0, $z$1257$i = 0, $z$2 = 0, $z$2$i = 0, $z$3$lcssa$i = 0, $z$3243$i = 0, $z$3243$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 16|0;
 $e2$i = sp + 8|0;
 $buf$i = sp + 560|0;
 $0 = $buf$i;
 $ebuf0$i = sp + 840|0;
 $pad$i = sp + 584|0;
 $buf = sp + 520|0;
 $wc = sp;
 $mb = sp + 852|0;
 $1 = ($f|0)!=(0|0);
 $2 = (($buf) + 40|0);
 $3 = $2;
 $4 = (($buf) + 39|0);
 $5 = (($wc) + 4|0);
 $6 = $wc;
 $7 = (($ebuf0$i) + 12|0);
 $8 = (($ebuf0$i) + 11|0);
 $9 = $7;
 $10 = (($9) - ($0))|0;
 $11 = (-2 - ($0))|0;
 $12 = (($9) + 2)|0;
 $13 = (($big$i) + 288|0);
 $14 = (($buf$i) + 9|0);
 $15 = $14;
 $16 = (($buf$i) + 8|0);
 $1029 = 0;$1030 = 0;$cnt$0 = 0;$fmt83 = $fmt;$l$0 = 0;$l10n$0 = 0;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$fmt83>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   label = 352;
   break;
  } else {
   $1031 = $22;$fmt82 = $fmt83;
  }
  while(1) {
   if ((($1031<<24>>24) == 0)) {
    $fmt81$lcssa = $fmt82;$z$0$lcssa = $fmt82;
    break;
   } else if ((($1031<<24>>24) == 37)) {
    $fmt81102 = $fmt82;$z$0103 = $fmt82;
    label = 9;
    break;
   }
   $24 = (($fmt82) + 1|0);
   $$pre = HEAP8[$24>>0]|0;
   $1031 = $$pre;$fmt82 = $24;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $25 = (($fmt81102) + 1|0);
     $26 = HEAP8[$25>>0]|0;
     $27 = ($26<<24>>24)==(37);
     if (!($27)) {
      $fmt81$lcssa = $fmt81102;$z$0$lcssa = $z$0103;
      break L12;
     }
     $28 = (($z$0103) + 1|0);
     $29 = (($fmt81102) + 2|0);
     $30 = HEAP8[$29>>0]|0;
     $31 = ($30<<24>>24)==(37);
     if ($31) {
      $fmt81102 = $29;$z$0103 = $28;
      label = 9;
     } else {
      $fmt81$lcssa = $29;$z$0$lcssa = $28;
      break;
     }
    }
   }
  } while(0);
  $32 = $z$0$lcssa;
  $33 = $fmt83;
  $34 = (($32) - ($33))|0;
  if ($1) {
   (___fwritex($fmt83,$34,$f)|0);
  }
  $35 = ($z$0$lcssa|0)==($fmt83|0);
  if (!($35)) {
   $l10n$0$phi = $l10n$0;$1030$phi = $1030;$1029$phi = $1029;$cnt$0 = $cnt$1;$fmt83 = $fmt81$lcssa;$l$0 = $34;$l10n$0 = $l10n$0$phi;$1030 = $1030$phi;$1029 = $1029$phi;
   continue;
  }
  $36 = (($fmt81$lcssa) + 1|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $isdigittmp = (($38) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $39 = (($fmt81$lcssa) + 2|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = ($40<<24>>24)==(36);
   if ($41) {
    $42 = (($fmt81$lcssa) + 3|0);
    $$pre260 = HEAP8[$42>>0]|0;
    $44 = $$pre260;$argpos$0 = $isdigittmp;$l10n$1 = 1;$storemerge = $42;
   } else {
    $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
   }
  } else {
   $44 = $37;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $36;
  }
  $43 = $44 << 24 >> 24;
  $45 = $43 & -32;
  $46 = ($45|0)==(32);
  L25: do {
   if ($46) {
    $$pr = $44;$48 = $43;$fl$0118 = 0;$storemerge2117 = $storemerge;
    while(1) {
     $47 = (($48) + -32)|0;
     $49 = 1 << $47;
     $50 = $49 & 75913;
     $51 = ($50|0)==(0);
     if ($51) {
      $59 = $$pr;$fl$0113 = $fl$0118;$storemerge2111 = $storemerge2117;
      break L25;
     }
     $52 = $49 | $fl$0118;
     $53 = (($storemerge2117) + 1|0);
     $54 = HEAP8[$53>>0]|0;
     $55 = $54 << 24 >> 24;
     $56 = $55 & -32;
     $57 = ($56|0)==(32);
     if ($57) {
      $$pr = $54;$48 = $55;$fl$0118 = $52;$storemerge2117 = $53;
     } else {
      $59 = $54;$fl$0113 = $52;$storemerge2111 = $53;
      break;
     }
    }
   } else {
    $59 = $44;$fl$0113 = 0;$storemerge2111 = $storemerge;
   }
  } while(0);
  $58 = ($59<<24>>24)==(42);
  do {
   if ($58) {
    $60 = (($storemerge2111) + 1|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $isdigittmp5 = (($62) + -48)|0;
    $isdigit6 = ($isdigittmp5>>>0)<(10);
    if ($isdigit6) {
     $63 = (($storemerge2111) + 2|0);
     $64 = HEAP8[$63>>0]|0;
     $65 = ($64<<24>>24)==(36);
     if ($65) {
      $66 = (($nl_type) + ($isdigittmp5<<2)|0);
      HEAP32[$66>>2] = 10;
      $67 = HEAP8[$60>>0]|0;
      $68 = $67 << 24 >> 24;
      $69 = (($68) + -48)|0;
      $70 = (($nl_arg) + ($69<<3)|0);
      $71 = $70;
      $72 = $71;
      $73 = HEAP32[$72>>2]|0;
      $74 = (($71) + 4)|0;
      $75 = $74;
      $76 = HEAP32[$75>>2]|0;
      $77 = (($storemerge2111) + 3|0);
      $l10n$2 = 1;$storemerge7 = $77;$w$0 = $73;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $78 = ($l10n$1|0)==(0);
     if (!($78)) {
      $$0 = -1;
      label = 370;
      break L1;
     }
     if (!($1)) {
      $fl$1 = $fl$0113;$fmt84 = $60;$l10n$3 = 0;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $79 = HEAP32[$arglist_current>>2]|0;
     $arglist_next = (($arglist_current) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge7 = $60;$w$0 = $79;
    }
    $80 = ($w$0|0)<(0);
    if ($80) {
     $81 = $fl$0113 | 8192;
     $82 = (0 - ($w$0))|0;
     $fl$1 = $81;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $82;
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge7;$l10n$3 = $l10n$2;$w$1 = $w$0;
    }
   } else {
    $83 = $59 << 24 >> 24;
    $isdigittmp1$i = (($83) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $86 = $83;$89 = $storemerge2111;$i$03$i = 0;
     while(1) {
      $84 = ($i$03$i*10)|0;
      $85 = (($86) + -48)|0;
      $87 = (($85) + ($84))|0;
      $88 = (($89) + 1|0);
      $90 = HEAP8[$88>>0]|0;
      $91 = $90 << 24 >> 24;
      $isdigittmp$i = (($91) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $86 = $91;$89 = $88;$i$03$i = $87;
      } else {
       break;
      }
     }
     $92 = ($87|0)<(0);
     if ($92) {
      $$0 = -1;
      label = 370;
      break L1;
     } else {
      $fl$1 = $fl$0113;$fmt84 = $88;$l10n$3 = $l10n$1;$w$1 = $87;
     }
    } else {
     $fl$1 = $fl$0113;$fmt84 = $storemerge2111;$l10n$3 = $l10n$1;$w$1 = 0;
    }
   }
  } while(0);
  $93 = HEAP8[$fmt84>>0]|0;
  $94 = ($93<<24>>24)==(46);
  L46: do {
   if ($94) {
    $95 = (($fmt84) + 1|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = ($96<<24>>24)==(42);
    if (!($97)) {
     $118 = $96 << 24 >> 24;
     $isdigittmp1$i22 = (($118) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $121 = $118;$124 = $95;$i$03$i24 = 0;
     } else {
      $fmt87 = $95;$p$0 = 0;
      break;
     }
     while(1) {
      $119 = ($i$03$i24*10)|0;
      $120 = (($121) + -48)|0;
      $122 = (($120) + ($119))|0;
      $123 = (($124) + 1|0);
      $125 = HEAP8[$123>>0]|0;
      $126 = $125 << 24 >> 24;
      $isdigittmp$i25 = (($126) + -48)|0;
      $isdigit$i26 = ($isdigittmp$i25>>>0)<(10);
      if ($isdigit$i26) {
       $121 = $126;$124 = $123;$i$03$i24 = $122;
      } else {
       $fmt87 = $123;$p$0 = $122;
       break L46;
      }
     }
    }
    $98 = (($fmt84) + 2|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99 << 24 >> 24;
    $isdigittmp3 = (($100) + -48)|0;
    $isdigit4 = ($isdigittmp3>>>0)<(10);
    if ($isdigit4) {
     $101 = (($fmt84) + 3|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ($102<<24>>24)==(36);
     if ($103) {
      $104 = (($nl_type) + ($isdigittmp3<<2)|0);
      HEAP32[$104>>2] = 10;
      $105 = HEAP8[$98>>0]|0;
      $106 = $105 << 24 >> 24;
      $107 = (($106) + -48)|0;
      $108 = (($nl_arg) + ($107<<3)|0);
      $109 = $108;
      $110 = $109;
      $111 = HEAP32[$110>>2]|0;
      $112 = (($109) + 4)|0;
      $113 = $112;
      $114 = HEAP32[$113>>2]|0;
      $115 = (($fmt84) + 4|0);
      $fmt87 = $115;$p$0 = $111;
      break;
     }
    }
    $116 = ($l10n$3|0)==(0);
    if (!($116)) {
     $$0 = -1;
     label = 370;
     break L1;
    }
    if ($1) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $117 = HEAP32[$arglist_current2>>2]|0;
     $arglist_next3 = (($arglist_current2) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $fmt87 = $98;$p$0 = $117;
    } else {
     $fmt87 = $98;$p$0 = 0;
    }
   } else {
    $fmt87 = $fmt84;$p$0 = -1;
   }
  } while(0);
  $fmt86 = $fmt87;$st$0 = 0;
  while(1) {
   $127 = HEAP8[$fmt86>>0]|0;
   $128 = $127 << 24 >> 24;
   $129 = (($128) + -65)|0;
   $130 = ($129>>>0)>(57);
   if ($130) {
    $$0 = -1;
    label = 370;
    break L1;
   }
   $131 = (($fmt86) + 1|0);
   $132 = ((22504 + (($st$0*58)|0)|0) + ($129)|0);
   $133 = HEAP8[$132>>0]|0;
   $134 = $133&255;
   $135 = (($134) + -1)|0;
   $136 = ($135>>>0)<(8);
   if ($136) {
    $fmt86 = $131;$st$0 = $134;
   } else {
    break;
   }
  }
  $137 = ($133<<24>>24)==(0);
  if ($137) {
   $$0 = -1;
   label = 370;
   break;
  }
  $138 = ($133<<24>>24)==(19);
  $139 = ($argpos$0|0)>(-1);
  L65: do {
   if ($138) {
    if ($139) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1032 = $1029;$1033 = $1030;
     label = 63;
    }
   } else {
    if ($139) {
     $140 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$140>>2] = $134;
     $141 = (($nl_arg) + ($argpos$0<<3)|0);
     $142 = $141;
     $143 = $142;
     $144 = HEAP32[$143>>2]|0;
     $145 = (($142) + 4)|0;
     $146 = $145;
     $147 = HEAP32[$146>>2]|0;
     $1032 = $144;$1033 = $147;
     label = 63;
     break;
    }
    if (!($1)) {
     $$0 = 0;
     label = 370;
     break L1;
    }
    $148 = ($133&255)>(20);
    if ($148) {
     $182 = $127;$191 = $1029;$218 = $1030;
    } else {
     do {
      switch ($134|0) {
      case 12:  {
       $arglist_current14 = HEAP32[$ap>>2]|0;
       $155 = $arglist_current14;
       $156 = $155;
       $157 = HEAP32[$156>>2]|0;
       $158 = (($155) + 4)|0;
       $159 = $158;
       $160 = HEAP32[$159>>2]|0;
       $arglist_next15 = (($arglist_current14) + 8|0);
       HEAP32[$ap>>2] = $arglist_next15;
       $1034 = $160;$1035 = $157;
       label = 64;
       break L65;
       break;
      }
      case 10:  {
       $arglist_current8 = HEAP32[$ap>>2]|0;
       $151 = HEAP32[$arglist_current8>>2]|0;
       $arglist_next9 = (($arglist_current8) + 4|0);
       HEAP32[$ap>>2] = $arglist_next9;
       $152 = ($151|0)<(0);
       $153 = $152 << 31 >> 31;
       $1034 = $153;$1035 = $151;
       label = 64;
       break L65;
       break;
      }
      case 16:  {
       $arglist_current26 = HEAP32[$ap>>2]|0;
       $174 = HEAP32[$arglist_current26>>2]|0;
       $arglist_next27 = (($arglist_current26) + 4|0);
       HEAP32[$ap>>2] = $arglist_next27;
       $$mask$i32 = $174 & 255;
       $1034 = 0;$1035 = $$mask$i32;
       label = 64;
       break L65;
       break;
      }
      case 9:  {
       $arglist_current5 = HEAP32[$ap>>2]|0;
       $149 = HEAP32[$arglist_current5>>2]|0;
       $arglist_next6 = (($arglist_current5) + 4|0);
       HEAP32[$ap>>2] = $arglist_next6;
       $150 = $149;
       $1034 = $1030;$1035 = $150;
       label = 64;
       break L65;
       break;
      }
      case 14:  {
       $arglist_current20 = HEAP32[$ap>>2]|0;
       $167 = HEAP32[$arglist_current20>>2]|0;
       $arglist_next21 = (($arglist_current20) + 4|0);
       HEAP32[$ap>>2] = $arglist_next21;
       $$mask1$i31 = $167 & 65535;
       $1034 = 0;$1035 = $$mask1$i31;
       label = 64;
       break L65;
       break;
      }
      case 11:  {
       $arglist_current11 = HEAP32[$ap>>2]|0;
       $154 = HEAP32[$arglist_current11>>2]|0;
       $arglist_next12 = (($arglist_current11) + 4|0);
       HEAP32[$ap>>2] = $arglist_next12;
       $1034 = 0;$1035 = $154;
       label = 64;
       break L65;
       break;
      }
      case 17:  {
       $arglist_current29 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current29>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current29+4>>2];$175 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next30 = (($arglist_current29) + 8|0);
       HEAP32[$ap>>2] = $arglist_next30;
       HEAPF64[tempDoublePtr>>3] = $175;$176 = HEAP32[tempDoublePtr>>2]|0;
       $177 = HEAP32[tempDoublePtr+4>>2]|0;
       $1034 = $177;$1035 = $176;
       label = 64;
       break L65;
       break;
      }
      case 18:  {
       $arglist_current32 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current32>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current32+4>>2];$178 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next33 = (($arglist_current32) + 8|0);
       HEAP32[$ap>>2] = $arglist_next33;
       HEAPF64[tempDoublePtr>>3] = $178;$179 = HEAP32[tempDoublePtr>>2]|0;
       $180 = HEAP32[tempDoublePtr+4>>2]|0;
       $1032 = $179;$1033 = $180;
       label = 63;
       break L65;
       break;
      }
      case 15:  {
       $arglist_current23 = HEAP32[$ap>>2]|0;
       $168 = HEAP32[$arglist_current23>>2]|0;
       $arglist_next24 = (($arglist_current23) + 4|0);
       HEAP32[$ap>>2] = $arglist_next24;
       $169 = $168&255;
       $170 = $169 << 24 >> 24;
       $171 = ($170|0)<(0);
       $172 = $171 << 31 >> 31;
       $sext = $168 << 24;
       $173 = $sext >> 24;
       $1034 = $172;$1035 = $173;
       label = 64;
       break L65;
       break;
      }
      case 13:  {
       $arglist_current17 = HEAP32[$ap>>2]|0;
       $161 = HEAP32[$arglist_current17>>2]|0;
       $arglist_next18 = (($arglist_current17) + 4|0);
       HEAP32[$ap>>2] = $arglist_next18;
       $162 = $161&65535;
       $163 = $162 << 16 >> 16;
       $164 = ($163|0)<(0);
       $165 = $164 << 31 >> 31;
       $sext93 = $161 << 16;
       $166 = $sext93 >> 16;
       $1034 = $165;$1035 = $166;
       label = 64;
       break L65;
       break;
      }
      default: {
       $1034 = $1030;$1035 = $1029;
       label = 64;
       break L65;
      }
      }
     } while(0);
    }
   }
  } while(0);
  if ((label|0) == 63) {
   label = 0;
   if ($1) {
    $1034 = $1033;$1035 = $1032;
    label = 64;
   } else {
    $1029 = $1032;$1030 = $1033;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label|0) == 64) {
   label = 0;
   $$pre261 = HEAP8[$fmt86>>0]|0;
   $182 = $$pre261;$191 = $1035;$218 = $1034;
  }
  $181 = $182 << 24 >> 24;
  $183 = ($st$0|0)!=(0);
  $184 = $181 & 15;
  $185 = ($184|0)==(3);
  $or$cond9 = $183 & $185;
  $186 = $181 & -33;
  $t$0 = $or$cond9 ? $186 : $181;
  $187 = $fl$1 & 8192;
  $188 = ($187|0)==(0);
  $189 = $fl$1 & -65537;
  $fl$1$ = $188 ? $fl$1 : $189;
  L89: do {
   switch ($t$0|0) {
   case 105: case 100:  {
    $255 = ($218|0)<(0);
    if ($255) {
     $256 = (_i64Subtract(0,0,($191|0),($218|0))|0);
     $257 = tempRet0;
     $263 = $257;$265 = $256;$pl$0 = 1;$prefix$0 = 22968;
     label = 86;
     break L89;
    }
    $258 = $fl$1$ & 2048;
    $259 = ($258|0)==(0);
    if ($259) {
     $260 = $fl$1$ & 1;
     $261 = ($260|0)==(0);
     $$ = $261 ? 22968 : ((22968 + 2|0));
     $263 = $218;$265 = $191;$pl$0 = $260;$prefix$0 = $$;
     label = 86;
    } else {
     $263 = $218;$265 = $191;$pl$0 = 1;$prefix$0 = ((22968 + 1|0));
     label = 86;
    }
    break;
   }
   case 117:  {
    $263 = $218;$265 = $191;$pl$0 = 0;$prefix$0 = 22968;
    label = 86;
    break;
   }
   case 109:  {
    $305 = (___errno_location()|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = (_strerror(($306|0))|0);
    $a$1 = $307;
    label = 96;
    break;
   }
   case 110:  {
    switch ($st$0|0) {
    case 3:  {
     $200 = $cnt$1&65535;
     $201 = $191;
     HEAP16[$201>>1] = $200;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 4:  {
     $202 = $cnt$1&255;
     $203 = $191;
     HEAP8[$203>>0] = $202;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 6:  {
     $204 = $191;
     HEAP32[$204>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 7:  {
     $205 = ($cnt$1|0)<(0);
     $206 = $205 << 31 >> 31;
     $207 = $191;
     $208 = $207;
     $209 = $208;
     HEAP32[$209>>2] = $cnt$1;
     $210 = (($208) + 4)|0;
     $211 = $210;
     HEAP32[$211>>2] = $206;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 1:  {
     $192 = $191;
     HEAP32[$192>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 0:  {
     $190 = $191;
     HEAP32[$190>>2] = $cnt$1;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    case 2:  {
     $193 = ($cnt$1|0)<(0);
     $194 = $193 << 31 >> 31;
     $195 = $191;
     $196 = $195;
     $197 = $196;
     HEAP32[$197>>2] = $cnt$1;
     $198 = (($196) + 4)|0;
     $199 = $198;
     HEAP32[$199>>2] = $194;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
     break;
    }
    default: {
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $34;$l10n$0 = $l10n$3;
     continue L1;
    }
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    HEAP32[tempDoublePtr>>2] = $191;HEAP32[tempDoublePtr+4>>2] = $218;$355 = +HEAPF64[tempDoublePtr>>3];
    HEAP32[$e2$i>>2] = 0;
    $356 = ($218|0)<(0);
    if ($356) {
     $357 = -$355;
     $$010$i = $357;$pl$0$i = 1;$prefix$0$i = 22992;
    } else {
     $358 = $fl$1$ & 2048;
     $359 = ($358|0)==(0);
     if ($359) {
      $360 = $fl$1$ & 1;
      $361 = ($360|0)==(0);
      $$$i = $361 ? ((22992 + 1|0)) : ((22992 + 6|0));
      $$010$i = $355;$pl$0$i = $360;$prefix$0$i = $$$i;
     } else {
      $$010$i = $355;$pl$0$i = 1;$prefix$0$i = ((22992 + 3|0));
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$010$i;$362 = HEAP32[tempDoublePtr>>2]|0;
    $363 = HEAP32[tempDoublePtr+4>>2]|0;
    $364 = $363 & 2146435072;
    $365 = ($364>>>0)<(2146435072);
    $366 = (0)<(0);
    $367 = ($364|0)==(2146435072);
    $368 = $367 & $366;
    $369 = $365 | $368;
    if (!($369)) {
     $370 = $t$0 & 32;
     $371 = ($370|0)!=(0);
     $372 = $371 ? 23016 : 23024;
     $373 = ($$010$i != $$010$i) | (0.0 != 0.0);
     if ($373) {
      $374 = $371 ? 23032 : 23040;
      $pl$1$i = 0;$s1$0$i = $374;
     } else {
      $pl$1$i = $pl$0$i;$s1$0$i = $372;
     }
     $375 = (($pl$1$i) + 3)|0;
     $376 = $fl$1$ & 8192;
     $377 = ($376|0)==(0);
     $378 = ($w$1|0)>($375|0);
     $or$cond$i40$i = $377 & $378;
     if ($or$cond$i40$i) {
      $379 = (($w$1) - ($375))|0;
      $380 = ($379>>>0)>(256);
      $381 = $380 ? 256 : $379;
      _memset(($pad$i|0),32,($381|0))|0;
      $382 = ($379>>>0)>(255);
      if ($382) {
       $$01$i42$i = $379;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $383 = (($$01$i42$i) + -256)|0;
        $384 = ($383>>>0)>(255);
        if ($384) {
         $$01$i42$i = $383;
        } else {
         break;
        }
       }
       $385 = $379 & 255;
       $$0$lcssa$i44$i = $385;
      } else {
       $$0$lcssa$i44$i = $379;
      }
      (___fwritex($pad$i,$$0$lcssa$i44$i,$f)|0);
     }
     (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
     (___fwritex($s1$0$i,3,$f)|0);
     $386 = $fl$1$ & 73728;
     $387 = ($386|0)==(8192);
     $or$cond$i47$i = $387 & $378;
     if ($or$cond$i47$i) {
      $388 = (($w$1) - ($375))|0;
      $389 = ($388>>>0)>(256);
      $390 = $389 ? 256 : $388;
      _memset(($pad$i|0),32,($390|0))|0;
      $391 = ($388>>>0)>(255);
      if ($391) {
       $$01$i49$i = $388;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $392 = (($$01$i49$i) + -256)|0;
        $393 = ($392>>>0)>(255);
        if ($393) {
         $$01$i49$i = $392;
        } else {
         break;
        }
       }
       $394 = $388 & 255;
       $$0$lcssa$i51$i = $394;
      } else {
       $$0$lcssa$i51$i = $388;
      }
      (___fwritex($pad$i,$$0$lcssa$i51$i,$f)|0);
     }
     $w$$i = $378 ? $w$1 : $375;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $395 = (+_frexpl($$010$i,$e2$i));
    $396 = $395 * 2.0;
    $397 = $396 != 0.0;
    if ($397) {
     $398 = HEAP32[$e2$i>>2]|0;
     $399 = (($398) + -1)|0;
     HEAP32[$e2$i>>2] = $399;
    }
    $400 = $t$0 | 32;
    $401 = ($400|0)==(97);
    if ($401) {
     $402 = $t$0 & 32;
     $403 = ($402|0)==(0);
     $404 = (($prefix$0$i) + 9|0);
     $prefix$0$$i = $403 ? $prefix$0$i : $404;
     $405 = $pl$0$i | 2;
     $406 = ($p$0>>>0)>(11);
     $407 = (12 - ($p$0))|0;
     $re$0$i = $406 ? 0 : $407;
     $408 = ($re$0$i|0)==(0);
     do {
      if ($408) {
       $$1$i = $396;
      } else {
       $re$1163$i = $re$0$i;$round$0162$i = 8.0;
       while(1) {
        $409 = (($re$1163$i) + -1)|0;
        $410 = $round$0162$i * 16.0;
        $411 = ($409|0)==(0);
        if ($411) {
         break;
        } else {
         $re$1163$i = $409;$round$0162$i = $410;
        }
       }
       $412 = HEAP8[$prefix$0$$i>>0]|0;
       $413 = ($412<<24>>24)==(45);
       if ($413) {
        $414 = -$396;
        $415 = $414 - $410;
        $416 = $410 + $415;
        $417 = -$416;
        $$1$i = $417;
        break;
       } else {
        $418 = $396 + $410;
        $419 = $418 - $410;
        $$1$i = $419;
        break;
       }
      }
     } while(0);
     $420 = HEAP32[$e2$i>>2]|0;
     $421 = ($420|0)<(0);
     $422 = (0 - ($420))|0;
     $423 = $421 ? $422 : $420;
     $424 = ($423|0)<(0);
     if ($424) {
      $425 = ($423|0)<(0);
      $426 = $425 << 31 >> 31;
      $$05$i$i = $7;$427 = $423;$428 = $426;
      while(1) {
       $429 = (___uremdi3(($427|0),($428|0),10,0)|0);
       $430 = tempRet0;
       $431 = $429 | 48;
       $432 = $431&255;
       $433 = (($$05$i$i) + -1|0);
       HEAP8[$433>>0] = $432;
       $434 = (___udivdi3(($427|0),($428|0),10,0)|0);
       $435 = tempRet0;
       $436 = ($428>>>0)>(9);
       $437 = ($427>>>0)>(4294967295);
       $438 = ($428|0)==(9);
       $439 = $438 & $437;
       $440 = $436 | $439;
       if ($440) {
        $$05$i$i = $433;$427 = $434;$428 = $435;
       } else {
        break;
       }
      }
      $$0$lcssa$i53$i = $433;$$01$lcssa$off0$i$i = $434;
     } else {
      $$0$lcssa$i53$i = $7;$$01$lcssa$off0$i$i = $423;
     }
     $441 = ($$01$lcssa$off0$i$i|0)==(0);
     if ($441) {
      $$1$lcssa$i$i = $$0$lcssa$i53$i;
     } else {
      $$12$i$i = $$0$lcssa$i53$i;$y$03$i$i = $$01$lcssa$off0$i$i;
      while(1) {
       $442 = (($y$03$i$i>>>0) % 10)&-1;
       $443 = $442 | 48;
       $444 = $443&255;
       $445 = (($$12$i$i) + -1|0);
       HEAP8[$445>>0] = $444;
       $446 = (($y$03$i$i>>>0) / 10)&-1;
       $447 = ($y$03$i$i>>>0)<(10);
       if ($447) {
        $$1$lcssa$i$i = $445;
        break;
       } else {
        $$12$i$i = $445;$y$03$i$i = $446;
       }
      }
     }
     $448 = ($$1$lcssa$i$i|0)==($7|0);
     if ($448) {
      HEAP8[$8>>0] = 48;
      $estr$0$i = $8;
     } else {
      $estr$0$i = $$1$lcssa$i$i;
     }
     $449 = HEAP32[$e2$i>>2]|0;
     $450 = $449 >> 31;
     $451 = $450 & 2;
     $452 = (($451) + 43)|0;
     $453 = $452&255;
     $454 = (($estr$0$i) + -1|0);
     HEAP8[$454>>0] = $453;
     $455 = (($t$0) + 15)|0;
     $456 = $455&255;
     $457 = (($estr$0$i) + -2|0);
     HEAP8[$457>>0] = $456;
     $notrhs$i = ($p$0|0)<(1);
     if ($notrhs$i) {
      $458 = $fl$1$ & 8;
      $459 = ($458|0)==(0);
      if ($459) {
       $$2$us$us$i = $$1$i;$s$0$us$us$i = $buf$i;
       while(1) {
        $460 = (~~(($$2$us$us$i)));
        $461 = (23048 + ($460)|0);
        $462 = HEAP8[$461>>0]|0;
        $463 = $462&255;
        $464 = $463 | $402;
        $465 = $464&255;
        $466 = (($s$0$us$us$i) + 1|0);
        HEAP8[$s$0$us$us$i>>0] = $465;
        $467 = (+($460|0));
        $468 = $$2$us$us$i - $467;
        $469 = $468 * 16.0;
        $470 = $466;
        $471 = (($470) - ($0))|0;
        $472 = ($471|0)!=(1);
        $notlhs$us$us$i = $469 == 0.0;
        $or$cond$i73 = $472 | $notlhs$us$us$i;
        if ($or$cond$i73) {
         $s$1$us$us$i = $466;
        } else {
         $473 = (($s$0$us$us$i) + 2|0);
         HEAP8[$466>>0] = 46;
         $s$1$us$us$i = $473;
        }
        $474 = $469 != 0.0;
        if ($474) {
         $$2$us$us$i = $469;$s$0$us$us$i = $s$1$us$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$us$i;
         break;
        }
       }
      } else {
       $$2$us$i = $$1$i;$s$0$us$i = $buf$i;
       while(1) {
        $475 = (~~(($$2$us$i)));
        $476 = (23048 + ($475)|0);
        $477 = HEAP8[$476>>0]|0;
        $478 = $477&255;
        $479 = $478 | $402;
        $480 = $479&255;
        $481 = (($s$0$us$i) + 1|0);
        HEAP8[$s$0$us$i>>0] = $480;
        $482 = (+($475|0));
        $483 = $$2$us$i - $482;
        $484 = $483 * 16.0;
        $485 = $481;
        $486 = (($485) - ($0))|0;
        $487 = ($486|0)==(1);
        if ($487) {
         $488 = (($s$0$us$i) + 2|0);
         HEAP8[$481>>0] = 46;
         $s$1$us$i = $488;
        } else {
         $s$1$us$i = $481;
        }
        $489 = $484 != 0.0;
        if ($489) {
         $$2$us$i = $484;$s$0$us$i = $s$1$us$i;
        } else {
         $s$1$lcssa$i = $s$1$us$i;
         break;
        }
       }
      }
     } else {
      $$2$i = $$1$i;$s$0$i = $buf$i;
      while(1) {
       $490 = (~~(($$2$i)));
       $491 = (23048 + ($490)|0);
       $492 = HEAP8[$491>>0]|0;
       $493 = $492&255;
       $494 = $493 | $402;
       $495 = $494&255;
       $496 = (($s$0$i) + 1|0);
       HEAP8[$s$0$i>>0] = $495;
       $497 = (+($490|0));
       $498 = $$2$i - $497;
       $499 = $498 * 16.0;
       $500 = $496;
       $501 = (($500) - ($0))|0;
       $502 = ($501|0)==(1);
       if ($502) {
        $503 = (($s$0$i) + 2|0);
        HEAP8[$496>>0] = 46;
        $s$1$i = $503;
       } else {
        $s$1$i = $496;
       }
       $504 = $499 != 0.0;
       if ($504) {
        $$2$i = $499;$s$0$i = $s$1$i;
       } else {
        $s$1$lcssa$i = $s$1$i;
        break;
       }
      }
     }
     $505 = ($p$0|0)!=(0);
     $$pre306$i = $s$1$lcssa$i;
     $506 = (($11) + ($$pre306$i))|0;
     $507 = ($506|0)<($p$0|0);
     $or$cond271 = $505 & $507;
     $508 = $457;
     if ($or$cond271) {
      $509 = (($12) + ($p$0))|0;
      $510 = (($509) - ($508))|0;
      $l$0$i = $510;
     } else {
      $511 = (($10) - ($508))|0;
      $512 = (($511) + ($$pre306$i))|0;
      $l$0$i = $512;
     }
     $513 = (($l$0$i) + ($405))|0;
     $514 = $fl$1$ & 73728;
     $515 = ($514|0)==(0);
     $516 = ($w$1|0)>($513|0);
     $or$cond$i57$i = $515 & $516;
     if ($or$cond$i57$i) {
      $517 = (($w$1) - ($513))|0;
      $518 = ($517>>>0)>(256);
      $519 = $518 ? 256 : $517;
      _memset(($pad$i|0),32,($519|0))|0;
      $520 = ($517>>>0)>(255);
      if ($520) {
       $$01$i59$i = $517;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $521 = (($$01$i59$i) + -256)|0;
        $522 = ($521>>>0)>(255);
        if ($522) {
         $$01$i59$i = $521;
        } else {
         break;
        }
       }
       $523 = $517 & 255;
       $$0$lcssa$i61$i = $523;
      } else {
       $$0$lcssa$i61$i = $517;
      }
      (___fwritex($pad$i,$$0$lcssa$i61$i,$f)|0);
     }
     (___fwritex($prefix$0$$i,$405,$f)|0);
     $524 = ($514|0)==(65536);
     $or$cond$i64$i = $524 & $516;
     if ($or$cond$i64$i) {
      $525 = (($w$1) - ($513))|0;
      $526 = ($525>>>0)>(256);
      $527 = $526 ? 256 : $525;
      _memset(($pad$i|0),48,($527|0))|0;
      $528 = ($525>>>0)>(255);
      if ($528) {
       $$01$i66$i = $525;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $529 = (($$01$i66$i) + -256)|0;
        $530 = ($529>>>0)>(255);
        if ($530) {
         $$01$i66$i = $529;
        } else {
         break;
        }
       }
       $531 = $525 & 255;
       $$0$lcssa$i68$i = $531;
      } else {
       $$0$lcssa$i68$i = $525;
      }
      (___fwritex($pad$i,$$0$lcssa$i68$i,$f)|0);
     }
     $532 = (($$pre306$i) - ($0))|0;
     (___fwritex($buf$i,$532,$f)|0);
     $533 = $457;
     $534 = (($9) - ($533))|0;
     $535 = (($l$0$i) - ($534))|0;
     $536 = (($535) - ($532))|0;
     $537 = ($536|0)>(0);
     if ($537) {
      $538 = ($536>>>0)>(256);
      $539 = $538 ? 256 : $536;
      _memset(($pad$i|0),48,($539|0))|0;
      $540 = ($536>>>0)>(255);
      if ($540) {
       $$01$i72$i = $536;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $541 = (($$01$i72$i) + -256)|0;
        $542 = ($541>>>0)>(255);
        if ($542) {
         $$01$i72$i = $541;
        } else {
         break;
        }
       }
       $543 = $536 & 255;
       $$0$lcssa$i74$i = $543;
      } else {
       $$0$lcssa$i74$i = $536;
      }
      (___fwritex($pad$i,$$0$lcssa$i74$i,$f)|0);
     }
     (___fwritex($457,$534,$f)|0);
     $544 = ($514|0)==(8192);
     $or$cond$i77$i = $544 & $516;
     if ($or$cond$i77$i) {
      $545 = (($w$1) - ($513))|0;
      $546 = ($545>>>0)>(256);
      $547 = $546 ? 256 : $545;
      _memset(($pad$i|0),32,($547|0))|0;
      $548 = ($545>>>0)>(255);
      if ($548) {
       $$01$i79$i = $545;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $549 = (($$01$i79$i) + -256)|0;
        $550 = ($549>>>0)>(255);
        if ($550) {
         $$01$i79$i = $549;
        } else {
         break;
        }
       }
       $551 = $545 & 255;
       $$0$lcssa$i81$i = $551;
      } else {
       $$0$lcssa$i81$i = $545;
      }
      (___fwritex($pad$i,$$0$lcssa$i81$i,$f)|0);
     }
     $w$22$i = $516 ? $w$1 : $513;
     $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$22$i;$l10n$0 = $l10n$3;
     continue L1;
    }
    $552 = ($p$0|0)<(0);
    $$p$i = $552 ? 6 : $p$0;
    if ($397) {
     $553 = $396 * 268435456.0;
     $554 = HEAP32[$e2$i>>2]|0;
     $555 = (($554) + -28)|0;
     HEAP32[$e2$i>>2] = $555;
     $$3$i = $553;$557 = $555;
    } else {
     $$pre$i = HEAP32[$e2$i>>2]|0;
     $$3$i = $396;$557 = $$pre$i;
    }
    $556 = ($557|0)<(0);
    $$36$i = $556 ? $big$i : $13;
    $558 = $$36$i;
    $$4$i = $$3$i;$z$0$i = $$36$i;
    while(1) {
     $559 = (~~(($$4$i))>>>0);
     HEAP32[$z$0$i>>2] = $559;
     $560 = (($z$0$i) + 4|0);
     $561 = (+($559>>>0));
     $562 = $$4$i - $561;
     $563 = $562 * 1.0E+9;
     $564 = $563 != 0.0;
     if ($564) {
      $$4$i = $563;$z$0$i = $560;
     } else {
      break;
     }
    }
    $$pr$i = HEAP32[$e2$i>>2]|0;
    $565 = ($$pr$i|0)>(0);
    if ($565) {
     $567 = $$pr$i;$a$1258$i = $$36$i;$z$1257$i = $560;
     while(1) {
      $566 = ($567|0)>(29);
      $568 = $566 ? 29 : $567;
      $d$0249$i = (($z$1257$i) + -4|0);
      $569 = ($d$0249$i>>>0)<($a$1258$i>>>0);
      do {
       if ($569) {
        $a$2$ph$i = $a$1258$i;
       } else {
        $carry$0250$i = 0;$d$0251$i = $d$0249$i;
        while(1) {
         $570 = HEAP32[$d$0251$i>>2]|0;
         $571 = (_bitshift64Shl(($570|0),0,($568|0))|0);
         $572 = tempRet0;
         $573 = (_i64Add(($571|0),($572|0),($carry$0250$i|0),0)|0);
         $574 = tempRet0;
         $575 = (___uremdi3(($573|0),($574|0),1000000000,0)|0);
         $576 = tempRet0;
         HEAP32[$d$0251$i>>2] = $575;
         $577 = (___udivdi3(($573|0),($574|0),1000000000,0)|0);
         $578 = tempRet0;
         $d$0$i = (($d$0251$i) + -4|0);
         $579 = ($d$0$i>>>0)<($a$1258$i>>>0);
         if ($579) {
          break;
         } else {
          $carry$0250$i = $577;$d$0251$i = $d$0$i;
         }
        }
        $580 = ($577|0)==(0);
        if ($580) {
         $a$2$ph$i = $a$1258$i;
         break;
        }
        $581 = (($a$1258$i) + -4|0);
        HEAP32[$581>>2] = $577;
        $a$2$ph$i = $581;
       }
      } while(0);
      $z$2$i = $z$1257$i;
      while(1) {
       $582 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
       if (!($582)) {
        break;
       }
       $583 = (($z$2$i) + -4|0);
       $584 = HEAP32[$583>>2]|0;
       $585 = ($584|0)==(0);
       if ($585) {
        $z$2$i = $583;
       } else {
        break;
       }
      }
      $586 = HEAP32[$e2$i>>2]|0;
      $587 = (($586) - ($568))|0;
      HEAP32[$e2$i>>2] = $587;
      $588 = ($587|0)>(0);
      if ($588) {
       $567 = $587;$a$1258$i = $a$2$ph$i;$z$1257$i = $z$2$i;
      } else {
       $$pr151$i = $587;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i;
       break;
      }
     }
    } else {
     $$pr151$i = $$pr$i;$a$1$lcssa$i = $$36$i;$z$1$lcssa$i = $560;
    }
    $589 = ($$pr151$i|0)<(0);
    L237: do {
     if ($589) {
      $590 = (($$p$i) + 25)|0;
      $591 = (($590|0) / 9)&-1;
      $592 = (($591) + 1)|0;
      $593 = ($400|0)==(102);
      if ($593) {
       $594 = (($$36$i) + ($592<<2)|0);
       $596 = $$pr151$i;$a$3244$us$i = $a$1$lcssa$i;$z$3243$us$i = $z$1$lcssa$i;
       while(1) {
        $595 = (0 - ($596))|0;
        $597 = ($595|0)>(9);
        $$23$us$i = $597 ? 9 : $595;
        $598 = ($a$3244$us$i>>>0)<($z$3243$us$i>>>0);
        do {
         if ($598) {
          $623 = 1 << $$23$us$i;
          $617 = (($623) + -1)|0;
          $620 = 1000000000 >>> $$23$us$i;
          $carry3$0238$us$i = 0;$d$1237$us$i = $a$3244$us$i;
          while(1) {
           $615 = HEAP32[$d$1237$us$i>>2]|0;
           $616 = $615 & $617;
           $618 = $615 >>> $$23$us$i;
           $619 = (($618) + ($carry3$0238$us$i))|0;
           HEAP32[$d$1237$us$i>>2] = $619;
           $606 = Math_imul($616, $620)|0;
           $621 = (($d$1237$us$i) + 4|0);
           $622 = ($621>>>0)<($z$3243$us$i>>>0);
           if ($622) {
            $carry3$0238$us$i = $606;$d$1237$us$i = $621;
           } else {
            break;
           }
          }
          $602 = HEAP32[$a$3244$us$i>>2]|0;
          $603 = ($602|0)==(0);
          $604 = (($a$3244$us$i) + 4|0);
          $$a$3$us$i = $603 ? $604 : $a$3244$us$i;
          $605 = ($606|0)==(0);
          if ($605) {
           $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $z$3243$us$i;
           break;
          }
          $607 = (($z$3243$us$i) + 4|0);
          HEAP32[$z$3243$us$i>>2] = $606;
          $$a$3$us308$i = $$a$3$us$i;$z$4$us$i = $607;
         } else {
          $599 = HEAP32[$a$3244$us$i>>2]|0;
          $600 = ($599|0)==(0);
          $601 = (($a$3244$us$i) + 4|0);
          $$a$3$us307$i = $600 ? $601 : $a$3244$us$i;
          $$a$3$us308$i = $$a$3$us307$i;$z$4$us$i = $z$3243$us$i;
         }
        } while(0);
        $608 = $z$4$us$i;
        $609 = (($608) - ($558))|0;
        $610 = $609 >> 2;
        $611 = ($610|0)>($592|0);
        $$z$4$us$i = $611 ? $594 : $z$4$us$i;
        $612 = HEAP32[$e2$i>>2]|0;
        $613 = (($612) + ($$23$us$i))|0;
        HEAP32[$e2$i>>2] = $613;
        $614 = ($613|0)<(0);
        if ($614) {
         $596 = $613;$a$3244$us$i = $$a$3$us308$i;$z$3243$us$i = $$z$4$us$i;
        } else {
         $a$3$lcssa$i = $$a$3$us308$i;$z$3$lcssa$i = $$z$4$us$i;
         break L237;
        }
       }
      } else {
       $625 = $$pr151$i;$a$3244$i = $a$1$lcssa$i;$z$3243$i = $z$1$lcssa$i;
      }
      while(1) {
       $624 = (0 - ($625))|0;
       $626 = ($624|0)>(9);
       $$23$i = $626 ? 9 : $624;
       $627 = ($a$3244$i>>>0)<($z$3243$i>>>0);
       do {
        if ($627) {
         $631 = 1 << $$23$i;
         $632 = (($631) + -1)|0;
         $633 = 1000000000 >>> $$23$i;
         $carry3$0238$i = 0;$d$1237$i = $a$3244$i;
         while(1) {
          $634 = HEAP32[$d$1237$i>>2]|0;
          $635 = $634 & $632;
          $636 = $634 >>> $$23$i;
          $637 = (($636) + ($carry3$0238$i))|0;
          HEAP32[$d$1237$i>>2] = $637;
          $638 = Math_imul($635, $633)|0;
          $639 = (($d$1237$i) + 4|0);
          $640 = ($639>>>0)<($z$3243$i>>>0);
          if ($640) {
           $carry3$0238$i = $638;$d$1237$i = $639;
          } else {
           break;
          }
         }
         $641 = HEAP32[$a$3244$i>>2]|0;
         $642 = ($641|0)==(0);
         $643 = (($a$3244$i) + 4|0);
         $$a$3$i = $642 ? $643 : $a$3244$i;
         $644 = ($638|0)==(0);
         if ($644) {
          $$a$3310$i = $$a$3$i;$z$4$i = $z$3243$i;
          break;
         }
         $645 = (($z$3243$i) + 4|0);
         HEAP32[$z$3243$i>>2] = $638;
         $$a$3310$i = $$a$3$i;$z$4$i = $645;
        } else {
         $628 = HEAP32[$a$3244$i>>2]|0;
         $629 = ($628|0)==(0);
         $630 = (($a$3244$i) + 4|0);
         $$a$3309$i = $629 ? $630 : $a$3244$i;
         $$a$3310$i = $$a$3309$i;$z$4$i = $z$3243$i;
        }
       } while(0);
       $646 = $z$4$i;
       $647 = $$a$3310$i;
       $648 = (($646) - ($647))|0;
       $649 = $648 >> 2;
       $650 = ($649|0)>($592|0);
       if ($650) {
        $651 = (($$a$3310$i) + ($592<<2)|0);
        $z$5$i = $651;
       } else {
        $z$5$i = $z$4$i;
       }
       $652 = HEAP32[$e2$i>>2]|0;
       $653 = (($652) + ($$23$i))|0;
       HEAP32[$e2$i>>2] = $653;
       $654 = ($653|0)<(0);
       if ($654) {
        $625 = $653;$a$3244$i = $$a$3310$i;$z$3243$i = $z$5$i;
       } else {
        $a$3$lcssa$i = $$a$3310$i;$z$3$lcssa$i = $z$5$i;
        break;
       }
      }
     } else {
      $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
     }
    } while(0);
    $655 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
    do {
     if ($655) {
      $656 = $a$3$lcssa$i;
      $657 = (($558) - ($656))|0;
      $658 = $657 >> 2;
      $659 = ($658*9)|0;
      $660 = HEAP32[$a$3$lcssa$i>>2]|0;
      $661 = ($660>>>0)<(10);
      if ($661) {
       $e$1$i = $659;
       break;
      } else {
       $e$0233$i = $659;$i$0232$i = 10;
      }
      while(1) {
       $662 = ($i$0232$i*10)|0;
       $663 = (($e$0233$i) + 1)|0;
       $664 = ($660>>>0)<($662>>>0);
       if ($664) {
        $e$1$i = $663;
        break;
       } else {
        $e$0233$i = $663;$i$0232$i = $662;
       }
      }
     } else {
      $e$1$i = 0;
     }
    } while(0);
    $665 = ($400|0)!=(102);
    $666 = $665 ? $e$1$i : 0;
    $667 = (($$p$i) - ($666))|0;
    $668 = ($400|0)==(103);
    $669 = ($$p$i|0)!=(0);
    $$24$i = $668 & $669;
    $$neg156$i = $$24$i << 31 >> 31;
    $670 = (($667) + ($$neg156$i))|0;
    $671 = $z$3$lcssa$i;
    $672 = (($671) - ($558))|0;
    $673 = $672 >> 2;
    $674 = ($673*9)|0;
    $675 = (($674) + -9)|0;
    $676 = ($670|0)<($675|0);
    if ($676) {
     $677 = (($670) + 9216)|0;
     $678 = (($677|0) / 9)&-1;
     $$sum$i = (($678) + -1023)|0;
     $679 = (($$36$i) + ($$sum$i<<2)|0);
     $680 = (($677|0) % 9)&-1;
     $j$0224$i = (($680) + 1)|0;
     $681 = ($j$0224$i|0)<(9);
     if ($681) {
      $i$1225$i = 10;$j$0226$i = $j$0224$i;
      while(1) {
       $682 = ($i$1225$i*10)|0;
       $j$0$i = (($j$0226$i) + 1)|0;
       $exitcond$i = ($j$0$i|0)==(9);
       if ($exitcond$i) {
        $i$1$lcssa$i = $682;
        break;
       } else {
        $i$1225$i = $682;$j$0226$i = $j$0$i;
       }
      }
     } else {
      $i$1$lcssa$i = 10;
     }
     $683 = HEAP32[$679>>2]|0;
     $684 = (($683>>>0) % ($i$1$lcssa$i>>>0))&-1;
     $685 = ($684|0)==(0);
     if ($685) {
      $$sum18$i = (($678) + -1022)|0;
      $686 = (($$36$i) + ($$sum18$i<<2)|0);
      $687 = ($686|0)==($z$3$lcssa$i|0);
      if ($687) {
       $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
      } else {
       label = 232;
      }
     } else {
      label = 232;
     }
     do {
      if ((label|0) == 232) {
       label = 0;
       $688 = (($683>>>0) / ($i$1$lcssa$i>>>0))&-1;
       $689 = $688 & 1;
       $690 = ($689|0)==(0);
       $$25$i = $690 ? 9007199254740992.0 : 9007199254740994.0;
       $691 = (($i$1$lcssa$i|0) / 2)&-1;
       $692 = ($684>>>0)<($691>>>0);
       do {
        if ($692) {
         $small$0$i = 0.5;
        } else {
         $693 = ($684|0)==($691|0);
         if ($693) {
          $$sum19$i = (($678) + -1022)|0;
          $694 = (($$36$i) + ($$sum19$i<<2)|0);
          $695 = ($694|0)==($z$3$lcssa$i|0);
          if ($695) {
           $small$0$i = 1.0;
           break;
          }
         }
         $small$0$i = 1.5;
        }
       } while(0);
       $696 = ($pl$0$i|0)==(0);
       do {
        if ($696) {
         $round6$1$i = $$25$i;$small$1$i = $small$0$i;
        } else {
         $697 = HEAP8[$prefix$0$i>>0]|0;
         $698 = ($697<<24>>24)==(45);
         if (!($698)) {
          $round6$1$i = $$25$i;$small$1$i = $small$0$i;
          break;
         }
         $699 = $$25$i * -1.0;
         $700 = $small$0$i * -1.0;
         $round6$1$i = $699;$small$1$i = $700;
        }
       } while(0);
       $701 = (($683) - ($684))|0;
       HEAP32[$679>>2] = $701;
       $702 = $round6$1$i + $small$1$i;
       $703 = $702 != $round6$1$i;
       if (!($703)) {
        $a$7$i = $a$3$lcssa$i;$d$3$i = $679;$e$3$i = $e$1$i;
        break;
       }
       $704 = (($701) + ($i$1$lcssa$i))|0;
       HEAP32[$679>>2] = $704;
       $705 = ($704>>>0)>(999999999);
       if ($705) {
        $a$5218$i = $a$3$lcssa$i;$d$2217$i = $679;
        while(1) {
         $706 = (($d$2217$i) + -4|0);
         HEAP32[$d$2217$i>>2] = 0;
         $707 = ($706>>>0)<($a$5218$i>>>0);
         if ($707) {
          $708 = (($a$5218$i) + -4|0);
          HEAP32[$708>>2] = 0;
          $a$6$i = $708;
         } else {
          $a$6$i = $a$5218$i;
         }
         $709 = HEAP32[$706>>2]|0;
         $710 = (($709) + 1)|0;
         HEAP32[$706>>2] = $710;
         $711 = ($710>>>0)>(999999999);
         if ($711) {
          $a$5218$i = $a$6$i;$d$2217$i = $706;
         } else {
          $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $706;
          break;
         }
        }
       } else {
        $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $679;
       }
       $712 = $a$5$lcssa$i;
       $713 = (($558) - ($712))|0;
       $714 = $713 >> 2;
       $715 = ($714*9)|0;
       $716 = HEAP32[$a$5$lcssa$i>>2]|0;
       $717 = ($716>>>0)<(10);
       if ($717) {
        $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $715;
        break;
       } else {
        $e$2213$i = $715;$i$2212$i = 10;
       }
       while(1) {
        $718 = ($i$2212$i*10)|0;
        $719 = (($e$2213$i) + 1)|0;
        $720 = ($716>>>0)<($718>>>0);
        if ($720) {
         $a$7$i = $a$5$lcssa$i;$d$3$i = $d$2$lcssa$i;$e$3$i = $719;
         break;
        } else {
         $e$2213$i = $719;$i$2212$i = $718;
        }
       }
      }
     } while(0);
     $721 = (($d$3$i) + 4|0);
     $722 = ($z$3$lcssa$i>>>0)>($721>>>0);
     $$z$3$i = $722 ? $721 : $z$3$lcssa$i;
     $a$8$ph$i = $a$7$i;$e$4$ph$i = $e$3$i;$z$6$ph$i = $$z$3$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;$e$4$ph$i = $e$1$i;$z$6$ph$i = $z$3$lcssa$i;
    }
    $723 = (0 - ($e$4$ph$i))|0;
    $z$6$i = $z$6$ph$i;
    while(1) {
     $724 = ($z$6$i>>>0)>($a$8$ph$i>>>0);
     if (!($724)) {
      $$lcssa292$i = 0;
      break;
     }
     $725 = (($z$6$i) + -4|0);
     $726 = HEAP32[$725>>2]|0;
     $727 = ($726|0)==(0);
     if ($727) {
      $z$6$i = $725;
     } else {
      $$lcssa292$i = 1;
      break;
     }
    }
    do {
     if ($668) {
      $728 = ($$p$i|0)==(0);
      $729 = $728&1;
      $$$p$i = (($729) + ($$p$i))|0;
      $730 = ($$$p$i|0)>($e$4$ph$i|0);
      $731 = ($e$4$ph$i|0)>(-5);
      $or$cond5$i = $730 & $731;
      if ($or$cond5$i) {
       $732 = (($t$0) + -1)|0;
       $$neg157$i = (($$$p$i) + -1)|0;
       $733 = (($$neg157$i) - ($e$4$ph$i))|0;
       $$016$i = $732;$$213$i = $733;
      } else {
       $734 = (($t$0) + -2)|0;
       $735 = (($$$p$i) + -1)|0;
       $$016$i = $734;$$213$i = $735;
      }
      $736 = $fl$1$ & 8;
      $737 = ($736|0)==(0);
      if (!($737)) {
       $$117$i = $$016$i;$$314$i = $$213$i;
       break;
      }
      do {
       if ($$lcssa292$i) {
        $738 = (($z$6$i) + -4|0);
        $739 = HEAP32[$738>>2]|0;
        $740 = ($739|0)==(0);
        if ($740) {
         $j$2$i = 9;
         break;
        }
        $741 = (($739>>>0) % 10)&-1;
        $742 = ($741|0)==(0);
        if ($742) {
         $i$3204$i = 10;$j$1205$i = 0;
        } else {
         $j$2$i = 0;
         break;
        }
        while(1) {
         $743 = ($i$3204$i*10)|0;
         $744 = (($j$1205$i) + 1)|0;
         $745 = (($739>>>0) % ($743>>>0))&-1;
         $746 = ($745|0)==(0);
         if ($746) {
          $i$3204$i = $743;$j$1205$i = $744;
         } else {
          $j$2$i = $744;
          break;
         }
        }
       } else {
        $j$2$i = 9;
       }
      } while(0);
      $747 = $$016$i | 32;
      $748 = ($747|0)==(102);
      $749 = $z$6$i;
      $750 = (($749) - ($558))|0;
      $751 = $750 >> 2;
      $752 = ($751*9)|0;
      $753 = (($752) + -9)|0;
      if ($748) {
       $754 = (($753) - ($j$2$i))|0;
       $755 = ($754|0)<(0);
       $$26$i = $755 ? 0 : $754;
       $756 = ($$213$i|0)<($$26$i|0);
       $$213$$26$i = $756 ? $$213$i : $$26$i;
       $$117$i = $$016$i;$$314$i = $$213$$26$i;
       break;
      } else {
       $757 = (($753) + ($e$4$ph$i))|0;
       $758 = (($757) - ($j$2$i))|0;
       $759 = ($758|0)<(0);
       $$28$i = $759 ? 0 : $758;
       $760 = ($$213$i|0)<($$28$i|0);
       $$213$$28$i = $760 ? $$213$i : $$28$i;
       $$117$i = $$016$i;$$314$i = $$213$$28$i;
       break;
      }
     } else {
      $$117$i = $t$0;$$314$i = $$p$i;
     }
    } while(0);
    $761 = ($$314$i|0)!=(0);
    if ($761) {
     $765 = 1;
    } else {
     $762 = $fl$1$ & 8;
     $763 = ($762|0)!=(0);
     $765 = $763;
    }
    $764 = $765&1;
    $766 = $$117$i | 32;
    $767 = ($766|0)==(102);
    if ($767) {
     $768 = ($e$4$ph$i|0)>(0);
     $769 = $768 ? $e$4$ph$i : 0;
     $$pn$i = $769;$estr$2$i = 0;
    } else {
     $770 = ($e$4$ph$i|0)<(0);
     $771 = $770 ? $723 : $e$4$ph$i;
     $772 = ($771|0)<(0);
     if ($772) {
      $773 = ($771|0)<(0);
      $774 = $773 << 31 >> 31;
      $$05$i84$i = $7;$775 = $771;$776 = $774;
      while(1) {
       $777 = (___uremdi3(($775|0),($776|0),10,0)|0);
       $778 = tempRet0;
       $779 = $777 | 48;
       $780 = $779&255;
       $781 = (($$05$i84$i) + -1|0);
       HEAP8[$781>>0] = $780;
       $782 = (___udivdi3(($775|0),($776|0),10,0)|0);
       $783 = tempRet0;
       $784 = ($776>>>0)>(9);
       $785 = ($775>>>0)>(4294967295);
       $786 = ($776|0)==(9);
       $787 = $786 & $785;
       $788 = $784 | $787;
       if ($788) {
        $$05$i84$i = $781;$775 = $782;$776 = $783;
       } else {
        break;
       }
      }
      $$0$lcssa$i89$i = $781;$$01$lcssa$off0$i90$i = $782;
     } else {
      $$0$lcssa$i89$i = $7;$$01$lcssa$off0$i90$i = $771;
     }
     $789 = ($$01$lcssa$off0$i90$i|0)==(0);
     if ($789) {
      $estr$1$ph$i = $$0$lcssa$i89$i;
     } else {
      $$12$i92$i = $$0$lcssa$i89$i;$y$03$i91$i = $$01$lcssa$off0$i90$i;
      while(1) {
       $790 = (($y$03$i91$i>>>0) % 10)&-1;
       $791 = $790 | 48;
       $792 = $791&255;
       $793 = (($$12$i92$i) + -1|0);
       HEAP8[$793>>0] = $792;
       $794 = (($y$03$i91$i>>>0) / 10)&-1;
       $795 = ($y$03$i91$i>>>0)<(10);
       if ($795) {
        $estr$1$ph$i = $793;
        break;
       } else {
        $$12$i92$i = $793;$y$03$i91$i = $794;
       }
      }
     }
     $796 = $estr$1$ph$i;
     $797 = (($9) - ($796))|0;
     $798 = ($797|0)<(2);
     if ($798) {
      $estr$1195$i = $estr$1$ph$i;
      while(1) {
       $799 = (($estr$1195$i) + -1|0);
       HEAP8[$799>>0] = 48;
       $800 = $799;
       $801 = (($9) - ($800))|0;
       $802 = ($801|0)<(2);
       if ($802) {
        $estr$1195$i = $799;
       } else {
        $estr$1$lcssa$i = $799;
        break;
       }
      }
     } else {
      $estr$1$lcssa$i = $estr$1$ph$i;
     }
     $803 = $e$4$ph$i >> 31;
     $804 = $803 & 2;
     $805 = (($804) + 43)|0;
     $806 = $805&255;
     $807 = (($estr$1$lcssa$i) + -1|0);
     HEAP8[$807>>0] = $806;
     $808 = $$117$i&255;
     $809 = (($estr$1$lcssa$i) + -2|0);
     HEAP8[$809>>0] = $808;
     $810 = $809;
     $811 = (($9) - ($810))|0;
     $$pn$i = $811;$estr$2$i = $809;
    }
    $812 = (($pl$0$i) + 1)|0;
    $813 = (($812) + ($$314$i))|0;
    $l$1$i = (($813) + ($764))|0;
    $814 = (($l$1$i) + ($$pn$i))|0;
    $815 = $fl$1$ & 73728;
    $816 = ($815|0)==(0);
    $817 = ($w$1|0)>($814|0);
    $or$cond$i98$i = $816 & $817;
    if ($or$cond$i98$i) {
     $818 = (($w$1) - ($814))|0;
     $819 = ($818>>>0)>(256);
     $820 = $819 ? 256 : $818;
     _memset(($pad$i|0),32,($820|0))|0;
     $821 = ($818>>>0)>(255);
     if ($821) {
      $$01$i100$i = $818;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $822 = (($$01$i100$i) + -256)|0;
       $823 = ($822>>>0)>(255);
       if ($823) {
        $$01$i100$i = $822;
       } else {
        break;
       }
      }
      $824 = $818 & 255;
      $$0$lcssa$i102$i = $824;
     } else {
      $$0$lcssa$i102$i = $818;
     }
     (___fwritex($pad$i,$$0$lcssa$i102$i,$f)|0);
    }
    (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
    $825 = ($815|0)==(65536);
    $or$cond$i105$i = $825 & $817;
    if ($or$cond$i105$i) {
     $826 = (($w$1) - ($814))|0;
     $827 = ($826>>>0)>(256);
     $828 = $827 ? 256 : $826;
     _memset(($pad$i|0),48,($828|0))|0;
     $829 = ($826>>>0)>(255);
     if ($829) {
      $$01$i107$i = $826;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $830 = (($$01$i107$i) + -256)|0;
       $831 = ($830>>>0)>(255);
       if ($831) {
        $$01$i107$i = $830;
       } else {
        break;
       }
      }
      $832 = $826 & 255;
      $$0$lcssa$i109$i = $832;
     } else {
      $$0$lcssa$i109$i = $826;
     }
     (___fwritex($pad$i,$$0$lcssa$i109$i,$f)|0);
    }
    do {
     if ($767) {
      $833 = ($a$8$ph$i>>>0)>($$36$i>>>0);
      $r$0$a$8$i = $833 ? $$36$i : $a$8$ph$i;
      $d$4180$i = $r$0$a$8$i;
      while(1) {
       $834 = HEAP32[$d$4180$i>>2]|0;
       $835 = ($834|0)==(0);
       if ($835) {
        $$1$lcssa$i117$i = $14;
       } else {
        $$12$i115$i = $14;$y$03$i114$i = $834;
        while(1) {
         $836 = (($y$03$i114$i>>>0) % 10)&-1;
         $837 = $836 | 48;
         $838 = $837&255;
         $839 = (($$12$i115$i) + -1|0);
         HEAP8[$839>>0] = $838;
         $840 = (($y$03$i114$i>>>0) / 10)&-1;
         $841 = ($y$03$i114$i>>>0)<(10);
         if ($841) {
          $$1$lcssa$i117$i = $839;
          break;
         } else {
          $$12$i115$i = $839;$y$03$i114$i = $840;
         }
        }
       }
       $842 = ($d$4180$i|0)==($r$0$a$8$i|0);
       do {
        if ($842) {
         $846 = ($$1$lcssa$i117$i|0)==($14|0);
         if (!($846)) {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         HEAP8[$16>>0] = 48;
         $s7$1$i = $16;
        } else {
         $843 = ($$1$lcssa$i117$i>>>0)>($buf$i>>>0);
         if ($843) {
          $s7$0177$i = $$1$lcssa$i117$i;
         } else {
          $s7$1$i = $$1$lcssa$i117$i;
          break;
         }
         while(1) {
          $844 = (($s7$0177$i) + -1|0);
          HEAP8[$844>>0] = 48;
          $845 = ($844>>>0)>($buf$i>>>0);
          if ($845) {
           $s7$0177$i = $844;
          } else {
           $s7$1$i = $844;
           break;
          }
         }
        }
       } while(0);
       $847 = $s7$1$i;
       $848 = (($15) - ($847))|0;
       (___fwritex($s7$1$i,$848,$f)|0);
       $849 = (($d$4180$i) + 4|0);
       $850 = ($849>>>0)>($$36$i>>>0);
       if ($850) {
        break;
       } else {
        $d$4180$i = $849;
       }
      }
      $$not$i = $761 ^ 1;
      $851 = $fl$1$ & 8;
      $852 = ($851|0)==(0);
      $or$cond32$i = $852 & $$not$i;
      if (!($or$cond32$i)) {
       (___fwritex(23064,1,$f)|0);
      }
      $853 = ($849>>>0)<($z$6$i>>>0);
      $854 = ($$314$i|0)>(0);
      $or$cond7169$i = $853 & $854;
      if ($or$cond7169$i) {
       $$415171$i = $$314$i;$d$5170$i = $849;
       while(1) {
        $855 = HEAP32[$d$5170$i>>2]|0;
        $856 = ($855|0)==(0);
        if ($856) {
         $s8$0165$i = $14;
         label = 301;
        } else {
         $$12$i124$i = $14;$y$03$i123$i = $855;
         while(1) {
          $857 = (($y$03$i123$i>>>0) % 10)&-1;
          $858 = $857 | 48;
          $859 = $858&255;
          $860 = (($$12$i124$i) + -1|0);
          HEAP8[$860>>0] = $859;
          $861 = (($y$03$i123$i>>>0) / 10)&-1;
          $862 = ($y$03$i123$i>>>0)<(10);
          if ($862) {
           break;
          } else {
           $$12$i124$i = $860;$y$03$i123$i = $861;
          }
         }
         $863 = ($860>>>0)>($buf$i>>>0);
         if ($863) {
          $s8$0165$i = $860;
          label = 301;
         } else {
          $s8$0$lcssa$i = $860;
         }
        }
        if ((label|0) == 301) {
         while(1) {
          label = 0;
          $864 = (($s8$0165$i) + -1|0);
          HEAP8[$864>>0] = 48;
          $865 = ($864>>>0)>($buf$i>>>0);
          if ($865) {
           $s8$0165$i = $864;
           label = 301;
          } else {
           $s8$0$lcssa$i = $864;
           break;
          }
         }
        }
        $866 = ($$415171$i|0)>(9);
        $867 = $866 ? 9 : $$415171$i;
        (___fwritex($s8$0$lcssa$i,$867,$f)|0);
        $868 = (($d$5170$i) + 4|0);
        $869 = (($$415171$i) + -9)|0;
        $870 = ($868>>>0)<($z$6$i>>>0);
        $871 = ($869|0)>(0);
        $or$cond7$i = $870 & $871;
        if ($or$cond7$i) {
         $$415171$i = $869;$d$5170$i = $868;
        } else {
         $$415$lcssa$i = $869;
         break;
        }
       }
      } else {
       $$415$lcssa$i = $$314$i;
      }
      $872 = ($$415$lcssa$i|0)>(0);
      if (!($872)) {
       break;
      }
      $873 = ($$415$lcssa$i>>>0)>(256);
      $874 = $873 ? 256 : $$415$lcssa$i;
      _memset(($pad$i|0),48,($874|0))|0;
      $875 = ($$415$lcssa$i>>>0)>(255);
      if ($875) {
       $$01$i131$i = $$415$lcssa$i;
       while(1) {
        (___fwritex($pad$i,256,$f)|0);
        $876 = (($$01$i131$i) + -256)|0;
        $877 = ($876>>>0)>(255);
        if ($877) {
         $$01$i131$i = $876;
        } else {
         break;
        }
       }
       $878 = $$415$lcssa$i & 255;
       $$0$lcssa$i133$i = $878;
      } else {
       $$0$lcssa$i133$i = $$415$lcssa$i;
      }
      (___fwritex($pad$i,$$0$lcssa$i133$i,$f)|0);
     } else {
      $879 = (($a$8$ph$i) + 4|0);
      $z$6$$i = $$lcssa292$i ? $z$6$i : $879;
      $880 = ($$314$i|0)>(-1);
      do {
       if ($880) {
        $881 = $fl$1$ & 8;
        $882 = ($881|0)==(0);
        $$5189$i = $$314$i;$d$6188$i = $a$8$ph$i;
        while(1) {
         $883 = HEAP32[$d$6188$i>>2]|0;
         $884 = ($883|0)==(0);
         if ($884) {
          label = 313;
         } else {
          $$12$i139$i = $14;$y$03$i138$i = $883;
          while(1) {
           $885 = (($y$03$i138$i>>>0) % 10)&-1;
           $886 = $885 | 48;
           $887 = $886&255;
           $888 = (($$12$i139$i) + -1|0);
           HEAP8[$888>>0] = $887;
           $889 = (($y$03$i138$i>>>0) / 10)&-1;
           $890 = ($y$03$i138$i>>>0)<(10);
           if ($890) {
            break;
           } else {
            $$12$i139$i = $888;$y$03$i138$i = $889;
           }
          }
          $891 = ($888|0)==($14|0);
          if ($891) {
           label = 313;
          } else {
           $s9$0$i = $888;
          }
         }
         if ((label|0) == 313) {
          label = 0;
          HEAP8[$16>>0] = 48;
          $s9$0$i = $16;
         }
         $892 = ($d$6188$i|0)==($a$8$ph$i|0);
         do {
          if ($892) {
           $896 = (($s9$0$i) + 1|0);
           (___fwritex($s9$0$i,1,$f)|0);
           $897 = ($$5189$i|0)<(1);
           $or$cond34$i = $897 & $882;
           if ($or$cond34$i) {
            $s9$2$i = $896;
            break;
           }
           (___fwritex(23064,1,$f)|0);
           $s9$2$i = $896;
          } else {
           $893 = ($s9$0$i>>>0)>($buf$i>>>0);
           if ($893) {
            $s9$1184$i = $s9$0$i;
           } else {
            $s9$2$i = $s9$0$i;
            break;
           }
           while(1) {
            $894 = (($s9$1184$i) + -1|0);
            HEAP8[$894>>0] = 48;
            $895 = ($894>>>0)>($buf$i>>>0);
            if ($895) {
             $s9$1184$i = $894;
            } else {
             $s9$2$i = $894;
             break;
            }
           }
          }
         } while(0);
         $898 = $s9$2$i;
         $899 = (($15) - ($898))|0;
         $900 = ($$5189$i|0)>($899|0);
         $$$5$i = $900 ? $899 : $$5189$i;
         (___fwritex($s9$2$i,$$$5$i,$f)|0);
         $901 = (($$5189$i) - ($899))|0;
         $902 = (($d$6188$i) + 4|0);
         $903 = ($902>>>0)<($z$6$$i>>>0);
         $904 = ($901|0)>(-1);
         $or$cond9$i = $903 & $904;
         if ($or$cond9$i) {
          $$5189$i = $901;$d$6188$i = $902;
         } else {
          break;
         }
        }
        $905 = ($901|0)>(0);
        if (!($905)) {
         break;
        }
        $906 = ($901>>>0)>(256);
        $907 = $906 ? 256 : $901;
        _memset(($pad$i|0),48,($907|0))|0;
        $908 = ($901>>>0)>(255);
        if ($908) {
         $$01$i146$i = $901;
         while(1) {
          (___fwritex($pad$i,256,$f)|0);
          $909 = (($$01$i146$i) + -256)|0;
          $910 = ($909>>>0)>(255);
          if ($910) {
           $$01$i146$i = $909;
          } else {
           break;
          }
         }
         $911 = $901 & 255;
         $$0$lcssa$i148$i = $911;
        } else {
         $$0$lcssa$i148$i = $901;
        }
        (___fwritex($pad$i,$$0$lcssa$i148$i,$f)|0);
       }
      } while(0);
      $912 = $estr$2$i;
      $913 = (($9) - ($912))|0;
      (___fwritex($estr$2$i,$913,$f)|0);
     }
    } while(0);
    $914 = ($815|0)==(8192);
    $or$cond$i$i = $914 & $817;
    if ($or$cond$i$i) {
     $915 = (($w$1) - ($814))|0;
     $916 = ($915>>>0)>(256);
     $917 = $916 ? 256 : $915;
     _memset(($pad$i|0),32,($917|0))|0;
     $918 = ($915>>>0)>(255);
     if ($918) {
      $$01$i$i = $915;
      while(1) {
       (___fwritex($pad$i,256,$f)|0);
       $919 = (($$01$i$i) + -256)|0;
       $920 = ($919>>>0)>(255);
       if ($920) {
        $$01$i$i = $919;
       } else {
        break;
       }
      }
      $921 = $915 & 255;
      $$0$lcssa$i$i = $921;
     } else {
      $$0$lcssa$i$i = $915;
     }
     (___fwritex($pad$i,$$0$lcssa$i$i,$f)|0);
    }
    $w$35$i = $817 ? $w$1 : $814;
    $1029 = $191;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$35$i;$l10n$0 = $l10n$3;
    continue L1;
    break;
   }
   case 111:  {
    $238 = ($191|0)==(0);
    $239 = ($218|0)==(0);
    $240 = $238 & $239;
    if ($240) {
     $$0$lcssa$i45 = $2;
    } else {
     $$03$i42 = $2;$242 = $191;$246 = $218;
     while(1) {
      $241 = $242 & 7;
      $243 = $241 | 48;
      $244 = $243&255;
      $245 = (($$03$i42) + -1|0);
      HEAP8[$245>>0] = $244;
      $247 = (_bitshift64Lshr(($242|0),($246|0),3)|0);
      $248 = tempRet0;
      $249 = ($247|0)==(0);
      $250 = ($248|0)==(0);
      $251 = $249 & $250;
      if ($251) {
       $$0$lcssa$i45 = $245;
       break;
      } else {
       $$03$i42 = $245;$242 = $247;$246 = $248;
      }
     }
    }
    $252 = $fl$1$ & 8;
    $253 = ($252|0)==(0);
    $or$cond13 = $253 | $240;
    $$19 = $or$cond13 ? 22968 : ((22968 + 5|0));
    $254 = $or$cond13&1;
    $$20 = $254 ^ 1;
    $293 = $191;$295 = $218;$a$0 = $$0$lcssa$i45;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $$20;$prefix$1 = $$19;
    label = 91;
    break;
   }
   case 99:  {
    $304 = $191&255;
    HEAP8[$4>>0] = $304;
    $1036 = $191;$1037 = $218;$a$2 = $4;$fl$6 = $189;$p$5 = 1;$pl$2 = 0;$prefix$2 = 22968;$z$2 = $2;
    break;
   }
   case 112:  {
    $212 = ($p$0>>>0)>(8);
    $213 = $212 ? $p$0 : 8;
    $214 = $fl$1$ | 8;
    $fl$3 = $214;$p$1 = $213;$t$1 = 120;
    label = 75;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 75;
    break;
   }
   case 115:  {
    $308 = $191;
    $309 = ($191|0)==(0);
    $$15 = $309 ? 22984 : $308;
    $a$1 = $$15;
    label = 96;
    break;
   }
   case 67:  {
    HEAP32[$wc>>2] = $191;
    HEAP32[$5>>2] = 0;
    $1038 = $wc;$1039 = $6;$p$4266 = -1;
    label = 101;
    break;
   }
   case 83:  {
    $316 = $191;
    $317 = ($p$0|0)==(0);
    if ($317) {
     $1040 = $191;$1041 = $316;$i$0$lcssa267 = 0;
     label = 106;
    } else {
     $1038 = $316;$1039 = $191;$p$4266 = $p$0;
     label = 101;
    }
    break;
   }
   default: {
    $1036 = $191;$1037 = $218;$a$2 = $fmt83;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22968;$z$2 = $2;
   }
   }
  } while(0);
  do {
   if ((label|0) == 75) {
    label = 0;
    $215 = $t$1 & 32;
    $216 = ($191|0)==(0);
    $217 = ($218|0)==(0);
    $219 = $216 & $217;
    if ($219) {
     $293 = $191;$295 = $218;$a$0 = $2;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22968;
     label = 91;
    } else {
     $$012$i = $2;$221 = $191;$228 = $218;
     while(1) {
      $220 = $221 & 15;
      $222 = (23048 + ($220)|0);
      $223 = HEAP8[$222>>0]|0;
      $224 = $223&255;
      $225 = $224 | $215;
      $226 = $225&255;
      $227 = (($$012$i) + -1|0);
      HEAP8[$227>>0] = $226;
      $229 = (_bitshift64Lshr(($221|0),($228|0),4)|0);
      $230 = tempRet0;
      $231 = ($229|0)==(0);
      $232 = ($230|0)==(0);
      $233 = $231 & $232;
      if ($233) {
       break;
      } else {
       $$012$i = $227;$221 = $229;$228 = $230;
      }
     }
     $234 = $fl$3 & 8;
     $235 = ($234|0)==(0);
     if ($235) {
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 22968;
      label = 91;
     } else {
      $236 = $t$1 >> 4;
      $237 = (22968 + ($236)|0);
      $293 = $191;$295 = $218;$a$0 = $227;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $237;
      label = 91;
     }
    }
   }
   else if ((label|0) == 86) {
    label = 0;
    $262 = ($263>>>0)>(0);
    $264 = ($265>>>0)>(4294967295);
    $266 = ($263|0)==(0);
    $267 = $266 & $264;
    $268 = $262 | $267;
    if ($268) {
     $$05$i = $2;$269 = $265;$270 = $263;
     while(1) {
      $271 = (___uremdi3(($269|0),($270|0),10,0)|0);
      $272 = tempRet0;
      $273 = $271 | 48;
      $274 = $273&255;
      $275 = (($$05$i) + -1|0);
      HEAP8[$275>>0] = $274;
      $276 = (___udivdi3(($269|0),($270|0),10,0)|0);
      $277 = tempRet0;
      $278 = ($270>>>0)>(9);
      $279 = ($269>>>0)>(4294967295);
      $280 = ($270|0)==(9);
      $281 = $280 & $279;
      $282 = $278 | $281;
      if ($282) {
       $$05$i = $275;$269 = $276;$270 = $277;
      } else {
       break;
      }
     }
     $$0$lcssa$i47 = $275;$$01$lcssa$off0$i = $276;
    } else {
     $$0$lcssa$i47 = $2;$$01$lcssa$off0$i = $265;
    }
    $283 = ($$01$lcssa$off0$i|0)==(0);
    if ($283) {
     $293 = $265;$295 = $263;$a$0 = $$0$lcssa$i47;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
     label = 91;
    } else {
     $$12$i = $$0$lcssa$i47;$y$03$i = $$01$lcssa$off0$i;
     while(1) {
      $284 = (($y$03$i>>>0) % 10)&-1;
      $285 = $284 | 48;
      $286 = $285&255;
      $287 = (($$12$i) + -1|0);
      HEAP8[$287>>0] = $286;
      $288 = (($y$03$i>>>0) / 10)&-1;
      $289 = ($y$03$i>>>0)<(10);
      if ($289) {
       $293 = $265;$295 = $263;$a$0 = $287;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
       label = 91;
       break;
      } else {
       $$12$i = $287;$y$03$i = $288;
      }
     }
    }
   }
   else if ((label|0) == 96) {
    label = 0;
    $310 = (_memchr($a$1,0,$p$0)|0);
    $311 = ($310|0)==(0|0);
    if ($311) {
     $312 = (($a$1) + ($p$0)|0);
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 22968;$z$2 = $312;
     break;
    } else {
     $313 = $310;
     $314 = $a$1;
     $315 = (($313) - ($314))|0;
     $1036 = $191;$1037 = $218;$a$2 = $a$1;$fl$6 = $189;$p$5 = $315;$pl$2 = 0;$prefix$2 = 22968;$z$2 = $310;
     break;
    }
   }
   else if ((label|0) == 101) {
    label = 0;
    $i$0166 = 0;$l$1165 = 0;$ws$0167 = $1038;
    while(1) {
     $318 = HEAP32[$ws$0167>>2]|0;
     $319 = ($318|0)==(0);
     if ($319) {
      $i$0$lcssa = $i$0166;$l$2 = $l$1165;
      break;
     }
     $320 = (_wctomb($mb,$318)|0);
     $321 = ($320|0)<(0);
     $322 = (($p$4266) - ($i$0166))|0;
     $323 = ($320>>>0)>($322>>>0);
     $or$cond17 = $321 | $323;
     if ($or$cond17) {
      $i$0$lcssa = $i$0166;$l$2 = $320;
      break;
     }
     $324 = (($ws$0167) + 4|0);
     $325 = (($320) + ($i$0166))|0;
     $326 = ($p$4266>>>0)>($325>>>0);
     if ($326) {
      $i$0166 = $325;$l$1165 = $320;$ws$0167 = $324;
     } else {
      $i$0$lcssa = $325;$l$2 = $320;
      break;
     }
    }
    $327 = ($l$2|0)<(0);
    if ($327) {
     $$0 = -1;
     label = 370;
     break L1;
    } else {
     $1040 = $1039;$1041 = $1038;$i$0$lcssa267 = $i$0$lcssa;
     label = 106;
    }
   }
  } while(0);
  if ((label|0) == 91) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = ($293|0)!=(0);
   $294 = ($295|0)!=(0);
   $296 = $292 | $294;
   $297 = ($p$2|0)!=(0);
   $or$cond = $296 | $297;
   if ($or$cond) {
    $298 = $a$0;
    $299 = (($3) - ($298))|0;
    $300 = $296&1;
    $301 = $300 ^ 1;
    $302 = (($301) + ($299))|0;
    $303 = ($p$2|0)>($302|0);
    $p$2$ = $303 ? $p$2 : $302;
    $1036 = $293;$1037 = $295;$a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   } else {
    $1036 = $293;$1037 = $295;$a$2 = $2;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $2;
   }
  }
  else if ((label|0) == 106) {
   label = 0;
   $328 = $fl$1$ & 73728;
   $329 = ($328|0)==(0);
   $330 = ($w$1|0)>($i$0$lcssa267|0);
   $or$cond$i58 = $329 & $330;
   if ($or$cond$i58) {
    $331 = (($w$1) - ($i$0$lcssa267))|0;
    $332 = ($331>>>0)>(256);
    $333 = $332 ? 256 : $331;
    _memset(($pad$i|0),32,($333|0))|0;
    $334 = ($331>>>0)>(255);
    if ($334) {
     $$01$i60 = $331;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $335 = (($$01$i60) + -256)|0;
      $336 = ($335>>>0)>(255);
      if ($336) {
       $$01$i60 = $335;
      } else {
       break;
      }
     }
     $337 = $331 & 255;
     $$0$lcssa$i62 = $337;
    } else {
     $$0$lcssa$i62 = $331;
    }
    (___fwritex($pad$i,$$0$lcssa$i62,$f)|0);
   }
   $338 = ($i$0$lcssa267|0)==(0);
   L479: do {
    if (!($338)) {
     $i$1174 = 0;$ws$1175 = $1041;
     while(1) {
      $339 = HEAP32[$ws$1175>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       break L479;
      }
      $341 = (_wctomb($mb,$339)|0);
      $342 = (($341) + ($i$1174))|0;
      $343 = ($342|0)>($i$0$lcssa267|0);
      if ($343) {
       break L479;
      }
      $344 = (($ws$1175) + 4|0);
      (___fwritex($mb,$341,$f)|0);
      $345 = ($342>>>0)<($i$0$lcssa267>>>0);
      if ($345) {
       $i$1174 = $342;$ws$1175 = $344;
      } else {
       break;
      }
     }
    }
   } while(0);
   $346 = ($328|0)==(8192);
   $or$cond$i65 = $346 & $330;
   if ($or$cond$i65) {
    $347 = (($w$1) - ($i$0$lcssa267))|0;
    $348 = ($347>>>0)>(256);
    $349 = $348 ? 256 : $347;
    _memset(($pad$i|0),32,($349|0))|0;
    $350 = ($347>>>0)>(255);
    if ($350) {
     $$01$i67 = $347;
     while(1) {
      (___fwritex($pad$i,256,$f)|0);
      $351 = (($$01$i67) + -256)|0;
      $352 = ($351>>>0)>(255);
      if ($352) {
       $$01$i67 = $351;
      } else {
       break;
      }
     }
     $353 = $347 & 255;
     $$0$lcssa$i69 = $353;
    } else {
     $$0$lcssa$i69 = $347;
    }
    (___fwritex($pad$i,$$0$lcssa$i69,$f)|0);
   }
   $354 = $330 ? $w$1 : $i$0$lcssa267;
   $1029 = $1040;$1030 = $218;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $354;$l10n$0 = $l10n$3;
   continue;
  }
  $922 = $z$2;
  $923 = $a$2;
  $924 = (($922) - ($923))|0;
  $925 = ($p$5|0)<($924|0);
  $$p$5 = $925 ? $924 : $p$5;
  $926 = (($pl$2) + ($$p$5))|0;
  $927 = ($w$1|0)<($926|0);
  $w$2 = $927 ? $926 : $w$1;
  $928 = $fl$6 & 73728;
  $929 = ($928|0)==(0);
  $930 = ($w$2|0)>($926|0);
  $or$cond$i75 = $929 & $930;
  if ($or$cond$i75) {
   $931 = (($w$2) - ($926))|0;
   $932 = ($931>>>0)>(256);
   $933 = $932 ? 256 : $931;
   _memset(($pad$i|0),32,($933|0))|0;
   $934 = ($931>>>0)>(255);
   if ($934) {
    $$01$i77 = $931;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $935 = (($$01$i77) + -256)|0;
     $936 = ($935>>>0)>(255);
     if ($936) {
      $$01$i77 = $935;
     } else {
      break;
     }
    }
    $937 = $931 & 255;
    $$0$lcssa$i79 = $937;
   } else {
    $$0$lcssa$i79 = $931;
   }
   (___fwritex($pad$i,$$0$lcssa$i79,$f)|0);
  }
  (___fwritex($prefix$2,$pl$2,$f)|0);
  $938 = ($928|0)==(65536);
  $or$cond$i51 = $938 & $930;
  if ($or$cond$i51) {
   $939 = (($w$2) - ($926))|0;
   $940 = ($939>>>0)>(256);
   $941 = $940 ? 256 : $939;
   _memset(($pad$i|0),48,($941|0))|0;
   $942 = ($939>>>0)>(255);
   if ($942) {
    $$01$i53 = $939;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $943 = (($$01$i53) + -256)|0;
     $944 = ($943>>>0)>(255);
     if ($944) {
      $$01$i53 = $943;
     } else {
      break;
     }
    }
    $945 = $939 & 255;
    $$0$lcssa$i55 = $945;
   } else {
    $$0$lcssa$i55 = $939;
   }
   (___fwritex($pad$i,$$0$lcssa$i55,$f)|0);
  }
  $946 = ($$p$5|0)>($924|0);
  if ($946) {
   $947 = (($$p$5) - ($924))|0;
   $948 = ($947>>>0)>(256);
   $949 = $948 ? 256 : $947;
   _memset(($pad$i|0),48,($949|0))|0;
   $950 = ($947>>>0)>(255);
   if ($950) {
    $$01$i38 = $947;
    while(1) {
     (___fwritex($pad$i,256,$f)|0);
     $951 = (($$01$i38) + -256)|0;
     $952 = ($951>>>0)>(255);
     if ($952) {
      $$01$i38 = $951;
     } else {
      break;
     }
    }
    $953 = $947 & 255;
    $$0$lcssa$i40 = $953;
   } else {
    $$0$lcssa$i40 = $947;
   }
   (___fwritex($pad$i,$$0$lcssa$i40,$f)|0);
  }
  (___fwritex($a$2,$924,$f)|0);
  $954 = ($928|0)==(8192);
  $or$cond$i = $954 & $930;
  if (!($or$cond$i)) {
   $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
   continue;
  }
  $955 = (($w$2) - ($926))|0;
  $956 = ($955>>>0)>(256);
  $957 = $956 ? 256 : $955;
  _memset(($pad$i|0),32,($957|0))|0;
  $958 = ($955>>>0)>(255);
  if ($958) {
   $$01$i = $955;
   while(1) {
    (___fwritex($pad$i,256,$f)|0);
    $959 = (($$01$i) + -256)|0;
    $960 = ($959>>>0)>(255);
    if ($960) {
     $$01$i = $959;
    } else {
     break;
    }
   }
   $961 = $955 & 255;
   $$0$lcssa$i = $961;
  } else {
   $$0$lcssa$i = $955;
  }
  (___fwritex($pad$i,$$0$lcssa$i,$f)|0);
  $1029 = $1036;$1030 = $1037;$cnt$0 = $cnt$1;$fmt83 = $131;$l$0 = $w$2;$l10n$0 = $l10n$3;
 }
 if ((label|0) == 352) {
  $962 = ($f|0)==(0|0);
  if (!($962)) {
   $$0 = $cnt$1;
   STACKTOP = sp;return ($$0|0);
  }
  $963 = ($l10n$0|0)==(0);
  if ($963) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  } else {
   $i$2100 = 1;
  }
  while(1) {
   $964 = (($nl_type) + ($i$2100<<2)|0);
   $965 = HEAP32[$964>>2]|0;
   $966 = ($965|0)==(0);
   if ($966) {
    $i$397 = $i$2100;
    break;
   }
   $967 = (($nl_arg) + ($i$2100<<3)|0);
   $968 = ($965>>>0)>(20);
   L534: do {
    if (!($968)) {
     do {
      switch ($965|0) {
      case 9:  {
       $arglist_current35 = HEAP32[$ap>>2]|0;
       $969 = HEAP32[$arglist_current35>>2]|0;
       $arglist_next36 = (($arglist_current35) + 4|0);
       HEAP32[$ap>>2] = $arglist_next36;
       HEAP32[$967>>2] = $969;
       break L534;
       break;
      }
      case 10:  {
       $arglist_current38 = HEAP32[$ap>>2]|0;
       $970 = HEAP32[$arglist_current38>>2]|0;
       $arglist_next39 = (($arglist_current38) + 4|0);
       HEAP32[$ap>>2] = $arglist_next39;
       $971 = ($970|0)<(0);
       $972 = $971 << 31 >> 31;
       $973 = $967;
       $974 = $973;
       HEAP32[$974>>2] = $970;
       $975 = (($973) + 4)|0;
       $976 = $975;
       HEAP32[$976>>2] = $972;
       break L534;
       break;
      }
      case 11:  {
       $arglist_current41 = HEAP32[$ap>>2]|0;
       $977 = HEAP32[$arglist_current41>>2]|0;
       $arglist_next42 = (($arglist_current41) + 4|0);
       HEAP32[$ap>>2] = $arglist_next42;
       $978 = $967;
       $979 = $978;
       HEAP32[$979>>2] = $977;
       $980 = (($978) + 4)|0;
       $981 = $980;
       HEAP32[$981>>2] = 0;
       break L534;
       break;
      }
      case 12:  {
       $arglist_current44 = HEAP32[$ap>>2]|0;
       $982 = $arglist_current44;
       $983 = $982;
       $984 = HEAP32[$983>>2]|0;
       $985 = (($982) + 4)|0;
       $986 = $985;
       $987 = HEAP32[$986>>2]|0;
       $arglist_next45 = (($arglist_current44) + 8|0);
       HEAP32[$ap>>2] = $arglist_next45;
       $988 = $967;
       $989 = $988;
       HEAP32[$989>>2] = $984;
       $990 = (($988) + 4)|0;
       $991 = $990;
       HEAP32[$991>>2] = $987;
       break L534;
       break;
      }
      case 13:  {
       $arglist_current47 = HEAP32[$ap>>2]|0;
       $992 = HEAP32[$arglist_current47>>2]|0;
       $arglist_next48 = (($arglist_current47) + 4|0);
       HEAP32[$ap>>2] = $arglist_next48;
       $993 = $992&65535;
       $994 = $993 << 16 >> 16;
       $995 = ($994|0)<(0);
       $996 = $995 << 31 >> 31;
       $997 = $967;
       $998 = $997;
       HEAP32[$998>>2] = $994;
       $999 = (($997) + 4)|0;
       $1000 = $999;
       HEAP32[$1000>>2] = $996;
       break L534;
       break;
      }
      case 14:  {
       $arglist_current50 = HEAP32[$ap>>2]|0;
       $1001 = HEAP32[$arglist_current50>>2]|0;
       $arglist_next51 = (($arglist_current50) + 4|0);
       HEAP32[$ap>>2] = $arglist_next51;
       $$mask1$i = $1001 & 65535;
       $1002 = $967;
       $1003 = $1002;
       HEAP32[$1003>>2] = $$mask1$i;
       $1004 = (($1002) + 4)|0;
       $1005 = $1004;
       HEAP32[$1005>>2] = 0;
       break L534;
       break;
      }
      case 15:  {
       $arglist_current53 = HEAP32[$ap>>2]|0;
       $1006 = HEAP32[$arglist_current53>>2]|0;
       $arglist_next54 = (($arglist_current53) + 4|0);
       HEAP32[$ap>>2] = $arglist_next54;
       $1007 = $1006&255;
       $1008 = $1007 << 24 >> 24;
       $1009 = ($1008|0)<(0);
       $1010 = $1009 << 31 >> 31;
       $1011 = $967;
       $1012 = $1011;
       HEAP32[$1012>>2] = $1008;
       $1013 = (($1011) + 4)|0;
       $1014 = $1013;
       HEAP32[$1014>>2] = $1010;
       break L534;
       break;
      }
      case 16:  {
       $arglist_current56 = HEAP32[$ap>>2]|0;
       $1015 = HEAP32[$arglist_current56>>2]|0;
       $arglist_next57 = (($arglist_current56) + 4|0);
       HEAP32[$ap>>2] = $arglist_next57;
       $$mask$i = $1015 & 255;
       $1016 = $967;
       $1017 = $1016;
       HEAP32[$1017>>2] = $$mask$i;
       $1018 = (($1016) + 4)|0;
       $1019 = $1018;
       HEAP32[$1019>>2] = 0;
       break L534;
       break;
      }
      case 17:  {
       $arglist_current59 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current59>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current59+4>>2];$1020 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next60 = (($arglist_current59) + 8|0);
       HEAP32[$ap>>2] = $arglist_next60;
       HEAPF64[$967>>3] = $1020;
       break L534;
       break;
      }
      case 18:  {
       $arglist_current62 = HEAP32[$ap>>2]|0;
       HEAP32[tempDoublePtr>>2]=HEAP32[$arglist_current62>>2];HEAP32[tempDoublePtr+4>>2]=HEAP32[$arglist_current62+4>>2];$1021 = +HEAPF64[tempDoublePtr>>3];
       $arglist_next63 = (($arglist_current62) + 8|0);
       HEAP32[$ap>>2] = $arglist_next63;
       HEAPF64[$967>>3] = $1021;
       break L534;
       break;
      }
      default: {
       break L534;
      }
      }
     } while(0);
    }
   } while(0);
   $1022 = (($i$2100) + 1)|0;
   $1023 = ($1022|0)<(10);
   if ($1023) {
    $i$2100 = $1022;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
  while(1) {
   $1026 = (($nl_type) + ($i$397<<2)|0);
   $1027 = HEAP32[$1026>>2]|0;
   $1028 = ($1027|0)==(0);
   $1025 = (($i$397) + 1)|0;
   if (!($1028)) {
    $$0 = -1;
    label = 370;
    break;
   }
   $1024 = ($1025|0)<(10);
   if ($1024) {
    $i$397 = $1025;
   } else {
    $$0 = 1;
    label = 370;
    break;
   }
  }
  if ((label|0) == 370) {
   STACKTOP = sp;return ($$0|0);
  }
 }
 else if ((label|0) == 370) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function runPostSets() {
 
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _strlen(ptr) {
    ptr = ptr|0;
    var curr = 0;
    curr = ptr;
    while (((HEAP8[((curr)>>0)])|0)) {
      curr = (curr + 1)|0;
    }
    return (curr - ptr)|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {

    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _strcpy(pdest, psrc) {
    pdest = pdest|0; psrc = psrc|0;
    var i = 0;
    do {
      HEAP8[(((pdest+i)|0)>>0)]=HEAP8[(((psrc+i)|0)>>0)];
      i = (i+1)|0;
    } while (((HEAP8[(((psrc)+(i-1))>>0)])|0));
    return pdest|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((ctlz_i8)+(x >>> 24))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((ctlz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((ctlz_i8)+(x&0xff))>>0)])|0) + 24)|0;
  }

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



// EMSCRIPTEN_END_FUNCS

  
  function dynCall_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    return FUNCTION_TABLE_iiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0)|0;
  }


  function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    FUNCTION_TABLE_viiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0);
  }


  function dynCall_vid(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=+a2;
    FUNCTION_TABLE_vid[index&511](a1|0,+a2);
  }


  function dynCall_vi(index,a1) {
    index = index|0;
    a1=a1|0;
    FUNCTION_TABLE_vi[index&1023](a1|0);
  }


  function dynCall_vii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    FUNCTION_TABLE_vii[index&1023](a1|0,a2|0);
  }


  function dynCall_ii(index,a1) {
    index = index|0;
    a1=a1|0;
    return FUNCTION_TABLE_ii[index&1023](a1|0)|0;
  }


  function dynCall_iiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0;
    return FUNCTION_TABLE_iiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0)|0;
  }


  function dynCall_iiii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return FUNCTION_TABLE_iiii[index&1023](a1|0,a2|0,a3|0)|0;
  }


  function dynCall_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0; a11=a11|0; a12=a12|0; a13=a13|0; a14=a14|0; a15=a15|0;
    FUNCTION_TABLE_viiiiiiiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0,a11|0,a12|0,a13|0,a14|0,a15|0);
  }


  function dynCall_viiiiid(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=+a6;
    FUNCTION_TABLE_viiiiid[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,+a6);
  }


  function dynCall_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    FUNCTION_TABLE_viiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0);
  }


  function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
    FUNCTION_TABLE_viiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
  }


  function dynCall_di(index,a1) {
    index = index|0;
    a1=a1|0;
    return +FUNCTION_TABLE_di[index&511](a1|0);
  }


  function dynCall_vidddd(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=+a2; a3=+a3; a4=+a4; a5=+a5;
    FUNCTION_TABLE_vidddd[index&1023](a1|0,+a2,+a3,+a4,+a5);
  }


  function dynCall_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0;
    FUNCTION_TABLE_viiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0);
  }


  function dynCall_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=+a7;
    FUNCTION_TABLE_viiiiiid[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,+a7);
  }


  function dynCall_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
    FUNCTION_TABLE_viiiiiiiii[index&255](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0);
  }


  function dynCall_viiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0; a10=a10|0;
    FUNCTION_TABLE_viiiiiiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0,a10|0);
  }


  function dynCall_iii(index,a1,a2) {
    index = index|0;
    a1=a1|0; a2=a2|0;
    return FUNCTION_TABLE_iii[index&1023](a1|0,a2|0)|0;
  }


  function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
    return FUNCTION_TABLE_iiiiii[index&1023](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
  }


  function dynCall_diii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    return +FUNCTION_TABLE_diii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_i(index) {
    index = index|0;
    
    return FUNCTION_TABLE_i[index&1023]()|0;
  }


  function dynCall_iiiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    return FUNCTION_TABLE_iiiii[index&1023](a1|0,a2|0,a3|0,a4|0)|0;
  }


  function dynCall_viii(index,a1,a2,a3) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0;
    FUNCTION_TABLE_viii[index&1023](a1|0,a2|0,a3|0);
  }


  function dynCall_v(index) {
    index = index|0;
    
    FUNCTION_TABLE_v[index&1023]();
  }


  function dynCall_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0;
    return FUNCTION_TABLE_iiiiiiiii[index&511](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0)|0;
  }


  function dynCall_viiii(index,a1,a2,a3,a4) {
    index = index|0;
    a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
    FUNCTION_TABLE_viiii[index&1023](a1|0,a2|0,a3|0,a4|0);
  }

function b0(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_iiiiiiii(0);return 0; }
  function b1(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1); }
  function b2(p0,p1) { p0 = p0|0;p1 = +p1; nullFunc_vid(2); }
  function b3(p0) { p0 = p0|0; nullFunc_vi(3); }
  function _exit__wrapper(p0) { p0 = p0|0; _exit(p0|0); }
  function _freelocale__wrapper(p0) { p0 = p0|0; _freelocale(p0|0); }
  function b4(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_vii(4); }
  function b5(p0) { p0 = p0|0; nullFunc_ii(5);return 0; }
  function _strlen__wrapper(p0) { p0 = p0|0; return _strlen(p0|0)|0; }
  function _pthread_mutex_unlock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_unlock(p0|0)|0; }
  function _pthread_mutex_lock__wrapper(p0) { p0 = p0|0; return _pthread_mutex_lock(p0|0)|0; }
  function _pthread_cond_broadcast__wrapper(p0) { p0 = p0|0; return _pthread_cond_broadcast(p0|0)|0; }
  function _uselocale__wrapper(p0) { p0 = p0|0; return _uselocale(p0|0)|0; }
  function b6(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0; nullFunc_iiiiiiiiiiii(6);return 0; }
  function b7(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(7);return 0; }
  function _newlocale__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; return _newlocale(p0|0,p1|0,p2|0)|0; }
  function b8(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,p13,p14) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0;p10 = p10|0;p11 = p11|0;p12 = p12|0;p13 = p13|0;p14 = p14|0; nullFunc_viiiiiiiiiiiiiii(8); }
  function b9(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = +p5; nullFunc_viiiiid(9); }
  function b10(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_viiiiiiii(10); }
  function b11(p0,p1,p2,p3,p4,p5) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(11); }
  function b12(p0) { p0 = p0|0; nullFunc_di(12);return +0; }
  function b13(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = +p1;p2 = +p2;p3 = +p3;p4 = +p4; nullFunc_vidddd(13); }
  function b14(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0; nullFunc_viiiiiii(14); }
  function b15(p0,p1,p2,p3,p4,p5,p6) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = +p6; nullFunc_viiiiiid(15); }
  function b16(p0,p1,p2,p3,p4,p5,p6,p7,p8) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_viiiiiiiii(16); }
  function b17(p0,p1,p2,p3,p4,p5,p6,p7,p8,p9) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0;p9 = p9|0; nullFunc_viiiiiiiiii(17); }
  function b18(p0,p1) { p0 = p0|0;p1 = p1|0; nullFunc_iii(18);return 0; }
  function _printf__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _printf(p0|0,p1|0)|0; }
  function _strcpy__wrapper(p0,p1) { p0 = p0|0;p1 = p1|0; return _strcpy(p0|0,p1|0)|0; }
  function b19(p0,p1,p2,p3,p4) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(19);return 0; }
  function b20(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_diii(20);return +0; }
  function b21() { ; nullFunc_i(21);return 0; }
  function _clock__wrapper() { ; return _clock()|0; }
  function ___ctype_b_loc__wrapper() { ; return ___ctype_b_loc()|0; }
  function ___ctype_toupper_loc__wrapper() { ; return ___ctype_toupper_loc()|0; }
  function ___ctype_tolower_loc__wrapper() { ; return ___ctype_tolower_loc()|0; }
  function b22(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(22);return 0; }
  function _catgets__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; return _catgets(p0|0,p1|0,p2|0,p3|0)|0; }
  function b23(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(23); }
  function ___cxa_throw__wrapper(p0,p1,p2) { p0 = p0|0;p1 = p1|0;p2 = p2|0; ___cxa_throw(p0|0,p1|0,p2|0); }
  function b24() { ; nullFunc_v(24); }
  function ___cxa_pure_virtual__wrapper() { ; ___cxa_pure_virtual(); }
  function ___cxa_end_catch__wrapper() { ; ___cxa_end_catch(); }
  function ___cxa_rethrow__wrapper() { ; ___cxa_rethrow(); }
  function b25(p0,p1,p2,p3,p4,p5,p6,p7) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0; nullFunc_iiiiiiiii(25);return 0; }
  function b26(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(26); }
  function ___assert_fail__wrapper(p0,p1,p2,p3) { p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; ___assert_fail(p0|0,p1|0,p2|0,p3|0); }
  // EMSCRIPTEN_END_FUNCS
  var FUNCTION_TABLE_iiiiiiii = [b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__110__find_endIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0
  ,b0,b0,b0,b0,__ZNSt3__18__searchIPFbccEPKcS4_EET0_S5_S5_T1_S6_T_NS_26random_access_iterator_tagES8_,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb,b0,b0,b0,__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
  ,b0,b0,b0,b0,b0];
  var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,__ZN3vcg6Color4IhEC2Ehhhh,b1,b1,b1,b1,b1,__ZN3vcg3tri9AllocatorI6MyMeshE7AddFaceERS2_P8MyVertexS6_S6_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_jjRKS4_,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
  ,b1,b1,b1,b1,b1];
  var FUNCTION_TABLE_vid = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,__ZN3vcg3tri7EdgeLenI6MyMeshfEC2Ef
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,__ZNSt3__19to_stringEf,b2,b2,b2,b2,__ZNSt3__19to_stringEd,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
  ,b2,b2,b2];
  var FUNCTION_TABLE_vi = [b3,__ZN3vcg25MissingComponentExceptionD2Ev,__ZN3vcg25MissingComponentExceptionD0Ev,b3,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEED0Ev,b3,b3,b3,b3,b3,__ZN3vcg18SimpleTempDataBaseD2Ev,__ZN3vcg18SimpleTempDataBaseD0Ev,b3,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZTv0_n12_NSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEED0Ev,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIwED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev
  ,__ZNSt3__111__stdoutbufIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110__stdinbufIcED0Ev,b3,b3,b3,b3,b3,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,b3,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,b3,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev
  ,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,b3,b3,b3,b3,b3,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,b3,b3,b3,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,b3,b3,b3,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev
  ,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,__ZNSt3__110moneypunctIcLb1EED1Ev,__ZNSt3__110moneypunctIcLb1EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,b3,b3,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,b3,b3,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,b3,b3,b3,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev
  ,b3,b3,b3,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,b3,b3,b3,b3
  ,b3,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,b3,b3,b3,b3,b3,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3
  ,b3,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev
  ,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,b3,b3,b3,b3,b3,b3,b3,b3,_exit__wrapper,__ZN6MyMeshD2Ev,b3,b3,__ZN3vcg3tri14UpdateTopologyI6MyMeshE8FaceFaceERS2_,b3
  ,b3,b3,b3,b3,b3,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev,b3,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev,b3,b3,b3,b3,b3,__ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3vcg3tri18RequireFFAdjacencyI6MyMeshEEvRT_,__ZN3vcg3tri11UpdateFlagsI6MyMeshE10FaceClearVERS2_,b3,b3,b3,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEED2Ev,b3,b3,b3,b3,b3,__ZNSt3__16vectorIiNS_9allocatorIiEEED2Ev,__ZN3vcg9TexCoord2IfLi1EEC2Ev,b3,b3,b3,b3,b3,__ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEED2Ev,b3,b3
  ,b3,b3,__ZNSt3__114__split_bufferIP8MyVertexRNS_9allocatorIS2_EEED2Ev,b3,__ZNSt3__114__split_bufferIP6MyFaceRNS_9allocatorIS2_EEED2Ev,b3,b3,b3,b3,b3,__ZNSt3__16localeD2Ev,b3,b3,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev,__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv,b3,b3,__ZNSt3__114__split_bufferIiRNS_9allocatorIiEEED2Ev,b3,b3,b3,b3,b3,b3,__ZN3vcg18PointerToAttributeD2Ev,b3,__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP8MyVertexED2Ev,b3,__ZN3vcg3tri9AllocatorI6MyMeshE14PointerUpdaterIP6MyFaceED2Ev,b3
  ,b3,b3,b3,b3,__ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEED2Ev,b3,b3,b3,__ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEED2Ev,__ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEEC2Ev,b3,b3,__ZN3vcg9VectorNBWINS_3tri15RefinedFaceDataIP8MyVertexEEED2Ev,b3,b3,b3,b3,b3,__ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEED2Ev,b3,b3,b3,__ZNSt3__114__split_bufferIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeERNS_9allocatorIS6_EEED2Ev,b3,b3,b3,b3,b3,__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE5ClearEv,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN3vcg3tri7BitQuadI6MyMeshNS0_21GeometricInterpolatorI8MyVertexEEE15QuadTriangulateERNSt3__16vectorIPS4_NS7_9allocatorIS9_EEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEED2Ev,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev,__ZN3vcg6Color4IhEC2Ev,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEED2Ev,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__113__vector_baseIiNS_9allocatorIiEEED2Ev,b3,b3,__ZNSt3__13setINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEED2Ev,b3,b3,__ZNSt3__113__vector_baseIN3vcg6Point3IfEENS_9allocatorIS3_EEED2Ev,b3,b3,__ZNSt3__113__vector_baseIP8MyVertexNS_9allocatorIS2_EEED2Ev,b3,b3,__ZNSt3__114__split_bufferINS_6vectorIN3vcg6Point3IfEENS_9allocatorIS4_EEEERNS5_IS7_EEED2Ev,b3,b3,b3,b3,__ZNSt3__114__split_bufferINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS4_IS6_EEED2Ev,__ZN3vcg4ShotIfNS_8Matrix44IfEEED2Ev,__ZNSt3__13setIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEED2Ev,__ZN3vcg4Box3IfED2Ev
  ,__ZNSt3__16vectorIN3vcg5HEdgeINS1_9UsedTypesINS1_3UseI8MyVertexE12AsVertexTypeENS4_I6MyEdgeE10AsEdgeTypeENS4_I6MyFaceE10AsFaceTypeENS1_14DefaultDeriverESE_SE_SE_SE_EESE_SE_SE_SE_SE_SE_SE_SE_SE_SE_SE_EENS_9allocatorISG_EEED2Ev,__ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEED2Ev,__ZNSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEED2Ev,__ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEED2Ev,__ZN3vcg4Box3IfEC2Ev,b3,__ZN3vcg4ShotIfNS_8Matrix44IfEEEC2Ev,__ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_E11SetIdentityEv,__ZN3vcg4ShotIfNS_8Matrix44IfEEE14ReferenceFrameIfS2_ED2Ev,__ZN3vcg6Point3IfEC2Ev,__ZN3vcg8Matrix44IfED2Ev,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,_free,b3,b3,b3,b3,b3,_freelocale__wrapper,b3,b3,__ZNSt3__112__do_nothingEPv,b3,__ZNSt3__121__throw_runtime_errorEPKc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,___cxx_global_array_dtor112,b3,___cxx_global_array_dtor97,b3,___cxx_global_array_dtor73,___cxx_global_array_dtor48,___cxx_global_array_dtor45,___cxx_global_array_dtor,b3,b3,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
  ,b3,b3,b3,b3,b3];
  var FUNCTION_TABLE_vii = [b4,b4,b4,b4,b4,b4,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6ResizeEj,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE7ReorderERNS2_IjNS4_IjEEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4
  ,b4,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv
  ,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,b4,b4,b4,b4,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,b4,b4,b4,b4
  ,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,b4,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18messagesIcE8do_closeEi,b4,b4
  ,b4,b4,__ZNKSt3__18messagesIwE8do_closeEi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv
  ,__ZNKSt3__18numpunctIcE12do_falsenameEv,b4,b4,b4,b4,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,__ZNSt3__18ios_base4initEPv,b4,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE3strERKNS_12basic_stringIcS2_S4_EE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__19to_stringEi,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE21__push_back_slow_pathIKiEEvRT_,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3vcg3tri14PolygonSupportI6MyMeshS2_E14ExtractPolygonEP6MyFaceRNSt3__16vectorIP8MyVertexNS6_9allocatorIS9_EEEE,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZN3vcg25MissingComponentExceptionC2ERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEE,b4,b4,b4,__ZN3vcg6Color4IhEC2ENS1_13ColorConstantE,__ZNKSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE17__annotate_shrinkEj
  ,__ZNKSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b4,__ZNSt3__16vectorIP6MyFaceNS_9allocatorIS2_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS2_RS4_EE,b4,b4,b4,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_,__ZNKSt3__18ios_base6getlocEv,b4,b4,b4,__ZNSt3__18ios_base5clearEj,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEE26__swap_out_circular_bufferERNS_14__split_bufferIiRS2_EE,b4,b4,b4,b4,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEEC2ERS6_,b4,b4,b4,b4,b4,b4,b4,__ZN3vcg18PointerToAttribute6ResizeEj
  ,__ZNKSt3__16vectorIjNS_9allocatorIjEEE17__annotate_shrinkEj,__ZNKSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI6MyFaceRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI6MyFaceNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b4,__ZNKSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferI8MyVertexRNS_9allocatorIS1_EEE18__construct_at_endEj,__ZNSt3__16vectorI8MyVertexNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EE,b4,b4,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE7reserveEj,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE6resizeEj,b4,b4,b4,__ZN3vcg18PointerToAttributeC2ERKS0_,b4,__ZNSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE,b4,__ZNKSt3__16vectorIN3vcg3tri15RefinedFaceDataIP8MyVertexEENS_9allocatorIS6_EEE17__annotate_shrinkEj,__ZNSt3__114__split_bufferIN3vcg3tri15RefinedFaceDataIP8MyVertexEERNS_9allocatorIS6_EEE18__construct_at_endEj,__ZNSt3__16vectorIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeENS_9allocatorIS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS8_EE,b4,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE16TokenizeNextLineERNSt3__113basic_istreamIcNS5_11char_traitsIcEEEERNS5_6vectorINS5_12basic_stringIcS8_NS5_9allocatorIcEEEENSD_ISF_EEEE,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_,b4,b4,b4,b4,b4
  ,b4,b4,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE8ColorMapEi,__ZN3vcg6Color4IhE6ImportIfEEvRKNS0_IT_EE,b4,b4,__ZN3vcg6Color4IhE6ImportIhEEvRKNS0_IT_EE,b4,b4,b4,__ZNSt3__16vectorIiNS_9allocatorIiEEEC2Ej,b4,b4,b4,b4,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2Ej,__ZN3vcg6Point3IfE6ImportIfEEvRKNS0_IT_EE,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEEC2Ej,b4,__ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E4SetFEi,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEEC2ERKS6_,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_,__ZN3vcg3tri2io14FanTessellatorINS_6Point3IfEEEEvRKNSt3__16vectorINS6_IT_NS5_9allocatorIS7_EEEENS8_ISA_EEEERNS6_IiNS8_IiEEEE,__ZN3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E6ClearFEi,b4,b4,b4,b4,__ZNSt3__119basic_istringstreamIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev
  ,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc,b4,b4,__ZNKSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE17__annotate_shrinkEj,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE21__push_back_slow_pathIKS6_EEvRT_,__ZNKSt3__16vectorI6MyEdgeNS_9allocatorIS1_EEE17__annotate_shrinkEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE8allocateEj,__ZNSt3__16vectorIiNS_9allocatorIiEEE18__construct_at_endEj,b4,__ZN3vcg4face8BitFlagsINS_6Arity3INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefENS0_5FFAdjEEEE5AllocERKi,__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEEC2ERKS6_,b4,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE8allocateEj,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endEj,b4,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE8allocateEj,__ZNSt3__16vectorIP8MyVertexNS_9allocatorIS2_EEE18__construct_at_endEj,b4,__ZNKSt3__16vectorIiNS_9allocatorIiEEE17__annotate_shrinkEj,__ZNSt3__16vectorINS0_IN3vcg6Point3IfEENS_9allocatorIS3_EEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b4,b4,b4,b4,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS6_RS7_EE,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEEC2ERKS4_,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__118__libcpp_refstringC2EPKc,b4,__ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,b4,__ZNSt3__18ios_base16__call_callbacksENS0_5eventE,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt13runtime_errorC2EPKc,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw,b4,b4,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj,b4,b4
  ,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej,__ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_,__ZNSt3__17codecvtIwc11__mbstate_tEC2Ej,__ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_
  ,__ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_,__ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
  ,b4,b4,b4,b4,b4];
  var FUNCTION_TABLE_ii = [b5,b5,b5,__ZNK3vcg25MissingComponentException4whatEv,b5,b5,b5,b5,__ZNK3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE6SizeOfEv,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE9DataBeginEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv
  ,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,b5,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,b5,b5,b5,b5,b5,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,b5,b5,b5,b5
  ,b5,b5,b5,b5,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,b5,b5,b5,b5,b5,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,b5,b5,b5,b5,__ZNKSt13runtime_error4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__119__iostream_category4nameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv
  ,__ZNKSt3__120__time_get_c_storageIcE3__XEv,b5,b5,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,b5,b5,b5,b5,b5,b5,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,b5,b5,b5
  ,b5,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv
  ,b5,b5,b5,b5,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,b5,b5,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,b5,b5
  ,b5,b5,b5,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,b5
  ,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,b5,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5,b5,b5
  ,b5,b5,__ZNKSt8bad_cast4whatEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_strlen__wrapper,b5,b5,b5,__ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2FNEv,__ZNK3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE2VNEv,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNK3vcg14FaceTypeHolderI11MyUsedTypesE2VNEv,b5,b5,b5,__ZN3vcg3tri17HasPerVertexColorI6MyMeshEEbRKT_,b5,__ZN3vcg3tri20HasPerVertexTexCoordI6MyMeshEEbRKT_,__ZN3vcg3tri5CleanI6MyMeshE21CountBitLargePolygonsERS2_,b5,b5,__ZN3vcg6vertex8BitFlagsINS_6Arity4INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fENS0_7Color4bENS0_8QualityfEEEE5FlagsEv,b5,__ZNK3vcg14VertexArityMaxI11MyUsedTypesNS_6vertex7Coord3fENS2_8Normal3fENS2_7Color4bENS2_8QualityfENS2_8BitFlagsENS_14DefaultDeriverES8_S8_S8_S8_S8_S8_E3IsDEv,__ZN3vcg6vertex5CoordINS_6Point3IfEENS0_9EmptyCoreI11MyUsedTypesEEE1PEv,b5
  ,b5,__ZN3vcg6vertex5ColorINS_6Color4IhEENS_6Arity2INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fENS0_8Normal3fEEEE1CEv,b5,__ZN3vcg3tri18HasPerVertexNormalI6MyMeshEEbRKT_,__ZN3vcg6vertex6NormalINS_6Point3IfEENS_6Arity1INS0_9EmptyCoreI11MyUsedTypesEENS0_7Coord3fEEEE1NEv,b5,__ZN3vcg6vertex9EmptyCoreI11MyUsedTypesE1TEv,__ZN3vcg9TexCoord2IfLi1EE1uEv,__ZN3vcg9TexCoord2IfLi1EE1vEv,b5,b5,__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsDEv,__ZNK3vcg12FaceArityMaxI11MyUsedTypesNS_4face8Normal3fENS2_9VertexRefENS2_5FFAdjENS2_8BitFlagsENS_14DefaultDeriverES7_S7_S7_S7_S7_S7_S7_E3IsVEv,b5,b5,__ZN3vcg3tri15HasPerFaceColorI6MyMeshEEbRKT_,b5,__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE1CEv,_malloc,b5,b5,b5,__ZNSt3__111char_traitsIcE6lengthEPKc,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Znwj,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_atoi
  ,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3vcg3tri19HasPerWedgeTexCoordI6MyMeshEEbRKT_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZN3vcg3tri15HasPerFaceFlagsI6MyMeshEEbRKT_,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv,b5,b5,b5,_pthread_mutex_unlock__wrapper,_pthread_mutex_lock__wrapper,_pthread_cond_broadcast__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_uselocale__wrapper,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_wcslen,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
  ,b5,b5,b5,b5,b5];
  var FUNCTION_TABLE_iiiiiiiiiiii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_,b6,b6,b6,b6,b6,b6,b6,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
  ,b6,b6,b6,b6,b6];
  var FUNCTION_TABLE_iiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,b7,b7,b7
  ,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,b7,b7,b7,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,b7,b7,b7,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,b7,b7,b7,b7,b7,b7,__ZNKSt3__17collateIcE7do_hashEPKcS3_,b7,b7,b7,b7,__ZNKSt3__17collateIwE7do_hashEPKwS3_,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b7,b7,b7,b7
  ,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,b7,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,b7,b7,__ZNKSt3__15ctypeIcE9do_narrowEcc,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNKSt3__15ctypeIwE5do_isEtw,b7,b7,b7,b7,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,b7,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,b7,b7,__ZNKSt3__15ctypeIwE9do_narrowEwc,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_sn_write,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,__ZNSt3__17getlineIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_istreamIT_T0_EES9_RNS_12basic_stringIS6_S7_T1_EES6_,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_newlocale__wrapper,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b7,b7,b7,b7,b7,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_wcrtomb,b7,b7,_mbtowc,_mbrlen,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,_vasprintf,b7,_do_read,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
  ,b7,b7,b7,b7,b7];
  var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i
  ,b8,__ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
  ,b8,b8,b8,b8,b8];
  var FUNCTION_TABLE_viiiiid = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,b9,b9,b9,b9,b9,b9,b9,b9,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
  ,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9];
  var FUNCTION_TABLE_viiiiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,b10,b10,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
  ,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b10,b10,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b10,b10];
  var FUNCTION_TABLE_viiiiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,b11
  ,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,b11,b11,b11,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,b11,b11,b11,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b11,b11,b11
  ,b11,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZN3vcg3tri9AllocatorI6MyMeshE11AddQuadFaceERS2_P8MyVertexS6_S6_S6_,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
  ,b11,b11,b11,b11,b11];
  var FUNCTION_TABLE_di = [b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12,b12
  ,b12,_atof,b12];
  var FUNCTION_TABLE_vidddd = [b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,__ZN3vcg6Color4IfEC2Effff,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13,b13
  ,b13,b13,b13,b13,b13];
  var FUNCTION_TABLE_viiiiiii = [b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,b14,b14,b14,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx
  ,b14,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,b14,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,b14,b14,b14,b14,b14,b14,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,b14,b14,b14,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,__ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,b14,__ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE,b14,b14,b14,__ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE,__ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14,b14
  ,b14,b14,b14,b14,b14];
  var FUNCTION_TABLE_viiiiiid = [b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,b15,b15,b15,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15,b15
  ,b15,b15,b15];
  var FUNCTION_TABLE_viiiiiiiii = [b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
  ,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16];
  var FUNCTION_TABLE_viiiiiiiiii = [b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,__ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri,b17,b17,b17,b17,b17,b17,__ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri,b17,b17,b17,b17,__ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri,b17
  ,__ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17,b17
  ,b17,b17,b17,b17,b17];
  var FUNCTION_TABLE_iii = [b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3vcg14SimpleTempDataINSt3__16vectorI6MyFaceNS1_9allocatorIS3_EEEENS_3tri15RefinedFaceDataIP8MyVertexEEE2AtEj,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE9pbackfailEi,b18,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,b18,__ZNSt3__111__stdoutbufIwE8overflowEj,b18,b18,b18,b18,b18,__ZNSt3__110__stdinbufIwE9pbackfailEj,b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,b18
  ,b18,b18,b18,b18,b18,b18,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,b18,__ZNSt3__111__stdoutbufIcE8overflowEi,b18,b18,b18,b18,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIcE10do_toupperEc,b18,__ZNKSt3__15ctypeIcE10do_tolowerEc,b18,__ZNKSt3__15ctypeIcE8do_widenEc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNKSt3__15ctypeIwE10do_toupperEw,b18,__ZNKSt3__15ctypeIwE10do_tolowerEw,b18,__ZNKSt3__15ctypeIwE8do_widenEc,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,_printf__wrapper,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,__ZN3vcg3tri2io11ExporterOFFI6MyMeshE10SaveStreamERS3_i,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeeqERKS4_,b18,b18,b18,__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFpEi,__ZN3vcg4face5FFAdjINS_6Arity2INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fENS0_9VertexRefEEEE3FFiEi,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3vcg6Point3IfEixEi
  ,b18,b18,__ZN3vcg6Point4IhEixEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE2cVEi,b18,b18,_strcpy__wrapper,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc,__ZNSt3__1lsIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS_13basic_ostreamIT_T0_EES9_RKNS_12basic_stringIS6_S7_T1_EE,b18,b18,__ZNKSt3__16locale9use_facetERNS0_2idE,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNK3vcg18PointerToAttributeltES0_,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__111char_traitsIcE2eqEcc,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZN3vcg4face9VertexRefINS_6Arity1INS_8FaceBaseI11MyUsedTypesEENS0_8Normal3fEEEE1VEi,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,_isxdigit_l,_isdigit_l,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc,b18,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18,b18
  ,b18,b18,b18,b18,b18];
  var FUNCTION_TABLE_iiiiii = [b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,b19,b19,b19,b19,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,b19,b19,b19,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,b19,b19,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j
  ,b19,b19,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,b19,b19,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE7OpenMemERS3_PKcjRiPFbiS7_E,b19,b19,b19,b19,b19,b19
  ,b19,__ZN3vcg3tri7RefineEI6MyMeshNS0_8MidPointIS2_NS0_16BaseInterpolatorIS2_EEEENS0_7EdgeLenIS2_fEEEEbRT_RT0_RT1_bPFbiPKcE,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,_wcsnrtombs,b19,_mbsnrtowcs,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19,b19
  ,b19,b19,b19,b19,b19];
  var FUNCTION_TABLE_diii = [b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj,__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20,b20
  ,b20,b20,b20,b20,b20];
  var FUNCTION_TABLE_i = [b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,_clock__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN3vcg3tri2io9PrecisionIfE6digitsEv,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZN3vcg4face9EmptyCoreINS_14FaceTypeHolderI11MyUsedTypesEEE11HasPolyInfoEv,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,__ZNSt3__16__clocEv,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,__ZNSt3__16locale5__imp12make_classicEv,b21,__ZNSt3__16locale5__imp11make_globalEv,__ZNSt3__16locale8__globalEv,b21,b21,___ctype_b_loc__wrapper,___ctype_toupper_loc__wrapper,___ctype_tolower_loc__wrapper,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,___cxa_get_globals_fast,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21,b21
  ,b21,b21,b21,b21,b21];
  var FUNCTION_TABLE_iiiii = [b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,b22,b22,b22,b22,b22,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZN3vcg3tri2io11ImporterOFFI6MyMeshE10OpenStreamERS3_RNSt3__113basic_istreamIcNS6_11char_traitsIcEEEERiPFbiPKcE,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z,b22,b22
  ,b22,__ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz,b22,b22,b22,b22,b22,b22,b22,b22,b22,_mbsrtowcs,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,_catgets__wrapper,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,_mbrtowc,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,__ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji,__ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji,__ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22,b22
  ,b22,b22,b22,b22,b22];
  var FUNCTION_TABLE_viii = [b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNKSt3__114error_category23default_error_conditionEi,b23,b23,__ZNKSt3__119__iostream_category7messageEi,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,__ZN3vcg3tri8MidPointI6MyMeshNS0_16BaseInterpolatorIS2_EEEC2EPS2_PS4_,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri14UpdateTopologyI6MyMeshE14FillEdgeVectorERS2_RNSt3__16vectorINS3_5PEdgeENS5_9allocatorIS7_EEEEb,__ZNSt3__16__sortIRNS_6__lessIN3vcg3tri14UpdateTopologyI6MyMeshE5PEdgeES7_EEPS7_EEvT0_SB_T_,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri9AllocatorI6MyMeshE19AddPerFaceAttributeINS0_15RefinedFaceDataIP8MyVertexEEEENS0_7TriMeshINSt3__16vectorIS6_NSA_9allocatorIS6_EEEENSB_I6MyFaceNSC_ISF_EEEENSB_I6MyEdgeNSC_ISI_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleIT_EERS2_NSA_12basic_stringIcNSA_11char_traitsIcEENSC_IcEEEE,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b23,___cxa_throw__wrapper,__ZN3vcg3tri14PolygonSupportI6MyMeshS2_E14ExtractPolygonEP6MyFaceRNSt3__16vectorIP8MyVertexNS6_9allocatorIS9_EEEERNS7_IS5_NSA_IS5_EEEE,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE4findIS2_EENS_15__tree_iteratorIS2_PNS_11__tree_nodeIS2_PvEEiEERKT_,b23,b23,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE15__insert_uniqueERKS2_,__ZN3vcg3tri7TriMeshINSt3__16vectorI8MyVertexNS2_9allocatorIS4_EEEENS3_I6MyFaceNS5_IS8_EEEENS3_I6MyEdgeNS5_ISB_EEEENS0_14DummyContainerEE22PerFaceAttributeHandleINS0_15RefinedFaceDataIPS4_EEEC2EPvRKi,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,__ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_j,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_j,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__16vectorIN3vcg6Point3IfEENS_9allocatorIS3_EEE18__construct_at_endIPS3_EENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_,b23,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b23,b23,b23,b23,b23,b23,__ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,__ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23,b23,b23,__ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23,b23
  ,b23,b23,b23,b23,b23];
  var FUNCTION_TABLE_v = [b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_pure_virtual__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZL25default_terminate_handlerv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_end_catch__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,___cxa_rethrow__wrapper,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,__ZSt17__throw_bad_allocv,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24,b24
  ,b24,b24,b24,b24,b24];
  var FUNCTION_TABLE_iiiiiiiii = [b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,b25,b25,b25,b25
  ,b25,b25,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,b25,b25,b25,b25,b25,b25,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25,b25
  ,b25,b25,b25];
  var FUNCTION_TABLE_viiii = [b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEE7seekposENS_4fposI11__mbstate_tEEj,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNKSt3__17collateIcE12do_transformEPKcS3_,b26,b26,b26,b26,__ZNKSt3__17collateIwE12do_transformEPKwS3_,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,___assert_fail__wrapper,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZN3vcg3tri9AllocatorI6MyMeshE11AddVerticesERS2_jRNS3_14PointerUpdaterIP8MyVertexEE,b26,__ZN3vcg3tri9AllocatorI6MyMeshE8AddFacesERS2_jRNS3_14PointerUpdaterIP6MyFaceEE,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16__treeIN3vcg18PointerToAttributeENS_4lessIS2_EENS_9allocatorIS2_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSB_SB_,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEE5eraseENS_11__wrap_iterIPKS6_EESC_,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,__ZNSt3__16__treeINS_4pairIP8MyVertexS3_EENS_4lessIS4_EENS_9allocatorIS4_EEE16__insert_node_atEPNS_16__tree_node_baseIPvEERSD_SD_,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26,b26
  ,b26,b26,b26,b26,b26];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _memmove: _memmove, _refine: _refine, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _realloc: _realloc, _bitshift64Lshr: _bitshift64Lshr, _allocator: _allocator, _strcpy: _strcpy, _bitshift64Shl: _bitshift64Shl, __GLOBAL__I_a: __GLOBAL__I_a, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_vid: dynCall_vid, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_iiiiiiiiiiii: dynCall_iiiiiiiiiiii, dynCall_iiii: dynCall_iiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, dynCall_viiiiid: dynCall_viiiiid, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_di: dynCall_di, dynCall_vidddd: dynCall_vidddd, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiiiiiii: dynCall_viiiiiiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_diii: dynCall_diii, dynCall_i: dynCall_i, dynCall_iiiii: dynCall_iiiii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__refine = asm["_refine"]; asm["_refine"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__refine.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__strlen = asm["_strlen"]; asm["_strlen"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strlen.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__realloc.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__allocator = asm["_allocator"]; asm["_allocator"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__allocator.apply(null, arguments);
};

var real__strcpy = asm["_strcpy"]; asm["_strcpy"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__strcpy.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real___GLOBAL__I_a = asm["__GLOBAL__I_a"]; asm["__GLOBAL__I_a"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__I_a.apply(null, arguments);
};

var real_runPostSets = asm["runPostSets"]; asm["runPostSets"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real_runPostSets.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _refine = Module["_refine"] = asm["_refine"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _allocator = Module["_allocator"] = asm["_allocator"];
var _strcpy = Module["_strcpy"] = asm["_strcpy"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__I_a = Module["__GLOBAL__I_a"] = asm["__GLOBAL__I_a"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiiiiiiiiiii = Module["dynCall_iiiiiiiiiiii"] = asm["dynCall_iiiiiiiiiiii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_di = Module["dynCall_di"] = asm["dynCall_di"];
var dynCall_vidddd = Module["dynCall_vidddd"] = asm["dynCall_vidddd"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiiiiiii = Module["dynCall_viiiiiiiiii"] = asm["dynCall_viiiiiiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_diii = Module["dynCall_diii"] = asm["dynCall_diii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[STATIC_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so not exiting');
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



